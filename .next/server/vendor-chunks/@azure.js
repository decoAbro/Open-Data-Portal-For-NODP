"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@azure";
exports.ids = ["vendor-chunks/@azure"];
exports.modules = {

/***/ "(rsc)/./node_modules/@azure/abort-controller/dist/commonjs/AbortError.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@azure/abort-controller/dist/commonjs/AbortError.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AbortError = void 0;\n/**\n * This error is thrown when an asynchronous operation has been aborted.\n * Check for this error by testing the `name` that the name property of the\n * error matches `\"AbortError\"`.\n *\n * @example\n * ```ts\n * const controller = new AbortController();\n * controller.abort();\n * try {\n *   doAsyncWork(controller.signal)\n * } catch (e) {\n *   if (e.name === 'AbortError') {\n *     // handle abort error here.\n *   }\n * }\n * ```\n */\nclass AbortError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"AbortError\";\n    }\n}\nexports.AbortError = AbortError;\n//# sourceMappingURL=AbortError.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2Fib3J0LWNvbnRyb2xsZXIvZGlzdC9jb21tb25qcy9BYm9ydEVycm9yLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9hYm9ydC1jb250cm9sbGVyL2Rpc3QvY29tbW9uanMvQWJvcnRFcnJvci5qcz85YzY5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFib3J0RXJyb3IgPSB2b2lkIDA7XG4vKipcbiAqIFRoaXMgZXJyb3IgaXMgdGhyb3duIHdoZW4gYW4gYXN5bmNocm9ub3VzIG9wZXJhdGlvbiBoYXMgYmVlbiBhYm9ydGVkLlxuICogQ2hlY2sgZm9yIHRoaXMgZXJyb3IgYnkgdGVzdGluZyB0aGUgYG5hbWVgIHRoYXQgdGhlIG5hbWUgcHJvcGVydHkgb2YgdGhlXG4gKiBlcnJvciBtYXRjaGVzIGBcIkFib3J0RXJyb3JcImAuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiBjb25zdCBjb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICogY29udHJvbGxlci5hYm9ydCgpO1xuICogdHJ5IHtcbiAqICAgZG9Bc3luY1dvcmsoY29udHJvbGxlci5zaWduYWwpXG4gKiB9IGNhdGNoIChlKSB7XG4gKiAgIGlmIChlLm5hbWUgPT09ICdBYm9ydEVycm9yJykge1xuICogICAgIC8vIGhhbmRsZSBhYm9ydCBlcnJvciBoZXJlLlxuICogICB9XG4gKiB9XG4gKiBgYGBcbiAqL1xuY2xhc3MgQWJvcnRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkFib3J0RXJyb3JcIjtcbiAgICB9XG59XG5leHBvcnRzLkFib3J0RXJyb3IgPSBBYm9ydEVycm9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QWJvcnRFcnJvci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/abort-controller/dist/commonjs/AbortError.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/abort-controller/dist/commonjs/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@azure/abort-controller/dist/commonjs/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AbortError = void 0;\nvar AbortError_js_1 = __webpack_require__(/*! ./AbortError.js */ \"(rsc)/./node_modules/@azure/abort-controller/dist/commonjs/AbortError.js\");\nObject.defineProperty(exports, \"AbortError\", ({ enumerable: true, get: function () { return AbortError_js_1.AbortError; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2Fib3J0LWNvbnRyb2xsZXIvZGlzdC9jb21tb25qcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsa0JBQWtCO0FBQ2xCLHNCQUFzQixtQkFBTyxDQUFDLGlHQUFpQjtBQUMvQyw4Q0FBNkMsRUFBRSxxQ0FBcUMsc0NBQXNDLEVBQUM7QUFDM0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9hYm9ydC1jb250cm9sbGVyL2Rpc3QvY29tbW9uanMvaW5kZXguanM/ZTVkZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BYm9ydEVycm9yID0gdm9pZCAwO1xudmFyIEFib3J0RXJyb3JfanNfMSA9IHJlcXVpcmUoXCIuL0Fib3J0RXJyb3IuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJBYm9ydEVycm9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBBYm9ydEVycm9yX2pzXzEuQWJvcnRFcnJvcjsgfSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/abort-controller/dist/commonjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-auth/dist/commonjs/azureKeyCredential.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@azure/core-auth/dist/commonjs/azureKeyCredential.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AzureKeyCredential = void 0;\n/**\n * A static-key-based credential that supports updating\n * the underlying key value.\n */\nclass AzureKeyCredential {\n    /**\n     * The value of the key to be used in authentication\n     */\n    get key() {\n        return this._key;\n    }\n    /**\n     * Create an instance of an AzureKeyCredential for use\n     * with a service client.\n     *\n     * @param key - The initial value of the key to use in authentication\n     */\n    constructor(key) {\n        if (!key) {\n            throw new Error(\"key must be a non-empty string\");\n        }\n        this._key = key;\n    }\n    /**\n     * Change the value of the key.\n     *\n     * Updates will take effect upon the next request after\n     * updating the key value.\n     *\n     * @param newKey - The new key value to be used\n     */\n    update(newKey) {\n        this._key = newKey;\n    }\n}\nexports.AzureKeyCredential = AzureKeyCredential;\n//# sourceMappingURL=azureKeyCredential.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtYXV0aC9kaXN0L2NvbW1vbmpzL2F6dXJlS2V5Q3JlZGVudGlhbC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLWF1dGgvZGlzdC9jb21tb25qcy9henVyZUtleUNyZWRlbnRpYWwuanM/ZjZiNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BenVyZUtleUNyZWRlbnRpYWwgPSB2b2lkIDA7XG4vKipcbiAqIEEgc3RhdGljLWtleS1iYXNlZCBjcmVkZW50aWFsIHRoYXQgc3VwcG9ydHMgdXBkYXRpbmdcbiAqIHRoZSB1bmRlcmx5aW5nIGtleSB2YWx1ZS5cbiAqL1xuY2xhc3MgQXp1cmVLZXlDcmVkZW50aWFsIHtcbiAgICAvKipcbiAgICAgKiBUaGUgdmFsdWUgb2YgdGhlIGtleSB0byBiZSB1c2VkIGluIGF1dGhlbnRpY2F0aW9uXG4gICAgICovXG4gICAgZ2V0IGtleSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2tleTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIGFuIEF6dXJlS2V5Q3JlZGVudGlhbCBmb3IgdXNlXG4gICAgICogd2l0aCBhIHNlcnZpY2UgY2xpZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIGtleSAtIFRoZSBpbml0aWFsIHZhbHVlIG9mIHRoZSBrZXkgdG8gdXNlIGluIGF1dGhlbnRpY2F0aW9uXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioa2V5KSB7XG4gICAgICAgIGlmICgha2V5KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJrZXkgbXVzdCBiZSBhIG5vbi1lbXB0eSBzdHJpbmdcIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fa2V5ID0ga2V5O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGFuZ2UgdGhlIHZhbHVlIG9mIHRoZSBrZXkuXG4gICAgICpcbiAgICAgKiBVcGRhdGVzIHdpbGwgdGFrZSBlZmZlY3QgdXBvbiB0aGUgbmV4dCByZXF1ZXN0IGFmdGVyXG4gICAgICogdXBkYXRpbmcgdGhlIGtleSB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBuZXdLZXkgLSBUaGUgbmV3IGtleSB2YWx1ZSB0byBiZSB1c2VkXG4gICAgICovXG4gICAgdXBkYXRlKG5ld0tleSkge1xuICAgICAgICB0aGlzLl9rZXkgPSBuZXdLZXk7XG4gICAgfVxufVxuZXhwb3J0cy5BenVyZUtleUNyZWRlbnRpYWwgPSBBenVyZUtleUNyZWRlbnRpYWw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1henVyZUtleUNyZWRlbnRpYWwuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-auth/dist/commonjs/azureKeyCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-auth/dist/commonjs/azureNamedKeyCredential.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@azure/core-auth/dist/commonjs/azureNamedKeyCredential.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AzureNamedKeyCredential = void 0;\nexports.isNamedKeyCredential = isNamedKeyCredential;\nconst core_util_1 = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/commonjs/index.js\");\n/**\n * A static name/key-based credential that supports updating\n * the underlying name and key values.\n */\nclass AzureNamedKeyCredential {\n    /**\n     * The value of the key to be used in authentication.\n     */\n    get key() {\n        return this._key;\n    }\n    /**\n     * The value of the name to be used in authentication.\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * Create an instance of an AzureNamedKeyCredential for use\n     * with a service client.\n     *\n     * @param name - The initial value of the name to use in authentication.\n     * @param key - The initial value of the key to use in authentication.\n     */\n    constructor(name, key) {\n        if (!name || !key) {\n            throw new TypeError(\"name and key must be non-empty strings\");\n        }\n        this._name = name;\n        this._key = key;\n    }\n    /**\n     * Change the value of the key.\n     *\n     * Updates will take effect upon the next request after\n     * updating the key value.\n     *\n     * @param newName - The new name value to be used.\n     * @param newKey - The new key value to be used.\n     */\n    update(newName, newKey) {\n        if (!newName || !newKey) {\n            throw new TypeError(\"newName and newKey must be non-empty strings\");\n        }\n        this._name = newName;\n        this._key = newKey;\n    }\n}\nexports.AzureNamedKeyCredential = AzureNamedKeyCredential;\n/**\n * Tests an object to determine whether it implements NamedKeyCredential.\n *\n * @param credential - The assumed NamedKeyCredential to be tested.\n */\nfunction isNamedKeyCredential(credential) {\n    return ((0, core_util_1.isObjectWithProperties)(credential, [\"name\", \"key\"]) &&\n        typeof credential.key === \"string\" &&\n        typeof credential.name === \"string\");\n}\n//# sourceMappingURL=azureNamedKeyCredential.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtYXV0aC9kaXN0L2NvbW1vbmpzL2F6dXJlTmFtZWRLZXlDcmVkZW50aWFsLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwrQkFBK0I7QUFDL0IsNEJBQTRCO0FBQzVCLG9CQUFvQixtQkFBTyxDQUFDLHNGQUFrQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtYXV0aC9kaXN0L2NvbW1vbmpzL2F6dXJlTmFtZWRLZXlDcmVkZW50aWFsLmpzPzRhOGYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQXp1cmVOYW1lZEtleUNyZWRlbnRpYWwgPSB2b2lkIDA7XG5leHBvcnRzLmlzTmFtZWRLZXlDcmVkZW50aWFsID0gaXNOYW1lZEtleUNyZWRlbnRpYWw7XG5jb25zdCBjb3JlX3V0aWxfMSA9IHJlcXVpcmUoXCJAYXp1cmUvY29yZS11dGlsXCIpO1xuLyoqXG4gKiBBIHN0YXRpYyBuYW1lL2tleS1iYXNlZCBjcmVkZW50aWFsIHRoYXQgc3VwcG9ydHMgdXBkYXRpbmdcbiAqIHRoZSB1bmRlcmx5aW5nIG5hbWUgYW5kIGtleSB2YWx1ZXMuXG4gKi9cbmNsYXNzIEF6dXJlTmFtZWRLZXlDcmVkZW50aWFsIHtcbiAgICAvKipcbiAgICAgKiBUaGUgdmFsdWUgb2YgdGhlIGtleSB0byBiZSB1c2VkIGluIGF1dGhlbnRpY2F0aW9uLlxuICAgICAqL1xuICAgIGdldCBrZXkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9rZXk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSB2YWx1ZSBvZiB0aGUgbmFtZSB0byBiZSB1c2VkIGluIGF1dGhlbnRpY2F0aW9uLlxuICAgICAqL1xuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbmFtZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIGFuIEF6dXJlTmFtZWRLZXlDcmVkZW50aWFsIGZvciB1c2VcbiAgICAgKiB3aXRoIGEgc2VydmljZSBjbGllbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbmFtZSAtIFRoZSBpbml0aWFsIHZhbHVlIG9mIHRoZSBuYW1lIHRvIHVzZSBpbiBhdXRoZW50aWNhdGlvbi5cbiAgICAgKiBAcGFyYW0ga2V5IC0gVGhlIGluaXRpYWwgdmFsdWUgb2YgdGhlIGtleSB0byB1c2UgaW4gYXV0aGVudGljYXRpb24uXG4gICAgICovXG4gICAgY29uc3RydWN0b3IobmFtZSwga2V5KSB7XG4gICAgICAgIGlmICghbmFtZSB8fCAha2V5KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwibmFtZSBhbmQga2V5IG11c3QgYmUgbm9uLWVtcHR5IHN0cmluZ3NcIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMuX2tleSA9IGtleTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hhbmdlIHRoZSB2YWx1ZSBvZiB0aGUga2V5LlxuICAgICAqXG4gICAgICogVXBkYXRlcyB3aWxsIHRha2UgZWZmZWN0IHVwb24gdGhlIG5leHQgcmVxdWVzdCBhZnRlclxuICAgICAqIHVwZGF0aW5nIHRoZSBrZXkgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbmV3TmFtZSAtIFRoZSBuZXcgbmFtZSB2YWx1ZSB0byBiZSB1c2VkLlxuICAgICAqIEBwYXJhbSBuZXdLZXkgLSBUaGUgbmV3IGtleSB2YWx1ZSB0byBiZSB1c2VkLlxuICAgICAqL1xuICAgIHVwZGF0ZShuZXdOYW1lLCBuZXdLZXkpIHtcbiAgICAgICAgaWYgKCFuZXdOYW1lIHx8ICFuZXdLZXkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJuZXdOYW1lIGFuZCBuZXdLZXkgbXVzdCBiZSBub24tZW1wdHkgc3RyaW5nc1wiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9uYW1lID0gbmV3TmFtZTtcbiAgICAgICAgdGhpcy5fa2V5ID0gbmV3S2V5O1xuICAgIH1cbn1cbmV4cG9ydHMuQXp1cmVOYW1lZEtleUNyZWRlbnRpYWwgPSBBenVyZU5hbWVkS2V5Q3JlZGVudGlhbDtcbi8qKlxuICogVGVzdHMgYW4gb2JqZWN0IHRvIGRldGVybWluZSB3aGV0aGVyIGl0IGltcGxlbWVudHMgTmFtZWRLZXlDcmVkZW50aWFsLlxuICpcbiAqIEBwYXJhbSBjcmVkZW50aWFsIC0gVGhlIGFzc3VtZWQgTmFtZWRLZXlDcmVkZW50aWFsIHRvIGJlIHRlc3RlZC5cbiAqL1xuZnVuY3Rpb24gaXNOYW1lZEtleUNyZWRlbnRpYWwoY3JlZGVudGlhbCkge1xuICAgIHJldHVybiAoKDAsIGNvcmVfdXRpbF8xLmlzT2JqZWN0V2l0aFByb3BlcnRpZXMpKGNyZWRlbnRpYWwsIFtcIm5hbWVcIiwgXCJrZXlcIl0pICYmXG4gICAgICAgIHR5cGVvZiBjcmVkZW50aWFsLmtleSA9PT0gXCJzdHJpbmdcIiAmJlxuICAgICAgICB0eXBlb2YgY3JlZGVudGlhbC5uYW1lID09PSBcInN0cmluZ1wiKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF6dXJlTmFtZWRLZXlDcmVkZW50aWFsLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-auth/dist/commonjs/azureNamedKeyCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-auth/dist/commonjs/azureSASCredential.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@azure/core-auth/dist/commonjs/azureSASCredential.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AzureSASCredential = void 0;\nexports.isSASCredential = isSASCredential;\nconst core_util_1 = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/commonjs/index.js\");\n/**\n * A static-signature-based credential that supports updating\n * the underlying signature value.\n */\nclass AzureSASCredential {\n    /**\n     * The value of the shared access signature to be used in authentication\n     */\n    get signature() {\n        return this._signature;\n    }\n    /**\n     * Create an instance of an AzureSASCredential for use\n     * with a service client.\n     *\n     * @param signature - The initial value of the shared access signature to use in authentication\n     */\n    constructor(signature) {\n        if (!signature) {\n            throw new Error(\"shared access signature must be a non-empty string\");\n        }\n        this._signature = signature;\n    }\n    /**\n     * Change the value of the signature.\n     *\n     * Updates will take effect upon the next request after\n     * updating the signature value.\n     *\n     * @param newSignature - The new shared access signature value to be used\n     */\n    update(newSignature) {\n        if (!newSignature) {\n            throw new Error(\"shared access signature must be a non-empty string\");\n        }\n        this._signature = newSignature;\n    }\n}\nexports.AzureSASCredential = AzureSASCredential;\n/**\n * Tests an object to determine whether it implements SASCredential.\n *\n * @param credential - The assumed SASCredential to be tested.\n */\nfunction isSASCredential(credential) {\n    return ((0, core_util_1.isObjectWithProperties)(credential, [\"signature\"]) && typeof credential.signature === \"string\");\n}\n//# sourceMappingURL=azureSASCredential.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtYXV0aC9kaXN0L2NvbW1vbmpzL2F6dXJlU0FTQ3JlZGVudGlhbC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMEJBQTBCO0FBQzFCLHVCQUF1QjtBQUN2QixvQkFBb0IsbUJBQU8sQ0FBQyxzRkFBa0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLWF1dGgvZGlzdC9jb21tb25qcy9henVyZVNBU0NyZWRlbnRpYWwuanM/MDk2YSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BenVyZVNBU0NyZWRlbnRpYWwgPSB2b2lkIDA7XG5leHBvcnRzLmlzU0FTQ3JlZGVudGlhbCA9IGlzU0FTQ3JlZGVudGlhbDtcbmNvbnN0IGNvcmVfdXRpbF8xID0gcmVxdWlyZShcIkBhenVyZS9jb3JlLXV0aWxcIik7XG4vKipcbiAqIEEgc3RhdGljLXNpZ25hdHVyZS1iYXNlZCBjcmVkZW50aWFsIHRoYXQgc3VwcG9ydHMgdXBkYXRpbmdcbiAqIHRoZSB1bmRlcmx5aW5nIHNpZ25hdHVyZSB2YWx1ZS5cbiAqL1xuY2xhc3MgQXp1cmVTQVNDcmVkZW50aWFsIHtcbiAgICAvKipcbiAgICAgKiBUaGUgdmFsdWUgb2YgdGhlIHNoYXJlZCBhY2Nlc3Mgc2lnbmF0dXJlIHRvIGJlIHVzZWQgaW4gYXV0aGVudGljYXRpb25cbiAgICAgKi9cbiAgICBnZXQgc2lnbmF0dXJlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2lnbmF0dXJlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgYW4gQXp1cmVTQVNDcmVkZW50aWFsIGZvciB1c2VcbiAgICAgKiB3aXRoIGEgc2VydmljZSBjbGllbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc2lnbmF0dXJlIC0gVGhlIGluaXRpYWwgdmFsdWUgb2YgdGhlIHNoYXJlZCBhY2Nlc3Mgc2lnbmF0dXJlIHRvIHVzZSBpbiBhdXRoZW50aWNhdGlvblxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNpZ25hdHVyZSkge1xuICAgICAgICBpZiAoIXNpZ25hdHVyZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwic2hhcmVkIGFjY2VzcyBzaWduYXR1cmUgbXVzdCBiZSBhIG5vbi1lbXB0eSBzdHJpbmdcIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc2lnbmF0dXJlID0gc2lnbmF0dXJlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGFuZ2UgdGhlIHZhbHVlIG9mIHRoZSBzaWduYXR1cmUuXG4gICAgICpcbiAgICAgKiBVcGRhdGVzIHdpbGwgdGFrZSBlZmZlY3QgdXBvbiB0aGUgbmV4dCByZXF1ZXN0IGFmdGVyXG4gICAgICogdXBkYXRpbmcgdGhlIHNpZ25hdHVyZSB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBuZXdTaWduYXR1cmUgLSBUaGUgbmV3IHNoYXJlZCBhY2Nlc3Mgc2lnbmF0dXJlIHZhbHVlIHRvIGJlIHVzZWRcbiAgICAgKi9cbiAgICB1cGRhdGUobmV3U2lnbmF0dXJlKSB7XG4gICAgICAgIGlmICghbmV3U2lnbmF0dXJlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJzaGFyZWQgYWNjZXNzIHNpZ25hdHVyZSBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZ1wiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zaWduYXR1cmUgPSBuZXdTaWduYXR1cmU7XG4gICAgfVxufVxuZXhwb3J0cy5BenVyZVNBU0NyZWRlbnRpYWwgPSBBenVyZVNBU0NyZWRlbnRpYWw7XG4vKipcbiAqIFRlc3RzIGFuIG9iamVjdCB0byBkZXRlcm1pbmUgd2hldGhlciBpdCBpbXBsZW1lbnRzIFNBU0NyZWRlbnRpYWwuXG4gKlxuICogQHBhcmFtIGNyZWRlbnRpYWwgLSBUaGUgYXNzdW1lZCBTQVNDcmVkZW50aWFsIHRvIGJlIHRlc3RlZC5cbiAqL1xuZnVuY3Rpb24gaXNTQVNDcmVkZW50aWFsKGNyZWRlbnRpYWwpIHtcbiAgICByZXR1cm4gKCgwLCBjb3JlX3V0aWxfMS5pc09iamVjdFdpdGhQcm9wZXJ0aWVzKShjcmVkZW50aWFsLCBbXCJzaWduYXR1cmVcIl0pICYmIHR5cGVvZiBjcmVkZW50aWFsLnNpZ25hdHVyZSA9PT0gXCJzdHJpbmdcIik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1henVyZVNBU0NyZWRlbnRpYWwuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-auth/dist/commonjs/azureSASCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-auth/dist/commonjs/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@azure/core-auth/dist/commonjs/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isTokenCredential = exports.isSASCredential = exports.AzureSASCredential = exports.isNamedKeyCredential = exports.AzureNamedKeyCredential = exports.isKeyCredential = exports.AzureKeyCredential = void 0;\nvar azureKeyCredential_js_1 = __webpack_require__(/*! ./azureKeyCredential.js */ \"(rsc)/./node_modules/@azure/core-auth/dist/commonjs/azureKeyCredential.js\");\nObject.defineProperty(exports, \"AzureKeyCredential\", ({ enumerable: true, get: function () { return azureKeyCredential_js_1.AzureKeyCredential; } }));\nvar keyCredential_js_1 = __webpack_require__(/*! ./keyCredential.js */ \"(rsc)/./node_modules/@azure/core-auth/dist/commonjs/keyCredential.js\");\nObject.defineProperty(exports, \"isKeyCredential\", ({ enumerable: true, get: function () { return keyCredential_js_1.isKeyCredential; } }));\nvar azureNamedKeyCredential_js_1 = __webpack_require__(/*! ./azureNamedKeyCredential.js */ \"(rsc)/./node_modules/@azure/core-auth/dist/commonjs/azureNamedKeyCredential.js\");\nObject.defineProperty(exports, \"AzureNamedKeyCredential\", ({ enumerable: true, get: function () { return azureNamedKeyCredential_js_1.AzureNamedKeyCredential; } }));\nObject.defineProperty(exports, \"isNamedKeyCredential\", ({ enumerable: true, get: function () { return azureNamedKeyCredential_js_1.isNamedKeyCredential; } }));\nvar azureSASCredential_js_1 = __webpack_require__(/*! ./azureSASCredential.js */ \"(rsc)/./node_modules/@azure/core-auth/dist/commonjs/azureSASCredential.js\");\nObject.defineProperty(exports, \"AzureSASCredential\", ({ enumerable: true, get: function () { return azureSASCredential_js_1.AzureSASCredential; } }));\nObject.defineProperty(exports, \"isSASCredential\", ({ enumerable: true, get: function () { return azureSASCredential_js_1.isSASCredential; } }));\nvar tokenCredential_js_1 = __webpack_require__(/*! ./tokenCredential.js */ \"(rsc)/./node_modules/@azure/core-auth/dist/commonjs/tokenCredential.js\");\nObject.defineProperty(exports, \"isTokenCredential\", ({ enumerable: true, get: function () { return tokenCredential_js_1.isTokenCredential; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtYXV0aC9kaXN0L2NvbW1vbmpzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHlCQUF5QixHQUFHLHVCQUF1QixHQUFHLDBCQUEwQixHQUFHLDRCQUE0QixHQUFHLCtCQUErQixHQUFHLHVCQUF1QixHQUFHLDBCQUEwQjtBQUN4TSw4QkFBOEIsbUJBQU8sQ0FBQywwR0FBeUI7QUFDL0Qsc0RBQXFELEVBQUUscUNBQXFDLHNEQUFzRCxFQUFDO0FBQ25KLHlCQUF5QixtQkFBTyxDQUFDLGdHQUFvQjtBQUNyRCxtREFBa0QsRUFBRSxxQ0FBcUMsOENBQThDLEVBQUM7QUFDeEksbUNBQW1DLG1CQUFPLENBQUMsb0hBQThCO0FBQ3pFLDJEQUEwRCxFQUFFLHFDQUFxQyxnRUFBZ0UsRUFBQztBQUNsSyx3REFBdUQsRUFBRSxxQ0FBcUMsNkRBQTZELEVBQUM7QUFDNUosOEJBQThCLG1CQUFPLENBQUMsMEdBQXlCO0FBQy9ELHNEQUFxRCxFQUFFLHFDQUFxQyxzREFBc0QsRUFBQztBQUNuSixtREFBa0QsRUFBRSxxQ0FBcUMsbURBQW1ELEVBQUM7QUFDN0ksMkJBQTJCLG1CQUFPLENBQUMsb0dBQXNCO0FBQ3pELHFEQUFvRCxFQUFFLHFDQUFxQyxrREFBa0QsRUFBQztBQUM5SSIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtYXV0aC9kaXN0L2NvbW1vbmpzL2luZGV4LmpzPzA5MmQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzVG9rZW5DcmVkZW50aWFsID0gZXhwb3J0cy5pc1NBU0NyZWRlbnRpYWwgPSBleHBvcnRzLkF6dXJlU0FTQ3JlZGVudGlhbCA9IGV4cG9ydHMuaXNOYW1lZEtleUNyZWRlbnRpYWwgPSBleHBvcnRzLkF6dXJlTmFtZWRLZXlDcmVkZW50aWFsID0gZXhwb3J0cy5pc0tleUNyZWRlbnRpYWwgPSBleHBvcnRzLkF6dXJlS2V5Q3JlZGVudGlhbCA9IHZvaWQgMDtcbnZhciBhenVyZUtleUNyZWRlbnRpYWxfanNfMSA9IHJlcXVpcmUoXCIuL2F6dXJlS2V5Q3JlZGVudGlhbC5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkF6dXJlS2V5Q3JlZGVudGlhbFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYXp1cmVLZXlDcmVkZW50aWFsX2pzXzEuQXp1cmVLZXlDcmVkZW50aWFsOyB9IH0pO1xudmFyIGtleUNyZWRlbnRpYWxfanNfMSA9IHJlcXVpcmUoXCIuL2tleUNyZWRlbnRpYWwuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc0tleUNyZWRlbnRpYWxcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGtleUNyZWRlbnRpYWxfanNfMS5pc0tleUNyZWRlbnRpYWw7IH0gfSk7XG52YXIgYXp1cmVOYW1lZEtleUNyZWRlbnRpYWxfanNfMSA9IHJlcXVpcmUoXCIuL2F6dXJlTmFtZWRLZXlDcmVkZW50aWFsLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQXp1cmVOYW1lZEtleUNyZWRlbnRpYWxcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGF6dXJlTmFtZWRLZXlDcmVkZW50aWFsX2pzXzEuQXp1cmVOYW1lZEtleUNyZWRlbnRpYWw7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc05hbWVkS2V5Q3JlZGVudGlhbFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYXp1cmVOYW1lZEtleUNyZWRlbnRpYWxfanNfMS5pc05hbWVkS2V5Q3JlZGVudGlhbDsgfSB9KTtcbnZhciBhenVyZVNBU0NyZWRlbnRpYWxfanNfMSA9IHJlcXVpcmUoXCIuL2F6dXJlU0FTQ3JlZGVudGlhbC5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkF6dXJlU0FTQ3JlZGVudGlhbFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYXp1cmVTQVNDcmVkZW50aWFsX2pzXzEuQXp1cmVTQVNDcmVkZW50aWFsOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNTQVNDcmVkZW50aWFsXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBhenVyZVNBU0NyZWRlbnRpYWxfanNfMS5pc1NBU0NyZWRlbnRpYWw7IH0gfSk7XG52YXIgdG9rZW5DcmVkZW50aWFsX2pzXzEgPSByZXF1aXJlKFwiLi90b2tlbkNyZWRlbnRpYWwuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc1Rva2VuQ3JlZGVudGlhbFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdG9rZW5DcmVkZW50aWFsX2pzXzEuaXNUb2tlbkNyZWRlbnRpYWw7IH0gfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-auth/dist/commonjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-auth/dist/commonjs/keyCredential.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@azure/core-auth/dist/commonjs/keyCredential.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isKeyCredential = isKeyCredential;\nconst core_util_1 = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/commonjs/index.js\");\n/**\n * Tests an object to determine whether it implements KeyCredential.\n *\n * @param credential - The assumed KeyCredential to be tested.\n */\nfunction isKeyCredential(credential) {\n    return (0, core_util_1.isObjectWithProperties)(credential, [\"key\"]) && typeof credential.key === \"string\";\n}\n//# sourceMappingURL=keyCredential.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtYXV0aC9kaXN0L2NvbW1vbmpzL2tleUNyZWRlbnRpYWwuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHVCQUF1QjtBQUN2QixvQkFBb0IsbUJBQU8sQ0FBQyxzRkFBa0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1hdXRoL2Rpc3QvY29tbW9uanMva2V5Q3JlZGVudGlhbC5qcz9lOTQyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzS2V5Q3JlZGVudGlhbCA9IGlzS2V5Q3JlZGVudGlhbDtcbmNvbnN0IGNvcmVfdXRpbF8xID0gcmVxdWlyZShcIkBhenVyZS9jb3JlLXV0aWxcIik7XG4vKipcbiAqIFRlc3RzIGFuIG9iamVjdCB0byBkZXRlcm1pbmUgd2hldGhlciBpdCBpbXBsZW1lbnRzIEtleUNyZWRlbnRpYWwuXG4gKlxuICogQHBhcmFtIGNyZWRlbnRpYWwgLSBUaGUgYXNzdW1lZCBLZXlDcmVkZW50aWFsIHRvIGJlIHRlc3RlZC5cbiAqL1xuZnVuY3Rpb24gaXNLZXlDcmVkZW50aWFsKGNyZWRlbnRpYWwpIHtcbiAgICByZXR1cm4gKDAsIGNvcmVfdXRpbF8xLmlzT2JqZWN0V2l0aFByb3BlcnRpZXMpKGNyZWRlbnRpYWwsIFtcImtleVwiXSkgJiYgdHlwZW9mIGNyZWRlbnRpYWwua2V5ID09PSBcInN0cmluZ1wiO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9a2V5Q3JlZGVudGlhbC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-auth/dist/commonjs/keyCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-auth/dist/commonjs/tokenCredential.js":
/*!************************************************************************!*\
  !*** ./node_modules/@azure/core-auth/dist/commonjs/tokenCredential.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isBearerToken = isBearerToken;\nexports.isPopToken = isPopToken;\nexports.isTokenCredential = isTokenCredential;\n/**\n * @internal\n * @param accessToken - Access token\n * @returns Whether a token is bearer type or not\n */\nfunction isBearerToken(accessToken) {\n    return !accessToken.tokenType || accessToken.tokenType === \"Bearer\";\n}\n/**\n * @internal\n * @param accessToken - Access token\n * @returns Whether a token is Pop token or not\n */\nfunction isPopToken(accessToken) {\n    return accessToken.tokenType === \"pop\";\n}\n/**\n * Tests an object to determine whether it implements TokenCredential.\n *\n * @param credential - The assumed TokenCredential to be tested.\n */\nfunction isTokenCredential(credential) {\n    // Check for an object with a 'getToken' function and possibly with\n    // a 'signRequest' function.  We do this check to make sure that\n    // a ServiceClientCredentials implementor (like TokenClientCredentials\n    // in ms-rest-nodeauth) doesn't get mistaken for a TokenCredential if\n    // it doesn't actually implement TokenCredential also.\n    const castCredential = credential;\n    return (castCredential &&\n        typeof castCredential.getToken === \"function\" &&\n        (castCredential.signRequest === undefined || castCredential.getToken.length > 0));\n}\n//# sourceMappingURL=tokenCredential.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtYXV0aC9kaXN0L2NvbW1vbmpzL3Rva2VuQ3JlZGVudGlhbC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QscUJBQXFCO0FBQ3JCLGtCQUFrQjtBQUNsQix5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1hdXRoL2Rpc3QvY29tbW9uanMvdG9rZW5DcmVkZW50aWFsLmpzP2UzMDMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNCZWFyZXJUb2tlbiA9IGlzQmVhcmVyVG9rZW47XG5leHBvcnRzLmlzUG9wVG9rZW4gPSBpc1BvcFRva2VuO1xuZXhwb3J0cy5pc1Rva2VuQ3JlZGVudGlhbCA9IGlzVG9rZW5DcmVkZW50aWFsO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqIEBwYXJhbSBhY2Nlc3NUb2tlbiAtIEFjY2VzcyB0b2tlblxuICogQHJldHVybnMgV2hldGhlciBhIHRva2VuIGlzIGJlYXJlciB0eXBlIG9yIG5vdFxuICovXG5mdW5jdGlvbiBpc0JlYXJlclRva2VuKGFjY2Vzc1Rva2VuKSB7XG4gICAgcmV0dXJuICFhY2Nlc3NUb2tlbi50b2tlblR5cGUgfHwgYWNjZXNzVG9rZW4udG9rZW5UeXBlID09PSBcIkJlYXJlclwiO1xufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqIEBwYXJhbSBhY2Nlc3NUb2tlbiAtIEFjY2VzcyB0b2tlblxuICogQHJldHVybnMgV2hldGhlciBhIHRva2VuIGlzIFBvcCB0b2tlbiBvciBub3RcbiAqL1xuZnVuY3Rpb24gaXNQb3BUb2tlbihhY2Nlc3NUb2tlbikge1xuICAgIHJldHVybiBhY2Nlc3NUb2tlbi50b2tlblR5cGUgPT09IFwicG9wXCI7XG59XG4vKipcbiAqIFRlc3RzIGFuIG9iamVjdCB0byBkZXRlcm1pbmUgd2hldGhlciBpdCBpbXBsZW1lbnRzIFRva2VuQ3JlZGVudGlhbC5cbiAqXG4gKiBAcGFyYW0gY3JlZGVudGlhbCAtIFRoZSBhc3N1bWVkIFRva2VuQ3JlZGVudGlhbCB0byBiZSB0ZXN0ZWQuXG4gKi9cbmZ1bmN0aW9uIGlzVG9rZW5DcmVkZW50aWFsKGNyZWRlbnRpYWwpIHtcbiAgICAvLyBDaGVjayBmb3IgYW4gb2JqZWN0IHdpdGggYSAnZ2V0VG9rZW4nIGZ1bmN0aW9uIGFuZCBwb3NzaWJseSB3aXRoXG4gICAgLy8gYSAnc2lnblJlcXVlc3QnIGZ1bmN0aW9uLiAgV2UgZG8gdGhpcyBjaGVjayB0byBtYWtlIHN1cmUgdGhhdFxuICAgIC8vIGEgU2VydmljZUNsaWVudENyZWRlbnRpYWxzIGltcGxlbWVudG9yIChsaWtlIFRva2VuQ2xpZW50Q3JlZGVudGlhbHNcbiAgICAvLyBpbiBtcy1yZXN0LW5vZGVhdXRoKSBkb2Vzbid0IGdldCBtaXN0YWtlbiBmb3IgYSBUb2tlbkNyZWRlbnRpYWwgaWZcbiAgICAvLyBpdCBkb2Vzbid0IGFjdHVhbGx5IGltcGxlbWVudCBUb2tlbkNyZWRlbnRpYWwgYWxzby5cbiAgICBjb25zdCBjYXN0Q3JlZGVudGlhbCA9IGNyZWRlbnRpYWw7XG4gICAgcmV0dXJuIChjYXN0Q3JlZGVudGlhbCAmJlxuICAgICAgICB0eXBlb2YgY2FzdENyZWRlbnRpYWwuZ2V0VG9rZW4gPT09IFwiZnVuY3Rpb25cIiAmJlxuICAgICAgICAoY2FzdENyZWRlbnRpYWwuc2lnblJlcXVlc3QgPT09IHVuZGVmaW5lZCB8fCBjYXN0Q3JlZGVudGlhbC5nZXRUb2tlbi5sZW5ndGggPiAwKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10b2tlbkNyZWRlbnRpYWwuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-auth/dist/commonjs/tokenCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/commonjs/authorizeRequestOnClaimChallenge.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/commonjs/authorizeRequestOnClaimChallenge.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.parseCAEChallenge = parseCAEChallenge;\nexports.authorizeRequestOnClaimChallenge = authorizeRequestOnClaimChallenge;\nconst log_js_1 = __webpack_require__(/*! ./log.js */ \"(rsc)/./node_modules/@azure/core-client/dist/commonjs/log.js\");\nconst base64_js_1 = __webpack_require__(/*! ./base64.js */ \"(rsc)/./node_modules/@azure/core-client/dist/commonjs/base64.js\");\n/**\n * Converts: `Bearer a=\"b\", c=\"d\", Bearer d=\"e\", f=\"g\"`.\n * Into: `[ { a: 'b', c: 'd' }, { d: 'e', f: 'g' } ]`.\n *\n * @internal\n */\nfunction parseCAEChallenge(challenges) {\n    const bearerChallenges = `, ${challenges.trim()}`.split(\", Bearer \").filter((x) => x);\n    return bearerChallenges.map((challenge) => {\n        const challengeParts = `${challenge.trim()}, `.split('\", ').filter((x) => x);\n        const keyValuePairs = challengeParts.map((keyValue) => (([key, value]) => ({ [key]: value }))(keyValue.trim().split('=\"')));\n        // Key-value pairs to plain object:\n        return keyValuePairs.reduce((a, b) => (Object.assign(Object.assign({}, a), b)), {});\n    });\n}\n/**\n * This function can be used as a callback for the `bearerTokenAuthenticationPolicy` of `@azure/core-rest-pipeline`, to support CAE challenges:\n * [Continuous Access Evaluation](https://learn.microsoft.com/azure/active-directory/conditional-access/concept-continuous-access-evaluation).\n *\n * Call the `bearerTokenAuthenticationPolicy` with the following options:\n *\n * ```ts snippet:AuthorizeRequestOnClaimChallenge\n * import { bearerTokenAuthenticationPolicy } from \"@azure/core-rest-pipeline\";\n * import { authorizeRequestOnClaimChallenge } from \"@azure/core-client\";\n *\n * const policy = bearerTokenAuthenticationPolicy({\n *   challengeCallbacks: {\n *     authorizeRequestOnChallenge: authorizeRequestOnClaimChallenge,\n *   },\n *   scopes: [\"https://service/.default\"],\n * });\n * ```\n *\n * Once provided, the `bearerTokenAuthenticationPolicy` policy will internally handle Continuous Access Evaluation (CAE) challenges.\n * When it can't complete a challenge it will return the 401 (unauthorized) response from ARM.\n *\n * Example challenge with claims:\n *\n * ```\n * Bearer authorization_uri=\"https://login.windows-ppe.net/\", error=\"invalid_token\",\n * error_description=\"User session has been revoked\",\n * claims=\"eyJhY2Nlc3NfdG9rZW4iOnsibmJmIjp7ImVzc2VudGlhbCI6dHJ1ZSwgInZhbHVlIjoiMTYwMzc0MjgwMCJ9fX0=\"\n * ```\n */\nasync function authorizeRequestOnClaimChallenge(onChallengeOptions) {\n    var _a;\n    const { scopes, response } = onChallengeOptions;\n    const logger = onChallengeOptions.logger || log_js_1.logger;\n    const challenge = response.headers.get(\"WWW-Authenticate\");\n    if (!challenge) {\n        logger.info(`The WWW-Authenticate header was missing. Failed to perform the Continuous Access Evaluation authentication flow.`);\n        return false;\n    }\n    const challenges = parseCAEChallenge(challenge) || [];\n    const parsedChallenge = challenges.find((x) => x.claims);\n    if (!parsedChallenge) {\n        logger.info(`The WWW-Authenticate header was missing the necessary \"claims\" to perform the Continuous Access Evaluation authentication flow.`);\n        return false;\n    }\n    const accessToken = await onChallengeOptions.getAccessToken(parsedChallenge.scope ? [parsedChallenge.scope] : scopes, {\n        claims: (0, base64_js_1.decodeStringToString)(parsedChallenge.claims),\n    });\n    if (!accessToken) {\n        return false;\n    }\n    onChallengeOptions.request.headers.set(\"Authorization\", `${(_a = accessToken.tokenType) !== null && _a !== void 0 ? _a : \"Bearer\"} ${accessToken.token}`);\n    return true;\n}\n//# sourceMappingURL=authorizeRequestOnClaimChallenge.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvY29tbW9uanMvYXV0aG9yaXplUmVxdWVzdE9uQ2xhaW1DaGFsbGVuZ2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHlCQUF5QjtBQUN6Qix3Q0FBd0M7QUFDeEMsaUJBQWlCLG1CQUFPLENBQUMsOEVBQVU7QUFDbkMsb0JBQW9CLG1CQUFPLENBQUMsb0ZBQWE7QUFDekM7QUFDQTtBQUNBLGNBQWMsZ0JBQWdCLElBQUksaUJBQWlCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLGtCQUFrQjtBQUNwRDtBQUNBLGtDQUFrQyxpQkFBaUI7QUFDbkQscUZBQXFGLGNBQWM7QUFDbkc7QUFDQSw2RUFBNkUsYUFBYTtBQUMxRixLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksa0NBQWtDO0FBQzlDLFlBQVksbUNBQW1DO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksbUJBQW1CO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsK0RBQStELHdFQUF3RSxFQUFFLGtCQUFrQjtBQUMzSjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLWNsaWVudC9kaXN0L2NvbW1vbmpzL2F1dGhvcml6ZVJlcXVlc3RPbkNsYWltQ2hhbGxlbmdlLmpzPzEzY2QiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucGFyc2VDQUVDaGFsbGVuZ2UgPSBwYXJzZUNBRUNoYWxsZW5nZTtcbmV4cG9ydHMuYXV0aG9yaXplUmVxdWVzdE9uQ2xhaW1DaGFsbGVuZ2UgPSBhdXRob3JpemVSZXF1ZXN0T25DbGFpbUNoYWxsZW5nZTtcbmNvbnN0IGxvZ19qc18xID0gcmVxdWlyZShcIi4vbG9nLmpzXCIpO1xuY29uc3QgYmFzZTY0X2pzXzEgPSByZXF1aXJlKFwiLi9iYXNlNjQuanNcIik7XG4vKipcbiAqIENvbnZlcnRzOiBgQmVhcmVyIGE9XCJiXCIsIGM9XCJkXCIsIEJlYXJlciBkPVwiZVwiLCBmPVwiZ1wiYC5cbiAqIEludG86IGBbIHsgYTogJ2InLCBjOiAnZCcgfSwgeyBkOiAnZScsIGY6ICdnJyB9IF1gLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBwYXJzZUNBRUNoYWxsZW5nZShjaGFsbGVuZ2VzKSB7XG4gICAgY29uc3QgYmVhcmVyQ2hhbGxlbmdlcyA9IGAsICR7Y2hhbGxlbmdlcy50cmltKCl9YC5zcGxpdChcIiwgQmVhcmVyIFwiKS5maWx0ZXIoKHgpID0+IHgpO1xuICAgIHJldHVybiBiZWFyZXJDaGFsbGVuZ2VzLm1hcCgoY2hhbGxlbmdlKSA9PiB7XG4gICAgICAgIGNvbnN0IGNoYWxsZW5nZVBhcnRzID0gYCR7Y2hhbGxlbmdlLnRyaW0oKX0sIGAuc3BsaXQoJ1wiLCAnKS5maWx0ZXIoKHgpID0+IHgpO1xuICAgICAgICBjb25zdCBrZXlWYWx1ZVBhaXJzID0gY2hhbGxlbmdlUGFydHMubWFwKChrZXlWYWx1ZSkgPT4gKChba2V5LCB2YWx1ZV0pID0+ICh7IFtrZXldOiB2YWx1ZSB9KSkoa2V5VmFsdWUudHJpbSgpLnNwbGl0KCc9XCInKSkpO1xuICAgICAgICAvLyBLZXktdmFsdWUgcGFpcnMgdG8gcGxhaW4gb2JqZWN0OlxuICAgICAgICByZXR1cm4ga2V5VmFsdWVQYWlycy5yZWR1Y2UoKGEsIGIpID0+IChPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGEpLCBiKSksIHt9KTtcbiAgICB9KTtcbn1cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBjYW4gYmUgdXNlZCBhcyBhIGNhbGxiYWNrIGZvciB0aGUgYGJlYXJlclRva2VuQXV0aGVudGljYXRpb25Qb2xpY3lgIG9mIGBAYXp1cmUvY29yZS1yZXN0LXBpcGVsaW5lYCwgdG8gc3VwcG9ydCBDQUUgY2hhbGxlbmdlczpcbiAqIFtDb250aW51b3VzIEFjY2VzcyBFdmFsdWF0aW9uXShodHRwczovL2xlYXJuLm1pY3Jvc29mdC5jb20vYXp1cmUvYWN0aXZlLWRpcmVjdG9yeS9jb25kaXRpb25hbC1hY2Nlc3MvY29uY2VwdC1jb250aW51b3VzLWFjY2Vzcy1ldmFsdWF0aW9uKS5cbiAqXG4gKiBDYWxsIHRoZSBgYmVhcmVyVG9rZW5BdXRoZW50aWNhdGlvblBvbGljeWAgd2l0aCB0aGUgZm9sbG93aW5nIG9wdGlvbnM6XG4gKlxuICogYGBgdHMgc25pcHBldDpBdXRob3JpemVSZXF1ZXN0T25DbGFpbUNoYWxsZW5nZVxuICogaW1wb3J0IHsgYmVhcmVyVG9rZW5BdXRoZW50aWNhdGlvblBvbGljeSB9IGZyb20gXCJAYXp1cmUvY29yZS1yZXN0LXBpcGVsaW5lXCI7XG4gKiBpbXBvcnQgeyBhdXRob3JpemVSZXF1ZXN0T25DbGFpbUNoYWxsZW5nZSB9IGZyb20gXCJAYXp1cmUvY29yZS1jbGllbnRcIjtcbiAqXG4gKiBjb25zdCBwb2xpY3kgPSBiZWFyZXJUb2tlbkF1dGhlbnRpY2F0aW9uUG9saWN5KHtcbiAqICAgY2hhbGxlbmdlQ2FsbGJhY2tzOiB7XG4gKiAgICAgYXV0aG9yaXplUmVxdWVzdE9uQ2hhbGxlbmdlOiBhdXRob3JpemVSZXF1ZXN0T25DbGFpbUNoYWxsZW5nZSxcbiAqICAgfSxcbiAqICAgc2NvcGVzOiBbXCJodHRwczovL3NlcnZpY2UvLmRlZmF1bHRcIl0sXG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIE9uY2UgcHJvdmlkZWQsIHRoZSBgYmVhcmVyVG9rZW5BdXRoZW50aWNhdGlvblBvbGljeWAgcG9saWN5IHdpbGwgaW50ZXJuYWxseSBoYW5kbGUgQ29udGludW91cyBBY2Nlc3MgRXZhbHVhdGlvbiAoQ0FFKSBjaGFsbGVuZ2VzLlxuICogV2hlbiBpdCBjYW4ndCBjb21wbGV0ZSBhIGNoYWxsZW5nZSBpdCB3aWxsIHJldHVybiB0aGUgNDAxICh1bmF1dGhvcml6ZWQpIHJlc3BvbnNlIGZyb20gQVJNLlxuICpcbiAqIEV4YW1wbGUgY2hhbGxlbmdlIHdpdGggY2xhaW1zOlxuICpcbiAqIGBgYFxuICogQmVhcmVyIGF1dGhvcml6YXRpb25fdXJpPVwiaHR0cHM6Ly9sb2dpbi53aW5kb3dzLXBwZS5uZXQvXCIsIGVycm9yPVwiaW52YWxpZF90b2tlblwiLFxuICogZXJyb3JfZGVzY3JpcHRpb249XCJVc2VyIHNlc3Npb24gaGFzIGJlZW4gcmV2b2tlZFwiLFxuICogY2xhaW1zPVwiZXlKaFkyTmxjM05mZEc5clpXNGlPbnNpYm1KbUlqcDdJbVZ6YzJWdWRHbGhiQ0k2ZEhKMVpTd2dJblpoYkhWbElqb2lNVFl3TXpjME1qZ3dNQ0o5ZlgwPVwiXG4gKiBgYGBcbiAqL1xuYXN5bmMgZnVuY3Rpb24gYXV0aG9yaXplUmVxdWVzdE9uQ2xhaW1DaGFsbGVuZ2Uob25DaGFsbGVuZ2VPcHRpb25zKSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IHsgc2NvcGVzLCByZXNwb25zZSB9ID0gb25DaGFsbGVuZ2VPcHRpb25zO1xuICAgIGNvbnN0IGxvZ2dlciA9IG9uQ2hhbGxlbmdlT3B0aW9ucy5sb2dnZXIgfHwgbG9nX2pzXzEubG9nZ2VyO1xuICAgIGNvbnN0IGNoYWxsZW5nZSA9IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KFwiV1dXLUF1dGhlbnRpY2F0ZVwiKTtcbiAgICBpZiAoIWNoYWxsZW5nZSkge1xuICAgICAgICBsb2dnZXIuaW5mbyhgVGhlIFdXVy1BdXRoZW50aWNhdGUgaGVhZGVyIHdhcyBtaXNzaW5nLiBGYWlsZWQgdG8gcGVyZm9ybSB0aGUgQ29udGludW91cyBBY2Nlc3MgRXZhbHVhdGlvbiBhdXRoZW50aWNhdGlvbiBmbG93LmApO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IGNoYWxsZW5nZXMgPSBwYXJzZUNBRUNoYWxsZW5nZShjaGFsbGVuZ2UpIHx8IFtdO1xuICAgIGNvbnN0IHBhcnNlZENoYWxsZW5nZSA9IGNoYWxsZW5nZXMuZmluZCgoeCkgPT4geC5jbGFpbXMpO1xuICAgIGlmICghcGFyc2VkQ2hhbGxlbmdlKSB7XG4gICAgICAgIGxvZ2dlci5pbmZvKGBUaGUgV1dXLUF1dGhlbnRpY2F0ZSBoZWFkZXIgd2FzIG1pc3NpbmcgdGhlIG5lY2Vzc2FyeSBcImNsYWltc1wiIHRvIHBlcmZvcm0gdGhlIENvbnRpbnVvdXMgQWNjZXNzIEV2YWx1YXRpb24gYXV0aGVudGljYXRpb24gZmxvdy5gKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBhY2Nlc3NUb2tlbiA9IGF3YWl0IG9uQ2hhbGxlbmdlT3B0aW9ucy5nZXRBY2Nlc3NUb2tlbihwYXJzZWRDaGFsbGVuZ2Uuc2NvcGUgPyBbcGFyc2VkQ2hhbGxlbmdlLnNjb3BlXSA6IHNjb3Blcywge1xuICAgICAgICBjbGFpbXM6ICgwLCBiYXNlNjRfanNfMS5kZWNvZGVTdHJpbmdUb1N0cmluZykocGFyc2VkQ2hhbGxlbmdlLmNsYWltcyksXG4gICAgfSk7XG4gICAgaWYgKCFhY2Nlc3NUb2tlbikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIG9uQ2hhbGxlbmdlT3B0aW9ucy5yZXF1ZXN0LmhlYWRlcnMuc2V0KFwiQXV0aG9yaXphdGlvblwiLCBgJHsoX2EgPSBhY2Nlc3NUb2tlbi50b2tlblR5cGUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFwiQmVhcmVyXCJ9ICR7YWNjZXNzVG9rZW4udG9rZW59YCk7XG4gICAgcmV0dXJuIHRydWU7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hdXRob3JpemVSZXF1ZXN0T25DbGFpbUNoYWxsZW5nZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/commonjs/authorizeRequestOnClaimChallenge.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/commonjs/authorizeRequestOnTenantChallenge.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/commonjs/authorizeRequestOnTenantChallenge.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.authorizeRequestOnTenantChallenge = void 0;\n/**\n * A set of constants used internally when processing requests.\n */\nconst Constants = {\n    DefaultScope: \"/.default\",\n    /**\n     * Defines constants for use with HTTP headers.\n     */\n    HeaderConstants: {\n        /**\n         * The Authorization header.\n         */\n        AUTHORIZATION: \"authorization\",\n    },\n};\nfunction isUuid(text) {\n    return /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/.test(text);\n}\n/**\n * Defines a callback to handle auth challenge for Storage APIs.\n * This implements the bearer challenge process described here: https://learn.microsoft.com/rest/api/storageservices/authorize-with-azure-active-directory#bearer-challenge\n * Handling has specific features for storage that departs to the general AAD challenge docs.\n **/\nconst authorizeRequestOnTenantChallenge = async (challengeOptions) => {\n    var _a;\n    const requestOptions = requestToOptions(challengeOptions.request);\n    const challenge = getChallenge(challengeOptions.response);\n    if (challenge) {\n        const challengeInfo = parseChallenge(challenge);\n        const challengeScopes = buildScopes(challengeOptions, challengeInfo);\n        const tenantId = extractTenantId(challengeInfo);\n        if (!tenantId) {\n            return false;\n        }\n        const accessToken = await challengeOptions.getAccessToken(challengeScopes, Object.assign(Object.assign({}, requestOptions), { tenantId }));\n        if (!accessToken) {\n            return false;\n        }\n        challengeOptions.request.headers.set(Constants.HeaderConstants.AUTHORIZATION, `${(_a = accessToken.tokenType) !== null && _a !== void 0 ? _a : \"Bearer\"} ${accessToken.token}`);\n        return true;\n    }\n    return false;\n};\nexports.authorizeRequestOnTenantChallenge = authorizeRequestOnTenantChallenge;\n/**\n * Extracts the tenant id from the challenge information\n * The tenant id is contained in the authorization_uri as the first\n * path part.\n */\nfunction extractTenantId(challengeInfo) {\n    const parsedAuthUri = new URL(challengeInfo.authorization_uri);\n    const pathSegments = parsedAuthUri.pathname.split(\"/\");\n    const tenantId = pathSegments[1];\n    if (tenantId && isUuid(tenantId)) {\n        return tenantId;\n    }\n    return undefined;\n}\n/**\n * Builds the authentication scopes based on the information that comes in the\n * challenge information. Scopes url is present in the resource_id, if it is empty\n * we keep using the original scopes.\n */\nfunction buildScopes(challengeOptions, challengeInfo) {\n    if (!challengeInfo.resource_id) {\n        return challengeOptions.scopes;\n    }\n    const challengeScopes = new URL(challengeInfo.resource_id);\n    challengeScopes.pathname = Constants.DefaultScope;\n    let scope = challengeScopes.toString();\n    if (scope === \"https://disk.azure.com/.default\") {\n        // the extra slash is required by the service\n        scope = \"https://disk.azure.com//.default\";\n    }\n    return [scope];\n}\n/**\n * We will retrieve the challenge only if the response status code was 401,\n * and if the response contained the header \"WWW-Authenticate\" with a non-empty value.\n */\nfunction getChallenge(response) {\n    const challenge = response.headers.get(\"WWW-Authenticate\");\n    if (response.status === 401 && challenge) {\n        return challenge;\n    }\n    return;\n}\n/**\n * Converts: `Bearer a=\"b\" c=\"d\"`.\n * Into: `[ { a: 'b', c: 'd' }]`.\n *\n * @internal\n */\nfunction parseChallenge(challenge) {\n    const bearerChallenge = challenge.slice(\"Bearer \".length);\n    const challengeParts = `${bearerChallenge.trim()} `.split(\" \").filter((x) => x);\n    const keyValuePairs = challengeParts.map((keyValue) => (([key, value]) => ({ [key]: value }))(keyValue.trim().split(\"=\")));\n    // Key-value pairs to plain object:\n    return keyValuePairs.reduce((a, b) => (Object.assign(Object.assign({}, a), b)), {});\n}\n/**\n * Extracts the options form a Pipeline Request for later re-use\n */\nfunction requestToOptions(request) {\n    return {\n        abortSignal: request.abortSignal,\n        requestOptions: {\n            timeout: request.timeout,\n        },\n        tracingOptions: request.tracingOptions,\n    };\n}\n//# sourceMappingURL=authorizeRequestOnTenantChallenge.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvY29tbW9uanMvYXV0aG9yaXplUmVxdWVzdE9uVGVuYW50Q2hhbGxlbmdlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx5Q0FBeUM7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLHlCQUF5QixFQUFFLGVBQWUsRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFFLGVBQWUsR0FBRztBQUNoRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUhBQWlILHFCQUFxQixVQUFVO0FBQ2hKO0FBQ0E7QUFDQTtBQUNBLHlGQUF5Rix3RUFBd0UsRUFBRSxrQkFBa0I7QUFDckw7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUM7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxnQkFBZ0I7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4Qix3QkFBd0I7QUFDdEQsaUZBQWlGLGNBQWM7QUFDL0Y7QUFDQSx5RUFBeUUsYUFBYTtBQUN0RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLWNsaWVudC9kaXN0L2NvbW1vbmpzL2F1dGhvcml6ZVJlcXVlc3RPblRlbmFudENoYWxsZW5nZS5qcz9iZWNhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmF1dGhvcml6ZVJlcXVlc3RPblRlbmFudENoYWxsZW5nZSA9IHZvaWQgMDtcbi8qKlxuICogQSBzZXQgb2YgY29uc3RhbnRzIHVzZWQgaW50ZXJuYWxseSB3aGVuIHByb2Nlc3NpbmcgcmVxdWVzdHMuXG4gKi9cbmNvbnN0IENvbnN0YW50cyA9IHtcbiAgICBEZWZhdWx0U2NvcGU6IFwiLy5kZWZhdWx0XCIsXG4gICAgLyoqXG4gICAgICogRGVmaW5lcyBjb25zdGFudHMgZm9yIHVzZSB3aXRoIEhUVFAgaGVhZGVycy5cbiAgICAgKi9cbiAgICBIZWFkZXJDb25zdGFudHM6IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBBdXRob3JpemF0aW9uIGhlYWRlci5cbiAgICAgICAgICovXG4gICAgICAgIEFVVEhPUklaQVRJT046IFwiYXV0aG9yaXphdGlvblwiLFxuICAgIH0sXG59O1xuZnVuY3Rpb24gaXNVdWlkKHRleHQpIHtcbiAgICByZXR1cm4gL15bMC05YS1mQS1GXXs4fVxcYi1bMC05YS1mQS1GXXs0fVxcYi1bMC05YS1mQS1GXXs0fVxcYi1bMC05YS1mQS1GXXs0fVxcYi1bMC05YS1mQS1GXXsxMn0kLy50ZXN0KHRleHQpO1xufVxuLyoqXG4gKiBEZWZpbmVzIGEgY2FsbGJhY2sgdG8gaGFuZGxlIGF1dGggY2hhbGxlbmdlIGZvciBTdG9yYWdlIEFQSXMuXG4gKiBUaGlzIGltcGxlbWVudHMgdGhlIGJlYXJlciBjaGFsbGVuZ2UgcHJvY2VzcyBkZXNjcmliZWQgaGVyZTogaHR0cHM6Ly9sZWFybi5taWNyb3NvZnQuY29tL3Jlc3QvYXBpL3N0b3JhZ2VzZXJ2aWNlcy9hdXRob3JpemUtd2l0aC1henVyZS1hY3RpdmUtZGlyZWN0b3J5I2JlYXJlci1jaGFsbGVuZ2VcbiAqIEhhbmRsaW5nIGhhcyBzcGVjaWZpYyBmZWF0dXJlcyBmb3Igc3RvcmFnZSB0aGF0IGRlcGFydHMgdG8gdGhlIGdlbmVyYWwgQUFEIGNoYWxsZW5nZSBkb2NzLlxuICoqL1xuY29uc3QgYXV0aG9yaXplUmVxdWVzdE9uVGVuYW50Q2hhbGxlbmdlID0gYXN5bmMgKGNoYWxsZW5nZU9wdGlvbnMpID0+IHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3QgcmVxdWVzdE9wdGlvbnMgPSByZXF1ZXN0VG9PcHRpb25zKGNoYWxsZW5nZU9wdGlvbnMucmVxdWVzdCk7XG4gICAgY29uc3QgY2hhbGxlbmdlID0gZ2V0Q2hhbGxlbmdlKGNoYWxsZW5nZU9wdGlvbnMucmVzcG9uc2UpO1xuICAgIGlmIChjaGFsbGVuZ2UpIHtcbiAgICAgICAgY29uc3QgY2hhbGxlbmdlSW5mbyA9IHBhcnNlQ2hhbGxlbmdlKGNoYWxsZW5nZSk7XG4gICAgICAgIGNvbnN0IGNoYWxsZW5nZVNjb3BlcyA9IGJ1aWxkU2NvcGVzKGNoYWxsZW5nZU9wdGlvbnMsIGNoYWxsZW5nZUluZm8pO1xuICAgICAgICBjb25zdCB0ZW5hbnRJZCA9IGV4dHJhY3RUZW5hbnRJZChjaGFsbGVuZ2VJbmZvKTtcbiAgICAgICAgaWYgKCF0ZW5hbnRJZCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFjY2Vzc1Rva2VuID0gYXdhaXQgY2hhbGxlbmdlT3B0aW9ucy5nZXRBY2Nlc3NUb2tlbihjaGFsbGVuZ2VTY29wZXMsIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVxdWVzdE9wdGlvbnMpLCB7IHRlbmFudElkIH0pKTtcbiAgICAgICAgaWYgKCFhY2Nlc3NUb2tlbikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNoYWxsZW5nZU9wdGlvbnMucmVxdWVzdC5oZWFkZXJzLnNldChDb25zdGFudHMuSGVhZGVyQ29uc3RhbnRzLkFVVEhPUklaQVRJT04sIGAkeyhfYSA9IGFjY2Vzc1Rva2VuLnRva2VuVHlwZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogXCJCZWFyZXJcIn0gJHthY2Nlc3NUb2tlbi50b2tlbn1gKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn07XG5leHBvcnRzLmF1dGhvcml6ZVJlcXVlc3RPblRlbmFudENoYWxsZW5nZSA9IGF1dGhvcml6ZVJlcXVlc3RPblRlbmFudENoYWxsZW5nZTtcbi8qKlxuICogRXh0cmFjdHMgdGhlIHRlbmFudCBpZCBmcm9tIHRoZSBjaGFsbGVuZ2UgaW5mb3JtYXRpb25cbiAqIFRoZSB0ZW5hbnQgaWQgaXMgY29udGFpbmVkIGluIHRoZSBhdXRob3JpemF0aW9uX3VyaSBhcyB0aGUgZmlyc3RcbiAqIHBhdGggcGFydC5cbiAqL1xuZnVuY3Rpb24gZXh0cmFjdFRlbmFudElkKGNoYWxsZW5nZUluZm8pIHtcbiAgICBjb25zdCBwYXJzZWRBdXRoVXJpID0gbmV3IFVSTChjaGFsbGVuZ2VJbmZvLmF1dGhvcml6YXRpb25fdXJpKTtcbiAgICBjb25zdCBwYXRoU2VnbWVudHMgPSBwYXJzZWRBdXRoVXJpLnBhdGhuYW1lLnNwbGl0KFwiL1wiKTtcbiAgICBjb25zdCB0ZW5hbnRJZCA9IHBhdGhTZWdtZW50c1sxXTtcbiAgICBpZiAodGVuYW50SWQgJiYgaXNVdWlkKHRlbmFudElkKSkge1xuICAgICAgICByZXR1cm4gdGVuYW50SWQ7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG4vKipcbiAqIEJ1aWxkcyB0aGUgYXV0aGVudGljYXRpb24gc2NvcGVzIGJhc2VkIG9uIHRoZSBpbmZvcm1hdGlvbiB0aGF0IGNvbWVzIGluIHRoZVxuICogY2hhbGxlbmdlIGluZm9ybWF0aW9uLiBTY29wZXMgdXJsIGlzIHByZXNlbnQgaW4gdGhlIHJlc291cmNlX2lkLCBpZiBpdCBpcyBlbXB0eVxuICogd2Uga2VlcCB1c2luZyB0aGUgb3JpZ2luYWwgc2NvcGVzLlxuICovXG5mdW5jdGlvbiBidWlsZFNjb3BlcyhjaGFsbGVuZ2VPcHRpb25zLCBjaGFsbGVuZ2VJbmZvKSB7XG4gICAgaWYgKCFjaGFsbGVuZ2VJbmZvLnJlc291cmNlX2lkKSB7XG4gICAgICAgIHJldHVybiBjaGFsbGVuZ2VPcHRpb25zLnNjb3BlcztcbiAgICB9XG4gICAgY29uc3QgY2hhbGxlbmdlU2NvcGVzID0gbmV3IFVSTChjaGFsbGVuZ2VJbmZvLnJlc291cmNlX2lkKTtcbiAgICBjaGFsbGVuZ2VTY29wZXMucGF0aG5hbWUgPSBDb25zdGFudHMuRGVmYXVsdFNjb3BlO1xuICAgIGxldCBzY29wZSA9IGNoYWxsZW5nZVNjb3Blcy50b1N0cmluZygpO1xuICAgIGlmIChzY29wZSA9PT0gXCJodHRwczovL2Rpc2suYXp1cmUuY29tLy5kZWZhdWx0XCIpIHtcbiAgICAgICAgLy8gdGhlIGV4dHJhIHNsYXNoIGlzIHJlcXVpcmVkIGJ5IHRoZSBzZXJ2aWNlXG4gICAgICAgIHNjb3BlID0gXCJodHRwczovL2Rpc2suYXp1cmUuY29tLy8uZGVmYXVsdFwiO1xuICAgIH1cbiAgICByZXR1cm4gW3Njb3BlXTtcbn1cbi8qKlxuICogV2Ugd2lsbCByZXRyaWV2ZSB0aGUgY2hhbGxlbmdlIG9ubHkgaWYgdGhlIHJlc3BvbnNlIHN0YXR1cyBjb2RlIHdhcyA0MDEsXG4gKiBhbmQgaWYgdGhlIHJlc3BvbnNlIGNvbnRhaW5lZCB0aGUgaGVhZGVyIFwiV1dXLUF1dGhlbnRpY2F0ZVwiIHdpdGggYSBub24tZW1wdHkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGdldENoYWxsZW5nZShyZXNwb25zZSkge1xuICAgIGNvbnN0IGNoYWxsZW5nZSA9IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KFwiV1dXLUF1dGhlbnRpY2F0ZVwiKTtcbiAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MDEgJiYgY2hhbGxlbmdlKSB7XG4gICAgICAgIHJldHVybiBjaGFsbGVuZ2U7XG4gICAgfVxuICAgIHJldHVybjtcbn1cbi8qKlxuICogQ29udmVydHM6IGBCZWFyZXIgYT1cImJcIiBjPVwiZFwiYC5cbiAqIEludG86IGBbIHsgYTogJ2InLCBjOiAnZCcgfV1gLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBwYXJzZUNoYWxsZW5nZShjaGFsbGVuZ2UpIHtcbiAgICBjb25zdCBiZWFyZXJDaGFsbGVuZ2UgPSBjaGFsbGVuZ2Uuc2xpY2UoXCJCZWFyZXIgXCIubGVuZ3RoKTtcbiAgICBjb25zdCBjaGFsbGVuZ2VQYXJ0cyA9IGAke2JlYXJlckNoYWxsZW5nZS50cmltKCl9IGAuc3BsaXQoXCIgXCIpLmZpbHRlcigoeCkgPT4geCk7XG4gICAgY29uc3Qga2V5VmFsdWVQYWlycyA9IGNoYWxsZW5nZVBhcnRzLm1hcCgoa2V5VmFsdWUpID0+ICgoW2tleSwgdmFsdWVdKSA9PiAoeyBba2V5XTogdmFsdWUgfSkpKGtleVZhbHVlLnRyaW0oKS5zcGxpdChcIj1cIikpKTtcbiAgICAvLyBLZXktdmFsdWUgcGFpcnMgdG8gcGxhaW4gb2JqZWN0OlxuICAgIHJldHVybiBrZXlWYWx1ZVBhaXJzLnJlZHVjZSgoYSwgYikgPT4gKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgYSksIGIpKSwge30pO1xufVxuLyoqXG4gKiBFeHRyYWN0cyB0aGUgb3B0aW9ucyBmb3JtIGEgUGlwZWxpbmUgUmVxdWVzdCBmb3IgbGF0ZXIgcmUtdXNlXG4gKi9cbmZ1bmN0aW9uIHJlcXVlc3RUb09wdGlvbnMocmVxdWVzdCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGFib3J0U2lnbmFsOiByZXF1ZXN0LmFib3J0U2lnbmFsLFxuICAgICAgICByZXF1ZXN0T3B0aW9uczoge1xuICAgICAgICAgICAgdGltZW91dDogcmVxdWVzdC50aW1lb3V0LFxuICAgICAgICB9LFxuICAgICAgICB0cmFjaW5nT3B0aW9uczogcmVxdWVzdC50cmFjaW5nT3B0aW9ucyxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXV0aG9yaXplUmVxdWVzdE9uVGVuYW50Q2hhbGxlbmdlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/commonjs/authorizeRequestOnTenantChallenge.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/commonjs/base64.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/commonjs/base64.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.encodeString = encodeString;\nexports.encodeByteArray = encodeByteArray;\nexports.decodeString = decodeString;\nexports.decodeStringToString = decodeStringToString;\n/**\n * Encodes a string in base64 format.\n * @param value - the string to encode\n * @internal\n */\nfunction encodeString(value) {\n    return Buffer.from(value).toString(\"base64\");\n}\n/**\n * Encodes a byte array in base64 format.\n * @param value - the Uint8Aray to encode\n * @internal\n */\nfunction encodeByteArray(value) {\n    const bufferValue = value instanceof Buffer ? value : Buffer.from(value.buffer);\n    return bufferValue.toString(\"base64\");\n}\n/**\n * Decodes a base64 string into a byte array.\n * @param value - the base64 string to decode\n * @internal\n */\nfunction decodeString(value) {\n    return Buffer.from(value, \"base64\");\n}\n/**\n * Decodes a base64 string into a string.\n * @param value - the base64 string to decode\n * @internal\n */\nfunction decodeStringToString(value) {\n    return Buffer.from(value, \"base64\").toString();\n}\n//# sourceMappingURL=base64.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvY29tbW9uanMvYmFzZTY0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0I7QUFDcEIsdUJBQXVCO0FBQ3ZCLG9CQUFvQjtBQUNwQiw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLWNsaWVudC9kaXN0L2NvbW1vbmpzL2Jhc2U2NC5qcz9hOGYyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmVuY29kZVN0cmluZyA9IGVuY29kZVN0cmluZztcbmV4cG9ydHMuZW5jb2RlQnl0ZUFycmF5ID0gZW5jb2RlQnl0ZUFycmF5O1xuZXhwb3J0cy5kZWNvZGVTdHJpbmcgPSBkZWNvZGVTdHJpbmc7XG5leHBvcnRzLmRlY29kZVN0cmluZ1RvU3RyaW5nID0gZGVjb2RlU3RyaW5nVG9TdHJpbmc7XG4vKipcbiAqIEVuY29kZXMgYSBzdHJpbmcgaW4gYmFzZTY0IGZvcm1hdC5cbiAqIEBwYXJhbSB2YWx1ZSAtIHRoZSBzdHJpbmcgdG8gZW5jb2RlXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gZW5jb2RlU3RyaW5nKHZhbHVlKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHZhbHVlKS50b1N0cmluZyhcImJhc2U2NFwiKTtcbn1cbi8qKlxuICogRW5jb2RlcyBhIGJ5dGUgYXJyYXkgaW4gYmFzZTY0IGZvcm1hdC5cbiAqIEBwYXJhbSB2YWx1ZSAtIHRoZSBVaW50OEFyYXkgdG8gZW5jb2RlXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gZW5jb2RlQnl0ZUFycmF5KHZhbHVlKSB7XG4gICAgY29uc3QgYnVmZmVyVmFsdWUgPSB2YWx1ZSBpbnN0YW5jZW9mIEJ1ZmZlciA/IHZhbHVlIDogQnVmZmVyLmZyb20odmFsdWUuYnVmZmVyKTtcbiAgICByZXR1cm4gYnVmZmVyVmFsdWUudG9TdHJpbmcoXCJiYXNlNjRcIik7XG59XG4vKipcbiAqIERlY29kZXMgYSBiYXNlNjQgc3RyaW5nIGludG8gYSBieXRlIGFycmF5LlxuICogQHBhcmFtIHZhbHVlIC0gdGhlIGJhc2U2NCBzdHJpbmcgdG8gZGVjb2RlXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gZGVjb2RlU3RyaW5nKHZhbHVlKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHZhbHVlLCBcImJhc2U2NFwiKTtcbn1cbi8qKlxuICogRGVjb2RlcyBhIGJhc2U2NCBzdHJpbmcgaW50byBhIHN0cmluZy5cbiAqIEBwYXJhbSB2YWx1ZSAtIHRoZSBiYXNlNjQgc3RyaW5nIHRvIGRlY29kZVxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGRlY29kZVN0cmluZ1RvU3RyaW5nKHZhbHVlKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHZhbHVlLCBcImJhc2U2NFwiKS50b1N0cmluZygpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFzZTY0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/commonjs/base64.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/commonjs/deserializationPolicy.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/commonjs/deserializationPolicy.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.deserializationPolicyName = void 0;\nexports.deserializationPolicy = deserializationPolicy;\nconst interfaces_js_1 = __webpack_require__(/*! ./interfaces.js */ \"(rsc)/./node_modules/@azure/core-client/dist/commonjs/interfaces.js\");\nconst core_rest_pipeline_1 = __webpack_require__(/*! @azure/core-rest-pipeline */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/index.js\");\nconst serializer_js_1 = __webpack_require__(/*! ./serializer.js */ \"(rsc)/./node_modules/@azure/core-client/dist/commonjs/serializer.js\");\nconst operationHelpers_js_1 = __webpack_require__(/*! ./operationHelpers.js */ \"(rsc)/./node_modules/@azure/core-client/dist/commonjs/operationHelpers.js\");\nconst defaultJsonContentTypes = [\"application/json\", \"text/json\"];\nconst defaultXmlContentTypes = [\"application/xml\", \"application/atom+xml\"];\n/**\n * The programmatic identifier of the deserializationPolicy.\n */\nexports.deserializationPolicyName = \"deserializationPolicy\";\n/**\n * This policy handles parsing out responses according to OperationSpecs on the request.\n */\nfunction deserializationPolicy(options = {}) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    const jsonContentTypes = (_b = (_a = options.expectedContentTypes) === null || _a === void 0 ? void 0 : _a.json) !== null && _b !== void 0 ? _b : defaultJsonContentTypes;\n    const xmlContentTypes = (_d = (_c = options.expectedContentTypes) === null || _c === void 0 ? void 0 : _c.xml) !== null && _d !== void 0 ? _d : defaultXmlContentTypes;\n    const parseXML = options.parseXML;\n    const serializerOptions = options.serializerOptions;\n    const updatedOptions = {\n        xml: {\n            rootName: (_e = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.rootName) !== null && _e !== void 0 ? _e : \"\",\n            includeRoot: (_f = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.includeRoot) !== null && _f !== void 0 ? _f : false,\n            xmlCharKey: (_g = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.xmlCharKey) !== null && _g !== void 0 ? _g : interfaces_js_1.XML_CHARKEY,\n        },\n    };\n    return {\n        name: exports.deserializationPolicyName,\n        async sendRequest(request, next) {\n            const response = await next(request);\n            return deserializeResponseBody(jsonContentTypes, xmlContentTypes, response, updatedOptions, parseXML);\n        },\n    };\n}\nfunction getOperationResponseMap(parsedResponse) {\n    let result;\n    const request = parsedResponse.request;\n    const operationInfo = (0, operationHelpers_js_1.getOperationRequestInfo)(request);\n    const operationSpec = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationSpec;\n    if (operationSpec) {\n        if (!(operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationResponseGetter)) {\n            result = operationSpec.responses[parsedResponse.status];\n        }\n        else {\n            result = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationResponseGetter(operationSpec, parsedResponse);\n        }\n    }\n    return result;\n}\nfunction shouldDeserializeResponse(parsedResponse) {\n    const request = parsedResponse.request;\n    const operationInfo = (0, operationHelpers_js_1.getOperationRequestInfo)(request);\n    const shouldDeserialize = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.shouldDeserialize;\n    let result;\n    if (shouldDeserialize === undefined) {\n        result = true;\n    }\n    else if (typeof shouldDeserialize === \"boolean\") {\n        result = shouldDeserialize;\n    }\n    else {\n        result = shouldDeserialize(parsedResponse);\n    }\n    return result;\n}\nasync function deserializeResponseBody(jsonContentTypes, xmlContentTypes, response, options, parseXML) {\n    const parsedResponse = await parse(jsonContentTypes, xmlContentTypes, response, options, parseXML);\n    if (!shouldDeserializeResponse(parsedResponse)) {\n        return parsedResponse;\n    }\n    const operationInfo = (0, operationHelpers_js_1.getOperationRequestInfo)(parsedResponse.request);\n    const operationSpec = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationSpec;\n    if (!operationSpec || !operationSpec.responses) {\n        return parsedResponse;\n    }\n    const responseSpec = getOperationResponseMap(parsedResponse);\n    const { error, shouldReturnResponse } = handleErrorResponse(parsedResponse, operationSpec, responseSpec, options);\n    if (error) {\n        throw error;\n    }\n    else if (shouldReturnResponse) {\n        return parsedResponse;\n    }\n    // An operation response spec does exist for current status code, so\n    // use it to deserialize the response.\n    if (responseSpec) {\n        if (responseSpec.bodyMapper) {\n            let valueToDeserialize = parsedResponse.parsedBody;\n            if (operationSpec.isXML && responseSpec.bodyMapper.type.name === serializer_js_1.MapperTypeNames.Sequence) {\n                valueToDeserialize =\n                    typeof valueToDeserialize === \"object\"\n                        ? valueToDeserialize[responseSpec.bodyMapper.xmlElementName]\n                        : [];\n            }\n            try {\n                parsedResponse.parsedBody = operationSpec.serializer.deserialize(responseSpec.bodyMapper, valueToDeserialize, \"operationRes.parsedBody\", options);\n            }\n            catch (deserializeError) {\n                const restError = new core_rest_pipeline_1.RestError(`Error ${deserializeError} occurred in deserializing the responseBody - ${parsedResponse.bodyAsText}`, {\n                    statusCode: parsedResponse.status,\n                    request: parsedResponse.request,\n                    response: parsedResponse,\n                });\n                throw restError;\n            }\n        }\n        else if (operationSpec.httpMethod === \"HEAD\") {\n            // head methods never have a body, but we return a boolean to indicate presence/absence of the resource\n            parsedResponse.parsedBody = response.status >= 200 && response.status < 300;\n        }\n        if (responseSpec.headersMapper) {\n            parsedResponse.parsedHeaders = operationSpec.serializer.deserialize(responseSpec.headersMapper, parsedResponse.headers.toJSON(), \"operationRes.parsedHeaders\", { xml: {}, ignoreUnknownProperties: true });\n        }\n    }\n    return parsedResponse;\n}\nfunction isOperationSpecEmpty(operationSpec) {\n    const expectedStatusCodes = Object.keys(operationSpec.responses);\n    return (expectedStatusCodes.length === 0 ||\n        (expectedStatusCodes.length === 1 && expectedStatusCodes[0] === \"default\"));\n}\nfunction handleErrorResponse(parsedResponse, operationSpec, responseSpec, options) {\n    var _a, _b, _c, _d, _e;\n    const isSuccessByStatus = 200 <= parsedResponse.status && parsedResponse.status < 300;\n    const isExpectedStatusCode = isOperationSpecEmpty(operationSpec)\n        ? isSuccessByStatus\n        : !!responseSpec;\n    if (isExpectedStatusCode) {\n        if (responseSpec) {\n            if (!responseSpec.isError) {\n                return { error: null, shouldReturnResponse: false };\n            }\n        }\n        else {\n            return { error: null, shouldReturnResponse: false };\n        }\n    }\n    const errorResponseSpec = responseSpec !== null && responseSpec !== void 0 ? responseSpec : operationSpec.responses.default;\n    const initialErrorMessage = ((_a = parsedResponse.request.streamResponseStatusCodes) === null || _a === void 0 ? void 0 : _a.has(parsedResponse.status))\n        ? `Unexpected status code: ${parsedResponse.status}`\n        : parsedResponse.bodyAsText;\n    const error = new core_rest_pipeline_1.RestError(initialErrorMessage, {\n        statusCode: parsedResponse.status,\n        request: parsedResponse.request,\n        response: parsedResponse,\n    });\n    // If the item failed but there's no error spec or default spec to deserialize the error,\n    // and the parsed body doesn't look like an error object,\n    // we should fail so we just throw the parsed response\n    if (!errorResponseSpec &&\n        !(((_c = (_b = parsedResponse.parsedBody) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.code) && ((_e = (_d = parsedResponse.parsedBody) === null || _d === void 0 ? void 0 : _d.error) === null || _e === void 0 ? void 0 : _e.message))) {\n        throw error;\n    }\n    const defaultBodyMapper = errorResponseSpec === null || errorResponseSpec === void 0 ? void 0 : errorResponseSpec.bodyMapper;\n    const defaultHeadersMapper = errorResponseSpec === null || errorResponseSpec === void 0 ? void 0 : errorResponseSpec.headersMapper;\n    try {\n        // If error response has a body, try to deserialize it using default body mapper.\n        // Then try to extract error code & message from it\n        if (parsedResponse.parsedBody) {\n            const parsedBody = parsedResponse.parsedBody;\n            let deserializedError;\n            if (defaultBodyMapper) {\n                let valueToDeserialize = parsedBody;\n                if (operationSpec.isXML && defaultBodyMapper.type.name === serializer_js_1.MapperTypeNames.Sequence) {\n                    valueToDeserialize = [];\n                    const elementName = defaultBodyMapper.xmlElementName;\n                    if (typeof parsedBody === \"object\" && elementName) {\n                        valueToDeserialize = parsedBody[elementName];\n                    }\n                }\n                deserializedError = operationSpec.serializer.deserialize(defaultBodyMapper, valueToDeserialize, \"error.response.parsedBody\", options);\n            }\n            const internalError = parsedBody.error || deserializedError || parsedBody;\n            error.code = internalError.code;\n            if (internalError.message) {\n                error.message = internalError.message;\n            }\n            if (defaultBodyMapper) {\n                error.response.parsedBody = deserializedError;\n            }\n        }\n        // If error response has headers, try to deserialize it using default header mapper\n        if (parsedResponse.headers && defaultHeadersMapper) {\n            error.response.parsedHeaders =\n                operationSpec.serializer.deserialize(defaultHeadersMapper, parsedResponse.headers.toJSON(), \"operationRes.parsedHeaders\");\n        }\n    }\n    catch (defaultError) {\n        error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody - \"${parsedResponse.bodyAsText}\" for the default response.`;\n    }\n    return { error, shouldReturnResponse: false };\n}\nasync function parse(jsonContentTypes, xmlContentTypes, operationResponse, opts, parseXML) {\n    var _a;\n    if (!((_a = operationResponse.request.streamResponseStatusCodes) === null || _a === void 0 ? void 0 : _a.has(operationResponse.status)) &&\n        operationResponse.bodyAsText) {\n        const text = operationResponse.bodyAsText;\n        const contentType = operationResponse.headers.get(\"Content-Type\") || \"\";\n        const contentComponents = !contentType\n            ? []\n            : contentType.split(\";\").map((component) => component.toLowerCase());\n        try {\n            if (contentComponents.length === 0 ||\n                contentComponents.some((component) => jsonContentTypes.indexOf(component) !== -1)) {\n                operationResponse.parsedBody = JSON.parse(text);\n                return operationResponse;\n            }\n            else if (contentComponents.some((component) => xmlContentTypes.indexOf(component) !== -1)) {\n                if (!parseXML) {\n                    throw new Error(\"Parsing XML not supported.\");\n                }\n                const body = await parseXML(text, opts.xml);\n                operationResponse.parsedBody = body;\n                return operationResponse;\n            }\n        }\n        catch (err) {\n            const msg = `Error \"${err}\" occurred while parsing the response body - ${operationResponse.bodyAsText}.`;\n            const errCode = err.code || core_rest_pipeline_1.RestError.PARSE_ERROR;\n            const e = new core_rest_pipeline_1.RestError(msg, {\n                code: errCode,\n                statusCode: operationResponse.status,\n                request: operationResponse.request,\n                response: operationResponse,\n            });\n            throw e;\n        }\n    }\n    return operationResponse;\n}\n//# sourceMappingURL=deserializationPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/commonjs/deserializationPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/commonjs/httpClientCache.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/commonjs/httpClientCache.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getCachedDefaultHttpClient = getCachedDefaultHttpClient;\nconst core_rest_pipeline_1 = __webpack_require__(/*! @azure/core-rest-pipeline */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/index.js\");\nlet cachedHttpClient;\nfunction getCachedDefaultHttpClient() {\n    if (!cachedHttpClient) {\n        cachedHttpClient = (0, core_rest_pipeline_1.createDefaultHttpClient)();\n    }\n    return cachedHttpClient;\n}\n//# sourceMappingURL=httpClientCache.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvY29tbW9uanMvaHR0cENsaWVudENhY2hlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQ0FBa0M7QUFDbEMsNkJBQTZCLG1CQUFPLENBQUMsd0dBQTJCO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLWNsaWVudC9kaXN0L2NvbW1vbmpzL2h0dHBDbGllbnRDYWNoZS5qcz8zOTFhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldENhY2hlZERlZmF1bHRIdHRwQ2xpZW50ID0gZ2V0Q2FjaGVkRGVmYXVsdEh0dHBDbGllbnQ7XG5jb25zdCBjb3JlX3Jlc3RfcGlwZWxpbmVfMSA9IHJlcXVpcmUoXCJAYXp1cmUvY29yZS1yZXN0LXBpcGVsaW5lXCIpO1xubGV0IGNhY2hlZEh0dHBDbGllbnQ7XG5mdW5jdGlvbiBnZXRDYWNoZWREZWZhdWx0SHR0cENsaWVudCgpIHtcbiAgICBpZiAoIWNhY2hlZEh0dHBDbGllbnQpIHtcbiAgICAgICAgY2FjaGVkSHR0cENsaWVudCA9ICgwLCBjb3JlX3Jlc3RfcGlwZWxpbmVfMS5jcmVhdGVEZWZhdWx0SHR0cENsaWVudCkoKTtcbiAgICB9XG4gICAgcmV0dXJuIGNhY2hlZEh0dHBDbGllbnQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1odHRwQ2xpZW50Q2FjaGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/commonjs/httpClientCache.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/commonjs/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/commonjs/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.authorizeRequestOnTenantChallenge = exports.authorizeRequestOnClaimChallenge = exports.serializationPolicyName = exports.serializationPolicy = exports.deserializationPolicyName = exports.deserializationPolicy = exports.XML_CHARKEY = exports.XML_ATTRKEY = exports.createClientPipeline = exports.ServiceClient = exports.MapperTypeNames = exports.createSerializer = void 0;\nvar serializer_js_1 = __webpack_require__(/*! ./serializer.js */ \"(rsc)/./node_modules/@azure/core-client/dist/commonjs/serializer.js\");\nObject.defineProperty(exports, \"createSerializer\", ({ enumerable: true, get: function () { return serializer_js_1.createSerializer; } }));\nObject.defineProperty(exports, \"MapperTypeNames\", ({ enumerable: true, get: function () { return serializer_js_1.MapperTypeNames; } }));\nvar serviceClient_js_1 = __webpack_require__(/*! ./serviceClient.js */ \"(rsc)/./node_modules/@azure/core-client/dist/commonjs/serviceClient.js\");\nObject.defineProperty(exports, \"ServiceClient\", ({ enumerable: true, get: function () { return serviceClient_js_1.ServiceClient; } }));\nvar pipeline_js_1 = __webpack_require__(/*! ./pipeline.js */ \"(rsc)/./node_modules/@azure/core-client/dist/commonjs/pipeline.js\");\nObject.defineProperty(exports, \"createClientPipeline\", ({ enumerable: true, get: function () { return pipeline_js_1.createClientPipeline; } }));\nvar interfaces_js_1 = __webpack_require__(/*! ./interfaces.js */ \"(rsc)/./node_modules/@azure/core-client/dist/commonjs/interfaces.js\");\nObject.defineProperty(exports, \"XML_ATTRKEY\", ({ enumerable: true, get: function () { return interfaces_js_1.XML_ATTRKEY; } }));\nObject.defineProperty(exports, \"XML_CHARKEY\", ({ enumerable: true, get: function () { return interfaces_js_1.XML_CHARKEY; } }));\nvar deserializationPolicy_js_1 = __webpack_require__(/*! ./deserializationPolicy.js */ \"(rsc)/./node_modules/@azure/core-client/dist/commonjs/deserializationPolicy.js\");\nObject.defineProperty(exports, \"deserializationPolicy\", ({ enumerable: true, get: function () { return deserializationPolicy_js_1.deserializationPolicy; } }));\nObject.defineProperty(exports, \"deserializationPolicyName\", ({ enumerable: true, get: function () { return deserializationPolicy_js_1.deserializationPolicyName; } }));\nvar serializationPolicy_js_1 = __webpack_require__(/*! ./serializationPolicy.js */ \"(rsc)/./node_modules/@azure/core-client/dist/commonjs/serializationPolicy.js\");\nObject.defineProperty(exports, \"serializationPolicy\", ({ enumerable: true, get: function () { return serializationPolicy_js_1.serializationPolicy; } }));\nObject.defineProperty(exports, \"serializationPolicyName\", ({ enumerable: true, get: function () { return serializationPolicy_js_1.serializationPolicyName; } }));\nvar authorizeRequestOnClaimChallenge_js_1 = __webpack_require__(/*! ./authorizeRequestOnClaimChallenge.js */ \"(rsc)/./node_modules/@azure/core-client/dist/commonjs/authorizeRequestOnClaimChallenge.js\");\nObject.defineProperty(exports, \"authorizeRequestOnClaimChallenge\", ({ enumerable: true, get: function () { return authorizeRequestOnClaimChallenge_js_1.authorizeRequestOnClaimChallenge; } }));\nvar authorizeRequestOnTenantChallenge_js_1 = __webpack_require__(/*! ./authorizeRequestOnTenantChallenge.js */ \"(rsc)/./node_modules/@azure/core-client/dist/commonjs/authorizeRequestOnTenantChallenge.js\");\nObject.defineProperty(exports, \"authorizeRequestOnTenantChallenge\", ({ enumerable: true, get: function () { return authorizeRequestOnTenantChallenge_js_1.authorizeRequestOnTenantChallenge; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvY29tbW9uanMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHlDQUF5QyxHQUFHLHdDQUF3QyxHQUFHLCtCQUErQixHQUFHLDJCQUEyQixHQUFHLGlDQUFpQyxHQUFHLDZCQUE2QixHQUFHLG1CQUFtQixHQUFHLG1CQUFtQixHQUFHLDRCQUE0QixHQUFHLHFCQUFxQixHQUFHLHVCQUF1QixHQUFHLHdCQUF3QjtBQUNoWCxzQkFBc0IsbUJBQU8sQ0FBQyw0RkFBaUI7QUFDL0Msb0RBQW1ELEVBQUUscUNBQXFDLDRDQUE0QyxFQUFDO0FBQ3ZJLG1EQUFrRCxFQUFFLHFDQUFxQywyQ0FBMkMsRUFBQztBQUNySSx5QkFBeUIsbUJBQU8sQ0FBQyxrR0FBb0I7QUFDckQsaURBQWdELEVBQUUscUNBQXFDLDRDQUE0QyxFQUFDO0FBQ3BJLG9CQUFvQixtQkFBTyxDQUFDLHdGQUFlO0FBQzNDLHdEQUF1RCxFQUFFLHFDQUFxQyw4Q0FBOEMsRUFBQztBQUM3SSxzQkFBc0IsbUJBQU8sQ0FBQyw0RkFBaUI7QUFDL0MsK0NBQThDLEVBQUUscUNBQXFDLHVDQUF1QyxFQUFDO0FBQzdILCtDQUE4QyxFQUFFLHFDQUFxQyx1Q0FBdUMsRUFBQztBQUM3SCxpQ0FBaUMsbUJBQU8sQ0FBQyxrSEFBNEI7QUFDckUseURBQXdELEVBQUUscUNBQXFDLDREQUE0RCxFQUFDO0FBQzVKLDZEQUE0RCxFQUFFLHFDQUFxQyxnRUFBZ0UsRUFBQztBQUNwSywrQkFBK0IsbUJBQU8sQ0FBQyw4R0FBMEI7QUFDakUsdURBQXNELEVBQUUscUNBQXFDLHdEQUF3RCxFQUFDO0FBQ3RKLDJEQUEwRCxFQUFFLHFDQUFxQyw0REFBNEQsRUFBQztBQUM5Siw0Q0FBNEMsbUJBQU8sQ0FBQyx3SUFBdUM7QUFDM0Ysb0VBQW1FLEVBQUUscUNBQXFDLGtGQUFrRixFQUFDO0FBQzdMLDZDQUE2QyxtQkFBTyxDQUFDLDBJQUF3QztBQUM3RixxRUFBb0UsRUFBRSxxQ0FBcUMsb0ZBQW9GLEVBQUM7QUFDaE0iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLWNsaWVudC9kaXN0L2NvbW1vbmpzL2luZGV4LmpzP2U1MmMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYXV0aG9yaXplUmVxdWVzdE9uVGVuYW50Q2hhbGxlbmdlID0gZXhwb3J0cy5hdXRob3JpemVSZXF1ZXN0T25DbGFpbUNoYWxsZW5nZSA9IGV4cG9ydHMuc2VyaWFsaXphdGlvblBvbGljeU5hbWUgPSBleHBvcnRzLnNlcmlhbGl6YXRpb25Qb2xpY3kgPSBleHBvcnRzLmRlc2VyaWFsaXphdGlvblBvbGljeU5hbWUgPSBleHBvcnRzLmRlc2VyaWFsaXphdGlvblBvbGljeSA9IGV4cG9ydHMuWE1MX0NIQVJLRVkgPSBleHBvcnRzLlhNTF9BVFRSS0VZID0gZXhwb3J0cy5jcmVhdGVDbGllbnRQaXBlbGluZSA9IGV4cG9ydHMuU2VydmljZUNsaWVudCA9IGV4cG9ydHMuTWFwcGVyVHlwZU5hbWVzID0gZXhwb3J0cy5jcmVhdGVTZXJpYWxpemVyID0gdm9pZCAwO1xudmFyIHNlcmlhbGl6ZXJfanNfMSA9IHJlcXVpcmUoXCIuL3NlcmlhbGl6ZXIuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjcmVhdGVTZXJpYWxpemVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzZXJpYWxpemVyX2pzXzEuY3JlYXRlU2VyaWFsaXplcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk1hcHBlclR5cGVOYW1lc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2VyaWFsaXplcl9qc18xLk1hcHBlclR5cGVOYW1lczsgfSB9KTtcbnZhciBzZXJ2aWNlQ2xpZW50X2pzXzEgPSByZXF1aXJlKFwiLi9zZXJ2aWNlQ2xpZW50LmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU2VydmljZUNsaWVudFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2VydmljZUNsaWVudF9qc18xLlNlcnZpY2VDbGllbnQ7IH0gfSk7XG52YXIgcGlwZWxpbmVfanNfMSA9IHJlcXVpcmUoXCIuL3BpcGVsaW5lLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY3JlYXRlQ2xpZW50UGlwZWxpbmVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHBpcGVsaW5lX2pzXzEuY3JlYXRlQ2xpZW50UGlwZWxpbmU7IH0gfSk7XG52YXIgaW50ZXJmYWNlc19qc18xID0gcmVxdWlyZShcIi4vaW50ZXJmYWNlcy5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlhNTF9BVFRSS0VZXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBpbnRlcmZhY2VzX2pzXzEuWE1MX0FUVFJLRVk7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJYTUxfQ0hBUktFWVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW50ZXJmYWNlc19qc18xLlhNTF9DSEFSS0VZOyB9IH0pO1xudmFyIGRlc2VyaWFsaXphdGlvblBvbGljeV9qc18xID0gcmVxdWlyZShcIi4vZGVzZXJpYWxpemF0aW9uUG9saWN5LmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVzZXJpYWxpemF0aW9uUG9saWN5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkZXNlcmlhbGl6YXRpb25Qb2xpY3lfanNfMS5kZXNlcmlhbGl6YXRpb25Qb2xpY3k7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZXNlcmlhbGl6YXRpb25Qb2xpY3lOYW1lXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkZXNlcmlhbGl6YXRpb25Qb2xpY3lfanNfMS5kZXNlcmlhbGl6YXRpb25Qb2xpY3lOYW1lOyB9IH0pO1xudmFyIHNlcmlhbGl6YXRpb25Qb2xpY3lfanNfMSA9IHJlcXVpcmUoXCIuL3NlcmlhbGl6YXRpb25Qb2xpY3kuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzZXJpYWxpemF0aW9uUG9saWN5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzZXJpYWxpemF0aW9uUG9saWN5X2pzXzEuc2VyaWFsaXphdGlvblBvbGljeTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInNlcmlhbGl6YXRpb25Qb2xpY3lOYW1lXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzZXJpYWxpemF0aW9uUG9saWN5X2pzXzEuc2VyaWFsaXphdGlvblBvbGljeU5hbWU7IH0gfSk7XG52YXIgYXV0aG9yaXplUmVxdWVzdE9uQ2xhaW1DaGFsbGVuZ2VfanNfMSA9IHJlcXVpcmUoXCIuL2F1dGhvcml6ZVJlcXVlc3RPbkNsYWltQ2hhbGxlbmdlLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiYXV0aG9yaXplUmVxdWVzdE9uQ2xhaW1DaGFsbGVuZ2VcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGF1dGhvcml6ZVJlcXVlc3RPbkNsYWltQ2hhbGxlbmdlX2pzXzEuYXV0aG9yaXplUmVxdWVzdE9uQ2xhaW1DaGFsbGVuZ2U7IH0gfSk7XG52YXIgYXV0aG9yaXplUmVxdWVzdE9uVGVuYW50Q2hhbGxlbmdlX2pzXzEgPSByZXF1aXJlKFwiLi9hdXRob3JpemVSZXF1ZXN0T25UZW5hbnRDaGFsbGVuZ2UuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJhdXRob3JpemVSZXF1ZXN0T25UZW5hbnRDaGFsbGVuZ2VcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGF1dGhvcml6ZVJlcXVlc3RPblRlbmFudENoYWxsZW5nZV9qc18xLmF1dGhvcml6ZVJlcXVlc3RPblRlbmFudENoYWxsZW5nZTsgfSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/commonjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/commonjs/interfaceHelpers.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/commonjs/interfaceHelpers.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getStreamingResponseStatusCodes = getStreamingResponseStatusCodes;\nexports.getPathStringFromParameter = getPathStringFromParameter;\nconst serializer_js_1 = __webpack_require__(/*! ./serializer.js */ \"(rsc)/./node_modules/@azure/core-client/dist/commonjs/serializer.js\");\n/**\n * Gets the list of status codes for streaming responses.\n * @internal\n */\nfunction getStreamingResponseStatusCodes(operationSpec) {\n    const result = new Set();\n    for (const statusCode in operationSpec.responses) {\n        const operationResponse = operationSpec.responses[statusCode];\n        if (operationResponse.bodyMapper &&\n            operationResponse.bodyMapper.type.name === serializer_js_1.MapperTypeNames.Stream) {\n            result.add(Number(statusCode));\n        }\n    }\n    return result;\n}\n/**\n * Get the path to this parameter's value as a dotted string (a.b.c).\n * @param parameter - The parameter to get the path string for.\n * @returns The path to this parameter's value as a dotted string.\n * @internal\n */\nfunction getPathStringFromParameter(parameter) {\n    const { parameterPath, mapper } = parameter;\n    let result;\n    if (typeof parameterPath === \"string\") {\n        result = parameterPath;\n    }\n    else if (Array.isArray(parameterPath)) {\n        result = parameterPath.join(\".\");\n    }\n    else {\n        result = mapper.serializedName;\n    }\n    return result;\n}\n//# sourceMappingURL=interfaceHelpers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvY29tbW9uanMvaW50ZXJmYWNlSGVscGVycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsdUNBQXVDO0FBQ3ZDLGtDQUFrQztBQUNsQyx3QkFBd0IsbUJBQU8sQ0FBQyw0RkFBaUI7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHdCQUF3QjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvY29tbW9uanMvaW50ZXJmYWNlSGVscGVycy5qcz9hOTJkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldFN0cmVhbWluZ1Jlc3BvbnNlU3RhdHVzQ29kZXMgPSBnZXRTdHJlYW1pbmdSZXNwb25zZVN0YXR1c0NvZGVzO1xuZXhwb3J0cy5nZXRQYXRoU3RyaW5nRnJvbVBhcmFtZXRlciA9IGdldFBhdGhTdHJpbmdGcm9tUGFyYW1ldGVyO1xuY29uc3Qgc2VyaWFsaXplcl9qc18xID0gcmVxdWlyZShcIi4vc2VyaWFsaXplci5qc1wiKTtcbi8qKlxuICogR2V0cyB0aGUgbGlzdCBvZiBzdGF0dXMgY29kZXMgZm9yIHN0cmVhbWluZyByZXNwb25zZXMuXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gZ2V0U3RyZWFtaW5nUmVzcG9uc2VTdGF0dXNDb2RlcyhvcGVyYXRpb25TcGVjKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gbmV3IFNldCgpO1xuICAgIGZvciAoY29uc3Qgc3RhdHVzQ29kZSBpbiBvcGVyYXRpb25TcGVjLnJlc3BvbnNlcykge1xuICAgICAgICBjb25zdCBvcGVyYXRpb25SZXNwb25zZSA9IG9wZXJhdGlvblNwZWMucmVzcG9uc2VzW3N0YXR1c0NvZGVdO1xuICAgICAgICBpZiAob3BlcmF0aW9uUmVzcG9uc2UuYm9keU1hcHBlciAmJlxuICAgICAgICAgICAgb3BlcmF0aW9uUmVzcG9uc2UuYm9keU1hcHBlci50eXBlLm5hbWUgPT09IHNlcmlhbGl6ZXJfanNfMS5NYXBwZXJUeXBlTmFtZXMuU3RyZWFtKSB7XG4gICAgICAgICAgICByZXN1bHQuYWRkKE51bWJlcihzdGF0dXNDb2RlKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogR2V0IHRoZSBwYXRoIHRvIHRoaXMgcGFyYW1ldGVyJ3MgdmFsdWUgYXMgYSBkb3R0ZWQgc3RyaW5nIChhLmIuYykuXG4gKiBAcGFyYW0gcGFyYW1ldGVyIC0gVGhlIHBhcmFtZXRlciB0byBnZXQgdGhlIHBhdGggc3RyaW5nIGZvci5cbiAqIEByZXR1cm5zIFRoZSBwYXRoIHRvIHRoaXMgcGFyYW1ldGVyJ3MgdmFsdWUgYXMgYSBkb3R0ZWQgc3RyaW5nLlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGdldFBhdGhTdHJpbmdGcm9tUGFyYW1ldGVyKHBhcmFtZXRlcikge1xuICAgIGNvbnN0IHsgcGFyYW1ldGVyUGF0aCwgbWFwcGVyIH0gPSBwYXJhbWV0ZXI7XG4gICAgbGV0IHJlc3VsdDtcbiAgICBpZiAodHlwZW9mIHBhcmFtZXRlclBhdGggPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmVzdWx0ID0gcGFyYW1ldGVyUGF0aDtcbiAgICB9XG4gICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShwYXJhbWV0ZXJQYXRoKSkge1xuICAgICAgICByZXN1bHQgPSBwYXJhbWV0ZXJQYXRoLmpvaW4oXCIuXCIpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gbWFwcGVyLnNlcmlhbGl6ZWROYW1lO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW50ZXJmYWNlSGVscGVycy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/commonjs/interfaceHelpers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/commonjs/interfaces.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/commonjs/interfaces.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.XML_CHARKEY = exports.XML_ATTRKEY = void 0;\n/**\n * Default key used to access the XML attributes.\n */\nexports.XML_ATTRKEY = \"$\";\n/**\n * Default key used to access the XML value content.\n */\nexports.XML_CHARKEY = \"_\";\n//# sourceMappingURL=interfaces.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvY29tbW9uanMvaW50ZXJmYWNlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsbUJBQW1CLEdBQUcsbUJBQW1CO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLWNsaWVudC9kaXN0L2NvbW1vbmpzL2ludGVyZmFjZXMuanM/MDg0NSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5YTUxfQ0hBUktFWSA9IGV4cG9ydHMuWE1MX0FUVFJLRVkgPSB2b2lkIDA7XG4vKipcbiAqIERlZmF1bHQga2V5IHVzZWQgdG8gYWNjZXNzIHRoZSBYTUwgYXR0cmlidXRlcy5cbiAqL1xuZXhwb3J0cy5YTUxfQVRUUktFWSA9IFwiJFwiO1xuLyoqXG4gKiBEZWZhdWx0IGtleSB1c2VkIHRvIGFjY2VzcyB0aGUgWE1MIHZhbHVlIGNvbnRlbnQuXG4gKi9cbmV4cG9ydHMuWE1MX0NIQVJLRVkgPSBcIl9cIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWludGVyZmFjZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/commonjs/interfaces.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/commonjs/log.js":
/*!**************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/commonjs/log.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.logger = void 0;\nconst logger_1 = __webpack_require__(/*! @azure/logger */ \"(rsc)/./node_modules/@azure/logger/dist/commonjs/index.js\");\nexports.logger = (0, logger_1.createClientLogger)(\"core-client\");\n//# sourceMappingURL=log.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvY29tbW9uanMvbG9nLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxjQUFjO0FBQ2QsaUJBQWlCLG1CQUFPLENBQUMsZ0ZBQWU7QUFDeEMsY0FBYztBQUNkIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1jbGllbnQvZGlzdC9jb21tb25qcy9sb2cuanM/MTU0MSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5sb2dnZXIgPSB2b2lkIDA7XG5jb25zdCBsb2dnZXJfMSA9IHJlcXVpcmUoXCJAYXp1cmUvbG9nZ2VyXCIpO1xuZXhwb3J0cy5sb2dnZXIgPSAoMCwgbG9nZ2VyXzEuY3JlYXRlQ2xpZW50TG9nZ2VyKShcImNvcmUtY2xpZW50XCIpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9nLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/commonjs/log.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/commonjs/operationHelpers.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/commonjs/operationHelpers.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOperationArgumentValueFromParameter = getOperationArgumentValueFromParameter;\nexports.getOperationRequestInfo = getOperationRequestInfo;\nconst state_js_1 = __webpack_require__(/*! ./state.js */ \"(rsc)/./node_modules/@azure/core-client/dist/commonjs/state.js\");\n/**\n * @internal\n * Retrieves the value to use for a given operation argument\n * @param operationArguments - The arguments passed from the generated client\n * @param parameter - The parameter description\n * @param fallbackObject - If something isn't found in the arguments bag, look here.\n *  Generally used to look at the service client properties.\n */\nfunction getOperationArgumentValueFromParameter(operationArguments, parameter, fallbackObject) {\n    let parameterPath = parameter.parameterPath;\n    const parameterMapper = parameter.mapper;\n    let value;\n    if (typeof parameterPath === \"string\") {\n        parameterPath = [parameterPath];\n    }\n    if (Array.isArray(parameterPath)) {\n        if (parameterPath.length > 0) {\n            if (parameterMapper.isConstant) {\n                value = parameterMapper.defaultValue;\n            }\n            else {\n                let propertySearchResult = getPropertyFromParameterPath(operationArguments, parameterPath);\n                if (!propertySearchResult.propertyFound && fallbackObject) {\n                    propertySearchResult = getPropertyFromParameterPath(fallbackObject, parameterPath);\n                }\n                let useDefaultValue = false;\n                if (!propertySearchResult.propertyFound) {\n                    useDefaultValue =\n                        parameterMapper.required ||\n                            (parameterPath[0] === \"options\" && parameterPath.length === 2);\n                }\n                value = useDefaultValue ? parameterMapper.defaultValue : propertySearchResult.propertyValue;\n            }\n        }\n    }\n    else {\n        if (parameterMapper.required) {\n            value = {};\n        }\n        for (const propertyName in parameterPath) {\n            const propertyMapper = parameterMapper.type.modelProperties[propertyName];\n            const propertyPath = parameterPath[propertyName];\n            const propertyValue = getOperationArgumentValueFromParameter(operationArguments, {\n                parameterPath: propertyPath,\n                mapper: propertyMapper,\n            }, fallbackObject);\n            if (propertyValue !== undefined) {\n                if (!value) {\n                    value = {};\n                }\n                value[propertyName] = propertyValue;\n            }\n        }\n    }\n    return value;\n}\nfunction getPropertyFromParameterPath(parent, parameterPath) {\n    const result = { propertyFound: false };\n    let i = 0;\n    for (; i < parameterPath.length; ++i) {\n        const parameterPathPart = parameterPath[i];\n        // Make sure to check inherited properties too, so don't use hasOwnProperty().\n        if (parent && parameterPathPart in parent) {\n            parent = parent[parameterPathPart];\n        }\n        else {\n            break;\n        }\n    }\n    if (i === parameterPath.length) {\n        result.propertyValue = parent;\n        result.propertyFound = true;\n    }\n    return result;\n}\nconst originalRequestSymbol = Symbol.for(\"@azure/core-client original request\");\nfunction hasOriginalRequest(request) {\n    return originalRequestSymbol in request;\n}\nfunction getOperationRequestInfo(request) {\n    if (hasOriginalRequest(request)) {\n        return getOperationRequestInfo(request[originalRequestSymbol]);\n    }\n    let info = state_js_1.state.operationRequestMap.get(request);\n    if (!info) {\n        info = {};\n        state_js_1.state.operationRequestMap.set(request, info);\n    }\n    return info;\n}\n//# sourceMappingURL=operationHelpers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvY29tbW9uanMvb3BlcmF0aW9uSGVscGVycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsOENBQThDO0FBQzlDLCtCQUErQjtBQUMvQixtQkFBbUIsbUJBQU8sQ0FBQyxrRkFBWTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBLFdBQVcsMEJBQTBCO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1jbGllbnQvZGlzdC9jb21tb25qcy9vcGVyYXRpb25IZWxwZXJzLmpzP2JiOGQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0T3BlcmF0aW9uQXJndW1lbnRWYWx1ZUZyb21QYXJhbWV0ZXIgPSBnZXRPcGVyYXRpb25Bcmd1bWVudFZhbHVlRnJvbVBhcmFtZXRlcjtcbmV4cG9ydHMuZ2V0T3BlcmF0aW9uUmVxdWVzdEluZm8gPSBnZXRPcGVyYXRpb25SZXF1ZXN0SW5mbztcbmNvbnN0IHN0YXRlX2pzXzEgPSByZXF1aXJlKFwiLi9zdGF0ZS5qc1wiKTtcbi8qKlxuICogQGludGVybmFsXG4gKiBSZXRyaWV2ZXMgdGhlIHZhbHVlIHRvIHVzZSBmb3IgYSBnaXZlbiBvcGVyYXRpb24gYXJndW1lbnRcbiAqIEBwYXJhbSBvcGVyYXRpb25Bcmd1bWVudHMgLSBUaGUgYXJndW1lbnRzIHBhc3NlZCBmcm9tIHRoZSBnZW5lcmF0ZWQgY2xpZW50XG4gKiBAcGFyYW0gcGFyYW1ldGVyIC0gVGhlIHBhcmFtZXRlciBkZXNjcmlwdGlvblxuICogQHBhcmFtIGZhbGxiYWNrT2JqZWN0IC0gSWYgc29tZXRoaW5nIGlzbid0IGZvdW5kIGluIHRoZSBhcmd1bWVudHMgYmFnLCBsb29rIGhlcmUuXG4gKiAgR2VuZXJhbGx5IHVzZWQgdG8gbG9vayBhdCB0aGUgc2VydmljZSBjbGllbnQgcHJvcGVydGllcy5cbiAqL1xuZnVuY3Rpb24gZ2V0T3BlcmF0aW9uQXJndW1lbnRWYWx1ZUZyb21QYXJhbWV0ZXIob3BlcmF0aW9uQXJndW1lbnRzLCBwYXJhbWV0ZXIsIGZhbGxiYWNrT2JqZWN0KSB7XG4gICAgbGV0IHBhcmFtZXRlclBhdGggPSBwYXJhbWV0ZXIucGFyYW1ldGVyUGF0aDtcbiAgICBjb25zdCBwYXJhbWV0ZXJNYXBwZXIgPSBwYXJhbWV0ZXIubWFwcGVyO1xuICAgIGxldCB2YWx1ZTtcbiAgICBpZiAodHlwZW9mIHBhcmFtZXRlclBhdGggPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcGFyYW1ldGVyUGF0aCA9IFtwYXJhbWV0ZXJQYXRoXTtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocGFyYW1ldGVyUGF0aCkpIHtcbiAgICAgICAgaWYgKHBhcmFtZXRlclBhdGgubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgaWYgKHBhcmFtZXRlck1hcHBlci5pc0NvbnN0YW50KSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBwYXJhbWV0ZXJNYXBwZXIuZGVmYXVsdFZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbGV0IHByb3BlcnR5U2VhcmNoUmVzdWx0ID0gZ2V0UHJvcGVydHlGcm9tUGFyYW1ldGVyUGF0aChvcGVyYXRpb25Bcmd1bWVudHMsIHBhcmFtZXRlclBhdGgpO1xuICAgICAgICAgICAgICAgIGlmICghcHJvcGVydHlTZWFyY2hSZXN1bHQucHJvcGVydHlGb3VuZCAmJiBmYWxsYmFja09iamVjdCkge1xuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eVNlYXJjaFJlc3VsdCA9IGdldFByb3BlcnR5RnJvbVBhcmFtZXRlclBhdGgoZmFsbGJhY2tPYmplY3QsIHBhcmFtZXRlclBhdGgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsZXQgdXNlRGVmYXVsdFZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaWYgKCFwcm9wZXJ0eVNlYXJjaFJlc3VsdC5wcm9wZXJ0eUZvdW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIHVzZURlZmF1bHRWYWx1ZSA9XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJNYXBwZXIucmVxdWlyZWQgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAocGFyYW1ldGVyUGF0aFswXSA9PT0gXCJvcHRpb25zXCIgJiYgcGFyYW1ldGVyUGF0aC5sZW5ndGggPT09IDIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHVzZURlZmF1bHRWYWx1ZSA/IHBhcmFtZXRlck1hcHBlci5kZWZhdWx0VmFsdWUgOiBwcm9wZXJ0eVNlYXJjaFJlc3VsdC5wcm9wZXJ0eVZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAocGFyYW1ldGVyTWFwcGVyLnJlcXVpcmVkKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgcHJvcGVydHlOYW1lIGluIHBhcmFtZXRlclBhdGgpIHtcbiAgICAgICAgICAgIGNvbnN0IHByb3BlcnR5TWFwcGVyID0gcGFyYW1ldGVyTWFwcGVyLnR5cGUubW9kZWxQcm9wZXJ0aWVzW3Byb3BlcnR5TmFtZV07XG4gICAgICAgICAgICBjb25zdCBwcm9wZXJ0eVBhdGggPSBwYXJhbWV0ZXJQYXRoW3Byb3BlcnR5TmFtZV07XG4gICAgICAgICAgICBjb25zdCBwcm9wZXJ0eVZhbHVlID0gZ2V0T3BlcmF0aW9uQXJndW1lbnRWYWx1ZUZyb21QYXJhbWV0ZXIob3BlcmF0aW9uQXJndW1lbnRzLCB7XG4gICAgICAgICAgICAgICAgcGFyYW1ldGVyUGF0aDogcHJvcGVydHlQYXRoLFxuICAgICAgICAgICAgICAgIG1hcHBlcjogcHJvcGVydHlNYXBwZXIsXG4gICAgICAgICAgICB9LCBmYWxsYmFja09iamVjdCk7XG4gICAgICAgICAgICBpZiAocHJvcGVydHlWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHt9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YWx1ZVtwcm9wZXJ0eU5hbWVdID0gcHJvcGVydHlWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiBnZXRQcm9wZXJ0eUZyb21QYXJhbWV0ZXJQYXRoKHBhcmVudCwgcGFyYW1ldGVyUGF0aCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IHsgcHJvcGVydHlGb3VuZDogZmFsc2UgfTtcbiAgICBsZXQgaSA9IDA7XG4gICAgZm9yICg7IGkgPCBwYXJhbWV0ZXJQYXRoLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNvbnN0IHBhcmFtZXRlclBhdGhQYXJ0ID0gcGFyYW1ldGVyUGF0aFtpXTtcbiAgICAgICAgLy8gTWFrZSBzdXJlIHRvIGNoZWNrIGluaGVyaXRlZCBwcm9wZXJ0aWVzIHRvbywgc28gZG9uJ3QgdXNlIGhhc093blByb3BlcnR5KCkuXG4gICAgICAgIGlmIChwYXJlbnQgJiYgcGFyYW1ldGVyUGF0aFBhcnQgaW4gcGFyZW50KSB7XG4gICAgICAgICAgICBwYXJlbnQgPSBwYXJlbnRbcGFyYW1ldGVyUGF0aFBhcnRdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGkgPT09IHBhcmFtZXRlclBhdGgubGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdC5wcm9wZXJ0eVZhbHVlID0gcGFyZW50O1xuICAgICAgICByZXN1bHQucHJvcGVydHlGb3VuZCA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5jb25zdCBvcmlnaW5hbFJlcXVlc3RTeW1ib2wgPSBTeW1ib2wuZm9yKFwiQGF6dXJlL2NvcmUtY2xpZW50IG9yaWdpbmFsIHJlcXVlc3RcIik7XG5mdW5jdGlvbiBoYXNPcmlnaW5hbFJlcXVlc3QocmVxdWVzdCkge1xuICAgIHJldHVybiBvcmlnaW5hbFJlcXVlc3RTeW1ib2wgaW4gcmVxdWVzdDtcbn1cbmZ1bmN0aW9uIGdldE9wZXJhdGlvblJlcXVlc3RJbmZvKHJlcXVlc3QpIHtcbiAgICBpZiAoaGFzT3JpZ2luYWxSZXF1ZXN0KHJlcXVlc3QpKSB7XG4gICAgICAgIHJldHVybiBnZXRPcGVyYXRpb25SZXF1ZXN0SW5mbyhyZXF1ZXN0W29yaWdpbmFsUmVxdWVzdFN5bWJvbF0pO1xuICAgIH1cbiAgICBsZXQgaW5mbyA9IHN0YXRlX2pzXzEuc3RhdGUub3BlcmF0aW9uUmVxdWVzdE1hcC5nZXQocmVxdWVzdCk7XG4gICAgaWYgKCFpbmZvKSB7XG4gICAgICAgIGluZm8gPSB7fTtcbiAgICAgICAgc3RhdGVfanNfMS5zdGF0ZS5vcGVyYXRpb25SZXF1ZXN0TWFwLnNldChyZXF1ZXN0LCBpbmZvKTtcbiAgICB9XG4gICAgcmV0dXJuIGluZm87XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vcGVyYXRpb25IZWxwZXJzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/commonjs/operationHelpers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/commonjs/pipeline.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/commonjs/pipeline.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createClientPipeline = createClientPipeline;\nconst deserializationPolicy_js_1 = __webpack_require__(/*! ./deserializationPolicy.js */ \"(rsc)/./node_modules/@azure/core-client/dist/commonjs/deserializationPolicy.js\");\nconst core_rest_pipeline_1 = __webpack_require__(/*! @azure/core-rest-pipeline */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/index.js\");\nconst serializationPolicy_js_1 = __webpack_require__(/*! ./serializationPolicy.js */ \"(rsc)/./node_modules/@azure/core-client/dist/commonjs/serializationPolicy.js\");\n/**\n * Creates a new Pipeline for use with a Service Client.\n * Adds in deserializationPolicy by default.\n * Also adds in bearerTokenAuthenticationPolicy if passed a TokenCredential.\n * @param options - Options to customize the created pipeline.\n */\nfunction createClientPipeline(options = {}) {\n    const pipeline = (0, core_rest_pipeline_1.createPipelineFromOptions)(options !== null && options !== void 0 ? options : {});\n    if (options.credentialOptions) {\n        pipeline.addPolicy((0, core_rest_pipeline_1.bearerTokenAuthenticationPolicy)({\n            credential: options.credentialOptions.credential,\n            scopes: options.credentialOptions.credentialScopes,\n        }));\n    }\n    pipeline.addPolicy((0, serializationPolicy_js_1.serializationPolicy)(options.serializationOptions), { phase: \"Serialize\" });\n    pipeline.addPolicy((0, deserializationPolicy_js_1.deserializationPolicy)(options.deserializationOptions), {\n        phase: \"Deserialize\",\n    });\n    return pipeline;\n}\n//# sourceMappingURL=pipeline.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvY29tbW9uanMvcGlwZWxpbmUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDRCQUE0QjtBQUM1QixtQ0FBbUMsbUJBQU8sQ0FBQyxrSEFBNEI7QUFDdkUsNkJBQTZCLG1CQUFPLENBQUMsd0dBQTJCO0FBQ2hFLGlDQUFpQyxtQkFBTyxDQUFDLDhHQUEwQjtBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEM7QUFDMUMsOEhBQThIO0FBQzlIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsMEdBQTBHLG9CQUFvQjtBQUM5SDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvY29tbW9uanMvcGlwZWxpbmUuanM/MGEzNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jcmVhdGVDbGllbnRQaXBlbGluZSA9IGNyZWF0ZUNsaWVudFBpcGVsaW5lO1xuY29uc3QgZGVzZXJpYWxpemF0aW9uUG9saWN5X2pzXzEgPSByZXF1aXJlKFwiLi9kZXNlcmlhbGl6YXRpb25Qb2xpY3kuanNcIik7XG5jb25zdCBjb3JlX3Jlc3RfcGlwZWxpbmVfMSA9IHJlcXVpcmUoXCJAYXp1cmUvY29yZS1yZXN0LXBpcGVsaW5lXCIpO1xuY29uc3Qgc2VyaWFsaXphdGlvblBvbGljeV9qc18xID0gcmVxdWlyZShcIi4vc2VyaWFsaXphdGlvblBvbGljeS5qc1wiKTtcbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBQaXBlbGluZSBmb3IgdXNlIHdpdGggYSBTZXJ2aWNlIENsaWVudC5cbiAqIEFkZHMgaW4gZGVzZXJpYWxpemF0aW9uUG9saWN5IGJ5IGRlZmF1bHQuXG4gKiBBbHNvIGFkZHMgaW4gYmVhcmVyVG9rZW5BdXRoZW50aWNhdGlvblBvbGljeSBpZiBwYXNzZWQgYSBUb2tlbkNyZWRlbnRpYWwuXG4gKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgdG8gY3VzdG9taXplIHRoZSBjcmVhdGVkIHBpcGVsaW5lLlxuICovXG5mdW5jdGlvbiBjcmVhdGVDbGllbnRQaXBlbGluZShvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBwaXBlbGluZSA9ICgwLCBjb3JlX3Jlc3RfcGlwZWxpbmVfMS5jcmVhdGVQaXBlbGluZUZyb21PcHRpb25zKShvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCA/IG9wdGlvbnMgOiB7fSk7XG4gICAgaWYgKG9wdGlvbnMuY3JlZGVudGlhbE9wdGlvbnMpIHtcbiAgICAgICAgcGlwZWxpbmUuYWRkUG9saWN5KCgwLCBjb3JlX3Jlc3RfcGlwZWxpbmVfMS5iZWFyZXJUb2tlbkF1dGhlbnRpY2F0aW9uUG9saWN5KSh7XG4gICAgICAgICAgICBjcmVkZW50aWFsOiBvcHRpb25zLmNyZWRlbnRpYWxPcHRpb25zLmNyZWRlbnRpYWwsXG4gICAgICAgICAgICBzY29wZXM6IG9wdGlvbnMuY3JlZGVudGlhbE9wdGlvbnMuY3JlZGVudGlhbFNjb3BlcyxcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBwaXBlbGluZS5hZGRQb2xpY3koKDAsIHNlcmlhbGl6YXRpb25Qb2xpY3lfanNfMS5zZXJpYWxpemF0aW9uUG9saWN5KShvcHRpb25zLnNlcmlhbGl6YXRpb25PcHRpb25zKSwgeyBwaGFzZTogXCJTZXJpYWxpemVcIiB9KTtcbiAgICBwaXBlbGluZS5hZGRQb2xpY3koKDAsIGRlc2VyaWFsaXphdGlvblBvbGljeV9qc18xLmRlc2VyaWFsaXphdGlvblBvbGljeSkob3B0aW9ucy5kZXNlcmlhbGl6YXRpb25PcHRpb25zKSwge1xuICAgICAgICBwaGFzZTogXCJEZXNlcmlhbGl6ZVwiLFxuICAgIH0pO1xuICAgIHJldHVybiBwaXBlbGluZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBpcGVsaW5lLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/commonjs/pipeline.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/commonjs/serializationPolicy.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/commonjs/serializationPolicy.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.serializationPolicyName = void 0;\nexports.serializationPolicy = serializationPolicy;\nexports.serializeHeaders = serializeHeaders;\nexports.serializeRequestBody = serializeRequestBody;\nconst interfaces_js_1 = __webpack_require__(/*! ./interfaces.js */ \"(rsc)/./node_modules/@azure/core-client/dist/commonjs/interfaces.js\");\nconst operationHelpers_js_1 = __webpack_require__(/*! ./operationHelpers.js */ \"(rsc)/./node_modules/@azure/core-client/dist/commonjs/operationHelpers.js\");\nconst serializer_js_1 = __webpack_require__(/*! ./serializer.js */ \"(rsc)/./node_modules/@azure/core-client/dist/commonjs/serializer.js\");\nconst interfaceHelpers_js_1 = __webpack_require__(/*! ./interfaceHelpers.js */ \"(rsc)/./node_modules/@azure/core-client/dist/commonjs/interfaceHelpers.js\");\n/**\n * The programmatic identifier of the serializationPolicy.\n */\nexports.serializationPolicyName = \"serializationPolicy\";\n/**\n * This policy handles assembling the request body and headers using\n * an OperationSpec and OperationArguments on the request.\n */\nfunction serializationPolicy(options = {}) {\n    const stringifyXML = options.stringifyXML;\n    return {\n        name: exports.serializationPolicyName,\n        async sendRequest(request, next) {\n            const operationInfo = (0, operationHelpers_js_1.getOperationRequestInfo)(request);\n            const operationSpec = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationSpec;\n            const operationArguments = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationArguments;\n            if (operationSpec && operationArguments) {\n                serializeHeaders(request, operationArguments, operationSpec);\n                serializeRequestBody(request, operationArguments, operationSpec, stringifyXML);\n            }\n            return next(request);\n        },\n    };\n}\n/**\n * @internal\n */\nfunction serializeHeaders(request, operationArguments, operationSpec) {\n    var _a, _b;\n    if (operationSpec.headerParameters) {\n        for (const headerParameter of operationSpec.headerParameters) {\n            let headerValue = (0, operationHelpers_js_1.getOperationArgumentValueFromParameter)(operationArguments, headerParameter);\n            if ((headerValue !== null && headerValue !== undefined) || headerParameter.mapper.required) {\n                headerValue = operationSpec.serializer.serialize(headerParameter.mapper, headerValue, (0, interfaceHelpers_js_1.getPathStringFromParameter)(headerParameter));\n                const headerCollectionPrefix = headerParameter.mapper\n                    .headerCollectionPrefix;\n                if (headerCollectionPrefix) {\n                    for (const key of Object.keys(headerValue)) {\n                        request.headers.set(headerCollectionPrefix + key, headerValue[key]);\n                    }\n                }\n                else {\n                    request.headers.set(headerParameter.mapper.serializedName || (0, interfaceHelpers_js_1.getPathStringFromParameter)(headerParameter), headerValue);\n                }\n            }\n        }\n    }\n    const customHeaders = (_b = (_a = operationArguments.options) === null || _a === void 0 ? void 0 : _a.requestOptions) === null || _b === void 0 ? void 0 : _b.customHeaders;\n    if (customHeaders) {\n        for (const customHeaderName of Object.keys(customHeaders)) {\n            request.headers.set(customHeaderName, customHeaders[customHeaderName]);\n        }\n    }\n}\n/**\n * @internal\n */\nfunction serializeRequestBody(request, operationArguments, operationSpec, stringifyXML = function () {\n    throw new Error(\"XML serialization unsupported!\");\n}) {\n    var _a, _b, _c, _d, _e;\n    const serializerOptions = (_a = operationArguments.options) === null || _a === void 0 ? void 0 : _a.serializerOptions;\n    const updatedOptions = {\n        xml: {\n            rootName: (_b = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.rootName) !== null && _b !== void 0 ? _b : \"\",\n            includeRoot: (_c = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.includeRoot) !== null && _c !== void 0 ? _c : false,\n            xmlCharKey: (_d = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.xmlCharKey) !== null && _d !== void 0 ? _d : interfaces_js_1.XML_CHARKEY,\n        },\n    };\n    const xmlCharKey = updatedOptions.xml.xmlCharKey;\n    if (operationSpec.requestBody && operationSpec.requestBody.mapper) {\n        request.body = (0, operationHelpers_js_1.getOperationArgumentValueFromParameter)(operationArguments, operationSpec.requestBody);\n        const bodyMapper = operationSpec.requestBody.mapper;\n        const { required, serializedName, xmlName, xmlElementName, xmlNamespace, xmlNamespacePrefix, nullable, } = bodyMapper;\n        const typeName = bodyMapper.type.name;\n        try {\n            if ((request.body !== undefined && request.body !== null) ||\n                (nullable && request.body === null) ||\n                required) {\n                const requestBodyParameterPathString = (0, interfaceHelpers_js_1.getPathStringFromParameter)(operationSpec.requestBody);\n                request.body = operationSpec.serializer.serialize(bodyMapper, request.body, requestBodyParameterPathString, updatedOptions);\n                const isStream = typeName === serializer_js_1.MapperTypeNames.Stream;\n                if (operationSpec.isXML) {\n                    const xmlnsKey = xmlNamespacePrefix ? `xmlns:${xmlNamespacePrefix}` : \"xmlns\";\n                    const value = getXmlValueWithNamespace(xmlNamespace, xmlnsKey, typeName, request.body, updatedOptions);\n                    if (typeName === serializer_js_1.MapperTypeNames.Sequence) {\n                        request.body = stringifyXML(prepareXMLRootList(value, xmlElementName || xmlName || serializedName, xmlnsKey, xmlNamespace), { rootName: xmlName || serializedName, xmlCharKey });\n                    }\n                    else if (!isStream) {\n                        request.body = stringifyXML(value, {\n                            rootName: xmlName || serializedName,\n                            xmlCharKey,\n                        });\n                    }\n                }\n                else if (typeName === serializer_js_1.MapperTypeNames.String &&\n                    (((_e = operationSpec.contentType) === null || _e === void 0 ? void 0 : _e.match(\"text/plain\")) || operationSpec.mediaType === \"text\")) {\n                    // the String serializer has validated that request body is a string\n                    // so just send the string.\n                    return;\n                }\n                else if (!isStream) {\n                    request.body = JSON.stringify(request.body);\n                }\n            }\n        }\n        catch (error) {\n            throw new Error(`Error \"${error.message}\" occurred in serializing the payload - ${JSON.stringify(serializedName, undefined, \"  \")}.`);\n        }\n    }\n    else if (operationSpec.formDataParameters && operationSpec.formDataParameters.length > 0) {\n        request.formData = {};\n        for (const formDataParameter of operationSpec.formDataParameters) {\n            const formDataParameterValue = (0, operationHelpers_js_1.getOperationArgumentValueFromParameter)(operationArguments, formDataParameter);\n            if (formDataParameterValue !== undefined && formDataParameterValue !== null) {\n                const formDataParameterPropertyName = formDataParameter.mapper.serializedName || (0, interfaceHelpers_js_1.getPathStringFromParameter)(formDataParameter);\n                request.formData[formDataParameterPropertyName] = operationSpec.serializer.serialize(formDataParameter.mapper, formDataParameterValue, (0, interfaceHelpers_js_1.getPathStringFromParameter)(formDataParameter), updatedOptions);\n            }\n        }\n    }\n}\n/**\n * Adds an xml namespace to the xml serialized object if needed, otherwise it just returns the value itself\n */\nfunction getXmlValueWithNamespace(xmlNamespace, xmlnsKey, typeName, serializedValue, options) {\n    // Composite and Sequence schemas already got their root namespace set during serialization\n    // We just need to add xmlns to the other schema types\n    if (xmlNamespace && ![\"Composite\", \"Sequence\", \"Dictionary\"].includes(typeName)) {\n        const result = {};\n        result[options.xml.xmlCharKey] = serializedValue;\n        result[interfaces_js_1.XML_ATTRKEY] = { [xmlnsKey]: xmlNamespace };\n        return result;\n    }\n    return serializedValue;\n}\nfunction prepareXMLRootList(obj, elementName, xmlNamespaceKey, xmlNamespace) {\n    if (!Array.isArray(obj)) {\n        obj = [obj];\n    }\n    if (!xmlNamespaceKey || !xmlNamespace) {\n        return { [elementName]: obj };\n    }\n    const result = { [elementName]: obj };\n    result[interfaces_js_1.XML_ATTRKEY] = { [xmlNamespaceKey]: xmlNamespace };\n    return result;\n}\n//# sourceMappingURL=serializationPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/commonjs/serializationPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/commonjs/serializer.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/commonjs/serializer.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MapperTypeNames = void 0;\nexports.createSerializer = createSerializer;\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\nconst base64 = tslib_1.__importStar(__webpack_require__(/*! ./base64.js */ \"(rsc)/./node_modules/@azure/core-client/dist/commonjs/base64.js\"));\nconst interfaces_js_1 = __webpack_require__(/*! ./interfaces.js */ \"(rsc)/./node_modules/@azure/core-client/dist/commonjs/interfaces.js\");\nconst utils_js_1 = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/@azure/core-client/dist/commonjs/utils.js\");\nclass SerializerImpl {\n    constructor(modelMappers = {}, isXML = false) {\n        this.modelMappers = modelMappers;\n        this.isXML = isXML;\n    }\n    /**\n     * @deprecated Removing the constraints validation on client side.\n     */\n    validateConstraints(mapper, value, objectName) {\n        const failValidation = (constraintName, constraintValue) => {\n            throw new Error(`\"${objectName}\" with value \"${value}\" should satisfy the constraint \"${constraintName}\": ${constraintValue}.`);\n        };\n        if (mapper.constraints && value !== undefined && value !== null) {\n            const { ExclusiveMaximum, ExclusiveMinimum, InclusiveMaximum, InclusiveMinimum, MaxItems, MaxLength, MinItems, MinLength, MultipleOf, Pattern, UniqueItems, } = mapper.constraints;\n            if (ExclusiveMaximum !== undefined && value >= ExclusiveMaximum) {\n                failValidation(\"ExclusiveMaximum\", ExclusiveMaximum);\n            }\n            if (ExclusiveMinimum !== undefined && value <= ExclusiveMinimum) {\n                failValidation(\"ExclusiveMinimum\", ExclusiveMinimum);\n            }\n            if (InclusiveMaximum !== undefined && value > InclusiveMaximum) {\n                failValidation(\"InclusiveMaximum\", InclusiveMaximum);\n            }\n            if (InclusiveMinimum !== undefined && value < InclusiveMinimum) {\n                failValidation(\"InclusiveMinimum\", InclusiveMinimum);\n            }\n            if (MaxItems !== undefined && value.length > MaxItems) {\n                failValidation(\"MaxItems\", MaxItems);\n            }\n            if (MaxLength !== undefined && value.length > MaxLength) {\n                failValidation(\"MaxLength\", MaxLength);\n            }\n            if (MinItems !== undefined && value.length < MinItems) {\n                failValidation(\"MinItems\", MinItems);\n            }\n            if (MinLength !== undefined && value.length < MinLength) {\n                failValidation(\"MinLength\", MinLength);\n            }\n            if (MultipleOf !== undefined && value % MultipleOf !== 0) {\n                failValidation(\"MultipleOf\", MultipleOf);\n            }\n            if (Pattern) {\n                const pattern = typeof Pattern === \"string\" ? new RegExp(Pattern) : Pattern;\n                if (typeof value !== \"string\" || value.match(pattern) === null) {\n                    failValidation(\"Pattern\", Pattern);\n                }\n            }\n            if (UniqueItems &&\n                value.some((item, i, ar) => ar.indexOf(item) !== i)) {\n                failValidation(\"UniqueItems\", UniqueItems);\n            }\n        }\n    }\n    /**\n     * Serialize the given object based on its metadata defined in the mapper\n     *\n     * @param mapper - The mapper which defines the metadata of the serializable object\n     *\n     * @param object - A valid Javascript object to be serialized\n     *\n     * @param objectName - Name of the serialized object\n     *\n     * @param options - additional options to serialization\n     *\n     * @returns A valid serialized Javascript object\n     */\n    serialize(mapper, object, objectName, options = { xml: {} }) {\n        var _a, _b, _c;\n        const updatedOptions = {\n            xml: {\n                rootName: (_a = options.xml.rootName) !== null && _a !== void 0 ? _a : \"\",\n                includeRoot: (_b = options.xml.includeRoot) !== null && _b !== void 0 ? _b : false,\n                xmlCharKey: (_c = options.xml.xmlCharKey) !== null && _c !== void 0 ? _c : interfaces_js_1.XML_CHARKEY,\n            },\n        };\n        let payload = {};\n        const mapperType = mapper.type.name;\n        if (!objectName) {\n            objectName = mapper.serializedName;\n        }\n        if (mapperType.match(/^Sequence$/i) !== null) {\n            payload = [];\n        }\n        if (mapper.isConstant) {\n            object = mapper.defaultValue;\n        }\n        // This table of allowed values should help explain\n        // the mapper.required and mapper.nullable properties.\n        // X means \"neither undefined or null are allowed\".\n        //           || required\n        //           || true      | false\n        //  nullable || ==========================\n        //      true || null      | undefined/null\n        //     false || X         | undefined\n        // undefined || X         | undefined/null\n        const { required, nullable } = mapper;\n        if (required && nullable && object === undefined) {\n            throw new Error(`${objectName} cannot be undefined.`);\n        }\n        if (required && !nullable && (object === undefined || object === null)) {\n            throw new Error(`${objectName} cannot be null or undefined.`);\n        }\n        if (!required && nullable === false && object === null) {\n            throw new Error(`${objectName} cannot be null.`);\n        }\n        if (object === undefined || object === null) {\n            payload = object;\n        }\n        else {\n            if (mapperType.match(/^any$/i) !== null) {\n                payload = object;\n            }\n            else if (mapperType.match(/^(Number|String|Boolean|Object|Stream|Uuid)$/i) !== null) {\n                payload = serializeBasicTypes(mapperType, objectName, object);\n            }\n            else if (mapperType.match(/^Enum$/i) !== null) {\n                const enumMapper = mapper;\n                payload = serializeEnumType(objectName, enumMapper.type.allowedValues, object);\n            }\n            else if (mapperType.match(/^(Date|DateTime|TimeSpan|DateTimeRfc1123|UnixTime)$/i) !== null) {\n                payload = serializeDateTypes(mapperType, object, objectName);\n            }\n            else if (mapperType.match(/^ByteArray$/i) !== null) {\n                payload = serializeByteArrayType(objectName, object);\n            }\n            else if (mapperType.match(/^Base64Url$/i) !== null) {\n                payload = serializeBase64UrlType(objectName, object);\n            }\n            else if (mapperType.match(/^Sequence$/i) !== null) {\n                payload = serializeSequenceType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);\n            }\n            else if (mapperType.match(/^Dictionary$/i) !== null) {\n                payload = serializeDictionaryType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);\n            }\n            else if (mapperType.match(/^Composite$/i) !== null) {\n                payload = serializeCompositeType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);\n            }\n        }\n        return payload;\n    }\n    /**\n     * Deserialize the given object based on its metadata defined in the mapper\n     *\n     * @param mapper - The mapper which defines the metadata of the serializable object\n     *\n     * @param responseBody - A valid Javascript entity to be deserialized\n     *\n     * @param objectName - Name of the deserialized object\n     *\n     * @param options - Controls behavior of XML parser and builder.\n     *\n     * @returns A valid deserialized Javascript object\n     */\n    deserialize(mapper, responseBody, objectName, options = { xml: {} }) {\n        var _a, _b, _c, _d;\n        const updatedOptions = {\n            xml: {\n                rootName: (_a = options.xml.rootName) !== null && _a !== void 0 ? _a : \"\",\n                includeRoot: (_b = options.xml.includeRoot) !== null && _b !== void 0 ? _b : false,\n                xmlCharKey: (_c = options.xml.xmlCharKey) !== null && _c !== void 0 ? _c : interfaces_js_1.XML_CHARKEY,\n            },\n            ignoreUnknownProperties: (_d = options.ignoreUnknownProperties) !== null && _d !== void 0 ? _d : false,\n        };\n        if (responseBody === undefined || responseBody === null) {\n            if (this.isXML && mapper.type.name === \"Sequence\" && !mapper.xmlIsWrapped) {\n                // Edge case for empty XML non-wrapped lists. xml2js can't distinguish\n                // between the list being empty versus being missing,\n                // so let's do the more user-friendly thing and return an empty list.\n                responseBody = [];\n            }\n            // specifically check for undefined as default value can be a falsey value `0, \"\", false, null`\n            if (mapper.defaultValue !== undefined) {\n                responseBody = mapper.defaultValue;\n            }\n            return responseBody;\n        }\n        let payload;\n        const mapperType = mapper.type.name;\n        if (!objectName) {\n            objectName = mapper.serializedName;\n        }\n        if (mapperType.match(/^Composite$/i) !== null) {\n            payload = deserializeCompositeType(this, mapper, responseBody, objectName, updatedOptions);\n        }\n        else {\n            if (this.isXML) {\n                const xmlCharKey = updatedOptions.xml.xmlCharKey;\n                /**\n                 * If the mapper specifies this as a non-composite type value but the responseBody contains\n                 * both header (\"$\" i.e., XML_ATTRKEY) and body (\"#\" i.e., XML_CHARKEY) properties,\n                 * then just reduce the responseBody value to the body (\"#\" i.e., XML_CHARKEY) property.\n                 */\n                if (responseBody[interfaces_js_1.XML_ATTRKEY] !== undefined && responseBody[xmlCharKey] !== undefined) {\n                    responseBody = responseBody[xmlCharKey];\n                }\n            }\n            if (mapperType.match(/^Number$/i) !== null) {\n                payload = parseFloat(responseBody);\n                if (isNaN(payload)) {\n                    payload = responseBody;\n                }\n            }\n            else if (mapperType.match(/^Boolean$/i) !== null) {\n                if (responseBody === \"true\") {\n                    payload = true;\n                }\n                else if (responseBody === \"false\") {\n                    payload = false;\n                }\n                else {\n                    payload = responseBody;\n                }\n            }\n            else if (mapperType.match(/^(String|Enum|Object|Stream|Uuid|TimeSpan|any)$/i) !== null) {\n                payload = responseBody;\n            }\n            else if (mapperType.match(/^(Date|DateTime|DateTimeRfc1123)$/i) !== null) {\n                payload = new Date(responseBody);\n            }\n            else if (mapperType.match(/^UnixTime$/i) !== null) {\n                payload = unixTimeToDate(responseBody);\n            }\n            else if (mapperType.match(/^ByteArray$/i) !== null) {\n                payload = base64.decodeString(responseBody);\n            }\n            else if (mapperType.match(/^Base64Url$/i) !== null) {\n                payload = base64UrlToByteArray(responseBody);\n            }\n            else if (mapperType.match(/^Sequence$/i) !== null) {\n                payload = deserializeSequenceType(this, mapper, responseBody, objectName, updatedOptions);\n            }\n            else if (mapperType.match(/^Dictionary$/i) !== null) {\n                payload = deserializeDictionaryType(this, mapper, responseBody, objectName, updatedOptions);\n            }\n        }\n        if (mapper.isConstant) {\n            payload = mapper.defaultValue;\n        }\n        return payload;\n    }\n}\n/**\n * Method that creates and returns a Serializer.\n * @param modelMappers - Known models to map\n * @param isXML - If XML should be supported\n */\nfunction createSerializer(modelMappers = {}, isXML = false) {\n    return new SerializerImpl(modelMappers, isXML);\n}\nfunction trimEnd(str, ch) {\n    let len = str.length;\n    while (len - 1 >= 0 && str[len - 1] === ch) {\n        --len;\n    }\n    return str.substr(0, len);\n}\nfunction bufferToBase64Url(buffer) {\n    if (!buffer) {\n        return undefined;\n    }\n    if (!(buffer instanceof Uint8Array)) {\n        throw new Error(`Please provide an input of type Uint8Array for converting to Base64Url.`);\n    }\n    // Uint8Array to Base64.\n    const str = base64.encodeByteArray(buffer);\n    // Base64 to Base64Url.\n    return trimEnd(str, \"=\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n}\nfunction base64UrlToByteArray(str) {\n    if (!str) {\n        return undefined;\n    }\n    if (str && typeof str.valueOf() !== \"string\") {\n        throw new Error(\"Please provide an input of type string for converting to Uint8Array\");\n    }\n    // Base64Url to Base64.\n    str = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    // Base64 to Uint8Array.\n    return base64.decodeString(str);\n}\nfunction splitSerializeName(prop) {\n    const classes = [];\n    let partialclass = \"\";\n    if (prop) {\n        const subwords = prop.split(\".\");\n        for (const item of subwords) {\n            if (item.charAt(item.length - 1) === \"\\\\\") {\n                partialclass += item.substr(0, item.length - 1) + \".\";\n            }\n            else {\n                partialclass += item;\n                classes.push(partialclass);\n                partialclass = \"\";\n            }\n        }\n    }\n    return classes;\n}\nfunction dateToUnixTime(d) {\n    if (!d) {\n        return undefined;\n    }\n    if (typeof d.valueOf() === \"string\") {\n        d = new Date(d);\n    }\n    return Math.floor(d.getTime() / 1000);\n}\nfunction unixTimeToDate(n) {\n    if (!n) {\n        return undefined;\n    }\n    return new Date(n * 1000);\n}\nfunction serializeBasicTypes(typeName, objectName, value) {\n    if (value !== null && value !== undefined) {\n        if (typeName.match(/^Number$/i) !== null) {\n            if (typeof value !== \"number\") {\n                throw new Error(`${objectName} with value ${value} must be of type number.`);\n            }\n        }\n        else if (typeName.match(/^String$/i) !== null) {\n            if (typeof value.valueOf() !== \"string\") {\n                throw new Error(`${objectName} with value \"${value}\" must be of type string.`);\n            }\n        }\n        else if (typeName.match(/^Uuid$/i) !== null) {\n            if (!(typeof value.valueOf() === \"string\" && (0, utils_js_1.isValidUuid)(value))) {\n                throw new Error(`${objectName} with value \"${value}\" must be of type string and a valid uuid.`);\n            }\n        }\n        else if (typeName.match(/^Boolean$/i) !== null) {\n            if (typeof value !== \"boolean\") {\n                throw new Error(`${objectName} with value ${value} must be of type boolean.`);\n            }\n        }\n        else if (typeName.match(/^Stream$/i) !== null) {\n            const objectType = typeof value;\n            if (objectType !== \"string\" &&\n                typeof value.pipe !== \"function\" && // NodeJS.ReadableStream\n                typeof value.tee !== \"function\" && // browser ReadableStream\n                !(value instanceof ArrayBuffer) &&\n                !ArrayBuffer.isView(value) &&\n                // File objects count as a type of Blob, so we want to use instanceof explicitly\n                !((typeof Blob === \"function\" || typeof Blob === \"object\") && value instanceof Blob) &&\n                objectType !== \"function\") {\n                throw new Error(`${objectName} must be a string, Blob, ArrayBuffer, ArrayBufferView, ReadableStream, or () => ReadableStream.`);\n            }\n        }\n    }\n    return value;\n}\nfunction serializeEnumType(objectName, allowedValues, value) {\n    if (!allowedValues) {\n        throw new Error(`Please provide a set of allowedValues to validate ${objectName} as an Enum Type.`);\n    }\n    const isPresent = allowedValues.some((item) => {\n        if (typeof item.valueOf() === \"string\") {\n            return item.toLowerCase() === value.toLowerCase();\n        }\n        return item === value;\n    });\n    if (!isPresent) {\n        throw new Error(`${value} is not a valid value for ${objectName}. The valid values are: ${JSON.stringify(allowedValues)}.`);\n    }\n    return value;\n}\nfunction serializeByteArrayType(objectName, value) {\n    if (value !== undefined && value !== null) {\n        if (!(value instanceof Uint8Array)) {\n            throw new Error(`${objectName} must be of type Uint8Array.`);\n        }\n        value = base64.encodeByteArray(value);\n    }\n    return value;\n}\nfunction serializeBase64UrlType(objectName, value) {\n    if (value !== undefined && value !== null) {\n        if (!(value instanceof Uint8Array)) {\n            throw new Error(`${objectName} must be of type Uint8Array.`);\n        }\n        value = bufferToBase64Url(value);\n    }\n    return value;\n}\nfunction serializeDateTypes(typeName, value, objectName) {\n    if (value !== undefined && value !== null) {\n        if (typeName.match(/^Date$/i) !== null) {\n            if (!(value instanceof Date ||\n                (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value))))) {\n                throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);\n            }\n            value =\n                value instanceof Date\n                    ? value.toISOString().substring(0, 10)\n                    : new Date(value).toISOString().substring(0, 10);\n        }\n        else if (typeName.match(/^DateTime$/i) !== null) {\n            if (!(value instanceof Date ||\n                (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value))))) {\n                throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);\n            }\n            value = value instanceof Date ? value.toISOString() : new Date(value).toISOString();\n        }\n        else if (typeName.match(/^DateTimeRfc1123$/i) !== null) {\n            if (!(value instanceof Date ||\n                (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value))))) {\n                throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123 format.`);\n            }\n            value = value instanceof Date ? value.toUTCString() : new Date(value).toUTCString();\n        }\n        else if (typeName.match(/^UnixTime$/i) !== null) {\n            if (!(value instanceof Date ||\n                (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value))))) {\n                throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123/ISO8601 format ` +\n                    `for it to be serialized in UnixTime/Epoch format.`);\n            }\n            value = dateToUnixTime(value);\n        }\n        else if (typeName.match(/^TimeSpan$/i) !== null) {\n            if (!(0, utils_js_1.isDuration)(value)) {\n                throw new Error(`${objectName} must be a string in ISO 8601 format. Instead was \"${value}\".`);\n            }\n        }\n    }\n    return value;\n}\nfunction serializeSequenceType(serializer, mapper, object, objectName, isXml, options) {\n    var _a;\n    if (!Array.isArray(object)) {\n        throw new Error(`${objectName} must be of type Array.`);\n    }\n    let elementType = mapper.type.element;\n    if (!elementType || typeof elementType !== \"object\") {\n        throw new Error(`element\" metadata for an Array must be defined in the ` +\n            `mapper and it must of type \"object\" in ${objectName}.`);\n    }\n    // Quirk: Composite mappers referenced by `element` might\n    // not have *all* properties declared (like uberParent),\n    // so let's try to look up the full definition by name.\n    if (elementType.type.name === \"Composite\" && elementType.type.className) {\n        elementType = (_a = serializer.modelMappers[elementType.type.className]) !== null && _a !== void 0 ? _a : elementType;\n    }\n    const tempArray = [];\n    for (let i = 0; i < object.length; i++) {\n        const serializedValue = serializer.serialize(elementType, object[i], objectName, options);\n        if (isXml && elementType.xmlNamespace) {\n            const xmlnsKey = elementType.xmlNamespacePrefix\n                ? `xmlns:${elementType.xmlNamespacePrefix}`\n                : \"xmlns\";\n            if (elementType.type.name === \"Composite\") {\n                tempArray[i] = Object.assign({}, serializedValue);\n                tempArray[i][interfaces_js_1.XML_ATTRKEY] = { [xmlnsKey]: elementType.xmlNamespace };\n            }\n            else {\n                tempArray[i] = {};\n                tempArray[i][options.xml.xmlCharKey] = serializedValue;\n                tempArray[i][interfaces_js_1.XML_ATTRKEY] = { [xmlnsKey]: elementType.xmlNamespace };\n            }\n        }\n        else {\n            tempArray[i] = serializedValue;\n        }\n    }\n    return tempArray;\n}\nfunction serializeDictionaryType(serializer, mapper, object, objectName, isXml, options) {\n    if (typeof object !== \"object\") {\n        throw new Error(`${objectName} must be of type object.`);\n    }\n    const valueType = mapper.type.value;\n    if (!valueType || typeof valueType !== \"object\") {\n        throw new Error(`\"value\" metadata for a Dictionary must be defined in the ` +\n            `mapper and it must of type \"object\" in ${objectName}.`);\n    }\n    const tempDictionary = {};\n    for (const key of Object.keys(object)) {\n        const serializedValue = serializer.serialize(valueType, object[key], objectName, options);\n        // If the element needs an XML namespace we need to add it within the $ property\n        tempDictionary[key] = getXmlObjectValue(valueType, serializedValue, isXml, options);\n    }\n    // Add the namespace to the root element if needed\n    if (isXml && mapper.xmlNamespace) {\n        const xmlnsKey = mapper.xmlNamespacePrefix ? `xmlns:${mapper.xmlNamespacePrefix}` : \"xmlns\";\n        const result = tempDictionary;\n        result[interfaces_js_1.XML_ATTRKEY] = { [xmlnsKey]: mapper.xmlNamespace };\n        return result;\n    }\n    return tempDictionary;\n}\n/**\n * Resolves the additionalProperties property from a referenced mapper\n * @param serializer - the serializer containing the entire set of mappers\n * @param mapper - the composite mapper to resolve\n * @param objectName - name of the object being serialized\n */\nfunction resolveAdditionalProperties(serializer, mapper, objectName) {\n    const additionalProperties = mapper.type.additionalProperties;\n    if (!additionalProperties && mapper.type.className) {\n        const modelMapper = resolveReferencedMapper(serializer, mapper, objectName);\n        return modelMapper === null || modelMapper === void 0 ? void 0 : modelMapper.type.additionalProperties;\n    }\n    return additionalProperties;\n}\n/**\n * Finds the mapper referenced by className\n * @param serializer - the serializer containing the entire set of mappers\n * @param mapper - the composite mapper to resolve\n * @param objectName - name of the object being serialized\n */\nfunction resolveReferencedMapper(serializer, mapper, objectName) {\n    const className = mapper.type.className;\n    if (!className) {\n        throw new Error(`Class name for model \"${objectName}\" is not provided in the mapper \"${JSON.stringify(mapper, undefined, 2)}\".`);\n    }\n    return serializer.modelMappers[className];\n}\n/**\n * Resolves a composite mapper's modelProperties.\n * @param serializer - the serializer containing the entire set of mappers\n * @param mapper - the composite mapper to resolve\n */\nfunction resolveModelProperties(serializer, mapper, objectName) {\n    let modelProps = mapper.type.modelProperties;\n    if (!modelProps) {\n        const modelMapper = resolveReferencedMapper(serializer, mapper, objectName);\n        if (!modelMapper) {\n            throw new Error(`mapper() cannot be null or undefined for model \"${mapper.type.className}\".`);\n        }\n        modelProps = modelMapper === null || modelMapper === void 0 ? void 0 : modelMapper.type.modelProperties;\n        if (!modelProps) {\n            throw new Error(`modelProperties cannot be null or undefined in the ` +\n                `mapper \"${JSON.stringify(modelMapper)}\" of type \"${mapper.type.className}\" for object \"${objectName}\".`);\n        }\n    }\n    return modelProps;\n}\nfunction serializeCompositeType(serializer, mapper, object, objectName, isXml, options) {\n    if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {\n        mapper = getPolymorphicMapper(serializer, mapper, object, \"clientName\");\n    }\n    if (object !== undefined && object !== null) {\n        const payload = {};\n        const modelProps = resolveModelProperties(serializer, mapper, objectName);\n        for (const key of Object.keys(modelProps)) {\n            const propertyMapper = modelProps[key];\n            if (propertyMapper.readOnly) {\n                continue;\n            }\n            let propName;\n            let parentObject = payload;\n            if (serializer.isXML) {\n                if (propertyMapper.xmlIsWrapped) {\n                    propName = propertyMapper.xmlName;\n                }\n                else {\n                    propName = propertyMapper.xmlElementName || propertyMapper.xmlName;\n                }\n            }\n            else {\n                const paths = splitSerializeName(propertyMapper.serializedName);\n                propName = paths.pop();\n                for (const pathName of paths) {\n                    const childObject = parentObject[pathName];\n                    if ((childObject === undefined || childObject === null) &&\n                        ((object[key] !== undefined && object[key] !== null) ||\n                            propertyMapper.defaultValue !== undefined)) {\n                        parentObject[pathName] = {};\n                    }\n                    parentObject = parentObject[pathName];\n                }\n            }\n            if (parentObject !== undefined && parentObject !== null) {\n                if (isXml && mapper.xmlNamespace) {\n                    const xmlnsKey = mapper.xmlNamespacePrefix\n                        ? `xmlns:${mapper.xmlNamespacePrefix}`\n                        : \"xmlns\";\n                    parentObject[interfaces_js_1.XML_ATTRKEY] = Object.assign(Object.assign({}, parentObject[interfaces_js_1.XML_ATTRKEY]), { [xmlnsKey]: mapper.xmlNamespace });\n                }\n                const propertyObjectName = propertyMapper.serializedName !== \"\"\n                    ? objectName + \".\" + propertyMapper.serializedName\n                    : objectName;\n                let toSerialize = object[key];\n                const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);\n                if (polymorphicDiscriminator &&\n                    polymorphicDiscriminator.clientName === key &&\n                    (toSerialize === undefined || toSerialize === null)) {\n                    toSerialize = mapper.serializedName;\n                }\n                const serializedValue = serializer.serialize(propertyMapper, toSerialize, propertyObjectName, options);\n                if (serializedValue !== undefined && propName !== undefined && propName !== null) {\n                    const value = getXmlObjectValue(propertyMapper, serializedValue, isXml, options);\n                    if (isXml && propertyMapper.xmlIsAttribute) {\n                        // XML_ATTRKEY, i.e., $ is the key attributes are kept under in xml2js.\n                        // This keeps things simple while preventing name collision\n                        // with names in user documents.\n                        parentObject[interfaces_js_1.XML_ATTRKEY] = parentObject[interfaces_js_1.XML_ATTRKEY] || {};\n                        parentObject[interfaces_js_1.XML_ATTRKEY][propName] = serializedValue;\n                    }\n                    else if (isXml && propertyMapper.xmlIsWrapped) {\n                        parentObject[propName] = { [propertyMapper.xmlElementName]: value };\n                    }\n                    else {\n                        parentObject[propName] = value;\n                    }\n                }\n            }\n        }\n        const additionalPropertiesMapper = resolveAdditionalProperties(serializer, mapper, objectName);\n        if (additionalPropertiesMapper) {\n            const propNames = Object.keys(modelProps);\n            for (const clientPropName in object) {\n                const isAdditionalProperty = propNames.every((pn) => pn !== clientPropName);\n                if (isAdditionalProperty) {\n                    payload[clientPropName] = serializer.serialize(additionalPropertiesMapper, object[clientPropName], objectName + '[\"' + clientPropName + '\"]', options);\n                }\n            }\n        }\n        return payload;\n    }\n    return object;\n}\nfunction getXmlObjectValue(propertyMapper, serializedValue, isXml, options) {\n    if (!isXml || !propertyMapper.xmlNamespace) {\n        return serializedValue;\n    }\n    const xmlnsKey = propertyMapper.xmlNamespacePrefix\n        ? `xmlns:${propertyMapper.xmlNamespacePrefix}`\n        : \"xmlns\";\n    const xmlNamespace = { [xmlnsKey]: propertyMapper.xmlNamespace };\n    if ([\"Composite\"].includes(propertyMapper.type.name)) {\n        if (serializedValue[interfaces_js_1.XML_ATTRKEY]) {\n            return serializedValue;\n        }\n        else {\n            const result = Object.assign({}, serializedValue);\n            result[interfaces_js_1.XML_ATTRKEY] = xmlNamespace;\n            return result;\n        }\n    }\n    const result = {};\n    result[options.xml.xmlCharKey] = serializedValue;\n    result[interfaces_js_1.XML_ATTRKEY] = xmlNamespace;\n    return result;\n}\nfunction isSpecialXmlProperty(propertyName, options) {\n    return [interfaces_js_1.XML_ATTRKEY, options.xml.xmlCharKey].includes(propertyName);\n}\nfunction deserializeCompositeType(serializer, mapper, responseBody, objectName, options) {\n    var _a, _b;\n    const xmlCharKey = (_a = options.xml.xmlCharKey) !== null && _a !== void 0 ? _a : interfaces_js_1.XML_CHARKEY;\n    if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {\n        mapper = getPolymorphicMapper(serializer, mapper, responseBody, \"serializedName\");\n    }\n    const modelProps = resolveModelProperties(serializer, mapper, objectName);\n    let instance = {};\n    const handledPropertyNames = [];\n    for (const key of Object.keys(modelProps)) {\n        const propertyMapper = modelProps[key];\n        const paths = splitSerializeName(modelProps[key].serializedName);\n        handledPropertyNames.push(paths[0]);\n        const { serializedName, xmlName, xmlElementName } = propertyMapper;\n        let propertyObjectName = objectName;\n        if (serializedName !== \"\" && serializedName !== undefined) {\n            propertyObjectName = objectName + \".\" + serializedName;\n        }\n        const headerCollectionPrefix = propertyMapper.headerCollectionPrefix;\n        if (headerCollectionPrefix) {\n            const dictionary = {};\n            for (const headerKey of Object.keys(responseBody)) {\n                if (headerKey.startsWith(headerCollectionPrefix)) {\n                    dictionary[headerKey.substring(headerCollectionPrefix.length)] = serializer.deserialize(propertyMapper.type.value, responseBody[headerKey], propertyObjectName, options);\n                }\n                handledPropertyNames.push(headerKey);\n            }\n            instance[key] = dictionary;\n        }\n        else if (serializer.isXML) {\n            if (propertyMapper.xmlIsAttribute && responseBody[interfaces_js_1.XML_ATTRKEY]) {\n                instance[key] = serializer.deserialize(propertyMapper, responseBody[interfaces_js_1.XML_ATTRKEY][xmlName], propertyObjectName, options);\n            }\n            else if (propertyMapper.xmlIsMsText) {\n                if (responseBody[xmlCharKey] !== undefined) {\n                    instance[key] = responseBody[xmlCharKey];\n                }\n                else if (typeof responseBody === \"string\") {\n                    // The special case where xml parser parses \"<Name>content</Name>\" into JSON of\n                    //   `{ name: \"content\"}` instead of `{ name: { \"_\": \"content\" }}`\n                    instance[key] = responseBody;\n                }\n            }\n            else {\n                const propertyName = xmlElementName || xmlName || serializedName;\n                if (propertyMapper.xmlIsWrapped) {\n                    /* a list of <xmlElementName> wrapped by <xmlName>\n                      For the xml example below\n                        <Cors>\n                          <CorsRule>...</CorsRule>\n                          <CorsRule>...</CorsRule>\n                        </Cors>\n                      the responseBody has\n                        {\n                          Cors: {\n                            CorsRule: [{...}, {...}]\n                          }\n                        }\n                      xmlName is \"Cors\" and xmlElementName is\"CorsRule\".\n                    */\n                    const wrapped = responseBody[xmlName];\n                    const elementList = (_b = wrapped === null || wrapped === void 0 ? void 0 : wrapped[xmlElementName]) !== null && _b !== void 0 ? _b : [];\n                    instance[key] = serializer.deserialize(propertyMapper, elementList, propertyObjectName, options);\n                    handledPropertyNames.push(xmlName);\n                }\n                else {\n                    const property = responseBody[propertyName];\n                    instance[key] = serializer.deserialize(propertyMapper, property, propertyObjectName, options);\n                    handledPropertyNames.push(propertyName);\n                }\n            }\n        }\n        else {\n            // deserialize the property if it is present in the provided responseBody instance\n            let propertyInstance;\n            let res = responseBody;\n            // traversing the object step by step.\n            let steps = 0;\n            for (const item of paths) {\n                if (!res)\n                    break;\n                steps++;\n                res = res[item];\n            }\n            // only accept null when reaching the last position of object otherwise it would be undefined\n            if (res === null && steps < paths.length) {\n                res = undefined;\n            }\n            propertyInstance = res;\n            const polymorphicDiscriminator = mapper.type.polymorphicDiscriminator;\n            // checking that the model property name (key)(ex: \"fishtype\") and the\n            // clientName of the polymorphicDiscriminator {metadata} (ex: \"fishtype\")\n            // instead of the serializedName of the polymorphicDiscriminator (ex: \"fish.type\")\n            // is a better approach. The generator is not consistent with escaping '\\.' in the\n            // serializedName of the property (ex: \"fish\\.type\") that is marked as polymorphic discriminator\n            // and the serializedName of the metadata polymorphicDiscriminator (ex: \"fish.type\"). However,\n            // the clientName transformation of the polymorphicDiscriminator (ex: \"fishtype\") and\n            // the transformation of model property name (ex: \"fishtype\") is done consistently.\n            // Hence, it is a safer bet to rely on the clientName of the polymorphicDiscriminator.\n            if (polymorphicDiscriminator &&\n                key === polymorphicDiscriminator.clientName &&\n                (propertyInstance === undefined || propertyInstance === null)) {\n                propertyInstance = mapper.serializedName;\n            }\n            let serializedValue;\n            // paging\n            if (Array.isArray(responseBody[key]) && modelProps[key].serializedName === \"\") {\n                propertyInstance = responseBody[key];\n                const arrayInstance = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName, options);\n                // Copy over any properties that have already been added into the instance, where they do\n                // not exist on the newly de-serialized array\n                for (const [k, v] of Object.entries(instance)) {\n                    if (!Object.prototype.hasOwnProperty.call(arrayInstance, k)) {\n                        arrayInstance[k] = v;\n                    }\n                }\n                instance = arrayInstance;\n            }\n            else if (propertyInstance !== undefined || propertyMapper.defaultValue !== undefined) {\n                serializedValue = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName, options);\n                instance[key] = serializedValue;\n            }\n        }\n    }\n    const additionalPropertiesMapper = mapper.type.additionalProperties;\n    if (additionalPropertiesMapper) {\n        const isAdditionalProperty = (responsePropName) => {\n            for (const clientPropName in modelProps) {\n                const paths = splitSerializeName(modelProps[clientPropName].serializedName);\n                if (paths[0] === responsePropName) {\n                    return false;\n                }\n            }\n            return true;\n        };\n        for (const responsePropName in responseBody) {\n            if (isAdditionalProperty(responsePropName)) {\n                instance[responsePropName] = serializer.deserialize(additionalPropertiesMapper, responseBody[responsePropName], objectName + '[\"' + responsePropName + '\"]', options);\n            }\n        }\n    }\n    else if (responseBody && !options.ignoreUnknownProperties) {\n        for (const key of Object.keys(responseBody)) {\n            if (instance[key] === undefined &&\n                !handledPropertyNames.includes(key) &&\n                !isSpecialXmlProperty(key, options)) {\n                instance[key] = responseBody[key];\n            }\n        }\n    }\n    return instance;\n}\nfunction deserializeDictionaryType(serializer, mapper, responseBody, objectName, options) {\n    /* jshint validthis: true */\n    const value = mapper.type.value;\n    if (!value || typeof value !== \"object\") {\n        throw new Error(`\"value\" metadata for a Dictionary must be defined in the ` +\n            `mapper and it must of type \"object\" in ${objectName}`);\n    }\n    if (responseBody) {\n        const tempDictionary = {};\n        for (const key of Object.keys(responseBody)) {\n            tempDictionary[key] = serializer.deserialize(value, responseBody[key], objectName, options);\n        }\n        return tempDictionary;\n    }\n    return responseBody;\n}\nfunction deserializeSequenceType(serializer, mapper, responseBody, objectName, options) {\n    var _a;\n    let element = mapper.type.element;\n    if (!element || typeof element !== \"object\") {\n        throw new Error(`element\" metadata for an Array must be defined in the ` +\n            `mapper and it must of type \"object\" in ${objectName}`);\n    }\n    if (responseBody) {\n        if (!Array.isArray(responseBody)) {\n            // xml2js will interpret a single element array as just the element, so force it to be an array\n            responseBody = [responseBody];\n        }\n        // Quirk: Composite mappers referenced by `element` might\n        // not have *all* properties declared (like uberParent),\n        // so let's try to look up the full definition by name.\n        if (element.type.name === \"Composite\" && element.type.className) {\n            element = (_a = serializer.modelMappers[element.type.className]) !== null && _a !== void 0 ? _a : element;\n        }\n        const tempArray = [];\n        for (let i = 0; i < responseBody.length; i++) {\n            tempArray[i] = serializer.deserialize(element, responseBody[i], `${objectName}[${i}]`, options);\n        }\n        return tempArray;\n    }\n    return responseBody;\n}\nfunction getIndexDiscriminator(discriminators, discriminatorValue, typeName) {\n    const typeNamesToCheck = [typeName];\n    while (typeNamesToCheck.length) {\n        const currentName = typeNamesToCheck.shift();\n        const indexDiscriminator = discriminatorValue === currentName\n            ? discriminatorValue\n            : currentName + \".\" + discriminatorValue;\n        if (Object.prototype.hasOwnProperty.call(discriminators, indexDiscriminator)) {\n            return discriminators[indexDiscriminator];\n        }\n        else {\n            for (const [name, mapper] of Object.entries(discriminators)) {\n                if (name.startsWith(currentName + \".\") &&\n                    mapper.type.uberParent === currentName &&\n                    mapper.type.className) {\n                    typeNamesToCheck.push(mapper.type.className);\n                }\n            }\n        }\n    }\n    return undefined;\n}\nfunction getPolymorphicMapper(serializer, mapper, object, polymorphicPropertyName) {\n    var _a;\n    const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);\n    if (polymorphicDiscriminator) {\n        let discriminatorName = polymorphicDiscriminator[polymorphicPropertyName];\n        if (discriminatorName) {\n            // The serializedName might have \\\\, which we just want to ignore\n            if (polymorphicPropertyName === \"serializedName\") {\n                discriminatorName = discriminatorName.replace(/\\\\/gi, \"\");\n            }\n            const discriminatorValue = object[discriminatorName];\n            const typeName = (_a = mapper.type.uberParent) !== null && _a !== void 0 ? _a : mapper.type.className;\n            if (typeof discriminatorValue === \"string\" && typeName) {\n                const polymorphicMapper = getIndexDiscriminator(serializer.modelMappers.discriminators, discriminatorValue, typeName);\n                if (polymorphicMapper) {\n                    mapper = polymorphicMapper;\n                }\n            }\n        }\n    }\n    return mapper;\n}\nfunction getPolymorphicDiscriminatorRecursively(serializer, mapper) {\n    return (mapper.type.polymorphicDiscriminator ||\n        getPolymorphicDiscriminatorSafely(serializer, mapper.type.uberParent) ||\n        getPolymorphicDiscriminatorSafely(serializer, mapper.type.className));\n}\nfunction getPolymorphicDiscriminatorSafely(serializer, typeName) {\n    return (typeName &&\n        serializer.modelMappers[typeName] &&\n        serializer.modelMappers[typeName].type.polymorphicDiscriminator);\n}\n/**\n * Known types of Mappers\n */\nexports.MapperTypeNames = {\n    Base64Url: \"Base64Url\",\n    Boolean: \"Boolean\",\n    ByteArray: \"ByteArray\",\n    Composite: \"Composite\",\n    Date: \"Date\",\n    DateTime: \"DateTime\",\n    DateTimeRfc1123: \"DateTimeRfc1123\",\n    Dictionary: \"Dictionary\",\n    Enum: \"Enum\",\n    Number: \"Number\",\n    Object: \"Object\",\n    Sequence: \"Sequence\",\n    String: \"String\",\n    Stream: \"Stream\",\n    TimeSpan: \"TimeSpan\",\n    UnixTime: \"UnixTime\",\n};\n//# sourceMappingURL=serializer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/commonjs/serializer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/commonjs/serviceClient.js":
/*!************************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/commonjs/serviceClient.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ServiceClient = void 0;\nconst core_rest_pipeline_1 = __webpack_require__(/*! @azure/core-rest-pipeline */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/index.js\");\nconst pipeline_js_1 = __webpack_require__(/*! ./pipeline.js */ \"(rsc)/./node_modules/@azure/core-client/dist/commonjs/pipeline.js\");\nconst utils_js_1 = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/@azure/core-client/dist/commonjs/utils.js\");\nconst httpClientCache_js_1 = __webpack_require__(/*! ./httpClientCache.js */ \"(rsc)/./node_modules/@azure/core-client/dist/commonjs/httpClientCache.js\");\nconst operationHelpers_js_1 = __webpack_require__(/*! ./operationHelpers.js */ \"(rsc)/./node_modules/@azure/core-client/dist/commonjs/operationHelpers.js\");\nconst urlHelpers_js_1 = __webpack_require__(/*! ./urlHelpers.js */ \"(rsc)/./node_modules/@azure/core-client/dist/commonjs/urlHelpers.js\");\nconst interfaceHelpers_js_1 = __webpack_require__(/*! ./interfaceHelpers.js */ \"(rsc)/./node_modules/@azure/core-client/dist/commonjs/interfaceHelpers.js\");\nconst log_js_1 = __webpack_require__(/*! ./log.js */ \"(rsc)/./node_modules/@azure/core-client/dist/commonjs/log.js\");\n/**\n * Initializes a new instance of the ServiceClient.\n */\nclass ServiceClient {\n    /**\n     * The ServiceClient constructor\n     * @param options - The service client options that govern the behavior of the client.\n     */\n    constructor(options = {}) {\n        var _a, _b;\n        this._requestContentType = options.requestContentType;\n        this._endpoint = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri;\n        if (options.baseUri) {\n            log_js_1.logger.warning(\"The baseUri option for SDK Clients has been deprecated, please use endpoint instead.\");\n        }\n        this._allowInsecureConnection = options.allowInsecureConnection;\n        this._httpClient = options.httpClient || (0, httpClientCache_js_1.getCachedDefaultHttpClient)();\n        this.pipeline = options.pipeline || createDefaultPipeline(options);\n        if ((_b = options.additionalPolicies) === null || _b === void 0 ? void 0 : _b.length) {\n            for (const { policy, position } of options.additionalPolicies) {\n                // Sign happens after Retry and is commonly needed to occur\n                // before policies that intercept post-retry.\n                const afterPhase = position === \"perRetry\" ? \"Sign\" : undefined;\n                this.pipeline.addPolicy(policy, {\n                    afterPhase,\n                });\n            }\n        }\n    }\n    /**\n     * Send the provided httpRequest.\n     */\n    async sendRequest(request) {\n        return this.pipeline.sendRequest(this._httpClient, request);\n    }\n    /**\n     * Send an HTTP request that is populated using the provided OperationSpec.\n     * @typeParam T - The typed result of the request, based on the OperationSpec.\n     * @param operationArguments - The arguments that the HTTP request's templated values will be populated from.\n     * @param operationSpec - The OperationSpec to use to populate the httpRequest.\n     */\n    async sendOperationRequest(operationArguments, operationSpec) {\n        const endpoint = operationSpec.baseUrl || this._endpoint;\n        if (!endpoint) {\n            throw new Error(\"If operationSpec.baseUrl is not specified, then the ServiceClient must have a endpoint string property that contains the base URL to use.\");\n        }\n        // Templatized URLs sometimes reference properties on the ServiceClient child class,\n        // so we have to pass `this` below in order to search these properties if they're\n        // not part of OperationArguments\n        const url = (0, urlHelpers_js_1.getRequestUrl)(endpoint, operationSpec, operationArguments, this);\n        const request = (0, core_rest_pipeline_1.createPipelineRequest)({\n            url,\n        });\n        request.method = operationSpec.httpMethod;\n        const operationInfo = (0, operationHelpers_js_1.getOperationRequestInfo)(request);\n        operationInfo.operationSpec = operationSpec;\n        operationInfo.operationArguments = operationArguments;\n        const contentType = operationSpec.contentType || this._requestContentType;\n        if (contentType && operationSpec.requestBody) {\n            request.headers.set(\"Content-Type\", contentType);\n        }\n        const options = operationArguments.options;\n        if (options) {\n            const requestOptions = options.requestOptions;\n            if (requestOptions) {\n                if (requestOptions.timeout) {\n                    request.timeout = requestOptions.timeout;\n                }\n                if (requestOptions.onUploadProgress) {\n                    request.onUploadProgress = requestOptions.onUploadProgress;\n                }\n                if (requestOptions.onDownloadProgress) {\n                    request.onDownloadProgress = requestOptions.onDownloadProgress;\n                }\n                if (requestOptions.shouldDeserialize !== undefined) {\n                    operationInfo.shouldDeserialize = requestOptions.shouldDeserialize;\n                }\n                if (requestOptions.allowInsecureConnection) {\n                    request.allowInsecureConnection = true;\n                }\n            }\n            if (options.abortSignal) {\n                request.abortSignal = options.abortSignal;\n            }\n            if (options.tracingOptions) {\n                request.tracingOptions = options.tracingOptions;\n            }\n        }\n        if (this._allowInsecureConnection) {\n            request.allowInsecureConnection = true;\n        }\n        if (request.streamResponseStatusCodes === undefined) {\n            request.streamResponseStatusCodes = (0, interfaceHelpers_js_1.getStreamingResponseStatusCodes)(operationSpec);\n        }\n        try {\n            const rawResponse = await this.sendRequest(request);\n            const flatResponse = (0, utils_js_1.flattenResponse)(rawResponse, operationSpec.responses[rawResponse.status]);\n            if (options === null || options === void 0 ? void 0 : options.onResponse) {\n                options.onResponse(rawResponse, flatResponse);\n            }\n            return flatResponse;\n        }\n        catch (error) {\n            if (typeof error === \"object\" && (error === null || error === void 0 ? void 0 : error.response)) {\n                const rawResponse = error.response;\n                const flatResponse = (0, utils_js_1.flattenResponse)(rawResponse, operationSpec.responses[error.statusCode] || operationSpec.responses[\"default\"]);\n                error.details = flatResponse;\n                if (options === null || options === void 0 ? void 0 : options.onResponse) {\n                    options.onResponse(rawResponse, flatResponse, error);\n                }\n            }\n            throw error;\n        }\n    }\n}\nexports.ServiceClient = ServiceClient;\nfunction createDefaultPipeline(options) {\n    const credentialScopes = getCredentialScopes(options);\n    const credentialOptions = options.credential && credentialScopes\n        ? { credentialScopes, credential: options.credential }\n        : undefined;\n    return (0, pipeline_js_1.createClientPipeline)(Object.assign(Object.assign({}, options), { credentialOptions }));\n}\nfunction getCredentialScopes(options) {\n    if (options.credentialScopes) {\n        return options.credentialScopes;\n    }\n    if (options.endpoint) {\n        return `${options.endpoint}/.default`;\n    }\n    if (options.baseUri) {\n        return `${options.baseUri}/.default`;\n    }\n    if (options.credential && !options.credentialScopes) {\n        throw new Error(`When using credentials, the ServiceClientOptions must contain either a endpoint or a credentialScopes. Unable to create a bearerTokenAuthenticationPolicy`);\n    }\n    return undefined;\n}\n//# sourceMappingURL=serviceClient.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/commonjs/serviceClient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/commonjs/state.js":
/*!****************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/commonjs/state.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.state = void 0;\n/**\n * Holds the singleton operationRequestMap, to be shared across CJS and ESM imports.\n */\nexports.state = {\n    operationRequestMap: new WeakMap(),\n};\n//# sourceMappingURL=state-cjs.cjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvY29tbW9uanMvc3RhdGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1jbGllbnQvZGlzdC9jb21tb25qcy9zdGF0ZS5qcz81ZGRjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnN0YXRlID0gdm9pZCAwO1xuLyoqXG4gKiBIb2xkcyB0aGUgc2luZ2xldG9uIG9wZXJhdGlvblJlcXVlc3RNYXAsIHRvIGJlIHNoYXJlZCBhY3Jvc3MgQ0pTIGFuZCBFU00gaW1wb3J0cy5cbiAqL1xuZXhwb3J0cy5zdGF0ZSA9IHtcbiAgICBvcGVyYXRpb25SZXF1ZXN0TWFwOiBuZXcgV2Vha01hcCgpLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0YXRlLWNqcy5janMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/commonjs/state.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/commonjs/urlHelpers.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/commonjs/urlHelpers.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getRequestUrl = getRequestUrl;\nexports.appendQueryParams = appendQueryParams;\nconst operationHelpers_js_1 = __webpack_require__(/*! ./operationHelpers.js */ \"(rsc)/./node_modules/@azure/core-client/dist/commonjs/operationHelpers.js\");\nconst interfaceHelpers_js_1 = __webpack_require__(/*! ./interfaceHelpers.js */ \"(rsc)/./node_modules/@azure/core-client/dist/commonjs/interfaceHelpers.js\");\nconst CollectionFormatToDelimiterMap = {\n    CSV: \",\",\n    SSV: \" \",\n    Multi: \"Multi\",\n    TSV: \"\\t\",\n    Pipes: \"|\",\n};\nfunction getRequestUrl(baseUri, operationSpec, operationArguments, fallbackObject) {\n    const urlReplacements = calculateUrlReplacements(operationSpec, operationArguments, fallbackObject);\n    let isAbsolutePath = false;\n    let requestUrl = replaceAll(baseUri, urlReplacements);\n    if (operationSpec.path) {\n        let path = replaceAll(operationSpec.path, urlReplacements);\n        // QUIRK: sometimes we get a path component like /{nextLink}\n        // which may be a fully formed URL with a leading /. In that case, we should\n        // remove the leading /\n        if (operationSpec.path === \"/{nextLink}\" && path.startsWith(\"/\")) {\n            path = path.substring(1);\n        }\n        // QUIRK: sometimes we get a path component like {nextLink}\n        // which may be a fully formed URL. In that case, we should\n        // ignore the baseUri.\n        if (isAbsoluteUrl(path)) {\n            requestUrl = path;\n            isAbsolutePath = true;\n        }\n        else {\n            requestUrl = appendPath(requestUrl, path);\n        }\n    }\n    const { queryParams, sequenceParams } = calculateQueryParameters(operationSpec, operationArguments, fallbackObject);\n    /**\n     * Notice that this call sets the `noOverwrite` parameter to true if the `requestUrl`\n     * is an absolute path. This ensures that existing query parameter values in `requestUrl`\n     * do not get overwritten. On the other hand when `requestUrl` is not absolute path, it\n     * is still being built so there is nothing to overwrite.\n     */\n    requestUrl = appendQueryParams(requestUrl, queryParams, sequenceParams, isAbsolutePath);\n    return requestUrl;\n}\nfunction replaceAll(input, replacements) {\n    let result = input;\n    for (const [searchValue, replaceValue] of replacements) {\n        result = result.split(searchValue).join(replaceValue);\n    }\n    return result;\n}\nfunction calculateUrlReplacements(operationSpec, operationArguments, fallbackObject) {\n    var _a;\n    const result = new Map();\n    if ((_a = operationSpec.urlParameters) === null || _a === void 0 ? void 0 : _a.length) {\n        for (const urlParameter of operationSpec.urlParameters) {\n            let urlParameterValue = (0, operationHelpers_js_1.getOperationArgumentValueFromParameter)(operationArguments, urlParameter, fallbackObject);\n            const parameterPathString = (0, interfaceHelpers_js_1.getPathStringFromParameter)(urlParameter);\n            urlParameterValue = operationSpec.serializer.serialize(urlParameter.mapper, urlParameterValue, parameterPathString);\n            if (!urlParameter.skipEncoding) {\n                urlParameterValue = encodeURIComponent(urlParameterValue);\n            }\n            result.set(`{${urlParameter.mapper.serializedName || parameterPathString}}`, urlParameterValue);\n        }\n    }\n    return result;\n}\nfunction isAbsoluteUrl(url) {\n    return url.includes(\"://\");\n}\nfunction appendPath(url, pathToAppend) {\n    if (!pathToAppend) {\n        return url;\n    }\n    const parsedUrl = new URL(url);\n    let newPath = parsedUrl.pathname;\n    if (!newPath.endsWith(\"/\")) {\n        newPath = `${newPath}/`;\n    }\n    if (pathToAppend.startsWith(\"/\")) {\n        pathToAppend = pathToAppend.substring(1);\n    }\n    const searchStart = pathToAppend.indexOf(\"?\");\n    if (searchStart !== -1) {\n        const path = pathToAppend.substring(0, searchStart);\n        const search = pathToAppend.substring(searchStart + 1);\n        newPath = newPath + path;\n        if (search) {\n            parsedUrl.search = parsedUrl.search ? `${parsedUrl.search}&${search}` : search;\n        }\n    }\n    else {\n        newPath = newPath + pathToAppend;\n    }\n    parsedUrl.pathname = newPath;\n    return parsedUrl.toString();\n}\nfunction calculateQueryParameters(operationSpec, operationArguments, fallbackObject) {\n    var _a;\n    const result = new Map();\n    const sequenceParams = new Set();\n    if ((_a = operationSpec.queryParameters) === null || _a === void 0 ? void 0 : _a.length) {\n        for (const queryParameter of operationSpec.queryParameters) {\n            if (queryParameter.mapper.type.name === \"Sequence\" && queryParameter.mapper.serializedName) {\n                sequenceParams.add(queryParameter.mapper.serializedName);\n            }\n            let queryParameterValue = (0, operationHelpers_js_1.getOperationArgumentValueFromParameter)(operationArguments, queryParameter, fallbackObject);\n            if ((queryParameterValue !== undefined && queryParameterValue !== null) ||\n                queryParameter.mapper.required) {\n                queryParameterValue = operationSpec.serializer.serialize(queryParameter.mapper, queryParameterValue, (0, interfaceHelpers_js_1.getPathStringFromParameter)(queryParameter));\n                const delimiter = queryParameter.collectionFormat\n                    ? CollectionFormatToDelimiterMap[queryParameter.collectionFormat]\n                    : \"\";\n                if (Array.isArray(queryParameterValue)) {\n                    // replace null and undefined\n                    queryParameterValue = queryParameterValue.map((item) => {\n                        if (item === null || item === undefined) {\n                            return \"\";\n                        }\n                        return item;\n                    });\n                }\n                if (queryParameter.collectionFormat === \"Multi\" && queryParameterValue.length === 0) {\n                    continue;\n                }\n                else if (Array.isArray(queryParameterValue) &&\n                    (queryParameter.collectionFormat === \"SSV\" || queryParameter.collectionFormat === \"TSV\")) {\n                    queryParameterValue = queryParameterValue.join(delimiter);\n                }\n                if (!queryParameter.skipEncoding) {\n                    if (Array.isArray(queryParameterValue)) {\n                        queryParameterValue = queryParameterValue.map((item) => {\n                            return encodeURIComponent(item);\n                        });\n                    }\n                    else {\n                        queryParameterValue = encodeURIComponent(queryParameterValue);\n                    }\n                }\n                // Join pipes and CSV *after* encoding, or the server will be upset.\n                if (Array.isArray(queryParameterValue) &&\n                    (queryParameter.collectionFormat === \"CSV\" || queryParameter.collectionFormat === \"Pipes\")) {\n                    queryParameterValue = queryParameterValue.join(delimiter);\n                }\n                result.set(queryParameter.mapper.serializedName || (0, interfaceHelpers_js_1.getPathStringFromParameter)(queryParameter), queryParameterValue);\n            }\n        }\n    }\n    return {\n        queryParams: result,\n        sequenceParams,\n    };\n}\nfunction simpleParseQueryParams(queryString) {\n    const result = new Map();\n    if (!queryString || queryString[0] !== \"?\") {\n        return result;\n    }\n    // remove the leading ?\n    queryString = queryString.slice(1);\n    const pairs = queryString.split(\"&\");\n    for (const pair of pairs) {\n        const [name, value] = pair.split(\"=\", 2);\n        const existingValue = result.get(name);\n        if (existingValue) {\n            if (Array.isArray(existingValue)) {\n                existingValue.push(value);\n            }\n            else {\n                result.set(name, [existingValue, value]);\n            }\n        }\n        else {\n            result.set(name, value);\n        }\n    }\n    return result;\n}\n/** @internal */\nfunction appendQueryParams(url, queryParams, sequenceParams, noOverwrite = false) {\n    if (queryParams.size === 0) {\n        return url;\n    }\n    const parsedUrl = new URL(url);\n    // QUIRK: parsedUrl.searchParams will have their name/value pairs decoded, which\n    // can change their meaning to the server, such as in the case of a SAS signature.\n    // To avoid accidentally un-encoding a query param, we parse the key/values ourselves\n    const combinedParams = simpleParseQueryParams(parsedUrl.search);\n    for (const [name, value] of queryParams) {\n        const existingValue = combinedParams.get(name);\n        if (Array.isArray(existingValue)) {\n            if (Array.isArray(value)) {\n                existingValue.push(...value);\n                const valueSet = new Set(existingValue);\n                combinedParams.set(name, Array.from(valueSet));\n            }\n            else {\n                existingValue.push(value);\n            }\n        }\n        else if (existingValue) {\n            if (Array.isArray(value)) {\n                value.unshift(existingValue);\n            }\n            else if (sequenceParams.has(name)) {\n                combinedParams.set(name, [existingValue, value]);\n            }\n            if (!noOverwrite) {\n                combinedParams.set(name, value);\n            }\n        }\n        else {\n            combinedParams.set(name, value);\n        }\n    }\n    const searchPieces = [];\n    for (const [name, value] of combinedParams) {\n        if (typeof value === \"string\") {\n            searchPieces.push(`${name}=${value}`);\n        }\n        else if (Array.isArray(value)) {\n            // QUIRK: If we get an array of values, include multiple key/value pairs\n            for (const subValue of value) {\n                searchPieces.push(`${name}=${subValue}`);\n            }\n        }\n        else {\n            searchPieces.push(`${name}=${value}`);\n        }\n    }\n    // QUIRK: we have to set search manually as searchParams will encode comma when it shouldn't.\n    parsedUrl.search = searchPieces.length ? `?${searchPieces.join(\"&\")}` : \"\";\n    return parsedUrl.toString();\n}\n//# sourceMappingURL=urlHelpers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/commonjs/urlHelpers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/commonjs/utils.js":
/*!****************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/commonjs/utils.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isPrimitiveBody = isPrimitiveBody;\nexports.isDuration = isDuration;\nexports.isValidUuid = isValidUuid;\nexports.flattenResponse = flattenResponse;\n/**\n * A type guard for a primitive response body.\n * @param value - Value to test\n *\n * @internal\n */\nfunction isPrimitiveBody(value, mapperTypeName) {\n    return (mapperTypeName !== \"Composite\" &&\n        mapperTypeName !== \"Dictionary\" &&\n        (typeof value === \"string\" ||\n            typeof value === \"number\" ||\n            typeof value === \"boolean\" ||\n            (mapperTypeName === null || mapperTypeName === void 0 ? void 0 : mapperTypeName.match(/^(Date|DateTime|DateTimeRfc1123|UnixTime|ByteArray|Base64Url)$/i)) !==\n                null ||\n            value === undefined ||\n            value === null));\n}\nconst validateISODuration = /^(-|\\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;\n/**\n * Returns true if the given string is in ISO 8601 format.\n * @param value - The value to be validated for ISO 8601 duration format.\n * @internal\n */\nfunction isDuration(value) {\n    return validateISODuration.test(value);\n}\nconst validUuidRegex = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/i;\n/**\n * Returns true if the provided uuid is valid.\n *\n * @param uuid - The uuid that needs to be validated.\n *\n * @internal\n */\nfunction isValidUuid(uuid) {\n    return validUuidRegex.test(uuid);\n}\n/**\n * Maps the response as follows:\n * - wraps the response body if needed (typically if its type is primitive).\n * - returns null if the combination of the headers and the body is empty.\n * - otherwise, returns the combination of the headers and the body.\n *\n * @param responseObject - a representation of the parsed response\n * @returns the response that will be returned to the user which can be null and/or wrapped\n *\n * @internal\n */\nfunction handleNullableResponseAndWrappableBody(responseObject) {\n    const combinedHeadersAndBody = Object.assign(Object.assign({}, responseObject.headers), responseObject.body);\n    if (responseObject.hasNullableType &&\n        Object.getOwnPropertyNames(combinedHeadersAndBody).length === 0) {\n        return responseObject.shouldWrapBody ? { body: null } : null;\n    }\n    else {\n        return responseObject.shouldWrapBody\n            ? Object.assign(Object.assign({}, responseObject.headers), { body: responseObject.body }) : combinedHeadersAndBody;\n    }\n}\n/**\n * Take a `FullOperationResponse` and turn it into a flat\n * response object to hand back to the consumer.\n * @param fullResponse - The processed response from the operation request\n * @param responseSpec - The response map from the OperationSpec\n *\n * @internal\n */\nfunction flattenResponse(fullResponse, responseSpec) {\n    var _a, _b;\n    const parsedHeaders = fullResponse.parsedHeaders;\n    // head methods never have a body, but we return a boolean set to body property\n    // to indicate presence/absence of the resource\n    if (fullResponse.request.method === \"HEAD\") {\n        return Object.assign(Object.assign({}, parsedHeaders), { body: fullResponse.parsedBody });\n    }\n    const bodyMapper = responseSpec && responseSpec.bodyMapper;\n    const isNullable = Boolean(bodyMapper === null || bodyMapper === void 0 ? void 0 : bodyMapper.nullable);\n    const expectedBodyTypeName = bodyMapper === null || bodyMapper === void 0 ? void 0 : bodyMapper.type.name;\n    /** If the body is asked for, we look at the expected body type to handle it */\n    if (expectedBodyTypeName === \"Stream\") {\n        return Object.assign(Object.assign({}, parsedHeaders), { blobBody: fullResponse.blobBody, readableStreamBody: fullResponse.readableStreamBody });\n    }\n    const modelProperties = (expectedBodyTypeName === \"Composite\" &&\n        bodyMapper.type.modelProperties) ||\n        {};\n    const isPageableResponse = Object.keys(modelProperties).some((k) => modelProperties[k].serializedName === \"\");\n    if (expectedBodyTypeName === \"Sequence\" || isPageableResponse) {\n        const arrayResponse = (_a = fullResponse.parsedBody) !== null && _a !== void 0 ? _a : [];\n        for (const key of Object.keys(modelProperties)) {\n            if (modelProperties[key].serializedName) {\n                arrayResponse[key] = (_b = fullResponse.parsedBody) === null || _b === void 0 ? void 0 : _b[key];\n            }\n        }\n        if (parsedHeaders) {\n            for (const key of Object.keys(parsedHeaders)) {\n                arrayResponse[key] = parsedHeaders[key];\n            }\n        }\n        return isNullable &&\n            !fullResponse.parsedBody &&\n            !parsedHeaders &&\n            Object.getOwnPropertyNames(modelProperties).length === 0\n            ? null\n            : arrayResponse;\n    }\n    return handleNullableResponseAndWrappableBody({\n        body: fullResponse.parsedBody,\n        headers: parsedHeaders,\n        hasNullableType: isNullable,\n        shouldWrapBody: isPrimitiveBody(fullResponse.parsedBody, expectedBodyTypeName),\n    });\n}\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/commonjs/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/constants.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/commonjs/constants.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DEFAULT_RETRY_POLICY_COUNT = exports.SDK_VERSION = void 0;\nexports.SDK_VERSION = \"1.22.0\";\nexports.DEFAULT_RETRY_POLICY_COUNT = 3;\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2NvbW1vbmpzL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsa0NBQWtDLEdBQUcsbUJBQW1CO0FBQ3hELG1CQUFtQjtBQUNuQixrQ0FBa0M7QUFDbEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9jb21tb25qcy9jb25zdGFudHMuanM/OGU3NSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5ERUZBVUxUX1JFVFJZX1BPTElDWV9DT1VOVCA9IGV4cG9ydHMuU0RLX1ZFUlNJT04gPSB2b2lkIDA7XG5leHBvcnRzLlNES19WRVJTSU9OID0gXCIxLjIyLjBcIjtcbmV4cG9ydHMuREVGQVVMVF9SRVRSWV9QT0xJQ1lfQ09VTlQgPSAzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/createPipelineFromOptions.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/commonjs/createPipelineFromOptions.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createPipelineFromOptions = createPipelineFromOptions;\nconst logPolicy_js_1 = __webpack_require__(/*! ./policies/logPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/logPolicy.js\");\nconst pipeline_js_1 = __webpack_require__(/*! ./pipeline.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/pipeline.js\");\nconst redirectPolicy_js_1 = __webpack_require__(/*! ./policies/redirectPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/redirectPolicy.js\");\nconst userAgentPolicy_js_1 = __webpack_require__(/*! ./policies/userAgentPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/userAgentPolicy.js\");\nconst multipartPolicy_js_1 = __webpack_require__(/*! ./policies/multipartPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/multipartPolicy.js\");\nconst decompressResponsePolicy_js_1 = __webpack_require__(/*! ./policies/decompressResponsePolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/decompressResponsePolicy.js\");\nconst defaultRetryPolicy_js_1 = __webpack_require__(/*! ./policies/defaultRetryPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/defaultRetryPolicy.js\");\nconst formDataPolicy_js_1 = __webpack_require__(/*! ./policies/formDataPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/formDataPolicy.js\");\nconst core_util_1 = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/commonjs/index.js\");\nconst proxyPolicy_js_1 = __webpack_require__(/*! ./policies/proxyPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/proxyPolicy.js\");\nconst setClientRequestIdPolicy_js_1 = __webpack_require__(/*! ./policies/setClientRequestIdPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/setClientRequestIdPolicy.js\");\nconst agentPolicy_js_1 = __webpack_require__(/*! ./policies/agentPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/agentPolicy.js\");\nconst tlsPolicy_js_1 = __webpack_require__(/*! ./policies/tlsPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/tlsPolicy.js\");\nconst tracingPolicy_js_1 = __webpack_require__(/*! ./policies/tracingPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/tracingPolicy.js\");\nconst wrapAbortSignalLikePolicy_js_1 = __webpack_require__(/*! ./policies/wrapAbortSignalLikePolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/wrapAbortSignalLikePolicy.js\");\n/**\n * Create a new pipeline with a default set of customizable policies.\n * @param options - Options to configure a custom pipeline.\n */\nfunction createPipelineFromOptions(options) {\n    var _a;\n    const pipeline = (0, pipeline_js_1.createEmptyPipeline)();\n    if (core_util_1.isNodeLike) {\n        if (options.agent) {\n            pipeline.addPolicy((0, agentPolicy_js_1.agentPolicy)(options.agent));\n        }\n        if (options.tlsOptions) {\n            pipeline.addPolicy((0, tlsPolicy_js_1.tlsPolicy)(options.tlsOptions));\n        }\n        pipeline.addPolicy((0, proxyPolicy_js_1.proxyPolicy)(options.proxyOptions));\n        pipeline.addPolicy((0, decompressResponsePolicy_js_1.decompressResponsePolicy)());\n    }\n    pipeline.addPolicy((0, wrapAbortSignalLikePolicy_js_1.wrapAbortSignalLikePolicy)());\n    pipeline.addPolicy((0, formDataPolicy_js_1.formDataPolicy)(), { beforePolicies: [multipartPolicy_js_1.multipartPolicyName] });\n    pipeline.addPolicy((0, userAgentPolicy_js_1.userAgentPolicy)(options.userAgentOptions));\n    pipeline.addPolicy((0, setClientRequestIdPolicy_js_1.setClientRequestIdPolicy)((_a = options.telemetryOptions) === null || _a === void 0 ? void 0 : _a.clientRequestIdHeaderName));\n    // The multipart policy is added after policies with no phase, so that\n    // policies can be added between it and formDataPolicy to modify\n    // properties (e.g., making the boundary constant in recorded tests).\n    pipeline.addPolicy((0, multipartPolicy_js_1.multipartPolicy)(), { afterPhase: \"Deserialize\" });\n    pipeline.addPolicy((0, defaultRetryPolicy_js_1.defaultRetryPolicy)(options.retryOptions), { phase: \"Retry\" });\n    pipeline.addPolicy((0, tracingPolicy_js_1.tracingPolicy)(Object.assign(Object.assign({}, options.userAgentOptions), options.loggingOptions)), {\n        afterPhase: \"Retry\",\n    });\n    if (core_util_1.isNodeLike) {\n        // Both XHR and Fetch expect to handle redirects automatically,\n        // so only include this policy when we're in Node.\n        pipeline.addPolicy((0, redirectPolicy_js_1.redirectPolicy)(options.redirectOptions), { afterPhase: \"Retry\" });\n    }\n    pipeline.addPolicy((0, logPolicy_js_1.logPolicy)(options.loggingOptions), { afterPhase: \"Sign\" });\n    return pipeline;\n}\n//# sourceMappingURL=createPipelineFromOptions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2NvbW1vbmpzL2NyZWF0ZVBpcGVsaW5lRnJvbU9wdGlvbnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGlDQUFpQztBQUNqQyx1QkFBdUIsbUJBQU8sQ0FBQyxtSEFBeUI7QUFDeEQsc0JBQXNCLG1CQUFPLENBQUMsK0ZBQWU7QUFDN0MsNEJBQTRCLG1CQUFPLENBQUMsNkhBQThCO0FBQ2xFLDZCQUE2QixtQkFBTyxDQUFDLCtIQUErQjtBQUNwRSw2QkFBNkIsbUJBQU8sQ0FBQywrSEFBK0I7QUFDcEUsc0NBQXNDLG1CQUFPLENBQUMsaUpBQXdDO0FBQ3RGLGdDQUFnQyxtQkFBTyxDQUFDLHFJQUFrQztBQUMxRSw0QkFBNEIsbUJBQU8sQ0FBQyw2SEFBOEI7QUFDbEUsb0JBQW9CLG1CQUFPLENBQUMsc0ZBQWtCO0FBQzlDLHlCQUF5QixtQkFBTyxDQUFDLHVIQUEyQjtBQUM1RCxzQ0FBc0MsbUJBQU8sQ0FBQyxpSkFBd0M7QUFDdEYseUJBQXlCLG1CQUFPLENBQUMsdUhBQTJCO0FBQzVELHVCQUF1QixtQkFBTyxDQUFDLG1IQUF5QjtBQUN4RCwyQkFBMkIsbUJBQU8sQ0FBQywySEFBNkI7QUFDaEUsdUNBQXVDLG1CQUFPLENBQUMsbUpBQXlDO0FBQ3hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9FQUFvRSw0REFBNEQ7QUFDaEk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNFQUFzRSwyQkFBMkI7QUFDakcsZ0dBQWdHLGdCQUFnQjtBQUNoSCwyRkFBMkY7QUFDM0Y7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsK0ZBQStGLHFCQUFxQjtBQUNwSDtBQUNBLGdGQUFnRixvQkFBb0I7QUFDcEc7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1yZXN0LXBpcGVsaW5lL2Rpc3QvY29tbW9uanMvY3JlYXRlUGlwZWxpbmVGcm9tT3B0aW9ucy5qcz80N2IzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNyZWF0ZVBpcGVsaW5lRnJvbU9wdGlvbnMgPSBjcmVhdGVQaXBlbGluZUZyb21PcHRpb25zO1xuY29uc3QgbG9nUG9saWN5X2pzXzEgPSByZXF1aXJlKFwiLi9wb2xpY2llcy9sb2dQb2xpY3kuanNcIik7XG5jb25zdCBwaXBlbGluZV9qc18xID0gcmVxdWlyZShcIi4vcGlwZWxpbmUuanNcIik7XG5jb25zdCByZWRpcmVjdFBvbGljeV9qc18xID0gcmVxdWlyZShcIi4vcG9saWNpZXMvcmVkaXJlY3RQb2xpY3kuanNcIik7XG5jb25zdCB1c2VyQWdlbnRQb2xpY3lfanNfMSA9IHJlcXVpcmUoXCIuL3BvbGljaWVzL3VzZXJBZ2VudFBvbGljeS5qc1wiKTtcbmNvbnN0IG11bHRpcGFydFBvbGljeV9qc18xID0gcmVxdWlyZShcIi4vcG9saWNpZXMvbXVsdGlwYXJ0UG9saWN5LmpzXCIpO1xuY29uc3QgZGVjb21wcmVzc1Jlc3BvbnNlUG9saWN5X2pzXzEgPSByZXF1aXJlKFwiLi9wb2xpY2llcy9kZWNvbXByZXNzUmVzcG9uc2VQb2xpY3kuanNcIik7XG5jb25zdCBkZWZhdWx0UmV0cnlQb2xpY3lfanNfMSA9IHJlcXVpcmUoXCIuL3BvbGljaWVzL2RlZmF1bHRSZXRyeVBvbGljeS5qc1wiKTtcbmNvbnN0IGZvcm1EYXRhUG9saWN5X2pzXzEgPSByZXF1aXJlKFwiLi9wb2xpY2llcy9mb3JtRGF0YVBvbGljeS5qc1wiKTtcbmNvbnN0IGNvcmVfdXRpbF8xID0gcmVxdWlyZShcIkBhenVyZS9jb3JlLXV0aWxcIik7XG5jb25zdCBwcm94eVBvbGljeV9qc18xID0gcmVxdWlyZShcIi4vcG9saWNpZXMvcHJveHlQb2xpY3kuanNcIik7XG5jb25zdCBzZXRDbGllbnRSZXF1ZXN0SWRQb2xpY3lfanNfMSA9IHJlcXVpcmUoXCIuL3BvbGljaWVzL3NldENsaWVudFJlcXVlc3RJZFBvbGljeS5qc1wiKTtcbmNvbnN0IGFnZW50UG9saWN5X2pzXzEgPSByZXF1aXJlKFwiLi9wb2xpY2llcy9hZ2VudFBvbGljeS5qc1wiKTtcbmNvbnN0IHRsc1BvbGljeV9qc18xID0gcmVxdWlyZShcIi4vcG9saWNpZXMvdGxzUG9saWN5LmpzXCIpO1xuY29uc3QgdHJhY2luZ1BvbGljeV9qc18xID0gcmVxdWlyZShcIi4vcG9saWNpZXMvdHJhY2luZ1BvbGljeS5qc1wiKTtcbmNvbnN0IHdyYXBBYm9ydFNpZ25hbExpa2VQb2xpY3lfanNfMSA9IHJlcXVpcmUoXCIuL3BvbGljaWVzL3dyYXBBYm9ydFNpZ25hbExpa2VQb2xpY3kuanNcIik7XG4vKipcbiAqIENyZWF0ZSBhIG5ldyBwaXBlbGluZSB3aXRoIGEgZGVmYXVsdCBzZXQgb2YgY3VzdG9taXphYmxlIHBvbGljaWVzLlxuICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIHRvIGNvbmZpZ3VyZSBhIGN1c3RvbSBwaXBlbGluZS5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUGlwZWxpbmVGcm9tT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IHBpcGVsaW5lID0gKDAsIHBpcGVsaW5lX2pzXzEuY3JlYXRlRW1wdHlQaXBlbGluZSkoKTtcbiAgICBpZiAoY29yZV91dGlsXzEuaXNOb2RlTGlrZSkge1xuICAgICAgICBpZiAob3B0aW9ucy5hZ2VudCkge1xuICAgICAgICAgICAgcGlwZWxpbmUuYWRkUG9saWN5KCgwLCBhZ2VudFBvbGljeV9qc18xLmFnZW50UG9saWN5KShvcHRpb25zLmFnZW50KSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMudGxzT3B0aW9ucykge1xuICAgICAgICAgICAgcGlwZWxpbmUuYWRkUG9saWN5KCgwLCB0bHNQb2xpY3lfanNfMS50bHNQb2xpY3kpKG9wdGlvbnMudGxzT3B0aW9ucykpO1xuICAgICAgICB9XG4gICAgICAgIHBpcGVsaW5lLmFkZFBvbGljeSgoMCwgcHJveHlQb2xpY3lfanNfMS5wcm94eVBvbGljeSkob3B0aW9ucy5wcm94eU9wdGlvbnMpKTtcbiAgICAgICAgcGlwZWxpbmUuYWRkUG9saWN5KCgwLCBkZWNvbXByZXNzUmVzcG9uc2VQb2xpY3lfanNfMS5kZWNvbXByZXNzUmVzcG9uc2VQb2xpY3kpKCkpO1xuICAgIH1cbiAgICBwaXBlbGluZS5hZGRQb2xpY3koKDAsIHdyYXBBYm9ydFNpZ25hbExpa2VQb2xpY3lfanNfMS53cmFwQWJvcnRTaWduYWxMaWtlUG9saWN5KSgpKTtcbiAgICBwaXBlbGluZS5hZGRQb2xpY3koKDAsIGZvcm1EYXRhUG9saWN5X2pzXzEuZm9ybURhdGFQb2xpY3kpKCksIHsgYmVmb3JlUG9saWNpZXM6IFttdWx0aXBhcnRQb2xpY3lfanNfMS5tdWx0aXBhcnRQb2xpY3lOYW1lXSB9KTtcbiAgICBwaXBlbGluZS5hZGRQb2xpY3koKDAsIHVzZXJBZ2VudFBvbGljeV9qc18xLnVzZXJBZ2VudFBvbGljeSkob3B0aW9ucy51c2VyQWdlbnRPcHRpb25zKSk7XG4gICAgcGlwZWxpbmUuYWRkUG9saWN5KCgwLCBzZXRDbGllbnRSZXF1ZXN0SWRQb2xpY3lfanNfMS5zZXRDbGllbnRSZXF1ZXN0SWRQb2xpY3kpKChfYSA9IG9wdGlvbnMudGVsZW1ldHJ5T3B0aW9ucykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNsaWVudFJlcXVlc3RJZEhlYWRlck5hbWUpKTtcbiAgICAvLyBUaGUgbXVsdGlwYXJ0IHBvbGljeSBpcyBhZGRlZCBhZnRlciBwb2xpY2llcyB3aXRoIG5vIHBoYXNlLCBzbyB0aGF0XG4gICAgLy8gcG9saWNpZXMgY2FuIGJlIGFkZGVkIGJldHdlZW4gaXQgYW5kIGZvcm1EYXRhUG9saWN5IHRvIG1vZGlmeVxuICAgIC8vIHByb3BlcnRpZXMgKGUuZy4sIG1ha2luZyB0aGUgYm91bmRhcnkgY29uc3RhbnQgaW4gcmVjb3JkZWQgdGVzdHMpLlxuICAgIHBpcGVsaW5lLmFkZFBvbGljeSgoMCwgbXVsdGlwYXJ0UG9saWN5X2pzXzEubXVsdGlwYXJ0UG9saWN5KSgpLCB7IGFmdGVyUGhhc2U6IFwiRGVzZXJpYWxpemVcIiB9KTtcbiAgICBwaXBlbGluZS5hZGRQb2xpY3koKDAsIGRlZmF1bHRSZXRyeVBvbGljeV9qc18xLmRlZmF1bHRSZXRyeVBvbGljeSkob3B0aW9ucy5yZXRyeU9wdGlvbnMpLCB7IHBoYXNlOiBcIlJldHJ5XCIgfSk7XG4gICAgcGlwZWxpbmUuYWRkUG9saWN5KCgwLCB0cmFjaW5nUG9saWN5X2pzXzEudHJhY2luZ1BvbGljeSkoT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLnVzZXJBZ2VudE9wdGlvbnMpLCBvcHRpb25zLmxvZ2dpbmdPcHRpb25zKSksIHtcbiAgICAgICAgYWZ0ZXJQaGFzZTogXCJSZXRyeVwiLFxuICAgIH0pO1xuICAgIGlmIChjb3JlX3V0aWxfMS5pc05vZGVMaWtlKSB7XG4gICAgICAgIC8vIEJvdGggWEhSIGFuZCBGZXRjaCBleHBlY3QgdG8gaGFuZGxlIHJlZGlyZWN0cyBhdXRvbWF0aWNhbGx5LFxuICAgICAgICAvLyBzbyBvbmx5IGluY2x1ZGUgdGhpcyBwb2xpY3kgd2hlbiB3ZSdyZSBpbiBOb2RlLlxuICAgICAgICBwaXBlbGluZS5hZGRQb2xpY3koKDAsIHJlZGlyZWN0UG9saWN5X2pzXzEucmVkaXJlY3RQb2xpY3kpKG9wdGlvbnMucmVkaXJlY3RPcHRpb25zKSwgeyBhZnRlclBoYXNlOiBcIlJldHJ5XCIgfSk7XG4gICAgfVxuICAgIHBpcGVsaW5lLmFkZFBvbGljeSgoMCwgbG9nUG9saWN5X2pzXzEubG9nUG9saWN5KShvcHRpb25zLmxvZ2dpbmdPcHRpb25zKSwgeyBhZnRlclBoYXNlOiBcIlNpZ25cIiB9KTtcbiAgICByZXR1cm4gcGlwZWxpbmU7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVQaXBlbGluZUZyb21PcHRpb25zLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/createPipelineFromOptions.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/defaultHttpClient.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/commonjs/defaultHttpClient.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createDefaultHttpClient = createDefaultHttpClient;\nconst ts_http_runtime_1 = __webpack_require__(/*! @typespec/ts-http-runtime */ \"(rsc)/./node_modules/@typespec/ts-http-runtime/dist/commonjs/index.js\");\nconst wrapAbortSignal_js_1 = __webpack_require__(/*! ./util/wrapAbortSignal.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/util/wrapAbortSignal.js\");\n/**\n * Create the correct HttpClient for the current environment.\n */\nfunction createDefaultHttpClient() {\n    const client = (0, ts_http_runtime_1.createDefaultHttpClient)();\n    return {\n        async sendRequest(request) {\n            // we wrap any AbortSignalLike here since the TypeSpec runtime expects a native AbortSignal.\n            // 99% of the time, this should be a no-op since a native AbortSignal is passed in.\n            const { abortSignal, cleanup } = request.abortSignal\n                ? (0, wrapAbortSignal_js_1.wrapAbortSignalLike)(request.abortSignal)\n                : {};\n            try {\n                // eslint-disable-next-line no-param-reassign\n                request.abortSignal = abortSignal;\n                return await client.sendRequest(request);\n            }\n            finally {\n                cleanup === null || cleanup === void 0 ? void 0 : cleanup();\n            }\n        },\n    };\n}\n//# sourceMappingURL=defaultHttpClient.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2NvbW1vbmpzL2RlZmF1bHRIdHRwQ2xpZW50LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwrQkFBK0I7QUFDL0IsMEJBQTBCLG1CQUFPLENBQUMsd0dBQTJCO0FBQzdELDZCQUE2QixtQkFBTyxDQUFDLHVIQUEyQjtBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsdUJBQXVCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2NvbW1vbmpzL2RlZmF1bHRIdHRwQ2xpZW50LmpzP2FiMGIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY3JlYXRlRGVmYXVsdEh0dHBDbGllbnQgPSBjcmVhdGVEZWZhdWx0SHR0cENsaWVudDtcbmNvbnN0IHRzX2h0dHBfcnVudGltZV8xID0gcmVxdWlyZShcIkB0eXBlc3BlYy90cy1odHRwLXJ1bnRpbWVcIik7XG5jb25zdCB3cmFwQWJvcnRTaWduYWxfanNfMSA9IHJlcXVpcmUoXCIuL3V0aWwvd3JhcEFib3J0U2lnbmFsLmpzXCIpO1xuLyoqXG4gKiBDcmVhdGUgdGhlIGNvcnJlY3QgSHR0cENsaWVudCBmb3IgdGhlIGN1cnJlbnQgZW52aXJvbm1lbnQuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZURlZmF1bHRIdHRwQ2xpZW50KCkge1xuICAgIGNvbnN0IGNsaWVudCA9ICgwLCB0c19odHRwX3J1bnRpbWVfMS5jcmVhdGVEZWZhdWx0SHR0cENsaWVudCkoKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBhc3luYyBzZW5kUmVxdWVzdChyZXF1ZXN0KSB7XG4gICAgICAgICAgICAvLyB3ZSB3cmFwIGFueSBBYm9ydFNpZ25hbExpa2UgaGVyZSBzaW5jZSB0aGUgVHlwZVNwZWMgcnVudGltZSBleHBlY3RzIGEgbmF0aXZlIEFib3J0U2lnbmFsLlxuICAgICAgICAgICAgLy8gOTklIG9mIHRoZSB0aW1lLCB0aGlzIHNob3VsZCBiZSBhIG5vLW9wIHNpbmNlIGEgbmF0aXZlIEFib3J0U2lnbmFsIGlzIHBhc3NlZCBpbi5cbiAgICAgICAgICAgIGNvbnN0IHsgYWJvcnRTaWduYWwsIGNsZWFudXAgfSA9IHJlcXVlc3QuYWJvcnRTaWduYWxcbiAgICAgICAgICAgICAgICA/ICgwLCB3cmFwQWJvcnRTaWduYWxfanNfMS53cmFwQWJvcnRTaWduYWxMaWtlKShyZXF1ZXN0LmFib3J0U2lnbmFsKVxuICAgICAgICAgICAgICAgIDoge307XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICAgICAgICAgIHJlcXVlc3QuYWJvcnRTaWduYWwgPSBhYm9ydFNpZ25hbDtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgY2xpZW50LnNlbmRSZXF1ZXN0KHJlcXVlc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgY2xlYW51cCA9PT0gbnVsbCB8fCBjbGVhbnVwID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjbGVhbnVwKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlZmF1bHRIdHRwQ2xpZW50LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/defaultHttpClient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/httpHeaders.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/commonjs/httpHeaders.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createHttpHeaders = createHttpHeaders;\nconst ts_http_runtime_1 = __webpack_require__(/*! @typespec/ts-http-runtime */ \"(rsc)/./node_modules/@typespec/ts-http-runtime/dist/commonjs/index.js\");\n/**\n * Creates an object that satisfies the `HttpHeaders` interface.\n * @param rawHeaders - A simple object representing initial headers\n */\nfunction createHttpHeaders(rawHeaders) {\n    return (0, ts_http_runtime_1.createHttpHeaders)(rawHeaders);\n}\n//# sourceMappingURL=httpHeaders.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2NvbW1vbmpzL2h0dHBIZWFkZXJzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx5QkFBeUI7QUFDekIsMEJBQTBCLG1CQUFPLENBQUMsd0dBQTJCO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9jb21tb25qcy9odHRwSGVhZGVycy5qcz9kNzY3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNyZWF0ZUh0dHBIZWFkZXJzID0gY3JlYXRlSHR0cEhlYWRlcnM7XG5jb25zdCB0c19odHRwX3J1bnRpbWVfMSA9IHJlcXVpcmUoXCJAdHlwZXNwZWMvdHMtaHR0cC1ydW50aW1lXCIpO1xuLyoqXG4gKiBDcmVhdGVzIGFuIG9iamVjdCB0aGF0IHNhdGlzZmllcyB0aGUgYEh0dHBIZWFkZXJzYCBpbnRlcmZhY2UuXG4gKiBAcGFyYW0gcmF3SGVhZGVycyAtIEEgc2ltcGxlIG9iamVjdCByZXByZXNlbnRpbmcgaW5pdGlhbCBoZWFkZXJzXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUh0dHBIZWFkZXJzKHJhd0hlYWRlcnMpIHtcbiAgICByZXR1cm4gKDAsIHRzX2h0dHBfcnVudGltZV8xLmNyZWF0ZUh0dHBIZWFkZXJzKShyYXdIZWFkZXJzKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWh0dHBIZWFkZXJzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/httpHeaders.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/commonjs/index.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createFileFromStream = exports.createFile = exports.agentPolicyName = exports.agentPolicy = exports.auxiliaryAuthenticationHeaderPolicyName = exports.auxiliaryAuthenticationHeaderPolicy = exports.ndJsonPolicyName = exports.ndJsonPolicy = exports.bearerTokenAuthenticationPolicyName = exports.bearerTokenAuthenticationPolicy = exports.formDataPolicyName = exports.formDataPolicy = exports.tlsPolicyName = exports.tlsPolicy = exports.userAgentPolicyName = exports.userAgentPolicy = exports.defaultRetryPolicy = exports.tracingPolicyName = exports.tracingPolicy = exports.retryPolicy = exports.throttlingRetryPolicyName = exports.throttlingRetryPolicy = exports.systemErrorRetryPolicyName = exports.systemErrorRetryPolicy = exports.redirectPolicyName = exports.redirectPolicy = exports.getDefaultProxySettings = exports.proxyPolicyName = exports.proxyPolicy = exports.multipartPolicyName = exports.multipartPolicy = exports.logPolicyName = exports.logPolicy = exports.setClientRequestIdPolicyName = exports.setClientRequestIdPolicy = exports.exponentialRetryPolicyName = exports.exponentialRetryPolicy = exports.decompressResponsePolicyName = exports.decompressResponsePolicy = exports.isRestError = exports.RestError = exports.createPipelineRequest = exports.createHttpHeaders = exports.createDefaultHttpClient = exports.createPipelineFromOptions = exports.createEmptyPipeline = void 0;\nvar pipeline_js_1 = __webpack_require__(/*! ./pipeline.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/pipeline.js\");\nObject.defineProperty(exports, \"createEmptyPipeline\", ({ enumerable: true, get: function () { return pipeline_js_1.createEmptyPipeline; } }));\nvar createPipelineFromOptions_js_1 = __webpack_require__(/*! ./createPipelineFromOptions.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/createPipelineFromOptions.js\");\nObject.defineProperty(exports, \"createPipelineFromOptions\", ({ enumerable: true, get: function () { return createPipelineFromOptions_js_1.createPipelineFromOptions; } }));\nvar defaultHttpClient_js_1 = __webpack_require__(/*! ./defaultHttpClient.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/defaultHttpClient.js\");\nObject.defineProperty(exports, \"createDefaultHttpClient\", ({ enumerable: true, get: function () { return defaultHttpClient_js_1.createDefaultHttpClient; } }));\nvar httpHeaders_js_1 = __webpack_require__(/*! ./httpHeaders.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/httpHeaders.js\");\nObject.defineProperty(exports, \"createHttpHeaders\", ({ enumerable: true, get: function () { return httpHeaders_js_1.createHttpHeaders; } }));\nvar pipelineRequest_js_1 = __webpack_require__(/*! ./pipelineRequest.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/pipelineRequest.js\");\nObject.defineProperty(exports, \"createPipelineRequest\", ({ enumerable: true, get: function () { return pipelineRequest_js_1.createPipelineRequest; } }));\nvar restError_js_1 = __webpack_require__(/*! ./restError.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/restError.js\");\nObject.defineProperty(exports, \"RestError\", ({ enumerable: true, get: function () { return restError_js_1.RestError; } }));\nObject.defineProperty(exports, \"isRestError\", ({ enumerable: true, get: function () { return restError_js_1.isRestError; } }));\nvar decompressResponsePolicy_js_1 = __webpack_require__(/*! ./policies/decompressResponsePolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/decompressResponsePolicy.js\");\nObject.defineProperty(exports, \"decompressResponsePolicy\", ({ enumerable: true, get: function () { return decompressResponsePolicy_js_1.decompressResponsePolicy; } }));\nObject.defineProperty(exports, \"decompressResponsePolicyName\", ({ enumerable: true, get: function () { return decompressResponsePolicy_js_1.decompressResponsePolicyName; } }));\nvar exponentialRetryPolicy_js_1 = __webpack_require__(/*! ./policies/exponentialRetryPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/exponentialRetryPolicy.js\");\nObject.defineProperty(exports, \"exponentialRetryPolicy\", ({ enumerable: true, get: function () { return exponentialRetryPolicy_js_1.exponentialRetryPolicy; } }));\nObject.defineProperty(exports, \"exponentialRetryPolicyName\", ({ enumerable: true, get: function () { return exponentialRetryPolicy_js_1.exponentialRetryPolicyName; } }));\nvar setClientRequestIdPolicy_js_1 = __webpack_require__(/*! ./policies/setClientRequestIdPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/setClientRequestIdPolicy.js\");\nObject.defineProperty(exports, \"setClientRequestIdPolicy\", ({ enumerable: true, get: function () { return setClientRequestIdPolicy_js_1.setClientRequestIdPolicy; } }));\nObject.defineProperty(exports, \"setClientRequestIdPolicyName\", ({ enumerable: true, get: function () { return setClientRequestIdPolicy_js_1.setClientRequestIdPolicyName; } }));\nvar logPolicy_js_1 = __webpack_require__(/*! ./policies/logPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/logPolicy.js\");\nObject.defineProperty(exports, \"logPolicy\", ({ enumerable: true, get: function () { return logPolicy_js_1.logPolicy; } }));\nObject.defineProperty(exports, \"logPolicyName\", ({ enumerable: true, get: function () { return logPolicy_js_1.logPolicyName; } }));\nvar multipartPolicy_js_1 = __webpack_require__(/*! ./policies/multipartPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/multipartPolicy.js\");\nObject.defineProperty(exports, \"multipartPolicy\", ({ enumerable: true, get: function () { return multipartPolicy_js_1.multipartPolicy; } }));\nObject.defineProperty(exports, \"multipartPolicyName\", ({ enumerable: true, get: function () { return multipartPolicy_js_1.multipartPolicyName; } }));\nvar proxyPolicy_js_1 = __webpack_require__(/*! ./policies/proxyPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/proxyPolicy.js\");\nObject.defineProperty(exports, \"proxyPolicy\", ({ enumerable: true, get: function () { return proxyPolicy_js_1.proxyPolicy; } }));\nObject.defineProperty(exports, \"proxyPolicyName\", ({ enumerable: true, get: function () { return proxyPolicy_js_1.proxyPolicyName; } }));\nObject.defineProperty(exports, \"getDefaultProxySettings\", ({ enumerable: true, get: function () { return proxyPolicy_js_1.getDefaultProxySettings; } }));\nvar redirectPolicy_js_1 = __webpack_require__(/*! ./policies/redirectPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/redirectPolicy.js\");\nObject.defineProperty(exports, \"redirectPolicy\", ({ enumerable: true, get: function () { return redirectPolicy_js_1.redirectPolicy; } }));\nObject.defineProperty(exports, \"redirectPolicyName\", ({ enumerable: true, get: function () { return redirectPolicy_js_1.redirectPolicyName; } }));\nvar systemErrorRetryPolicy_js_1 = __webpack_require__(/*! ./policies/systemErrorRetryPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/systemErrorRetryPolicy.js\");\nObject.defineProperty(exports, \"systemErrorRetryPolicy\", ({ enumerable: true, get: function () { return systemErrorRetryPolicy_js_1.systemErrorRetryPolicy; } }));\nObject.defineProperty(exports, \"systemErrorRetryPolicyName\", ({ enumerable: true, get: function () { return systemErrorRetryPolicy_js_1.systemErrorRetryPolicyName; } }));\nvar throttlingRetryPolicy_js_1 = __webpack_require__(/*! ./policies/throttlingRetryPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/throttlingRetryPolicy.js\");\nObject.defineProperty(exports, \"throttlingRetryPolicy\", ({ enumerable: true, get: function () { return throttlingRetryPolicy_js_1.throttlingRetryPolicy; } }));\nObject.defineProperty(exports, \"throttlingRetryPolicyName\", ({ enumerable: true, get: function () { return throttlingRetryPolicy_js_1.throttlingRetryPolicyName; } }));\nvar retryPolicy_js_1 = __webpack_require__(/*! ./policies/retryPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/retryPolicy.js\");\nObject.defineProperty(exports, \"retryPolicy\", ({ enumerable: true, get: function () { return retryPolicy_js_1.retryPolicy; } }));\nvar tracingPolicy_js_1 = __webpack_require__(/*! ./policies/tracingPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/tracingPolicy.js\");\nObject.defineProperty(exports, \"tracingPolicy\", ({ enumerable: true, get: function () { return tracingPolicy_js_1.tracingPolicy; } }));\nObject.defineProperty(exports, \"tracingPolicyName\", ({ enumerable: true, get: function () { return tracingPolicy_js_1.tracingPolicyName; } }));\nvar defaultRetryPolicy_js_1 = __webpack_require__(/*! ./policies/defaultRetryPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/defaultRetryPolicy.js\");\nObject.defineProperty(exports, \"defaultRetryPolicy\", ({ enumerable: true, get: function () { return defaultRetryPolicy_js_1.defaultRetryPolicy; } }));\nvar userAgentPolicy_js_1 = __webpack_require__(/*! ./policies/userAgentPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/userAgentPolicy.js\");\nObject.defineProperty(exports, \"userAgentPolicy\", ({ enumerable: true, get: function () { return userAgentPolicy_js_1.userAgentPolicy; } }));\nObject.defineProperty(exports, \"userAgentPolicyName\", ({ enumerable: true, get: function () { return userAgentPolicy_js_1.userAgentPolicyName; } }));\nvar tlsPolicy_js_1 = __webpack_require__(/*! ./policies/tlsPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/tlsPolicy.js\");\nObject.defineProperty(exports, \"tlsPolicy\", ({ enumerable: true, get: function () { return tlsPolicy_js_1.tlsPolicy; } }));\nObject.defineProperty(exports, \"tlsPolicyName\", ({ enumerable: true, get: function () { return tlsPolicy_js_1.tlsPolicyName; } }));\nvar formDataPolicy_js_1 = __webpack_require__(/*! ./policies/formDataPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/formDataPolicy.js\");\nObject.defineProperty(exports, \"formDataPolicy\", ({ enumerable: true, get: function () { return formDataPolicy_js_1.formDataPolicy; } }));\nObject.defineProperty(exports, \"formDataPolicyName\", ({ enumerable: true, get: function () { return formDataPolicy_js_1.formDataPolicyName; } }));\nvar bearerTokenAuthenticationPolicy_js_1 = __webpack_require__(/*! ./policies/bearerTokenAuthenticationPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/bearerTokenAuthenticationPolicy.js\");\nObject.defineProperty(exports, \"bearerTokenAuthenticationPolicy\", ({ enumerable: true, get: function () { return bearerTokenAuthenticationPolicy_js_1.bearerTokenAuthenticationPolicy; } }));\nObject.defineProperty(exports, \"bearerTokenAuthenticationPolicyName\", ({ enumerable: true, get: function () { return bearerTokenAuthenticationPolicy_js_1.bearerTokenAuthenticationPolicyName; } }));\nvar ndJsonPolicy_js_1 = __webpack_require__(/*! ./policies/ndJsonPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/ndJsonPolicy.js\");\nObject.defineProperty(exports, \"ndJsonPolicy\", ({ enumerable: true, get: function () { return ndJsonPolicy_js_1.ndJsonPolicy; } }));\nObject.defineProperty(exports, \"ndJsonPolicyName\", ({ enumerable: true, get: function () { return ndJsonPolicy_js_1.ndJsonPolicyName; } }));\nvar auxiliaryAuthenticationHeaderPolicy_js_1 = __webpack_require__(/*! ./policies/auxiliaryAuthenticationHeaderPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/auxiliaryAuthenticationHeaderPolicy.js\");\nObject.defineProperty(exports, \"auxiliaryAuthenticationHeaderPolicy\", ({ enumerable: true, get: function () { return auxiliaryAuthenticationHeaderPolicy_js_1.auxiliaryAuthenticationHeaderPolicy; } }));\nObject.defineProperty(exports, \"auxiliaryAuthenticationHeaderPolicyName\", ({ enumerable: true, get: function () { return auxiliaryAuthenticationHeaderPolicy_js_1.auxiliaryAuthenticationHeaderPolicyName; } }));\nvar agentPolicy_js_1 = __webpack_require__(/*! ./policies/agentPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/agentPolicy.js\");\nObject.defineProperty(exports, \"agentPolicy\", ({ enumerable: true, get: function () { return agentPolicy_js_1.agentPolicy; } }));\nObject.defineProperty(exports, \"agentPolicyName\", ({ enumerable: true, get: function () { return agentPolicy_js_1.agentPolicyName; } }));\nvar file_js_1 = __webpack_require__(/*! ./util/file.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/util/file.js\");\nObject.defineProperty(exports, \"createFile\", ({ enumerable: true, get: function () { return file_js_1.createFile; } }));\nObject.defineProperty(exports, \"createFileFromStream\", ({ enumerable: true, get: function () { return file_js_1.createFileFromStream; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/log.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/commonjs/log.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.logger = void 0;\nconst logger_1 = __webpack_require__(/*! @azure/logger */ \"(rsc)/./node_modules/@azure/logger/dist/commonjs/index.js\");\nexports.logger = (0, logger_1.createClientLogger)(\"core-rest-pipeline\");\n//# sourceMappingURL=log.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2NvbW1vbmpzL2xvZy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsY0FBYztBQUNkLGlCQUFpQixtQkFBTyxDQUFDLGdGQUFlO0FBQ3hDLGNBQWM7QUFDZCIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2NvbW1vbmpzL2xvZy5qcz9kNzEwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmxvZ2dlciA9IHZvaWQgMDtcbmNvbnN0IGxvZ2dlcl8xID0gcmVxdWlyZShcIkBhenVyZS9sb2dnZXJcIik7XG5leHBvcnRzLmxvZ2dlciA9ICgwLCBsb2dnZXJfMS5jcmVhdGVDbGllbnRMb2dnZXIpKFwiY29yZS1yZXN0LXBpcGVsaW5lXCIpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9nLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/log.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/pipeline.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/commonjs/pipeline.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createEmptyPipeline = createEmptyPipeline;\nconst ts_http_runtime_1 = __webpack_require__(/*! @typespec/ts-http-runtime */ \"(rsc)/./node_modules/@typespec/ts-http-runtime/dist/commonjs/index.js\");\n/**\n * Creates a totally empty pipeline.\n * Useful for testing or creating a custom one.\n */\nfunction createEmptyPipeline() {\n    return (0, ts_http_runtime_1.createEmptyPipeline)();\n}\n//# sourceMappingURL=pipeline.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2NvbW1vbmpzL3BpcGVsaW5lLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwyQkFBMkI7QUFDM0IsMEJBQTBCLG1CQUFPLENBQUMsd0dBQTJCO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9jb21tb25qcy9waXBlbGluZS5qcz83YjNmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNyZWF0ZUVtcHR5UGlwZWxpbmUgPSBjcmVhdGVFbXB0eVBpcGVsaW5lO1xuY29uc3QgdHNfaHR0cF9ydW50aW1lXzEgPSByZXF1aXJlKFwiQHR5cGVzcGVjL3RzLWh0dHAtcnVudGltZVwiKTtcbi8qKlxuICogQ3JlYXRlcyBhIHRvdGFsbHkgZW1wdHkgcGlwZWxpbmUuXG4gKiBVc2VmdWwgZm9yIHRlc3Rpbmcgb3IgY3JlYXRpbmcgYSBjdXN0b20gb25lLlxuICovXG5mdW5jdGlvbiBjcmVhdGVFbXB0eVBpcGVsaW5lKCkge1xuICAgIHJldHVybiAoMCwgdHNfaHR0cF9ydW50aW1lXzEuY3JlYXRlRW1wdHlQaXBlbGluZSkoKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBpcGVsaW5lLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/pipeline.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/pipelineRequest.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/commonjs/pipelineRequest.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createPipelineRequest = createPipelineRequest;\nconst ts_http_runtime_1 = __webpack_require__(/*! @typespec/ts-http-runtime */ \"(rsc)/./node_modules/@typespec/ts-http-runtime/dist/commonjs/index.js\");\n/**\n * Creates a new pipeline request with the given options.\n * This method is to allow for the easy setting of default values and not required.\n * @param options - The options to create the request with.\n */\nfunction createPipelineRequest(options) {\n    // Cast required due to difference between ts-http-runtime requiring AbortSignal while core-rest-pipeline allows\n    // the more generic AbortSignalLike. The wrapAbortSignalLike pipeline policy will take care of ensuring that any AbortSignalLike in the request\n    // is converted into a true AbortSignal.\n    return (0, ts_http_runtime_1.createPipelineRequest)(options);\n}\n//# sourceMappingURL=pipelineRequest.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2NvbW1vbmpzL3BpcGVsaW5lUmVxdWVzdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNkJBQTZCO0FBQzdCLDBCQUEwQixtQkFBTyxDQUFDLHdHQUEyQjtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9jb21tb25qcy9waXBlbGluZVJlcXVlc3QuanM/MTI1OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jcmVhdGVQaXBlbGluZVJlcXVlc3QgPSBjcmVhdGVQaXBlbGluZVJlcXVlc3Q7XG5jb25zdCB0c19odHRwX3J1bnRpbWVfMSA9IHJlcXVpcmUoXCJAdHlwZXNwZWMvdHMtaHR0cC1ydW50aW1lXCIpO1xuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHBpcGVsaW5lIHJlcXVlc3Qgd2l0aCB0aGUgZ2l2ZW4gb3B0aW9ucy5cbiAqIFRoaXMgbWV0aG9kIGlzIHRvIGFsbG93IGZvciB0aGUgZWFzeSBzZXR0aW5nIG9mIGRlZmF1bHQgdmFsdWVzIGFuZCBub3QgcmVxdWlyZWQuXG4gKiBAcGFyYW0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIHRvIGNyZWF0ZSB0aGUgcmVxdWVzdCB3aXRoLlxuICovXG5mdW5jdGlvbiBjcmVhdGVQaXBlbGluZVJlcXVlc3Qob3B0aW9ucykge1xuICAgIC8vIENhc3QgcmVxdWlyZWQgZHVlIHRvIGRpZmZlcmVuY2UgYmV0d2VlbiB0cy1odHRwLXJ1bnRpbWUgcmVxdWlyaW5nIEFib3J0U2lnbmFsIHdoaWxlIGNvcmUtcmVzdC1waXBlbGluZSBhbGxvd3NcbiAgICAvLyB0aGUgbW9yZSBnZW5lcmljIEFib3J0U2lnbmFsTGlrZS4gVGhlIHdyYXBBYm9ydFNpZ25hbExpa2UgcGlwZWxpbmUgcG9saWN5IHdpbGwgdGFrZSBjYXJlIG9mIGVuc3VyaW5nIHRoYXQgYW55IEFib3J0U2lnbmFsTGlrZSBpbiB0aGUgcmVxdWVzdFxuICAgIC8vIGlzIGNvbnZlcnRlZCBpbnRvIGEgdHJ1ZSBBYm9ydFNpZ25hbC5cbiAgICByZXR1cm4gKDAsIHRzX2h0dHBfcnVudGltZV8xLmNyZWF0ZVBpcGVsaW5lUmVxdWVzdCkob3B0aW9ucyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1waXBlbGluZVJlcXVlc3QuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/pipelineRequest.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/agentPolicy.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/agentPolicy.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.agentPolicyName = void 0;\nexports.agentPolicy = agentPolicy;\nconst policies_1 = __webpack_require__(/*! @typespec/ts-http-runtime/internal/policies */ \"(rsc)/./node_modules/@typespec/ts-http-runtime/dist/commonjs/policies/internal.js\");\n/**\n * Name of the Agent Policy\n */\nexports.agentPolicyName = policies_1.agentPolicyName;\n/**\n * Gets a pipeline policy that sets http.agent\n */\nfunction agentPolicy(agent) {\n    return (0, policies_1.agentPolicy)(agent);\n}\n//# sourceMappingURL=agentPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2NvbW1vbmpzL3BvbGljaWVzL2FnZW50UG9saWN5LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx1QkFBdUI7QUFDdkIsbUJBQW1CO0FBQ25CLG1CQUFtQixtQkFBTyxDQUFDLHNJQUE2QztBQUN4RTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9jb21tb25qcy9wb2xpY2llcy9hZ2VudFBvbGljeS5qcz9kMWM0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmFnZW50UG9saWN5TmFtZSA9IHZvaWQgMDtcbmV4cG9ydHMuYWdlbnRQb2xpY3kgPSBhZ2VudFBvbGljeTtcbmNvbnN0IHBvbGljaWVzXzEgPSByZXF1aXJlKFwiQHR5cGVzcGVjL3RzLWh0dHAtcnVudGltZS9pbnRlcm5hbC9wb2xpY2llc1wiKTtcbi8qKlxuICogTmFtZSBvZiB0aGUgQWdlbnQgUG9saWN5XG4gKi9cbmV4cG9ydHMuYWdlbnRQb2xpY3lOYW1lID0gcG9saWNpZXNfMS5hZ2VudFBvbGljeU5hbWU7XG4vKipcbiAqIEdldHMgYSBwaXBlbGluZSBwb2xpY3kgdGhhdCBzZXRzIGh0dHAuYWdlbnRcbiAqL1xuZnVuY3Rpb24gYWdlbnRQb2xpY3koYWdlbnQpIHtcbiAgICByZXR1cm4gKDAsIHBvbGljaWVzXzEuYWdlbnRQb2xpY3kpKGFnZW50KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFnZW50UG9saWN5LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/agentPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/auxiliaryAuthenticationHeaderPolicy.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/auxiliaryAuthenticationHeaderPolicy.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.auxiliaryAuthenticationHeaderPolicyName = void 0;\nexports.auxiliaryAuthenticationHeaderPolicy = auxiliaryAuthenticationHeaderPolicy;\nconst tokenCycler_js_1 = __webpack_require__(/*! ../util/tokenCycler.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/util/tokenCycler.js\");\nconst log_js_1 = __webpack_require__(/*! ../log.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/log.js\");\n/**\n * The programmatic identifier of the auxiliaryAuthenticationHeaderPolicy.\n */\nexports.auxiliaryAuthenticationHeaderPolicyName = \"auxiliaryAuthenticationHeaderPolicy\";\nconst AUTHORIZATION_AUXILIARY_HEADER = \"x-ms-authorization-auxiliary\";\nasync function sendAuthorizeRequest(options) {\n    var _a, _b;\n    const { scopes, getAccessToken, request } = options;\n    const getTokenOptions = {\n        abortSignal: request.abortSignal,\n        tracingOptions: request.tracingOptions,\n    };\n    return (_b = (_a = (await getAccessToken(scopes, getTokenOptions))) === null || _a === void 0 ? void 0 : _a.token) !== null && _b !== void 0 ? _b : \"\";\n}\n/**\n * A policy for external tokens to `x-ms-authorization-auxiliary` header.\n * This header will be used when creating a cross-tenant application we may need to handle authentication requests\n * for resources that are in different tenants.\n * You could see [ARM docs](https://learn.microsoft.com/azure/azure-resource-manager/management/authenticate-multi-tenant) for a rundown of how this feature works\n */\nfunction auxiliaryAuthenticationHeaderPolicy(options) {\n    const { credentials, scopes } = options;\n    const logger = options.logger || log_js_1.logger;\n    const tokenCyclerMap = new WeakMap();\n    return {\n        name: exports.auxiliaryAuthenticationHeaderPolicyName,\n        async sendRequest(request, next) {\n            if (!request.url.toLowerCase().startsWith(\"https://\")) {\n                throw new Error(\"Bearer token authentication for auxiliary header is not permitted for non-TLS protected (non-https) URLs.\");\n            }\n            if (!credentials || credentials.length === 0) {\n                logger.info(`${exports.auxiliaryAuthenticationHeaderPolicyName} header will not be set due to empty credentials.`);\n                return next(request);\n            }\n            const tokenPromises = [];\n            for (const credential of credentials) {\n                let getAccessToken = tokenCyclerMap.get(credential);\n                if (!getAccessToken) {\n                    getAccessToken = (0, tokenCycler_js_1.createTokenCycler)(credential);\n                    tokenCyclerMap.set(credential, getAccessToken);\n                }\n                tokenPromises.push(sendAuthorizeRequest({\n                    scopes: Array.isArray(scopes) ? scopes : [scopes],\n                    request,\n                    getAccessToken,\n                    logger,\n                }));\n            }\n            const auxiliaryTokens = (await Promise.all(tokenPromises)).filter((token) => Boolean(token));\n            if (auxiliaryTokens.length === 0) {\n                logger.warning(`None of the auxiliary tokens are valid. ${AUTHORIZATION_AUXILIARY_HEADER} header will not be set.`);\n                return next(request);\n            }\n            request.headers.set(AUTHORIZATION_AUXILIARY_HEADER, auxiliaryTokens.map((token) => `Bearer ${token}`).join(\", \"));\n            return next(request);\n        },\n    };\n}\n//# sourceMappingURL=auxiliaryAuthenticationHeaderPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2NvbW1vbmpzL3BvbGljaWVzL2F1eGlsaWFyeUF1dGhlbnRpY2F0aW9uSGVhZGVyUG9saWN5LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwrQ0FBK0M7QUFDL0MsMkNBQTJDO0FBQzNDLHlCQUF5QixtQkFBTyxDQUFDLGdIQUF3QjtBQUN6RCxpQkFBaUIsbUJBQU8sQ0FBQyxzRkFBVztBQUNwQztBQUNBO0FBQ0E7QUFDQSwrQ0FBK0M7QUFDL0M7QUFDQTtBQUNBO0FBQ0EsWUFBWSxrQ0FBa0M7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHNCQUFzQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsaURBQWlEO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsMEVBQTBFLGdDQUFnQztBQUMxRztBQUNBO0FBQ0EseUdBQXlHLE1BQU07QUFDL0c7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1yZXN0LXBpcGVsaW5lL2Rpc3QvY29tbW9uanMvcG9saWNpZXMvYXV4aWxpYXJ5QXV0aGVudGljYXRpb25IZWFkZXJQb2xpY3kuanM/ODM5OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5hdXhpbGlhcnlBdXRoZW50aWNhdGlvbkhlYWRlclBvbGljeU5hbWUgPSB2b2lkIDA7XG5leHBvcnRzLmF1eGlsaWFyeUF1dGhlbnRpY2F0aW9uSGVhZGVyUG9saWN5ID0gYXV4aWxpYXJ5QXV0aGVudGljYXRpb25IZWFkZXJQb2xpY3k7XG5jb25zdCB0b2tlbkN5Y2xlcl9qc18xID0gcmVxdWlyZShcIi4uL3V0aWwvdG9rZW5DeWNsZXIuanNcIik7XG5jb25zdCBsb2dfanNfMSA9IHJlcXVpcmUoXCIuLi9sb2cuanNcIik7XG4vKipcbiAqIFRoZSBwcm9ncmFtbWF0aWMgaWRlbnRpZmllciBvZiB0aGUgYXV4aWxpYXJ5QXV0aGVudGljYXRpb25IZWFkZXJQb2xpY3kuXG4gKi9cbmV4cG9ydHMuYXV4aWxpYXJ5QXV0aGVudGljYXRpb25IZWFkZXJQb2xpY3lOYW1lID0gXCJhdXhpbGlhcnlBdXRoZW50aWNhdGlvbkhlYWRlclBvbGljeVwiO1xuY29uc3QgQVVUSE9SSVpBVElPTl9BVVhJTElBUllfSEVBREVSID0gXCJ4LW1zLWF1dGhvcml6YXRpb24tYXV4aWxpYXJ5XCI7XG5hc3luYyBmdW5jdGlvbiBzZW5kQXV0aG9yaXplUmVxdWVzdChvcHRpb25zKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICBjb25zdCB7IHNjb3BlcywgZ2V0QWNjZXNzVG9rZW4sIHJlcXVlc3QgfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgZ2V0VG9rZW5PcHRpb25zID0ge1xuICAgICAgICBhYm9ydFNpZ25hbDogcmVxdWVzdC5hYm9ydFNpZ25hbCxcbiAgICAgICAgdHJhY2luZ09wdGlvbnM6IHJlcXVlc3QudHJhY2luZ09wdGlvbnMsXG4gICAgfTtcbiAgICByZXR1cm4gKF9iID0gKF9hID0gKGF3YWl0IGdldEFjY2Vzc1Rva2VuKHNjb3BlcywgZ2V0VG9rZW5PcHRpb25zKSkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS50b2tlbikgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogXCJcIjtcbn1cbi8qKlxuICogQSBwb2xpY3kgZm9yIGV4dGVybmFsIHRva2VucyB0byBgeC1tcy1hdXRob3JpemF0aW9uLWF1eGlsaWFyeWAgaGVhZGVyLlxuICogVGhpcyBoZWFkZXIgd2lsbCBiZSB1c2VkIHdoZW4gY3JlYXRpbmcgYSBjcm9zcy10ZW5hbnQgYXBwbGljYXRpb24gd2UgbWF5IG5lZWQgdG8gaGFuZGxlIGF1dGhlbnRpY2F0aW9uIHJlcXVlc3RzXG4gKiBmb3IgcmVzb3VyY2VzIHRoYXQgYXJlIGluIGRpZmZlcmVudCB0ZW5hbnRzLlxuICogWW91IGNvdWxkIHNlZSBbQVJNIGRvY3NdKGh0dHBzOi8vbGVhcm4ubWljcm9zb2Z0LmNvbS9henVyZS9henVyZS1yZXNvdXJjZS1tYW5hZ2VyL21hbmFnZW1lbnQvYXV0aGVudGljYXRlLW11bHRpLXRlbmFudCkgZm9yIGEgcnVuZG93biBvZiBob3cgdGhpcyBmZWF0dXJlIHdvcmtzXG4gKi9cbmZ1bmN0aW9uIGF1eGlsaWFyeUF1dGhlbnRpY2F0aW9uSGVhZGVyUG9saWN5KG9wdGlvbnMpIHtcbiAgICBjb25zdCB7IGNyZWRlbnRpYWxzLCBzY29wZXMgfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgbG9nZ2VyID0gb3B0aW9ucy5sb2dnZXIgfHwgbG9nX2pzXzEubG9nZ2VyO1xuICAgIGNvbnN0IHRva2VuQ3ljbGVyTWFwID0gbmV3IFdlYWtNYXAoKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiBleHBvcnRzLmF1eGlsaWFyeUF1dGhlbnRpY2F0aW9uSGVhZGVyUG9saWN5TmFtZSxcbiAgICAgICAgYXN5bmMgc2VuZFJlcXVlc3QocmVxdWVzdCwgbmV4dCkge1xuICAgICAgICAgICAgaWYgKCFyZXF1ZXN0LnVybC50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgoXCJodHRwczovL1wiKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkJlYXJlciB0b2tlbiBhdXRoZW50aWNhdGlvbiBmb3IgYXV4aWxpYXJ5IGhlYWRlciBpcyBub3QgcGVybWl0dGVkIGZvciBub24tVExTIHByb3RlY3RlZCAobm9uLWh0dHBzKSBVUkxzLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghY3JlZGVudGlhbHMgfHwgY3JlZGVudGlhbHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oYCR7ZXhwb3J0cy5hdXhpbGlhcnlBdXRoZW50aWNhdGlvbkhlYWRlclBvbGljeU5hbWV9IGhlYWRlciB3aWxsIG5vdCBiZSBzZXQgZHVlIHRvIGVtcHR5IGNyZWRlbnRpYWxzLmApO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXh0KHJlcXVlc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdG9rZW5Qcm9taXNlcyA9IFtdO1xuICAgICAgICAgICAgZm9yIChjb25zdCBjcmVkZW50aWFsIG9mIGNyZWRlbnRpYWxzKSB7XG4gICAgICAgICAgICAgICAgbGV0IGdldEFjY2Vzc1Rva2VuID0gdG9rZW5DeWNsZXJNYXAuZ2V0KGNyZWRlbnRpYWwpO1xuICAgICAgICAgICAgICAgIGlmICghZ2V0QWNjZXNzVG9rZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0QWNjZXNzVG9rZW4gPSAoMCwgdG9rZW5DeWNsZXJfanNfMS5jcmVhdGVUb2tlbkN5Y2xlcikoY3JlZGVudGlhbCk7XG4gICAgICAgICAgICAgICAgICAgIHRva2VuQ3ljbGVyTWFwLnNldChjcmVkZW50aWFsLCBnZXRBY2Nlc3NUb2tlbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRva2VuUHJvbWlzZXMucHVzaChzZW5kQXV0aG9yaXplUmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlczogQXJyYXkuaXNBcnJheShzY29wZXMpID8gc2NvcGVzIDogW3Njb3Blc10sXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3QsXG4gICAgICAgICAgICAgICAgICAgIGdldEFjY2Vzc1Rva2VuLFxuICAgICAgICAgICAgICAgICAgICBsb2dnZXIsXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgYXV4aWxpYXJ5VG9rZW5zID0gKGF3YWl0IFByb21pc2UuYWxsKHRva2VuUHJvbWlzZXMpKS5maWx0ZXIoKHRva2VuKSA9PiBCb29sZWFuKHRva2VuKSk7XG4gICAgICAgICAgICBpZiAoYXV4aWxpYXJ5VG9rZW5zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuaW5nKGBOb25lIG9mIHRoZSBhdXhpbGlhcnkgdG9rZW5zIGFyZSB2YWxpZC4gJHtBVVRIT1JJWkFUSU9OX0FVWElMSUFSWV9IRUFERVJ9IGhlYWRlciB3aWxsIG5vdCBiZSBzZXQuYCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5leHQocmVxdWVzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXF1ZXN0LmhlYWRlcnMuc2V0KEFVVEhPUklaQVRJT05fQVVYSUxJQVJZX0hFQURFUiwgYXV4aWxpYXJ5VG9rZW5zLm1hcCgodG9rZW4pID0+IGBCZWFyZXIgJHt0b2tlbn1gKS5qb2luKFwiLCBcIikpO1xuICAgICAgICAgICAgcmV0dXJuIG5leHQocmVxdWVzdCk7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF1eGlsaWFyeUF1dGhlbnRpY2F0aW9uSGVhZGVyUG9saWN5LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/auxiliaryAuthenticationHeaderPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/bearerTokenAuthenticationPolicy.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/bearerTokenAuthenticationPolicy.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.bearerTokenAuthenticationPolicyName = void 0;\nexports.bearerTokenAuthenticationPolicy = bearerTokenAuthenticationPolicy;\nexports.parseChallenges = parseChallenges;\nconst tokenCycler_js_1 = __webpack_require__(/*! ../util/tokenCycler.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/util/tokenCycler.js\");\nconst log_js_1 = __webpack_require__(/*! ../log.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/log.js\");\nconst restError_js_1 = __webpack_require__(/*! ../restError.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/restError.js\");\n/**\n * The programmatic identifier of the bearerTokenAuthenticationPolicy.\n */\nexports.bearerTokenAuthenticationPolicyName = \"bearerTokenAuthenticationPolicy\";\n/**\n * Try to send the given request.\n *\n * When a response is received, returns a tuple of the response received and, if the response was received\n * inside a thrown RestError, the RestError that was thrown.\n *\n * Otherwise, if an error was thrown while sending the request that did not provide an underlying response, it\n * will be rethrown.\n */\nasync function trySendRequest(request, next) {\n    try {\n        return [await next(request), undefined];\n    }\n    catch (e) {\n        if ((0, restError_js_1.isRestError)(e) && e.response) {\n            return [e.response, e];\n        }\n        else {\n            throw e;\n        }\n    }\n}\n/**\n * Default authorize request handler\n */\nasync function defaultAuthorizeRequest(options) {\n    const { scopes, getAccessToken, request } = options;\n    // Enable CAE true by default\n    const getTokenOptions = {\n        abortSignal: request.abortSignal,\n        tracingOptions: request.tracingOptions,\n        enableCae: true,\n    };\n    const accessToken = await getAccessToken(scopes, getTokenOptions);\n    if (accessToken) {\n        options.request.headers.set(\"Authorization\", `Bearer ${accessToken.token}`);\n    }\n}\n/**\n * We will retrieve the challenge only if the response status code was 401,\n * and if the response contained the header \"WWW-Authenticate\" with a non-empty value.\n */\nfunction isChallengeResponse(response) {\n    return response.status === 401 && response.headers.has(\"WWW-Authenticate\");\n}\n/**\n * Re-authorize the request for CAE challenge.\n * The response containing the challenge is `options.response`.\n * If this method returns true, the underlying request will be sent once again.\n */\nasync function authorizeRequestOnCaeChallenge(onChallengeOptions, caeClaims) {\n    var _a;\n    const { scopes } = onChallengeOptions;\n    const accessToken = await onChallengeOptions.getAccessToken(scopes, {\n        enableCae: true,\n        claims: caeClaims,\n    });\n    if (!accessToken) {\n        return false;\n    }\n    onChallengeOptions.request.headers.set(\"Authorization\", `${(_a = accessToken.tokenType) !== null && _a !== void 0 ? _a : \"Bearer\"} ${accessToken.token}`);\n    return true;\n}\n/**\n * A policy that can request a token from a TokenCredential implementation and\n * then apply it to the Authorization header of a request as a Bearer token.\n */\nfunction bearerTokenAuthenticationPolicy(options) {\n    var _a, _b, _c;\n    const { credential, scopes, challengeCallbacks } = options;\n    const logger = options.logger || log_js_1.logger;\n    const callbacks = {\n        authorizeRequest: (_b = (_a = challengeCallbacks === null || challengeCallbacks === void 0 ? void 0 : challengeCallbacks.authorizeRequest) === null || _a === void 0 ? void 0 : _a.bind(challengeCallbacks)) !== null && _b !== void 0 ? _b : defaultAuthorizeRequest,\n        authorizeRequestOnChallenge: (_c = challengeCallbacks === null || challengeCallbacks === void 0 ? void 0 : challengeCallbacks.authorizeRequestOnChallenge) === null || _c === void 0 ? void 0 : _c.bind(challengeCallbacks),\n    };\n    // This function encapsulates the entire process of reliably retrieving the token\n    // The options are left out of the public API until there's demand to configure this.\n    // Remember to extend `BearerTokenAuthenticationPolicyOptions` with `TokenCyclerOptions`\n    // in order to pass through the `options` object.\n    const getAccessToken = credential\n        ? (0, tokenCycler_js_1.createTokenCycler)(credential /* , options */)\n        : () => Promise.resolve(null);\n    return {\n        name: exports.bearerTokenAuthenticationPolicyName,\n        /**\n         * If there's no challenge parameter:\n         * - It will try to retrieve the token using the cache, or the credential's getToken.\n         * - Then it will try the next policy with or without the retrieved token.\n         *\n         * It uses the challenge parameters to:\n         * - Skip a first attempt to get the token from the credential if there's no cached token,\n         *   since it expects the token to be retrievable only after the challenge.\n         * - Prepare the outgoing request if the `prepareRequest` method has been provided.\n         * - Send an initial request to receive the challenge if it fails.\n         * - Process a challenge if the response contains it.\n         * - Retrieve a token with the challenge information, then re-send the request.\n         */\n        async sendRequest(request, next) {\n            if (!request.url.toLowerCase().startsWith(\"https://\")) {\n                throw new Error(\"Bearer token authentication is not permitted for non-TLS protected (non-https) URLs.\");\n            }\n            await callbacks.authorizeRequest({\n                scopes: Array.isArray(scopes) ? scopes : [scopes],\n                request,\n                getAccessToken,\n                logger,\n            });\n            let response;\n            let error;\n            let shouldSendRequest;\n            [response, error] = await trySendRequest(request, next);\n            if (isChallengeResponse(response)) {\n                let claims = getCaeChallengeClaims(response.headers.get(\"WWW-Authenticate\"));\n                // Handle CAE by default when receive CAE claim\n                if (claims) {\n                    let parsedClaim;\n                    // Return the response immediately if claims is not a valid base64 encoded string\n                    try {\n                        parsedClaim = atob(claims);\n                    }\n                    catch (e) {\n                        logger.warning(`The WWW-Authenticate header contains \"claims\" that cannot be parsed. Unable to perform the Continuous Access Evaluation authentication flow. Unparsable claims: ${claims}`);\n                        return response;\n                    }\n                    shouldSendRequest = await authorizeRequestOnCaeChallenge({\n                        scopes: Array.isArray(scopes) ? scopes : [scopes],\n                        response,\n                        request,\n                        getAccessToken,\n                        logger,\n                    }, parsedClaim);\n                    // Send updated request and handle response for RestError\n                    if (shouldSendRequest) {\n                        [response, error] = await trySendRequest(request, next);\n                    }\n                }\n                else if (callbacks.authorizeRequestOnChallenge) {\n                    // Handle custom challenges when client provides custom callback\n                    shouldSendRequest = await callbacks.authorizeRequestOnChallenge({\n                        scopes: Array.isArray(scopes) ? scopes : [scopes],\n                        request,\n                        response,\n                        getAccessToken,\n                        logger,\n                    });\n                    // Send updated request and handle response for RestError\n                    if (shouldSendRequest) {\n                        [response, error] = await trySendRequest(request, next);\n                    }\n                    // If we get another CAE Claim, we will handle it by default and return whatever value we receive for this\n                    if (isChallengeResponse(response)) {\n                        claims = getCaeChallengeClaims(response.headers.get(\"WWW-Authenticate\"));\n                        if (claims) {\n                            let parsedClaim;\n                            try {\n                                parsedClaim = atob(claims);\n                            }\n                            catch (e) {\n                                logger.warning(`The WWW-Authenticate header contains \"claims\" that cannot be parsed. Unable to perform the Continuous Access Evaluation authentication flow. Unparsable claims: ${claims}`);\n                                return response;\n                            }\n                            shouldSendRequest = await authorizeRequestOnCaeChallenge({\n                                scopes: Array.isArray(scopes) ? scopes : [scopes],\n                                response,\n                                request,\n                                getAccessToken,\n                                logger,\n                            }, parsedClaim);\n                            // Send updated request and handle response for RestError\n                            if (shouldSendRequest) {\n                                [response, error] = await trySendRequest(request, next);\n                            }\n                        }\n                    }\n                }\n            }\n            if (error) {\n                throw error;\n            }\n            else {\n                return response;\n            }\n        },\n    };\n}\n/**\n * Converts: `Bearer a=\"b\", c=\"d\", Pop e=\"f\", g=\"h\"`.\n * Into: `[ { scheme: 'Bearer', params: { a: 'b', c: 'd' } }, { scheme: 'Pop', params: { e: 'f', g: 'h' } } ]`.\n *\n * @internal\n */\nfunction parseChallenges(challenges) {\n    // Challenge regex seperates the string to individual challenges with different schemes in the format `Scheme a=\"b\", c=d`\n    // The challenge regex captures parameteres with either quotes values or unquoted values\n    const challengeRegex = /(\\w+)\\s+((?:\\w+=(?:\"[^\"]*\"|[^,]*),?\\s*)+)/g;\n    // Parameter regex captures the claims group removed from the scheme in the format `a=\"b\"` and `c=\"d\"`\n    // CAE challenge always have quoted parameters. For more reference, https://learn.microsoft.com/entra/identity-platform/claims-challenge\n    const paramRegex = /(\\w+)=\"([^\"]*)\"/g;\n    const parsedChallenges = [];\n    let match;\n    // Iterate over each challenge match\n    while ((match = challengeRegex.exec(challenges)) !== null) {\n        const scheme = match[1];\n        const paramsString = match[2];\n        const params = {};\n        let paramMatch;\n        // Iterate over each parameter match\n        while ((paramMatch = paramRegex.exec(paramsString)) !== null) {\n            params[paramMatch[1]] = paramMatch[2];\n        }\n        parsedChallenges.push({ scheme, params });\n    }\n    return parsedChallenges;\n}\n/**\n * Parse a pipeline response and look for a CAE challenge with \"Bearer\" scheme\n * Return the value in the header without parsing the challenge\n * @internal\n */\nfunction getCaeChallengeClaims(challenges) {\n    var _a;\n    if (!challenges) {\n        return;\n    }\n    // Find all challenges present in the header\n    const parsedChallenges = parseChallenges(challenges);\n    return (_a = parsedChallenges.find((x) => x.scheme === \"Bearer\" && x.params.claims && x.params.error === \"insufficient_claims\")) === null || _a === void 0 ? void 0 : _a.params.claims;\n}\n//# sourceMappingURL=bearerTokenAuthenticationPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/bearerTokenAuthenticationPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/decompressResponsePolicy.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/decompressResponsePolicy.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.decompressResponsePolicyName = void 0;\nexports.decompressResponsePolicy = decompressResponsePolicy;\nconst policies_1 = __webpack_require__(/*! @typespec/ts-http-runtime/internal/policies */ \"(rsc)/./node_modules/@typespec/ts-http-runtime/dist/commonjs/policies/internal.js\");\n/**\n * The programmatic identifier of the decompressResponsePolicy.\n */\nexports.decompressResponsePolicyName = policies_1.decompressResponsePolicyName;\n/**\n * A policy to enable response decompression according to Accept-Encoding header\n * https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Encoding\n */\nfunction decompressResponsePolicy() {\n    return (0, policies_1.decompressResponsePolicy)();\n}\n//# sourceMappingURL=decompressResponsePolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2NvbW1vbmpzL3BvbGljaWVzL2RlY29tcHJlc3NSZXNwb25zZVBvbGljeS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0NBQW9DO0FBQ3BDLGdDQUFnQztBQUNoQyxtQkFBbUIsbUJBQU8sQ0FBQyxzSUFBNkM7QUFDeEU7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9jb21tb25qcy9wb2xpY2llcy9kZWNvbXByZXNzUmVzcG9uc2VQb2xpY3kuanM/ZTdmNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWNvbXByZXNzUmVzcG9uc2VQb2xpY3lOYW1lID0gdm9pZCAwO1xuZXhwb3J0cy5kZWNvbXByZXNzUmVzcG9uc2VQb2xpY3kgPSBkZWNvbXByZXNzUmVzcG9uc2VQb2xpY3k7XG5jb25zdCBwb2xpY2llc18xID0gcmVxdWlyZShcIkB0eXBlc3BlYy90cy1odHRwLXJ1bnRpbWUvaW50ZXJuYWwvcG9saWNpZXNcIik7XG4vKipcbiAqIFRoZSBwcm9ncmFtbWF0aWMgaWRlbnRpZmllciBvZiB0aGUgZGVjb21wcmVzc1Jlc3BvbnNlUG9saWN5LlxuICovXG5leHBvcnRzLmRlY29tcHJlc3NSZXNwb25zZVBvbGljeU5hbWUgPSBwb2xpY2llc18xLmRlY29tcHJlc3NSZXNwb25zZVBvbGljeU5hbWU7XG4vKipcbiAqIEEgcG9saWN5IHRvIGVuYWJsZSByZXNwb25zZSBkZWNvbXByZXNzaW9uIGFjY29yZGluZyB0byBBY2NlcHQtRW5jb2RpbmcgaGVhZGVyXG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVFRQL0hlYWRlcnMvQWNjZXB0LUVuY29kaW5nXG4gKi9cbmZ1bmN0aW9uIGRlY29tcHJlc3NSZXNwb25zZVBvbGljeSgpIHtcbiAgICByZXR1cm4gKDAsIHBvbGljaWVzXzEuZGVjb21wcmVzc1Jlc3BvbnNlUG9saWN5KSgpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVjb21wcmVzc1Jlc3BvbnNlUG9saWN5LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/decompressResponsePolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/defaultRetryPolicy.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/defaultRetryPolicy.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.defaultRetryPolicyName = void 0;\nexports.defaultRetryPolicy = defaultRetryPolicy;\nconst policies_1 = __webpack_require__(/*! @typespec/ts-http-runtime/internal/policies */ \"(rsc)/./node_modules/@typespec/ts-http-runtime/dist/commonjs/policies/internal.js\");\n/**\n * Name of the {@link defaultRetryPolicy}\n */\nexports.defaultRetryPolicyName = policies_1.defaultRetryPolicyName;\n/**\n * A policy that retries according to three strategies:\n * - When the server sends a 429 response with a Retry-After header.\n * - When there are errors in the underlying transport layer (e.g. DNS lookup failures).\n * - Or otherwise if the outgoing request fails, it will retry with an exponentially increasing delay.\n */\nfunction defaultRetryPolicy(options = {}) {\n    return (0, policies_1.defaultRetryPolicy)(options);\n}\n//# sourceMappingURL=defaultRetryPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2NvbW1vbmpzL3BvbGljaWVzL2RlZmF1bHRSZXRyeVBvbGljeS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsOEJBQThCO0FBQzlCLDBCQUEwQjtBQUMxQixtQkFBbUIsbUJBQU8sQ0FBQyxzSUFBNkM7QUFDeEU7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDO0FBQ3hDO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2NvbW1vbmpzL3BvbGljaWVzL2RlZmF1bHRSZXRyeVBvbGljeS5qcz9lN2U2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlZmF1bHRSZXRyeVBvbGljeU5hbWUgPSB2b2lkIDA7XG5leHBvcnRzLmRlZmF1bHRSZXRyeVBvbGljeSA9IGRlZmF1bHRSZXRyeVBvbGljeTtcbmNvbnN0IHBvbGljaWVzXzEgPSByZXF1aXJlKFwiQHR5cGVzcGVjL3RzLWh0dHAtcnVudGltZS9pbnRlcm5hbC9wb2xpY2llc1wiKTtcbi8qKlxuICogTmFtZSBvZiB0aGUge0BsaW5rIGRlZmF1bHRSZXRyeVBvbGljeX1cbiAqL1xuZXhwb3J0cy5kZWZhdWx0UmV0cnlQb2xpY3lOYW1lID0gcG9saWNpZXNfMS5kZWZhdWx0UmV0cnlQb2xpY3lOYW1lO1xuLyoqXG4gKiBBIHBvbGljeSB0aGF0IHJldHJpZXMgYWNjb3JkaW5nIHRvIHRocmVlIHN0cmF0ZWdpZXM6XG4gKiAtIFdoZW4gdGhlIHNlcnZlciBzZW5kcyBhIDQyOSByZXNwb25zZSB3aXRoIGEgUmV0cnktQWZ0ZXIgaGVhZGVyLlxuICogLSBXaGVuIHRoZXJlIGFyZSBlcnJvcnMgaW4gdGhlIHVuZGVybHlpbmcgdHJhbnNwb3J0IGxheWVyIChlLmcuIEROUyBsb29rdXAgZmFpbHVyZXMpLlxuICogLSBPciBvdGhlcndpc2UgaWYgdGhlIG91dGdvaW5nIHJlcXVlc3QgZmFpbHMsIGl0IHdpbGwgcmV0cnkgd2l0aCBhbiBleHBvbmVudGlhbGx5IGluY3JlYXNpbmcgZGVsYXkuXG4gKi9cbmZ1bmN0aW9uIGRlZmF1bHRSZXRyeVBvbGljeShvcHRpb25zID0ge30pIHtcbiAgICByZXR1cm4gKDAsIHBvbGljaWVzXzEuZGVmYXVsdFJldHJ5UG9saWN5KShvcHRpb25zKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlZmF1bHRSZXRyeVBvbGljeS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/defaultRetryPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/exponentialRetryPolicy.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/exponentialRetryPolicy.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.exponentialRetryPolicyName = void 0;\nexports.exponentialRetryPolicy = exponentialRetryPolicy;\nconst policies_1 = __webpack_require__(/*! @typespec/ts-http-runtime/internal/policies */ \"(rsc)/./node_modules/@typespec/ts-http-runtime/dist/commonjs/policies/internal.js\");\n/**\n * The programmatic identifier of the exponentialRetryPolicy.\n */\nexports.exponentialRetryPolicyName = policies_1.exponentialRetryPolicyName;\n/**\n * A policy that attempts to retry requests while introducing an exponentially increasing delay.\n * @param options - Options that configure retry logic.\n */\nfunction exponentialRetryPolicy(options = {}) {\n    return (0, policies_1.exponentialRetryPolicy)(options);\n}\n//# sourceMappingURL=exponentialRetryPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2NvbW1vbmpzL3BvbGljaWVzL2V4cG9uZW50aWFsUmV0cnlQb2xpY3kuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtDQUFrQztBQUNsQyw4QkFBOEI7QUFDOUIsbUJBQW1CLG1CQUFPLENBQUMsc0lBQTZDO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QztBQUM1QztBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9jb21tb25qcy9wb2xpY2llcy9leHBvbmVudGlhbFJldHJ5UG9saWN5LmpzP2QzZTgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZXhwb25lbnRpYWxSZXRyeVBvbGljeU5hbWUgPSB2b2lkIDA7XG5leHBvcnRzLmV4cG9uZW50aWFsUmV0cnlQb2xpY3kgPSBleHBvbmVudGlhbFJldHJ5UG9saWN5O1xuY29uc3QgcG9saWNpZXNfMSA9IHJlcXVpcmUoXCJAdHlwZXNwZWMvdHMtaHR0cC1ydW50aW1lL2ludGVybmFsL3BvbGljaWVzXCIpO1xuLyoqXG4gKiBUaGUgcHJvZ3JhbW1hdGljIGlkZW50aWZpZXIgb2YgdGhlIGV4cG9uZW50aWFsUmV0cnlQb2xpY3kuXG4gKi9cbmV4cG9ydHMuZXhwb25lbnRpYWxSZXRyeVBvbGljeU5hbWUgPSBwb2xpY2llc18xLmV4cG9uZW50aWFsUmV0cnlQb2xpY3lOYW1lO1xuLyoqXG4gKiBBIHBvbGljeSB0aGF0IGF0dGVtcHRzIHRvIHJldHJ5IHJlcXVlc3RzIHdoaWxlIGludHJvZHVjaW5nIGFuIGV4cG9uZW50aWFsbHkgaW5jcmVhc2luZyBkZWxheS5cbiAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyB0aGF0IGNvbmZpZ3VyZSByZXRyeSBsb2dpYy5cbiAqL1xuZnVuY3Rpb24gZXhwb25lbnRpYWxSZXRyeVBvbGljeShvcHRpb25zID0ge30pIHtcbiAgICByZXR1cm4gKDAsIHBvbGljaWVzXzEuZXhwb25lbnRpYWxSZXRyeVBvbGljeSkob3B0aW9ucyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1leHBvbmVudGlhbFJldHJ5UG9saWN5LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/exponentialRetryPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/formDataPolicy.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/formDataPolicy.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.formDataPolicyName = void 0;\nexports.formDataPolicy = formDataPolicy;\nconst policies_1 = __webpack_require__(/*! @typespec/ts-http-runtime/internal/policies */ \"(rsc)/./node_modules/@typespec/ts-http-runtime/dist/commonjs/policies/internal.js\");\n/**\n * The programmatic identifier of the formDataPolicy.\n */\nexports.formDataPolicyName = policies_1.formDataPolicyName;\n/**\n * A policy that encodes FormData on the request into the body.\n */\nfunction formDataPolicy() {\n    return (0, policies_1.formDataPolicy)();\n}\n//# sourceMappingURL=formDataPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2NvbW1vbmpzL3BvbGljaWVzL2Zvcm1EYXRhUG9saWN5LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwwQkFBMEI7QUFDMUIsc0JBQXNCO0FBQ3RCLG1CQUFtQixtQkFBTyxDQUFDLHNJQUE2QztBQUN4RTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9jb21tb25qcy9wb2xpY2llcy9mb3JtRGF0YVBvbGljeS5qcz8xYmM0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmZvcm1EYXRhUG9saWN5TmFtZSA9IHZvaWQgMDtcbmV4cG9ydHMuZm9ybURhdGFQb2xpY3kgPSBmb3JtRGF0YVBvbGljeTtcbmNvbnN0IHBvbGljaWVzXzEgPSByZXF1aXJlKFwiQHR5cGVzcGVjL3RzLWh0dHAtcnVudGltZS9pbnRlcm5hbC9wb2xpY2llc1wiKTtcbi8qKlxuICogVGhlIHByb2dyYW1tYXRpYyBpZGVudGlmaWVyIG9mIHRoZSBmb3JtRGF0YVBvbGljeS5cbiAqL1xuZXhwb3J0cy5mb3JtRGF0YVBvbGljeU5hbWUgPSBwb2xpY2llc18xLmZvcm1EYXRhUG9saWN5TmFtZTtcbi8qKlxuICogQSBwb2xpY3kgdGhhdCBlbmNvZGVzIEZvcm1EYXRhIG9uIHRoZSByZXF1ZXN0IGludG8gdGhlIGJvZHkuXG4gKi9cbmZ1bmN0aW9uIGZvcm1EYXRhUG9saWN5KCkge1xuICAgIHJldHVybiAoMCwgcG9saWNpZXNfMS5mb3JtRGF0YVBvbGljeSkoKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvcm1EYXRhUG9saWN5LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/formDataPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/logPolicy.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/logPolicy.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.logPolicyName = void 0;\nexports.logPolicy = logPolicy;\nconst log_js_1 = __webpack_require__(/*! ../log.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/log.js\");\nconst policies_1 = __webpack_require__(/*! @typespec/ts-http-runtime/internal/policies */ \"(rsc)/./node_modules/@typespec/ts-http-runtime/dist/commonjs/policies/internal.js\");\n/**\n * The programmatic identifier of the logPolicy.\n */\nexports.logPolicyName = policies_1.logPolicyName;\n/**\n * A policy that logs all requests and responses.\n * @param options - Options to configure logPolicy.\n */\nfunction logPolicy(options = {}) {\n    return (0, policies_1.logPolicy)(Object.assign({ logger: log_js_1.logger.info }, options));\n}\n//# sourceMappingURL=logPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2NvbW1vbmpzL3BvbGljaWVzL2xvZ1BvbGljeS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QscUJBQXFCO0FBQ3JCLGlCQUFpQjtBQUNqQixpQkFBaUIsbUJBQU8sQ0FBQyxzRkFBVztBQUNwQyxtQkFBbUIsbUJBQU8sQ0FBQyxzSUFBNkM7QUFDeEU7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CLHFEQUFxRCw4QkFBOEI7QUFDbkY7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2NvbW1vbmpzL3BvbGljaWVzL2xvZ1BvbGljeS5qcz82MDA2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmxvZ1BvbGljeU5hbWUgPSB2b2lkIDA7XG5leHBvcnRzLmxvZ1BvbGljeSA9IGxvZ1BvbGljeTtcbmNvbnN0IGxvZ19qc18xID0gcmVxdWlyZShcIi4uL2xvZy5qc1wiKTtcbmNvbnN0IHBvbGljaWVzXzEgPSByZXF1aXJlKFwiQHR5cGVzcGVjL3RzLWh0dHAtcnVudGltZS9pbnRlcm5hbC9wb2xpY2llc1wiKTtcbi8qKlxuICogVGhlIHByb2dyYW1tYXRpYyBpZGVudGlmaWVyIG9mIHRoZSBsb2dQb2xpY3kuXG4gKi9cbmV4cG9ydHMubG9nUG9saWN5TmFtZSA9IHBvbGljaWVzXzEubG9nUG9saWN5TmFtZTtcbi8qKlxuICogQSBwb2xpY3kgdGhhdCBsb2dzIGFsbCByZXF1ZXN0cyBhbmQgcmVzcG9uc2VzLlxuICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIHRvIGNvbmZpZ3VyZSBsb2dQb2xpY3kuXG4gKi9cbmZ1bmN0aW9uIGxvZ1BvbGljeShvcHRpb25zID0ge30pIHtcbiAgICByZXR1cm4gKDAsIHBvbGljaWVzXzEubG9nUG9saWN5KShPYmplY3QuYXNzaWduKHsgbG9nZ2VyOiBsb2dfanNfMS5sb2dnZXIuaW5mbyB9LCBvcHRpb25zKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2dQb2xpY3kuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/logPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/multipartPolicy.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/multipartPolicy.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.multipartPolicyName = void 0;\nexports.multipartPolicy = multipartPolicy;\nconst policies_1 = __webpack_require__(/*! @typespec/ts-http-runtime/internal/policies */ \"(rsc)/./node_modules/@typespec/ts-http-runtime/dist/commonjs/policies/internal.js\");\nconst file_js_1 = __webpack_require__(/*! ../util/file.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/util/file.js\");\n/**\n * Name of multipart policy\n */\nexports.multipartPolicyName = policies_1.multipartPolicyName;\n/**\n * Pipeline policy for multipart requests\n */\nfunction multipartPolicy() {\n    const tspPolicy = (0, policies_1.multipartPolicy)();\n    return {\n        name: exports.multipartPolicyName,\n        sendRequest: async (request, next) => {\n            if (request.multipartBody) {\n                for (const part of request.multipartBody.parts) {\n                    if ((0, file_js_1.hasRawContent)(part.body)) {\n                        part.body = (0, file_js_1.getRawContent)(part.body);\n                    }\n                }\n            }\n            return tspPolicy.sendRequest(request, next);\n        },\n    };\n}\n//# sourceMappingURL=multipartPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2NvbW1vbmpzL3BvbGljaWVzL211bHRpcGFydFBvbGljeS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMkJBQTJCO0FBQzNCLHVCQUF1QjtBQUN2QixtQkFBbUIsbUJBQU8sQ0FBQyxzSUFBNkM7QUFDeEUsa0JBQWtCLG1CQUFPLENBQUMsa0dBQWlCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9jb21tb25qcy9wb2xpY2llcy9tdWx0aXBhcnRQb2xpY3kuanM/MTU0ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5tdWx0aXBhcnRQb2xpY3lOYW1lID0gdm9pZCAwO1xuZXhwb3J0cy5tdWx0aXBhcnRQb2xpY3kgPSBtdWx0aXBhcnRQb2xpY3k7XG5jb25zdCBwb2xpY2llc18xID0gcmVxdWlyZShcIkB0eXBlc3BlYy90cy1odHRwLXJ1bnRpbWUvaW50ZXJuYWwvcG9saWNpZXNcIik7XG5jb25zdCBmaWxlX2pzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9maWxlLmpzXCIpO1xuLyoqXG4gKiBOYW1lIG9mIG11bHRpcGFydCBwb2xpY3lcbiAqL1xuZXhwb3J0cy5tdWx0aXBhcnRQb2xpY3lOYW1lID0gcG9saWNpZXNfMS5tdWx0aXBhcnRQb2xpY3lOYW1lO1xuLyoqXG4gKiBQaXBlbGluZSBwb2xpY3kgZm9yIG11bHRpcGFydCByZXF1ZXN0c1xuICovXG5mdW5jdGlvbiBtdWx0aXBhcnRQb2xpY3koKSB7XG4gICAgY29uc3QgdHNwUG9saWN5ID0gKDAsIHBvbGljaWVzXzEubXVsdGlwYXJ0UG9saWN5KSgpO1xuICAgIHJldHVybiB7XG4gICAgICAgIG5hbWU6IGV4cG9ydHMubXVsdGlwYXJ0UG9saWN5TmFtZSxcbiAgICAgICAgc2VuZFJlcXVlc3Q6IGFzeW5jIChyZXF1ZXN0LCBuZXh0KSA9PiB7XG4gICAgICAgICAgICBpZiAocmVxdWVzdC5tdWx0aXBhcnRCb2R5KSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBwYXJ0IG9mIHJlcXVlc3QubXVsdGlwYXJ0Qm9keS5wYXJ0cykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoKDAsIGZpbGVfanNfMS5oYXNSYXdDb250ZW50KShwYXJ0LmJvZHkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJ0LmJvZHkgPSAoMCwgZmlsZV9qc18xLmdldFJhd0NvbnRlbnQpKHBhcnQuYm9keSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHNwUG9saWN5LnNlbmRSZXF1ZXN0KHJlcXVlc3QsIG5leHQpO1xuICAgICAgICB9LFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tdWx0aXBhcnRQb2xpY3kuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/multipartPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/ndJsonPolicy.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/ndJsonPolicy.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ndJsonPolicyName = void 0;\nexports.ndJsonPolicy = ndJsonPolicy;\n/**\n * The programmatic identifier of the ndJsonPolicy.\n */\nexports.ndJsonPolicyName = \"ndJsonPolicy\";\n/**\n * ndJsonPolicy is a policy used to control keep alive settings for every request.\n */\nfunction ndJsonPolicy() {\n    return {\n        name: exports.ndJsonPolicyName,\n        async sendRequest(request, next) {\n            // There currently isn't a good way to bypass the serializer\n            if (typeof request.body === \"string\" && request.body.startsWith(\"[\")) {\n                const body = JSON.parse(request.body);\n                if (Array.isArray(body)) {\n                    request.body = body.map((item) => JSON.stringify(item) + \"\\n\").join(\"\");\n                }\n            }\n            return next(request);\n        },\n    };\n}\n//# sourceMappingURL=ndJsonPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2NvbW1vbmpzL3BvbGljaWVzL25kSnNvblBvbGljeS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsd0JBQXdCO0FBQ3hCLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2NvbW1vbmpzL3BvbGljaWVzL25kSnNvblBvbGljeS5qcz81MDQwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm5kSnNvblBvbGljeU5hbWUgPSB2b2lkIDA7XG5leHBvcnRzLm5kSnNvblBvbGljeSA9IG5kSnNvblBvbGljeTtcbi8qKlxuICogVGhlIHByb2dyYW1tYXRpYyBpZGVudGlmaWVyIG9mIHRoZSBuZEpzb25Qb2xpY3kuXG4gKi9cbmV4cG9ydHMubmRKc29uUG9saWN5TmFtZSA9IFwibmRKc29uUG9saWN5XCI7XG4vKipcbiAqIG5kSnNvblBvbGljeSBpcyBhIHBvbGljeSB1c2VkIHRvIGNvbnRyb2wga2VlcCBhbGl2ZSBzZXR0aW5ncyBmb3IgZXZlcnkgcmVxdWVzdC5cbiAqL1xuZnVuY3Rpb24gbmRKc29uUG9saWN5KCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIG5hbWU6IGV4cG9ydHMubmRKc29uUG9saWN5TmFtZSxcbiAgICAgICAgYXN5bmMgc2VuZFJlcXVlc3QocmVxdWVzdCwgbmV4dCkge1xuICAgICAgICAgICAgLy8gVGhlcmUgY3VycmVudGx5IGlzbid0IGEgZ29vZCB3YXkgdG8gYnlwYXNzIHRoZSBzZXJpYWxpemVyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3QuYm9keSA9PT0gXCJzdHJpbmdcIiAmJiByZXF1ZXN0LmJvZHkuc3RhcnRzV2l0aChcIltcIikpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBib2R5ID0gSlNPTi5wYXJzZShyZXF1ZXN0LmJvZHkpO1xuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGJvZHkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3QuYm9keSA9IGJvZHkubWFwKChpdGVtKSA9PiBKU09OLnN0cmluZ2lmeShpdGVtKSArIFwiXFxuXCIpLmpvaW4oXCJcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5leHQocmVxdWVzdCk7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5kSnNvblBvbGljeS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/ndJsonPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/proxyPolicy.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/proxyPolicy.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.proxyPolicyName = void 0;\nexports.getDefaultProxySettings = getDefaultProxySettings;\nexports.proxyPolicy = proxyPolicy;\nconst policies_1 = __webpack_require__(/*! @typespec/ts-http-runtime/internal/policies */ \"(rsc)/./node_modules/@typespec/ts-http-runtime/dist/commonjs/policies/internal.js\");\n/**\n * The programmatic identifier of the proxyPolicy.\n */\nexports.proxyPolicyName = policies_1.proxyPolicyName;\n/**\n * This method converts a proxy url into `ProxySettings` for use with ProxyPolicy.\n * If no argument is given, it attempts to parse a proxy URL from the environment\n * variables `HTTPS_PROXY` or `HTTP_PROXY`.\n * @param proxyUrl - The url of the proxy to use. May contain authentication information.\n * @deprecated - Internally this method is no longer necessary when setting proxy information.\n */\nfunction getDefaultProxySettings(proxyUrl) {\n    return (0, policies_1.getDefaultProxySettings)(proxyUrl);\n}\n/**\n * A policy that allows one to apply proxy settings to all requests.\n * If not passed static settings, they will be retrieved from the HTTPS_PROXY\n * or HTTP_PROXY environment variables.\n * @param proxySettings - ProxySettings to use on each request.\n * @param options - additional settings, for example, custom NO_PROXY patterns\n */\nfunction proxyPolicy(proxySettings, options) {\n    return (0, policies_1.proxyPolicy)(proxySettings, options);\n}\n//# sourceMappingURL=proxyPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2NvbW1vbmpzL3BvbGljaWVzL3Byb3h5UG9saWN5LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx1QkFBdUI7QUFDdkIsK0JBQStCO0FBQy9CLG1CQUFtQjtBQUNuQixtQkFBbUIsbUJBQU8sQ0FBQyxzSUFBNkM7QUFDeEU7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2NvbW1vbmpzL3BvbGljaWVzL3Byb3h5UG9saWN5LmpzPzNjMjEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucHJveHlQb2xpY3lOYW1lID0gdm9pZCAwO1xuZXhwb3J0cy5nZXREZWZhdWx0UHJveHlTZXR0aW5ncyA9IGdldERlZmF1bHRQcm94eVNldHRpbmdzO1xuZXhwb3J0cy5wcm94eVBvbGljeSA9IHByb3h5UG9saWN5O1xuY29uc3QgcG9saWNpZXNfMSA9IHJlcXVpcmUoXCJAdHlwZXNwZWMvdHMtaHR0cC1ydW50aW1lL2ludGVybmFsL3BvbGljaWVzXCIpO1xuLyoqXG4gKiBUaGUgcHJvZ3JhbW1hdGljIGlkZW50aWZpZXIgb2YgdGhlIHByb3h5UG9saWN5LlxuICovXG5leHBvcnRzLnByb3h5UG9saWN5TmFtZSA9IHBvbGljaWVzXzEucHJveHlQb2xpY3lOYW1lO1xuLyoqXG4gKiBUaGlzIG1ldGhvZCBjb252ZXJ0cyBhIHByb3h5IHVybCBpbnRvIGBQcm94eVNldHRpbmdzYCBmb3IgdXNlIHdpdGggUHJveHlQb2xpY3kuXG4gKiBJZiBubyBhcmd1bWVudCBpcyBnaXZlbiwgaXQgYXR0ZW1wdHMgdG8gcGFyc2UgYSBwcm94eSBVUkwgZnJvbSB0aGUgZW52aXJvbm1lbnRcbiAqIHZhcmlhYmxlcyBgSFRUUFNfUFJPWFlgIG9yIGBIVFRQX1BST1hZYC5cbiAqIEBwYXJhbSBwcm94eVVybCAtIFRoZSB1cmwgb2YgdGhlIHByb3h5IHRvIHVzZS4gTWF5IGNvbnRhaW4gYXV0aGVudGljYXRpb24gaW5mb3JtYXRpb24uXG4gKiBAZGVwcmVjYXRlZCAtIEludGVybmFsbHkgdGhpcyBtZXRob2QgaXMgbm8gbG9uZ2VyIG5lY2Vzc2FyeSB3aGVuIHNldHRpbmcgcHJveHkgaW5mb3JtYXRpb24uXG4gKi9cbmZ1bmN0aW9uIGdldERlZmF1bHRQcm94eVNldHRpbmdzKHByb3h5VXJsKSB7XG4gICAgcmV0dXJuICgwLCBwb2xpY2llc18xLmdldERlZmF1bHRQcm94eVNldHRpbmdzKShwcm94eVVybCk7XG59XG4vKipcbiAqIEEgcG9saWN5IHRoYXQgYWxsb3dzIG9uZSB0byBhcHBseSBwcm94eSBzZXR0aW5ncyB0byBhbGwgcmVxdWVzdHMuXG4gKiBJZiBub3QgcGFzc2VkIHN0YXRpYyBzZXR0aW5ncywgdGhleSB3aWxsIGJlIHJldHJpZXZlZCBmcm9tIHRoZSBIVFRQU19QUk9YWVxuICogb3IgSFRUUF9QUk9YWSBlbnZpcm9ubWVudCB2YXJpYWJsZXMuXG4gKiBAcGFyYW0gcHJveHlTZXR0aW5ncyAtIFByb3h5U2V0dGluZ3MgdG8gdXNlIG9uIGVhY2ggcmVxdWVzdC5cbiAqIEBwYXJhbSBvcHRpb25zIC0gYWRkaXRpb25hbCBzZXR0aW5ncywgZm9yIGV4YW1wbGUsIGN1c3RvbSBOT19QUk9YWSBwYXR0ZXJuc1xuICovXG5mdW5jdGlvbiBwcm94eVBvbGljeShwcm94eVNldHRpbmdzLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuICgwLCBwb2xpY2llc18xLnByb3h5UG9saWN5KShwcm94eVNldHRpbmdzLCBvcHRpb25zKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb3h5UG9saWN5LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/proxyPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/redirectPolicy.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/redirectPolicy.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.redirectPolicyName = void 0;\nexports.redirectPolicy = redirectPolicy;\nconst policies_1 = __webpack_require__(/*! @typespec/ts-http-runtime/internal/policies */ \"(rsc)/./node_modules/@typespec/ts-http-runtime/dist/commonjs/policies/internal.js\");\n/**\n * The programmatic identifier of the redirectPolicy.\n */\nexports.redirectPolicyName = policies_1.redirectPolicyName;\n/**\n * A policy to follow Location headers from the server in order\n * to support server-side redirection.\n * In the browser, this policy is not used.\n * @param options - Options to control policy behavior.\n */\nfunction redirectPolicy(options = {}) {\n    return (0, policies_1.redirectPolicy)(options);\n}\n//# sourceMappingURL=redirectPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2NvbW1vbmpzL3BvbGljaWVzL3JlZGlyZWN0UG9saWN5LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwwQkFBMEI7QUFDMUIsc0JBQXNCO0FBQ3RCLG1CQUFtQixtQkFBTyxDQUFDLHNJQUE2QztBQUN4RTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2NvbW1vbmpzL3BvbGljaWVzL3JlZGlyZWN0UG9saWN5LmpzPzIwMzQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmVkaXJlY3RQb2xpY3lOYW1lID0gdm9pZCAwO1xuZXhwb3J0cy5yZWRpcmVjdFBvbGljeSA9IHJlZGlyZWN0UG9saWN5O1xuY29uc3QgcG9saWNpZXNfMSA9IHJlcXVpcmUoXCJAdHlwZXNwZWMvdHMtaHR0cC1ydW50aW1lL2ludGVybmFsL3BvbGljaWVzXCIpO1xuLyoqXG4gKiBUaGUgcHJvZ3JhbW1hdGljIGlkZW50aWZpZXIgb2YgdGhlIHJlZGlyZWN0UG9saWN5LlxuICovXG5leHBvcnRzLnJlZGlyZWN0UG9saWN5TmFtZSA9IHBvbGljaWVzXzEucmVkaXJlY3RQb2xpY3lOYW1lO1xuLyoqXG4gKiBBIHBvbGljeSB0byBmb2xsb3cgTG9jYXRpb24gaGVhZGVycyBmcm9tIHRoZSBzZXJ2ZXIgaW4gb3JkZXJcbiAqIHRvIHN1cHBvcnQgc2VydmVyLXNpZGUgcmVkaXJlY3Rpb24uXG4gKiBJbiB0aGUgYnJvd3NlciwgdGhpcyBwb2xpY3kgaXMgbm90IHVzZWQuXG4gKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgdG8gY29udHJvbCBwb2xpY3kgYmVoYXZpb3IuXG4gKi9cbmZ1bmN0aW9uIHJlZGlyZWN0UG9saWN5KG9wdGlvbnMgPSB7fSkge1xuICAgIHJldHVybiAoMCwgcG9saWNpZXNfMS5yZWRpcmVjdFBvbGljeSkob3B0aW9ucyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWRpcmVjdFBvbGljeS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/redirectPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/retryPolicy.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/retryPolicy.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.retryPolicy = retryPolicy;\nconst logger_1 = __webpack_require__(/*! @azure/logger */ \"(rsc)/./node_modules/@azure/logger/dist/commonjs/index.js\");\nconst constants_js_1 = __webpack_require__(/*! ../constants.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/constants.js\");\nconst policies_1 = __webpack_require__(/*! @typespec/ts-http-runtime/internal/policies */ \"(rsc)/./node_modules/@typespec/ts-http-runtime/dist/commonjs/policies/internal.js\");\nconst retryPolicyLogger = (0, logger_1.createClientLogger)(\"core-rest-pipeline retryPolicy\");\n/**\n * retryPolicy is a generic policy to enable retrying requests when certain conditions are met\n */\nfunction retryPolicy(strategies, options = { maxRetries: constants_js_1.DEFAULT_RETRY_POLICY_COUNT }) {\n    // Cast is required since the TSP runtime retry strategy type is slightly different\n    // very deep down (using real AbortSignal vs. AbortSignalLike in RestError).\n    // In practice the difference doesn't actually matter.\n    return (0, policies_1.retryPolicy)(strategies, Object.assign({ logger: retryPolicyLogger }, options));\n}\n//# sourceMappingURL=retryPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2NvbW1vbmpzL3BvbGljaWVzL3JldHJ5UG9saWN5LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxtQkFBbUI7QUFDbkIsaUJBQWlCLG1CQUFPLENBQUMsZ0ZBQWU7QUFDeEMsdUJBQXVCLG1CQUFPLENBQUMsa0dBQWlCO0FBQ2hELG1CQUFtQixtQkFBTyxDQUFDLHNJQUE2QztBQUN4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2Qyx1REFBdUQ7QUFDcEc7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FLDJCQUEyQjtBQUM5RjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1yZXN0LXBpcGVsaW5lL2Rpc3QvY29tbW9uanMvcG9saWNpZXMvcmV0cnlQb2xpY3kuanM/N2I1ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZXRyeVBvbGljeSA9IHJldHJ5UG9saWN5O1xuY29uc3QgbG9nZ2VyXzEgPSByZXF1aXJlKFwiQGF6dXJlL2xvZ2dlclwiKTtcbmNvbnN0IGNvbnN0YW50c19qc18xID0gcmVxdWlyZShcIi4uL2NvbnN0YW50cy5qc1wiKTtcbmNvbnN0IHBvbGljaWVzXzEgPSByZXF1aXJlKFwiQHR5cGVzcGVjL3RzLWh0dHAtcnVudGltZS9pbnRlcm5hbC9wb2xpY2llc1wiKTtcbmNvbnN0IHJldHJ5UG9saWN5TG9nZ2VyID0gKDAsIGxvZ2dlcl8xLmNyZWF0ZUNsaWVudExvZ2dlcikoXCJjb3JlLXJlc3QtcGlwZWxpbmUgcmV0cnlQb2xpY3lcIik7XG4vKipcbiAqIHJldHJ5UG9saWN5IGlzIGEgZ2VuZXJpYyBwb2xpY3kgdG8gZW5hYmxlIHJldHJ5aW5nIHJlcXVlc3RzIHdoZW4gY2VydGFpbiBjb25kaXRpb25zIGFyZSBtZXRcbiAqL1xuZnVuY3Rpb24gcmV0cnlQb2xpY3koc3RyYXRlZ2llcywgb3B0aW9ucyA9IHsgbWF4UmV0cmllczogY29uc3RhbnRzX2pzXzEuREVGQVVMVF9SRVRSWV9QT0xJQ1lfQ09VTlQgfSkge1xuICAgIC8vIENhc3QgaXMgcmVxdWlyZWQgc2luY2UgdGhlIFRTUCBydW50aW1lIHJldHJ5IHN0cmF0ZWd5IHR5cGUgaXMgc2xpZ2h0bHkgZGlmZmVyZW50XG4gICAgLy8gdmVyeSBkZWVwIGRvd24gKHVzaW5nIHJlYWwgQWJvcnRTaWduYWwgdnMuIEFib3J0U2lnbmFsTGlrZSBpbiBSZXN0RXJyb3IpLlxuICAgIC8vIEluIHByYWN0aWNlIHRoZSBkaWZmZXJlbmNlIGRvZXNuJ3QgYWN0dWFsbHkgbWF0dGVyLlxuICAgIHJldHVybiAoMCwgcG9saWNpZXNfMS5yZXRyeVBvbGljeSkoc3RyYXRlZ2llcywgT2JqZWN0LmFzc2lnbih7IGxvZ2dlcjogcmV0cnlQb2xpY3lMb2dnZXIgfSwgb3B0aW9ucykpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmV0cnlQb2xpY3kuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/retryPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/setClientRequestIdPolicy.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/setClientRequestIdPolicy.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.setClientRequestIdPolicyName = void 0;\nexports.setClientRequestIdPolicy = setClientRequestIdPolicy;\n/**\n * The programmatic identifier of the setClientRequestIdPolicy.\n */\nexports.setClientRequestIdPolicyName = \"setClientRequestIdPolicy\";\n/**\n * Each PipelineRequest gets a unique id upon creation.\n * This policy passes that unique id along via an HTTP header to enable better\n * telemetry and tracing.\n * @param requestIdHeaderName - The name of the header to pass the request ID to.\n */\nfunction setClientRequestIdPolicy(requestIdHeaderName = \"x-ms-client-request-id\") {\n    return {\n        name: exports.setClientRequestIdPolicyName,\n        async sendRequest(request, next) {\n            if (!request.headers.has(requestIdHeaderName)) {\n                request.headers.set(requestIdHeaderName, request.requestId);\n            }\n            return next(request);\n        },\n    };\n}\n//# sourceMappingURL=setClientRequestIdPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2NvbW1vbmpzL3BvbGljaWVzL3NldENsaWVudFJlcXVlc3RJZFBvbGljeS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0NBQW9DO0FBQ3BDLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQSxvQ0FBb0M7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9jb21tb25qcy9wb2xpY2llcy9zZXRDbGllbnRSZXF1ZXN0SWRQb2xpY3kuanM/NjRkYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zZXRDbGllbnRSZXF1ZXN0SWRQb2xpY3lOYW1lID0gdm9pZCAwO1xuZXhwb3J0cy5zZXRDbGllbnRSZXF1ZXN0SWRQb2xpY3kgPSBzZXRDbGllbnRSZXF1ZXN0SWRQb2xpY3k7XG4vKipcbiAqIFRoZSBwcm9ncmFtbWF0aWMgaWRlbnRpZmllciBvZiB0aGUgc2V0Q2xpZW50UmVxdWVzdElkUG9saWN5LlxuICovXG5leHBvcnRzLnNldENsaWVudFJlcXVlc3RJZFBvbGljeU5hbWUgPSBcInNldENsaWVudFJlcXVlc3RJZFBvbGljeVwiO1xuLyoqXG4gKiBFYWNoIFBpcGVsaW5lUmVxdWVzdCBnZXRzIGEgdW5pcXVlIGlkIHVwb24gY3JlYXRpb24uXG4gKiBUaGlzIHBvbGljeSBwYXNzZXMgdGhhdCB1bmlxdWUgaWQgYWxvbmcgdmlhIGFuIEhUVFAgaGVhZGVyIHRvIGVuYWJsZSBiZXR0ZXJcbiAqIHRlbGVtZXRyeSBhbmQgdHJhY2luZy5cbiAqIEBwYXJhbSByZXF1ZXN0SWRIZWFkZXJOYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGhlYWRlciB0byBwYXNzIHRoZSByZXF1ZXN0IElEIHRvLlxuICovXG5mdW5jdGlvbiBzZXRDbGllbnRSZXF1ZXN0SWRQb2xpY3kocmVxdWVzdElkSGVhZGVyTmFtZSA9IFwieC1tcy1jbGllbnQtcmVxdWVzdC1pZFwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogZXhwb3J0cy5zZXRDbGllbnRSZXF1ZXN0SWRQb2xpY3lOYW1lLFxuICAgICAgICBhc3luYyBzZW5kUmVxdWVzdChyZXF1ZXN0LCBuZXh0KSB7XG4gICAgICAgICAgICBpZiAoIXJlcXVlc3QuaGVhZGVycy5oYXMocmVxdWVzdElkSGVhZGVyTmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0LmhlYWRlcnMuc2V0KHJlcXVlc3RJZEhlYWRlck5hbWUsIHJlcXVlc3QucmVxdWVzdElkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXh0KHJlcXVlc3QpO1xuICAgICAgICB9LFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZXRDbGllbnRSZXF1ZXN0SWRQb2xpY3kuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/setClientRequestIdPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/systemErrorRetryPolicy.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/systemErrorRetryPolicy.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.systemErrorRetryPolicyName = void 0;\nexports.systemErrorRetryPolicy = systemErrorRetryPolicy;\nconst policies_1 = __webpack_require__(/*! @typespec/ts-http-runtime/internal/policies */ \"(rsc)/./node_modules/@typespec/ts-http-runtime/dist/commonjs/policies/internal.js\");\n/**\n * Name of the {@link systemErrorRetryPolicy}\n */\nexports.systemErrorRetryPolicyName = policies_1.systemErrorRetryPolicyName;\n/**\n * A retry policy that specifically seeks to handle errors in the\n * underlying transport layer (e.g. DNS lookup failures) rather than\n * retryable error codes from the server itself.\n * @param options - Options that customize the policy.\n */\nfunction systemErrorRetryPolicy(options = {}) {\n    return (0, policies_1.systemErrorRetryPolicy)(options);\n}\n//# sourceMappingURL=systemErrorRetryPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2NvbW1vbmpzL3BvbGljaWVzL3N5c3RlbUVycm9yUmV0cnlQb2xpY3kuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtDQUFrQztBQUNsQyw4QkFBOEI7QUFDOUIsbUJBQW1CLG1CQUFPLENBQUMsc0lBQTZDO0FBQ3hFO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QztBQUM1QztBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9jb21tb25qcy9wb2xpY2llcy9zeXN0ZW1FcnJvclJldHJ5UG9saWN5LmpzP2MwZDciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc3lzdGVtRXJyb3JSZXRyeVBvbGljeU5hbWUgPSB2b2lkIDA7XG5leHBvcnRzLnN5c3RlbUVycm9yUmV0cnlQb2xpY3kgPSBzeXN0ZW1FcnJvclJldHJ5UG9saWN5O1xuY29uc3QgcG9saWNpZXNfMSA9IHJlcXVpcmUoXCJAdHlwZXNwZWMvdHMtaHR0cC1ydW50aW1lL2ludGVybmFsL3BvbGljaWVzXCIpO1xuLyoqXG4gKiBOYW1lIG9mIHRoZSB7QGxpbmsgc3lzdGVtRXJyb3JSZXRyeVBvbGljeX1cbiAqL1xuZXhwb3J0cy5zeXN0ZW1FcnJvclJldHJ5UG9saWN5TmFtZSA9IHBvbGljaWVzXzEuc3lzdGVtRXJyb3JSZXRyeVBvbGljeU5hbWU7XG4vKipcbiAqIEEgcmV0cnkgcG9saWN5IHRoYXQgc3BlY2lmaWNhbGx5IHNlZWtzIHRvIGhhbmRsZSBlcnJvcnMgaW4gdGhlXG4gKiB1bmRlcmx5aW5nIHRyYW5zcG9ydCBsYXllciAoZS5nLiBETlMgbG9va3VwIGZhaWx1cmVzKSByYXRoZXIgdGhhblxuICogcmV0cnlhYmxlIGVycm9yIGNvZGVzIGZyb20gdGhlIHNlcnZlciBpdHNlbGYuXG4gKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgdGhhdCBjdXN0b21pemUgdGhlIHBvbGljeS5cbiAqL1xuZnVuY3Rpb24gc3lzdGVtRXJyb3JSZXRyeVBvbGljeShvcHRpb25zID0ge30pIHtcbiAgICByZXR1cm4gKDAsIHBvbGljaWVzXzEuc3lzdGVtRXJyb3JSZXRyeVBvbGljeSkob3B0aW9ucyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zeXN0ZW1FcnJvclJldHJ5UG9saWN5LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/systemErrorRetryPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/throttlingRetryPolicy.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/throttlingRetryPolicy.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.throttlingRetryPolicyName = void 0;\nexports.throttlingRetryPolicy = throttlingRetryPolicy;\nconst policies_1 = __webpack_require__(/*! @typespec/ts-http-runtime/internal/policies */ \"(rsc)/./node_modules/@typespec/ts-http-runtime/dist/commonjs/policies/internal.js\");\n/**\n * Name of the {@link throttlingRetryPolicy}\n */\nexports.throttlingRetryPolicyName = policies_1.throttlingRetryPolicyName;\n/**\n * A policy that retries when the server sends a 429 response with a Retry-After header.\n *\n * To learn more, please refer to\n * https://learn.microsoft.com/azure/azure-resource-manager/resource-manager-request-limits,\n * https://learn.microsoft.com/azure/azure-subscription-service-limits and\n * https://learn.microsoft.com/azure/virtual-machines/troubleshooting/troubleshooting-throttling-errors\n *\n * @param options - Options that configure retry logic.\n */\nfunction throttlingRetryPolicy(options = {}) {\n    return (0, policies_1.throttlingRetryPolicy)(options);\n}\n//# sourceMappingURL=throttlingRetryPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2NvbW1vbmpzL3BvbGljaWVzL3Rocm90dGxpbmdSZXRyeVBvbGljeS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUNBQWlDO0FBQ2pDLDZCQUE2QjtBQUM3QixtQkFBbUIsbUJBQU8sQ0FBQyxzSUFBNkM7QUFDeEU7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkM7QUFDM0M7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1yZXN0LXBpcGVsaW5lL2Rpc3QvY29tbW9uanMvcG9saWNpZXMvdGhyb3R0bGluZ1JldHJ5UG9saWN5LmpzPzJmMzYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudGhyb3R0bGluZ1JldHJ5UG9saWN5TmFtZSA9IHZvaWQgMDtcbmV4cG9ydHMudGhyb3R0bGluZ1JldHJ5UG9saWN5ID0gdGhyb3R0bGluZ1JldHJ5UG9saWN5O1xuY29uc3QgcG9saWNpZXNfMSA9IHJlcXVpcmUoXCJAdHlwZXNwZWMvdHMtaHR0cC1ydW50aW1lL2ludGVybmFsL3BvbGljaWVzXCIpO1xuLyoqXG4gKiBOYW1lIG9mIHRoZSB7QGxpbmsgdGhyb3R0bGluZ1JldHJ5UG9saWN5fVxuICovXG5leHBvcnRzLnRocm90dGxpbmdSZXRyeVBvbGljeU5hbWUgPSBwb2xpY2llc18xLnRocm90dGxpbmdSZXRyeVBvbGljeU5hbWU7XG4vKipcbiAqIEEgcG9saWN5IHRoYXQgcmV0cmllcyB3aGVuIHRoZSBzZXJ2ZXIgc2VuZHMgYSA0MjkgcmVzcG9uc2Ugd2l0aCBhIFJldHJ5LUFmdGVyIGhlYWRlci5cbiAqXG4gKiBUbyBsZWFybiBtb3JlLCBwbGVhc2UgcmVmZXIgdG9cbiAqIGh0dHBzOi8vbGVhcm4ubWljcm9zb2Z0LmNvbS9henVyZS9henVyZS1yZXNvdXJjZS1tYW5hZ2VyL3Jlc291cmNlLW1hbmFnZXItcmVxdWVzdC1saW1pdHMsXG4gKiBodHRwczovL2xlYXJuLm1pY3Jvc29mdC5jb20vYXp1cmUvYXp1cmUtc3Vic2NyaXB0aW9uLXNlcnZpY2UtbGltaXRzIGFuZFxuICogaHR0cHM6Ly9sZWFybi5taWNyb3NvZnQuY29tL2F6dXJlL3ZpcnR1YWwtbWFjaGluZXMvdHJvdWJsZXNob290aW5nL3Ryb3VibGVzaG9vdGluZy10aHJvdHRsaW5nLWVycm9yc1xuICpcbiAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyB0aGF0IGNvbmZpZ3VyZSByZXRyeSBsb2dpYy5cbiAqL1xuZnVuY3Rpb24gdGhyb3R0bGluZ1JldHJ5UG9saWN5KG9wdGlvbnMgPSB7fSkge1xuICAgIHJldHVybiAoMCwgcG9saWNpZXNfMS50aHJvdHRsaW5nUmV0cnlQb2xpY3kpKG9wdGlvbnMpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGhyb3R0bGluZ1JldHJ5UG9saWN5LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/throttlingRetryPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/tlsPolicy.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/tlsPolicy.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.tlsPolicyName = void 0;\nexports.tlsPolicy = tlsPolicy;\nconst policies_1 = __webpack_require__(/*! @typespec/ts-http-runtime/internal/policies */ \"(rsc)/./node_modules/@typespec/ts-http-runtime/dist/commonjs/policies/internal.js\");\n/**\n * Name of the TLS Policy\n */\nexports.tlsPolicyName = policies_1.tlsPolicyName;\n/**\n * Gets a pipeline policy that adds the client certificate to the HttpClient agent for authentication.\n */\nfunction tlsPolicy(tlsSettings) {\n    return (0, policies_1.tlsPolicy)(tlsSettings);\n}\n//# sourceMappingURL=tlsPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2NvbW1vbmpzL3BvbGljaWVzL3Rsc1BvbGljeS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QscUJBQXFCO0FBQ3JCLGlCQUFpQjtBQUNqQixtQkFBbUIsbUJBQU8sQ0FBQyxzSUFBNkM7QUFDeEU7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1yZXN0LXBpcGVsaW5lL2Rpc3QvY29tbW9uanMvcG9saWNpZXMvdGxzUG9saWN5LmpzPzJkMjYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudGxzUG9saWN5TmFtZSA9IHZvaWQgMDtcbmV4cG9ydHMudGxzUG9saWN5ID0gdGxzUG9saWN5O1xuY29uc3QgcG9saWNpZXNfMSA9IHJlcXVpcmUoXCJAdHlwZXNwZWMvdHMtaHR0cC1ydW50aW1lL2ludGVybmFsL3BvbGljaWVzXCIpO1xuLyoqXG4gKiBOYW1lIG9mIHRoZSBUTFMgUG9saWN5XG4gKi9cbmV4cG9ydHMudGxzUG9saWN5TmFtZSA9IHBvbGljaWVzXzEudGxzUG9saWN5TmFtZTtcbi8qKlxuICogR2V0cyBhIHBpcGVsaW5lIHBvbGljeSB0aGF0IGFkZHMgdGhlIGNsaWVudCBjZXJ0aWZpY2F0ZSB0byB0aGUgSHR0cENsaWVudCBhZ2VudCBmb3IgYXV0aGVudGljYXRpb24uXG4gKi9cbmZ1bmN0aW9uIHRsc1BvbGljeSh0bHNTZXR0aW5ncykge1xuICAgIHJldHVybiAoMCwgcG9saWNpZXNfMS50bHNQb2xpY3kpKHRsc1NldHRpbmdzKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRsc1BvbGljeS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/tlsPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/tracingPolicy.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/tracingPolicy.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.tracingPolicyName = void 0;\nexports.tracingPolicy = tracingPolicy;\nconst core_tracing_1 = __webpack_require__(/*! @azure/core-tracing */ \"(rsc)/./node_modules/@azure/core-tracing/dist/commonjs/index.js\");\nconst constants_js_1 = __webpack_require__(/*! ../constants.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/constants.js\");\nconst userAgent_js_1 = __webpack_require__(/*! ../util/userAgent.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/util/userAgent.js\");\nconst log_js_1 = __webpack_require__(/*! ../log.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/log.js\");\nconst core_util_1 = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/commonjs/index.js\");\nconst restError_js_1 = __webpack_require__(/*! ../restError.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/restError.js\");\nconst util_1 = __webpack_require__(/*! @typespec/ts-http-runtime/internal/util */ \"(rsc)/./node_modules/@typespec/ts-http-runtime/dist/commonjs/util/internal.js\");\n/**\n * The programmatic identifier of the tracingPolicy.\n */\nexports.tracingPolicyName = \"tracingPolicy\";\n/**\n * A simple policy to create OpenTelemetry Spans for each request made by the pipeline\n * that has SpanOptions with a parent.\n * Requests made without a parent Span will not be recorded.\n * @param options - Options to configure the telemetry logged by the tracing policy.\n */\nfunction tracingPolicy(options = {}) {\n    const userAgentPromise = (0, userAgent_js_1.getUserAgentValue)(options.userAgentPrefix);\n    const sanitizer = new util_1.Sanitizer({\n        additionalAllowedQueryParameters: options.additionalAllowedQueryParameters,\n    });\n    const tracingClient = tryCreateTracingClient();\n    return {\n        name: exports.tracingPolicyName,\n        async sendRequest(request, next) {\n            var _a;\n            if (!tracingClient) {\n                return next(request);\n            }\n            const userAgent = await userAgentPromise;\n            const spanAttributes = {\n                \"http.url\": sanitizer.sanitizeUrl(request.url),\n                \"http.method\": request.method,\n                \"http.user_agent\": userAgent,\n                requestId: request.requestId,\n            };\n            if (userAgent) {\n                spanAttributes[\"http.user_agent\"] = userAgent;\n            }\n            const { span, tracingContext } = (_a = tryCreateSpan(tracingClient, request, spanAttributes)) !== null && _a !== void 0 ? _a : {};\n            if (!span || !tracingContext) {\n                return next(request);\n            }\n            try {\n                const response = await tracingClient.withContext(tracingContext, next, request);\n                tryProcessResponse(span, response);\n                return response;\n            }\n            catch (err) {\n                tryProcessError(span, err);\n                throw err;\n            }\n        },\n    };\n}\nfunction tryCreateTracingClient() {\n    try {\n        return (0, core_tracing_1.createTracingClient)({\n            namespace: \"\",\n            packageName: \"@azure/core-rest-pipeline\",\n            packageVersion: constants_js_1.SDK_VERSION,\n        });\n    }\n    catch (e) {\n        log_js_1.logger.warning(`Error when creating the TracingClient: ${(0, core_util_1.getErrorMessage)(e)}`);\n        return undefined;\n    }\n}\nfunction tryCreateSpan(tracingClient, request, spanAttributes) {\n    try {\n        // As per spec, we do not need to differentiate between HTTP and HTTPS in span name.\n        const { span, updatedOptions } = tracingClient.startSpan(`HTTP ${request.method}`, { tracingOptions: request.tracingOptions }, {\n            spanKind: \"client\",\n            spanAttributes,\n        });\n        // If the span is not recording, don't do any more work.\n        if (!span.isRecording()) {\n            span.end();\n            return undefined;\n        }\n        // set headers\n        const headers = tracingClient.createRequestHeaders(updatedOptions.tracingOptions.tracingContext);\n        for (const [key, value] of Object.entries(headers)) {\n            request.headers.set(key, value);\n        }\n        return { span, tracingContext: updatedOptions.tracingOptions.tracingContext };\n    }\n    catch (e) {\n        log_js_1.logger.warning(`Skipping creating a tracing span due to an error: ${(0, core_util_1.getErrorMessage)(e)}`);\n        return undefined;\n    }\n}\nfunction tryProcessError(span, error) {\n    try {\n        span.setStatus({\n            status: \"error\",\n            error: (0, core_util_1.isError)(error) ? error : undefined,\n        });\n        if ((0, restError_js_1.isRestError)(error) && error.statusCode) {\n            span.setAttribute(\"http.status_code\", error.statusCode);\n        }\n        span.end();\n    }\n    catch (e) {\n        log_js_1.logger.warning(`Skipping tracing span processing due to an error: ${(0, core_util_1.getErrorMessage)(e)}`);\n    }\n}\nfunction tryProcessResponse(span, response) {\n    try {\n        span.setAttribute(\"http.status_code\", response.status);\n        const serviceRequestId = response.headers.get(\"x-ms-request-id\");\n        if (serviceRequestId) {\n            span.setAttribute(\"serviceRequestId\", serviceRequestId);\n        }\n        // Per semantic conventions, only set the status to error if the status code is 4xx or 5xx.\n        // Otherwise, the status MUST remain unset.\n        // https://opentelemetry.io/docs/specs/semconv/http/http-spans/#status\n        if (response.status >= 400) {\n            span.setStatus({\n                status: \"error\",\n            });\n        }\n        span.end();\n    }\n    catch (e) {\n        log_js_1.logger.warning(`Skipping tracing span processing due to an error: ${(0, core_util_1.getErrorMessage)(e)}`);\n    }\n}\n//# sourceMappingURL=tracingPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/tracingPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/userAgentPolicy.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/userAgentPolicy.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.userAgentPolicyName = void 0;\nexports.userAgentPolicy = userAgentPolicy;\nconst userAgent_js_1 = __webpack_require__(/*! ../util/userAgent.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/util/userAgent.js\");\nconst UserAgentHeaderName = (0, userAgent_js_1.getUserAgentHeaderName)();\n/**\n * The programmatic identifier of the userAgentPolicy.\n */\nexports.userAgentPolicyName = \"userAgentPolicy\";\n/**\n * A policy that sets the User-Agent header (or equivalent) to reflect\n * the library version.\n * @param options - Options to customize the user agent value.\n */\nfunction userAgentPolicy(options = {}) {\n    const userAgentValue = (0, userAgent_js_1.getUserAgentValue)(options.userAgentPrefix);\n    return {\n        name: exports.userAgentPolicyName,\n        async sendRequest(request, next) {\n            if (!request.headers.has(UserAgentHeaderName)) {\n                request.headers.set(UserAgentHeaderName, await userAgentValue);\n            }\n            return next(request);\n        },\n    };\n}\n//# sourceMappingURL=userAgentPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2NvbW1vbmpzL3BvbGljaWVzL3VzZXJBZ2VudFBvbGljeS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMkJBQTJCO0FBQzNCLHVCQUF1QjtBQUN2Qix1QkFBdUIsbUJBQU8sQ0FBQyw0R0FBc0I7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2NvbW1vbmpzL3BvbGljaWVzL3VzZXJBZ2VudFBvbGljeS5qcz82YjlmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnVzZXJBZ2VudFBvbGljeU5hbWUgPSB2b2lkIDA7XG5leHBvcnRzLnVzZXJBZ2VudFBvbGljeSA9IHVzZXJBZ2VudFBvbGljeTtcbmNvbnN0IHVzZXJBZ2VudF9qc18xID0gcmVxdWlyZShcIi4uL3V0aWwvdXNlckFnZW50LmpzXCIpO1xuY29uc3QgVXNlckFnZW50SGVhZGVyTmFtZSA9ICgwLCB1c2VyQWdlbnRfanNfMS5nZXRVc2VyQWdlbnRIZWFkZXJOYW1lKSgpO1xuLyoqXG4gKiBUaGUgcHJvZ3JhbW1hdGljIGlkZW50aWZpZXIgb2YgdGhlIHVzZXJBZ2VudFBvbGljeS5cbiAqL1xuZXhwb3J0cy51c2VyQWdlbnRQb2xpY3lOYW1lID0gXCJ1c2VyQWdlbnRQb2xpY3lcIjtcbi8qKlxuICogQSBwb2xpY3kgdGhhdCBzZXRzIHRoZSBVc2VyLUFnZW50IGhlYWRlciAob3IgZXF1aXZhbGVudCkgdG8gcmVmbGVjdFxuICogdGhlIGxpYnJhcnkgdmVyc2lvbi5cbiAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyB0byBjdXN0b21pemUgdGhlIHVzZXIgYWdlbnQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHVzZXJBZ2VudFBvbGljeShvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB1c2VyQWdlbnRWYWx1ZSA9ICgwLCB1c2VyQWdlbnRfanNfMS5nZXRVc2VyQWdlbnRWYWx1ZSkob3B0aW9ucy51c2VyQWdlbnRQcmVmaXgpO1xuICAgIHJldHVybiB7XG4gICAgICAgIG5hbWU6IGV4cG9ydHMudXNlckFnZW50UG9saWN5TmFtZSxcbiAgICAgICAgYXN5bmMgc2VuZFJlcXVlc3QocmVxdWVzdCwgbmV4dCkge1xuICAgICAgICAgICAgaWYgKCFyZXF1ZXN0LmhlYWRlcnMuaGFzKFVzZXJBZ2VudEhlYWRlck5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmVxdWVzdC5oZWFkZXJzLnNldChVc2VyQWdlbnRIZWFkZXJOYW1lLCBhd2FpdCB1c2VyQWdlbnRWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV4dChyZXF1ZXN0KTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlckFnZW50UG9saWN5LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/userAgentPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/wrapAbortSignalLikePolicy.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/wrapAbortSignalLikePolicy.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.wrapAbortSignalLikePolicyName = void 0;\nexports.wrapAbortSignalLikePolicy = wrapAbortSignalLikePolicy;\nconst wrapAbortSignal_js_1 = __webpack_require__(/*! ../util/wrapAbortSignal.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/util/wrapAbortSignal.js\");\nexports.wrapAbortSignalLikePolicyName = \"wrapAbortSignalLikePolicy\";\n/**\n * Policy that ensure that any AbortSignalLike is wrapped in a native AbortSignal for processing by the pipeline.\n * Since the ts-http-runtime expects a native AbortSignal, this policy is used to ensure that any AbortSignalLike is wrapped in a native AbortSignal.\n *\n * @returns - created policy\n */\nfunction wrapAbortSignalLikePolicy() {\n    return {\n        name: exports.wrapAbortSignalLikePolicyName,\n        sendRequest: async (request, next) => {\n            if (!request.abortSignal) {\n                return next(request);\n            }\n            const { abortSignal, cleanup } = (0, wrapAbortSignal_js_1.wrapAbortSignalLike)(request.abortSignal);\n            // eslint-disable-next-line no-param-reassign\n            request.abortSignal = abortSignal;\n            try {\n                return await next(request);\n            }\n            finally {\n                cleanup === null || cleanup === void 0 ? void 0 : cleanup();\n            }\n        },\n    };\n}\n//# sourceMappingURL=wrapAbortSignalLikePolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2NvbW1vbmpzL3BvbGljaWVzL3dyYXBBYm9ydFNpZ25hbExpa2VQb2xpY3kuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHFDQUFxQztBQUNyQyxpQ0FBaUM7QUFDakMsNkJBQTZCLG1CQUFPLENBQUMsd0hBQTRCO0FBQ2pFLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQix1QkFBdUI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9jb21tb25qcy9wb2xpY2llcy93cmFwQWJvcnRTaWduYWxMaWtlUG9saWN5LmpzP2NmMjQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMud3JhcEFib3J0U2lnbmFsTGlrZVBvbGljeU5hbWUgPSB2b2lkIDA7XG5leHBvcnRzLndyYXBBYm9ydFNpZ25hbExpa2VQb2xpY3kgPSB3cmFwQWJvcnRTaWduYWxMaWtlUG9saWN5O1xuY29uc3Qgd3JhcEFib3J0U2lnbmFsX2pzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC93cmFwQWJvcnRTaWduYWwuanNcIik7XG5leHBvcnRzLndyYXBBYm9ydFNpZ25hbExpa2VQb2xpY3lOYW1lID0gXCJ3cmFwQWJvcnRTaWduYWxMaWtlUG9saWN5XCI7XG4vKipcbiAqIFBvbGljeSB0aGF0IGVuc3VyZSB0aGF0IGFueSBBYm9ydFNpZ25hbExpa2UgaXMgd3JhcHBlZCBpbiBhIG5hdGl2ZSBBYm9ydFNpZ25hbCBmb3IgcHJvY2Vzc2luZyBieSB0aGUgcGlwZWxpbmUuXG4gKiBTaW5jZSB0aGUgdHMtaHR0cC1ydW50aW1lIGV4cGVjdHMgYSBuYXRpdmUgQWJvcnRTaWduYWwsIHRoaXMgcG9saWN5IGlzIHVzZWQgdG8gZW5zdXJlIHRoYXQgYW55IEFib3J0U2lnbmFsTGlrZSBpcyB3cmFwcGVkIGluIGEgbmF0aXZlIEFib3J0U2lnbmFsLlxuICpcbiAqIEByZXR1cm5zIC0gY3JlYXRlZCBwb2xpY3lcbiAqL1xuZnVuY3Rpb24gd3JhcEFib3J0U2lnbmFsTGlrZVBvbGljeSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiBleHBvcnRzLndyYXBBYm9ydFNpZ25hbExpa2VQb2xpY3lOYW1lLFxuICAgICAgICBzZW5kUmVxdWVzdDogYXN5bmMgKHJlcXVlc3QsIG5leHQpID0+IHtcbiAgICAgICAgICAgIGlmICghcmVxdWVzdC5hYm9ydFNpZ25hbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXh0KHJlcXVlc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgeyBhYm9ydFNpZ25hbCwgY2xlYW51cCB9ID0gKDAsIHdyYXBBYm9ydFNpZ25hbF9qc18xLndyYXBBYm9ydFNpZ25hbExpa2UpKHJlcXVlc3QuYWJvcnRTaWduYWwpO1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgICAgICByZXF1ZXN0LmFib3J0U2lnbmFsID0gYWJvcnRTaWduYWw7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCBuZXh0KHJlcXVlc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgY2xlYW51cCA9PT0gbnVsbCB8fCBjbGVhbnVwID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjbGVhbnVwKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdyYXBBYm9ydFNpZ25hbExpa2VQb2xpY3kuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/policies/wrapAbortSignalLikePolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/restError.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/commonjs/restError.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RestError = void 0;\nexports.isRestError = isRestError;\nconst ts_http_runtime_1 = __webpack_require__(/*! @typespec/ts-http-runtime */ \"(rsc)/./node_modules/@typespec/ts-http-runtime/dist/commonjs/index.js\");\n/**\n * A custom error type for failed pipeline requests.\n */\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexports.RestError = ts_http_runtime_1.RestError;\n/**\n * Typeguard for RestError\n * @param e - Something caught by a catch clause.\n */\nfunction isRestError(e) {\n    return (0, ts_http_runtime_1.isRestError)(e);\n}\n//# sourceMappingURL=restError.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2NvbW1vbmpzL3Jlc3RFcnJvci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUJBQWlCO0FBQ2pCLG1CQUFtQjtBQUNuQiwwQkFBMEIsbUJBQU8sQ0FBQyx3R0FBMkI7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2NvbW1vbmpzL3Jlc3RFcnJvci5qcz9jZmYyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJlc3RFcnJvciA9IHZvaWQgMDtcbmV4cG9ydHMuaXNSZXN0RXJyb3IgPSBpc1Jlc3RFcnJvcjtcbmNvbnN0IHRzX2h0dHBfcnVudGltZV8xID0gcmVxdWlyZShcIkB0eXBlc3BlYy90cy1odHRwLXJ1bnRpbWVcIik7XG4vKipcbiAqIEEgY3VzdG9tIGVycm9yIHR5cGUgZm9yIGZhaWxlZCBwaXBlbGluZSByZXF1ZXN0cy5cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmVcbmV4cG9ydHMuUmVzdEVycm9yID0gdHNfaHR0cF9ydW50aW1lXzEuUmVzdEVycm9yO1xuLyoqXG4gKiBUeXBlZ3VhcmQgZm9yIFJlc3RFcnJvclxuICogQHBhcmFtIGUgLSBTb21ldGhpbmcgY2F1Z2h0IGJ5IGEgY2F0Y2ggY2xhdXNlLlxuICovXG5mdW5jdGlvbiBpc1Jlc3RFcnJvcihlKSB7XG4gICAgcmV0dXJuICgwLCB0c19odHRwX3J1bnRpbWVfMS5pc1Jlc3RFcnJvcikoZSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXN0RXJyb3IuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/restError.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/util/file.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/commonjs/util/file.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.hasRawContent = hasRawContent;\nexports.getRawContent = getRawContent;\nexports.createFileFromStream = createFileFromStream;\nexports.createFile = createFile;\nconst core_util_1 = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/commonjs/index.js\");\nfunction isNodeReadableStream(x) {\n    return Boolean(x && typeof x[\"pipe\"] === \"function\");\n}\nconst unimplementedMethods = {\n    arrayBuffer: () => {\n        throw new Error(\"Not implemented\");\n    },\n    bytes: () => {\n        throw new Error(\"Not implemented\");\n    },\n    slice: () => {\n        throw new Error(\"Not implemented\");\n    },\n    text: () => {\n        throw new Error(\"Not implemented\");\n    },\n};\n/**\n * Private symbol used as key on objects created using createFile containing the\n * original source of the file object.\n *\n * This is used in Node to access the original Node stream without using Blob#stream, which\n * returns a web stream. This is done to avoid a couple of bugs to do with Blob#stream and\n * Readable#to/fromWeb in Node versions we support:\n * - https://github.com/nodejs/node/issues/42694 (fixed in Node 18.14)\n * - https://github.com/nodejs/node/issues/48916 (fixed in Node 20.6)\n *\n * Once these versions are no longer supported, we may be able to stop doing this.\n *\n * @internal\n */\nconst rawContent = Symbol(\"rawContent\");\n/**\n * Type guard to check if a given object is a blob-like object with a raw content property.\n */\nfunction hasRawContent(x) {\n    return typeof x[rawContent] === \"function\";\n}\n/**\n * Extract the raw content from a given blob-like object. If the input was created using createFile\n * or createFileFromStream, the exact content passed into createFile/createFileFromStream will be used.\n * For true instances of Blob and File, returns the actual blob.\n *\n * @internal\n */\nfunction getRawContent(blob) {\n    if (hasRawContent(blob)) {\n        return blob[rawContent]();\n    }\n    else {\n        return blob;\n    }\n}\n/**\n * Create an object that implements the File interface. This object is intended to be\n * passed into RequestBodyType.formData, and is not guaranteed to work as expected in\n * other situations.\n *\n * Use this function to:\n * - Create a File object for use in RequestBodyType.formData in environments where the\n *   global File object is unavailable.\n * - Create a File-like object from a readable stream without reading the stream into memory.\n *\n * @param stream - the content of the file as a callback returning a stream. When a File object made using createFile is\n *                  passed in a request's form data map, the stream will not be read into memory\n *                  and instead will be streamed when the request is made. In the event of a retry, the\n *                  stream needs to be read again, so this callback SHOULD return a fresh stream if possible.\n * @param name - the name of the file.\n * @param options - optional metadata about the file, e.g. file name, file size, MIME type.\n */\nfunction createFileFromStream(stream, name, options = {}) {\n    var _a, _b, _c, _d;\n    return Object.assign(Object.assign({}, unimplementedMethods), { type: (_a = options.type) !== null && _a !== void 0 ? _a : \"\", lastModified: (_b = options.lastModified) !== null && _b !== void 0 ? _b : new Date().getTime(), webkitRelativePath: (_c = options.webkitRelativePath) !== null && _c !== void 0 ? _c : \"\", size: (_d = options.size) !== null && _d !== void 0 ? _d : -1, name, stream: () => {\n            const s = stream();\n            if (isNodeReadableStream(s)) {\n                throw new Error(\"Not supported: a Node stream was provided as input to createFileFromStream.\");\n            }\n            return s;\n        }, [rawContent]: stream });\n}\n/**\n * Create an object that implements the File interface. This object is intended to be\n * passed into RequestBodyType.formData, and is not guaranteed to work as expected in\n * other situations.\n *\n * Use this function create a File object for use in RequestBodyType.formData in environments where the global File object is unavailable.\n *\n * @param content - the content of the file as a Uint8Array in memory.\n * @param name - the name of the file.\n * @param options - optional metadata about the file, e.g. file name, file size, MIME type.\n */\nfunction createFile(content, name, options = {}) {\n    var _a, _b, _c;\n    if (core_util_1.isNodeLike) {\n        return Object.assign(Object.assign({}, unimplementedMethods), { type: (_a = options.type) !== null && _a !== void 0 ? _a : \"\", lastModified: (_b = options.lastModified) !== null && _b !== void 0 ? _b : new Date().getTime(), webkitRelativePath: (_c = options.webkitRelativePath) !== null && _c !== void 0 ? _c : \"\", size: content.byteLength, name, arrayBuffer: async () => content.buffer, stream: () => new Blob([content]).stream(), [rawContent]: () => content });\n    }\n    else {\n        return new File([content], name, options);\n    }\n}\n//# sourceMappingURL=file.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/util/file.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/util/tokenCycler.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/commonjs/util/tokenCycler.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DEFAULT_CYCLER_OPTIONS = void 0;\nexports.createTokenCycler = createTokenCycler;\nconst core_util_1 = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/commonjs/index.js\");\n// Default options for the cycler if none are provided\nexports.DEFAULT_CYCLER_OPTIONS = {\n    forcedRefreshWindowInMs: 1000, // Force waiting for a refresh 1s before the token expires\n    retryIntervalInMs: 3000, // Allow refresh attempts every 3s\n    refreshWindowInMs: 1000 * 60 * 2, // Start refreshing 2m before expiry\n};\n/**\n * Converts an an unreliable access token getter (which may resolve with null)\n * into an AccessTokenGetter by retrying the unreliable getter in a regular\n * interval.\n *\n * @param getAccessToken - A function that produces a promise of an access token that may fail by returning null.\n * @param retryIntervalInMs - The time (in milliseconds) to wait between retry attempts.\n * @param refreshTimeout - The timestamp after which the refresh attempt will fail, throwing an exception.\n * @returns - A promise that, if it resolves, will resolve with an access token.\n */\nasync function beginRefresh(getAccessToken, retryIntervalInMs, refreshTimeout) {\n    // This wrapper handles exceptions gracefully as long as we haven't exceeded\n    // the timeout.\n    async function tryGetAccessToken() {\n        if (Date.now() < refreshTimeout) {\n            try {\n                return await getAccessToken();\n            }\n            catch (_a) {\n                return null;\n            }\n        }\n        else {\n            const finalToken = await getAccessToken();\n            // Timeout is up, so throw if it's still null\n            if (finalToken === null) {\n                throw new Error(\"Failed to refresh access token.\");\n            }\n            return finalToken;\n        }\n    }\n    let token = await tryGetAccessToken();\n    while (token === null) {\n        await (0, core_util_1.delay)(retryIntervalInMs);\n        token = await tryGetAccessToken();\n    }\n    return token;\n}\n/**\n * Creates a token cycler from a credential, scopes, and optional settings.\n *\n * A token cycler represents a way to reliably retrieve a valid access token\n * from a TokenCredential. It will handle initializing the token, refreshing it\n * when it nears expiration, and synchronizes refresh attempts to avoid\n * concurrency hazards.\n *\n * @param credential - the underlying TokenCredential that provides the access\n * token\n * @param tokenCyclerOptions - optionally override default settings for the cycler\n *\n * @returns - a function that reliably produces a valid access token\n */\nfunction createTokenCycler(credential, tokenCyclerOptions) {\n    let refreshWorker = null;\n    let token = null;\n    let tenantId;\n    const options = Object.assign(Object.assign({}, exports.DEFAULT_CYCLER_OPTIONS), tokenCyclerOptions);\n    /**\n     * This little holder defines several predicates that we use to construct\n     * the rules of refreshing the token.\n     */\n    const cycler = {\n        /**\n         * Produces true if a refresh job is currently in progress.\n         */\n        get isRefreshing() {\n            return refreshWorker !== null;\n        },\n        /**\n         * Produces true if the cycler SHOULD refresh (we are within the refresh\n         * window and not already refreshing)\n         */\n        get shouldRefresh() {\n            var _a;\n            if (cycler.isRefreshing) {\n                return false;\n            }\n            if ((token === null || token === void 0 ? void 0 : token.refreshAfterTimestamp) && token.refreshAfterTimestamp < Date.now()) {\n                return true;\n            }\n            return ((_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : 0) - options.refreshWindowInMs < Date.now();\n        },\n        /**\n         * Produces true if the cycler MUST refresh (null or nearly-expired\n         * token).\n         */\n        get mustRefresh() {\n            return (token === null || token.expiresOnTimestamp - options.forcedRefreshWindowInMs < Date.now());\n        },\n    };\n    /**\n     * Starts a refresh job or returns the existing job if one is already\n     * running.\n     */\n    function refresh(scopes, getTokenOptions) {\n        var _a;\n        if (!cycler.isRefreshing) {\n            // We bind `scopes` here to avoid passing it around a lot\n            const tryGetAccessToken = () => credential.getToken(scopes, getTokenOptions);\n            // Take advantage of promise chaining to insert an assignment to `token`\n            // before the refresh can be considered done.\n            refreshWorker = beginRefresh(tryGetAccessToken, options.retryIntervalInMs, \n            // If we don't have a token, then we should timeout immediately\n            (_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : Date.now())\n                .then((_token) => {\n                refreshWorker = null;\n                token = _token;\n                tenantId = getTokenOptions.tenantId;\n                return token;\n            })\n                .catch((reason) => {\n                // We also should reset the refresher if we enter a failed state.  All\n                // existing awaiters will throw, but subsequent requests will start a\n                // new retry chain.\n                refreshWorker = null;\n                token = null;\n                tenantId = undefined;\n                throw reason;\n            });\n        }\n        return refreshWorker;\n    }\n    return async (scopes, tokenOptions) => {\n        //\n        // Simple rules:\n        // - If we MUST refresh, then return the refresh task, blocking\n        //   the pipeline until a token is available.\n        // - If we SHOULD refresh, then run refresh but don't return it\n        //   (we can still use the cached token).\n        // - Return the token, since it's fine if we didn't return in\n        //   step 1.\n        //\n        const hasClaimChallenge = Boolean(tokenOptions.claims);\n        const tenantIdChanged = tenantId !== tokenOptions.tenantId;\n        if (hasClaimChallenge) {\n            // If we've received a claim, we know the existing token isn't valid\n            // We want to clear it so that that refresh worker won't use the old expiration time as a timeout\n            token = null;\n        }\n        // If the tenantId passed in token options is different to the one we have\n        // Or if we are in claim challenge and the token was rejected and a new access token need to be issued, we need to\n        // refresh the token with the new tenantId or token.\n        const mustRefresh = tenantIdChanged || hasClaimChallenge || cycler.mustRefresh;\n        if (mustRefresh) {\n            return refresh(scopes, tokenOptions);\n        }\n        if (cycler.shouldRefresh) {\n            refresh(scopes, tokenOptions);\n        }\n        return token;\n    };\n}\n//# sourceMappingURL=tokenCycler.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/util/tokenCycler.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/util/userAgent.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/commonjs/util/userAgent.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getUserAgentHeaderName = getUserAgentHeaderName;\nexports.getUserAgentValue = getUserAgentValue;\nconst userAgentPlatform_js_1 = __webpack_require__(/*! ./userAgentPlatform.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/util/userAgentPlatform.js\");\nconst constants_js_1 = __webpack_require__(/*! ../constants.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/constants.js\");\nfunction getUserAgentString(telemetryInfo) {\n    const parts = [];\n    for (const [key, value] of telemetryInfo) {\n        const token = value ? `${key}/${value}` : key;\n        parts.push(token);\n    }\n    return parts.join(\" \");\n}\n/**\n * @internal\n */\nfunction getUserAgentHeaderName() {\n    return (0, userAgentPlatform_js_1.getHeaderName)();\n}\n/**\n * @internal\n */\nasync function getUserAgentValue(prefix) {\n    const runtimeInfo = new Map();\n    runtimeInfo.set(\"core-rest-pipeline\", constants_js_1.SDK_VERSION);\n    await (0, userAgentPlatform_js_1.setPlatformSpecificData)(runtimeInfo);\n    const defaultAgent = getUserAgentString(runtimeInfo);\n    const userAgentValue = prefix ? `${prefix} ${defaultAgent}` : defaultAgent;\n    return userAgentValue;\n}\n//# sourceMappingURL=userAgent.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2NvbW1vbmpzL3V0aWwvdXNlckFnZW50LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw4QkFBOEI7QUFDOUIseUJBQXlCO0FBQ3pCLCtCQUErQixtQkFBTyxDQUFDLHNIQUF3QjtBQUMvRCx1QkFBdUIsbUJBQU8sQ0FBQyxrR0FBaUI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLElBQUksR0FBRyxNQUFNO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxRQUFRLEVBQUUsYUFBYTtBQUM5RDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9jb21tb25qcy91dGlsL3VzZXJBZ2VudC5qcz9iZjA0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldFVzZXJBZ2VudEhlYWRlck5hbWUgPSBnZXRVc2VyQWdlbnRIZWFkZXJOYW1lO1xuZXhwb3J0cy5nZXRVc2VyQWdlbnRWYWx1ZSA9IGdldFVzZXJBZ2VudFZhbHVlO1xuY29uc3QgdXNlckFnZW50UGxhdGZvcm1fanNfMSA9IHJlcXVpcmUoXCIuL3VzZXJBZ2VudFBsYXRmb3JtLmpzXCIpO1xuY29uc3QgY29uc3RhbnRzX2pzXzEgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzLmpzXCIpO1xuZnVuY3Rpb24gZ2V0VXNlckFnZW50U3RyaW5nKHRlbGVtZXRyeUluZm8pIHtcbiAgICBjb25zdCBwYXJ0cyA9IFtdO1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIHRlbGVtZXRyeUluZm8pIHtcbiAgICAgICAgY29uc3QgdG9rZW4gPSB2YWx1ZSA/IGAke2tleX0vJHt2YWx1ZX1gIDoga2V5O1xuICAgICAgICBwYXJ0cy5wdXNoKHRva2VuKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnRzLmpvaW4oXCIgXCIpO1xufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gZ2V0VXNlckFnZW50SGVhZGVyTmFtZSgpIHtcbiAgICByZXR1cm4gKDAsIHVzZXJBZ2VudFBsYXRmb3JtX2pzXzEuZ2V0SGVhZGVyTmFtZSkoKTtcbn1cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGdldFVzZXJBZ2VudFZhbHVlKHByZWZpeCkge1xuICAgIGNvbnN0IHJ1bnRpbWVJbmZvID0gbmV3IE1hcCgpO1xuICAgIHJ1bnRpbWVJbmZvLnNldChcImNvcmUtcmVzdC1waXBlbGluZVwiLCBjb25zdGFudHNfanNfMS5TREtfVkVSU0lPTik7XG4gICAgYXdhaXQgKDAsIHVzZXJBZ2VudFBsYXRmb3JtX2pzXzEuc2V0UGxhdGZvcm1TcGVjaWZpY0RhdGEpKHJ1bnRpbWVJbmZvKTtcbiAgICBjb25zdCBkZWZhdWx0QWdlbnQgPSBnZXRVc2VyQWdlbnRTdHJpbmcocnVudGltZUluZm8pO1xuICAgIGNvbnN0IHVzZXJBZ2VudFZhbHVlID0gcHJlZml4ID8gYCR7cHJlZml4fSAke2RlZmF1bHRBZ2VudH1gIDogZGVmYXVsdEFnZW50O1xuICAgIHJldHVybiB1c2VyQWdlbnRWYWx1ZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZXJBZ2VudC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/util/userAgent.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/util/userAgentPlatform.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/commonjs/util/userAgentPlatform.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getHeaderName = getHeaderName;\nexports.setPlatformSpecificData = setPlatformSpecificData;\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\nconst os = tslib_1.__importStar(__webpack_require__(/*! node:os */ \"node:os\"));\nconst process = tslib_1.__importStar(__webpack_require__(/*! node:process */ \"node:process\"));\n/**\n * @internal\n */\nfunction getHeaderName() {\n    return \"User-Agent\";\n}\n/**\n * @internal\n */\nasync function setPlatformSpecificData(map) {\n    if (process && process.versions) {\n        const versions = process.versions;\n        if (versions.bun) {\n            map.set(\"Bun\", versions.bun);\n        }\n        else if (versions.deno) {\n            map.set(\"Deno\", versions.deno);\n        }\n        else if (versions.node) {\n            map.set(\"Node\", versions.node);\n        }\n    }\n    map.set(\"OS\", `(${os.arch()}-${os.type()}-${os.release()})`);\n}\n//# sourceMappingURL=userAgentPlatform.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2NvbW1vbmpzL3V0aWwvdXNlckFnZW50UGxhdGZvcm0uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHFCQUFxQjtBQUNyQiwrQkFBK0I7QUFDL0IsZ0JBQWdCLG1CQUFPLENBQUMsdURBQU87QUFDL0IsZ0NBQWdDLG1CQUFPLENBQUMsd0JBQVM7QUFDakQscUNBQXFDLG1CQUFPLENBQUMsa0NBQWM7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsVUFBVSxHQUFHLFVBQVUsR0FBRyxhQUFhO0FBQzdEO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9jb21tb25qcy91dGlsL3VzZXJBZ2VudFBsYXRmb3JtLmpzPzU4MDMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0SGVhZGVyTmFtZSA9IGdldEhlYWRlck5hbWU7XG5leHBvcnRzLnNldFBsYXRmb3JtU3BlY2lmaWNEYXRhID0gc2V0UGxhdGZvcm1TcGVjaWZpY0RhdGE7XG5jb25zdCB0c2xpYl8xID0gcmVxdWlyZShcInRzbGliXCIpO1xuY29uc3Qgb3MgPSB0c2xpYl8xLl9faW1wb3J0U3RhcihyZXF1aXJlKFwibm9kZTpvc1wiKSk7XG5jb25zdCBwcm9jZXNzID0gdHNsaWJfMS5fX2ltcG9ydFN0YXIocmVxdWlyZShcIm5vZGU6cHJvY2Vzc1wiKSk7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBnZXRIZWFkZXJOYW1lKCkge1xuICAgIHJldHVybiBcIlVzZXItQWdlbnRcIjtcbn1cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIHNldFBsYXRmb3JtU3BlY2lmaWNEYXRhKG1hcCkge1xuICAgIGlmIChwcm9jZXNzICYmIHByb2Nlc3MudmVyc2lvbnMpIHtcbiAgICAgICAgY29uc3QgdmVyc2lvbnMgPSBwcm9jZXNzLnZlcnNpb25zO1xuICAgICAgICBpZiAodmVyc2lvbnMuYnVuKSB7XG4gICAgICAgICAgICBtYXAuc2V0KFwiQnVuXCIsIHZlcnNpb25zLmJ1bik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodmVyc2lvbnMuZGVubykge1xuICAgICAgICAgICAgbWFwLnNldChcIkRlbm9cIiwgdmVyc2lvbnMuZGVubyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodmVyc2lvbnMubm9kZSkge1xuICAgICAgICAgICAgbWFwLnNldChcIk5vZGVcIiwgdmVyc2lvbnMubm9kZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbWFwLnNldChcIk9TXCIsIGAoJHtvcy5hcmNoKCl9LSR7b3MudHlwZSgpfS0ke29zLnJlbGVhc2UoKX0pYCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VyQWdlbnRQbGF0Zm9ybS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/util/userAgentPlatform.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/util/wrapAbortSignal.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/commonjs/util/wrapAbortSignal.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.wrapAbortSignalLike = wrapAbortSignalLike;\n/**\n * Creates a native AbortSignal which reflects the state of the provided AbortSignalLike.\n * If the AbortSignalLike is already a native AbortSignal, it is returned as is.\n * @param abortSignalLike - The AbortSignalLike to wrap.\n * @returns - An object containing the native AbortSignal and an optional cleanup function. The cleanup function should be called when the AbortSignal is no longer needed.\n */\nfunction wrapAbortSignalLike(abortSignalLike) {\n    if (abortSignalLike instanceof AbortSignal) {\n        return { abortSignal: abortSignalLike };\n    }\n    if (abortSignalLike.aborted) {\n        return { abortSignal: AbortSignal.abort(abortSignalLike.reason) };\n    }\n    const controller = new AbortController();\n    let needsCleanup = true;\n    function cleanup() {\n        if (needsCleanup) {\n            abortSignalLike.removeEventListener(\"abort\", listener);\n            needsCleanup = false;\n        }\n    }\n    function listener() {\n        controller.abort(abortSignalLike.reason);\n        cleanup();\n    }\n    abortSignalLike.addEventListener(\"abort\", listener);\n    return { abortSignal: controller.signal, cleanup };\n}\n//# sourceMappingURL=wrapAbortSignal.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2NvbW1vbmpzL3V0aWwvd3JhcEFib3J0U2lnbmFsLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2NvbW1vbmpzL3V0aWwvd3JhcEFib3J0U2lnbmFsLmpzP2JhN2IiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMud3JhcEFib3J0U2lnbmFsTGlrZSA9IHdyYXBBYm9ydFNpZ25hbExpa2U7XG4vKipcbiAqIENyZWF0ZXMgYSBuYXRpdmUgQWJvcnRTaWduYWwgd2hpY2ggcmVmbGVjdHMgdGhlIHN0YXRlIG9mIHRoZSBwcm92aWRlZCBBYm9ydFNpZ25hbExpa2UuXG4gKiBJZiB0aGUgQWJvcnRTaWduYWxMaWtlIGlzIGFscmVhZHkgYSBuYXRpdmUgQWJvcnRTaWduYWwsIGl0IGlzIHJldHVybmVkIGFzIGlzLlxuICogQHBhcmFtIGFib3J0U2lnbmFsTGlrZSAtIFRoZSBBYm9ydFNpZ25hbExpa2UgdG8gd3JhcC5cbiAqIEByZXR1cm5zIC0gQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIG5hdGl2ZSBBYm9ydFNpZ25hbCBhbmQgYW4gb3B0aW9uYWwgY2xlYW51cCBmdW5jdGlvbi4gVGhlIGNsZWFudXAgZnVuY3Rpb24gc2hvdWxkIGJlIGNhbGxlZCB3aGVuIHRoZSBBYm9ydFNpZ25hbCBpcyBubyBsb25nZXIgbmVlZGVkLlxuICovXG5mdW5jdGlvbiB3cmFwQWJvcnRTaWduYWxMaWtlKGFib3J0U2lnbmFsTGlrZSkge1xuICAgIGlmIChhYm9ydFNpZ25hbExpa2UgaW5zdGFuY2VvZiBBYm9ydFNpZ25hbCkge1xuICAgICAgICByZXR1cm4geyBhYm9ydFNpZ25hbDogYWJvcnRTaWduYWxMaWtlIH07XG4gICAgfVxuICAgIGlmIChhYm9ydFNpZ25hbExpa2UuYWJvcnRlZCkge1xuICAgICAgICByZXR1cm4geyBhYm9ydFNpZ25hbDogQWJvcnRTaWduYWwuYWJvcnQoYWJvcnRTaWduYWxMaWtlLnJlYXNvbikgfTtcbiAgICB9XG4gICAgY29uc3QgY29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICBsZXQgbmVlZHNDbGVhbnVwID0gdHJ1ZTtcbiAgICBmdW5jdGlvbiBjbGVhbnVwKCkge1xuICAgICAgICBpZiAobmVlZHNDbGVhbnVwKSB7XG4gICAgICAgICAgICBhYm9ydFNpZ25hbExpa2UucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIGxpc3RlbmVyKTtcbiAgICAgICAgICAgIG5lZWRzQ2xlYW51cCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGxpc3RlbmVyKCkge1xuICAgICAgICBjb250cm9sbGVyLmFib3J0KGFib3J0U2lnbmFsTGlrZS5yZWFzb24pO1xuICAgICAgICBjbGVhbnVwKCk7XG4gICAgfVxuICAgIGFib3J0U2lnbmFsTGlrZS5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgbGlzdGVuZXIpO1xuICAgIHJldHVybiB7IGFib3J0U2lnbmFsOiBjb250cm9sbGVyLnNpZ25hbCwgY2xlYW51cCB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d3JhcEFib3J0U2lnbmFsLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/util/wrapAbortSignal.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-tracing/dist/commonjs/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@azure/core-tracing/dist/commonjs/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createTracingClient = exports.useInstrumenter = void 0;\nvar instrumenter_js_1 = __webpack_require__(/*! ./instrumenter.js */ \"(rsc)/./node_modules/@azure/core-tracing/dist/commonjs/instrumenter.js\");\nObject.defineProperty(exports, \"useInstrumenter\", ({ enumerable: true, get: function () { return instrumenter_js_1.useInstrumenter; } }));\nvar tracingClient_js_1 = __webpack_require__(/*! ./tracingClient.js */ \"(rsc)/./node_modules/@azure/core-tracing/dist/commonjs/tracingClient.js\");\nObject.defineProperty(exports, \"createTracingClient\", ({ enumerable: true, get: function () { return tracingClient_js_1.createTracingClient; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdHJhY2luZy9kaXN0L2NvbW1vbmpzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwyQkFBMkIsR0FBRyx1QkFBdUI7QUFDckQsd0JBQXdCLG1CQUFPLENBQUMsaUdBQW1CO0FBQ25ELG1EQUFrRCxFQUFFLHFDQUFxQyw2Q0FBNkMsRUFBQztBQUN2SSx5QkFBeUIsbUJBQU8sQ0FBQyxtR0FBb0I7QUFDckQsdURBQXNELEVBQUUscUNBQXFDLGtEQUFrRCxFQUFDO0FBQ2hKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS10cmFjaW5nL2Rpc3QvY29tbW9uanMvaW5kZXguanM/MzUwYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jcmVhdGVUcmFjaW5nQ2xpZW50ID0gZXhwb3J0cy51c2VJbnN0cnVtZW50ZXIgPSB2b2lkIDA7XG52YXIgaW5zdHJ1bWVudGVyX2pzXzEgPSByZXF1aXJlKFwiLi9pbnN0cnVtZW50ZXIuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ1c2VJbnN0cnVtZW50ZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGluc3RydW1lbnRlcl9qc18xLnVzZUluc3RydW1lbnRlcjsgfSB9KTtcbnZhciB0cmFjaW5nQ2xpZW50X2pzXzEgPSByZXF1aXJlKFwiLi90cmFjaW5nQ2xpZW50LmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY3JlYXRlVHJhY2luZ0NsaWVudFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJhY2luZ0NsaWVudF9qc18xLmNyZWF0ZVRyYWNpbmdDbGllbnQ7IH0gfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-tracing/dist/commonjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-tracing/dist/commonjs/instrumenter.js":
/*!************************************************************************!*\
  !*** ./node_modules/@azure/core-tracing/dist/commonjs/instrumenter.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createDefaultTracingSpan = createDefaultTracingSpan;\nexports.createDefaultInstrumenter = createDefaultInstrumenter;\nexports.useInstrumenter = useInstrumenter;\nexports.getInstrumenter = getInstrumenter;\nconst tracingContext_js_1 = __webpack_require__(/*! ./tracingContext.js */ \"(rsc)/./node_modules/@azure/core-tracing/dist/commonjs/tracingContext.js\");\nconst state_js_1 = __webpack_require__(/*! ./state.js */ \"(rsc)/./node_modules/@azure/core-tracing/dist/commonjs/state.js\");\nfunction createDefaultTracingSpan() {\n    return {\n        end: () => {\n            // noop\n        },\n        isRecording: () => false,\n        recordException: () => {\n            // noop\n        },\n        setAttribute: () => {\n            // noop\n        },\n        setStatus: () => {\n            // noop\n        },\n        addEvent: () => {\n            // noop\n        },\n    };\n}\nfunction createDefaultInstrumenter() {\n    return {\n        createRequestHeaders: () => {\n            return {};\n        },\n        parseTraceparentHeader: () => {\n            return undefined;\n        },\n        startSpan: (_name, spanOptions) => {\n            return {\n                span: createDefaultTracingSpan(),\n                tracingContext: (0, tracingContext_js_1.createTracingContext)({ parentContext: spanOptions.tracingContext }),\n            };\n        },\n        withContext(_context, callback, ...callbackArgs) {\n            return callback(...callbackArgs);\n        },\n    };\n}\n/**\n * Extends the Azure SDK with support for a given instrumenter implementation.\n *\n * @param instrumenter - The instrumenter implementation to use.\n */\nfunction useInstrumenter(instrumenter) {\n    state_js_1.state.instrumenterImplementation = instrumenter;\n}\n/**\n * Gets the currently set instrumenter, a No-Op instrumenter by default.\n *\n * @returns The currently set instrumenter\n */\nfunction getInstrumenter() {\n    if (!state_js_1.state.instrumenterImplementation) {\n        state_js_1.state.instrumenterImplementation = createDefaultInstrumenter();\n    }\n    return state_js_1.state.instrumenterImplementation;\n}\n//# sourceMappingURL=instrumenter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdHJhY2luZy9kaXN0L2NvbW1vbmpzL2luc3RydW1lbnRlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0NBQWdDO0FBQ2hDLGlDQUFpQztBQUNqQyx1QkFBdUI7QUFDdkIsdUJBQXVCO0FBQ3ZCLDRCQUE0QixtQkFBTyxDQUFDLHFHQUFxQjtBQUN6RCxtQkFBbUIsbUJBQU8sQ0FBQyxtRkFBWTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsZ0ZBQWdGLDJDQUEyQztBQUMzSDtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS10cmFjaW5nL2Rpc3QvY29tbW9uanMvaW5zdHJ1bWVudGVyLmpzPzQzOTAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY3JlYXRlRGVmYXVsdFRyYWNpbmdTcGFuID0gY3JlYXRlRGVmYXVsdFRyYWNpbmdTcGFuO1xuZXhwb3J0cy5jcmVhdGVEZWZhdWx0SW5zdHJ1bWVudGVyID0gY3JlYXRlRGVmYXVsdEluc3RydW1lbnRlcjtcbmV4cG9ydHMudXNlSW5zdHJ1bWVudGVyID0gdXNlSW5zdHJ1bWVudGVyO1xuZXhwb3J0cy5nZXRJbnN0cnVtZW50ZXIgPSBnZXRJbnN0cnVtZW50ZXI7XG5jb25zdCB0cmFjaW5nQ29udGV4dF9qc18xID0gcmVxdWlyZShcIi4vdHJhY2luZ0NvbnRleHQuanNcIik7XG5jb25zdCBzdGF0ZV9qc18xID0gcmVxdWlyZShcIi4vc3RhdGUuanNcIik7XG5mdW5jdGlvbiBjcmVhdGVEZWZhdWx0VHJhY2luZ1NwYW4oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZW5kOiAoKSA9PiB7XG4gICAgICAgICAgICAvLyBub29wXG4gICAgICAgIH0sXG4gICAgICAgIGlzUmVjb3JkaW5nOiAoKSA9PiBmYWxzZSxcbiAgICAgICAgcmVjb3JkRXhjZXB0aW9uOiAoKSA9PiB7XG4gICAgICAgICAgICAvLyBub29wXG4gICAgICAgIH0sXG4gICAgICAgIHNldEF0dHJpYnV0ZTogKCkgPT4ge1xuICAgICAgICAgICAgLy8gbm9vcFxuICAgICAgICB9LFxuICAgICAgICBzZXRTdGF0dXM6ICgpID0+IHtcbiAgICAgICAgICAgIC8vIG5vb3BcbiAgICAgICAgfSxcbiAgICAgICAgYWRkRXZlbnQ6ICgpID0+IHtcbiAgICAgICAgICAgIC8vIG5vb3BcbiAgICAgICAgfSxcbiAgICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlRGVmYXVsdEluc3RydW1lbnRlcigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBjcmVhdGVSZXF1ZXN0SGVhZGVyczogKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICB9LFxuICAgICAgICBwYXJzZVRyYWNlcGFyZW50SGVhZGVyOiAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9LFxuICAgICAgICBzdGFydFNwYW46IChfbmFtZSwgc3Bhbk9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgc3BhbjogY3JlYXRlRGVmYXVsdFRyYWNpbmdTcGFuKCksXG4gICAgICAgICAgICAgICAgdHJhY2luZ0NvbnRleHQ6ICgwLCB0cmFjaW5nQ29udGV4dF9qc18xLmNyZWF0ZVRyYWNpbmdDb250ZXh0KSh7IHBhcmVudENvbnRleHQ6IHNwYW5PcHRpb25zLnRyYWNpbmdDb250ZXh0IH0pLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgd2l0aENvbnRleHQoX2NvbnRleHQsIGNhbGxiYWNrLCAuLi5jYWxsYmFja0FyZ3MpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayguLi5jYWxsYmFja0FyZ3MpO1xuICAgICAgICB9LFxuICAgIH07XG59XG4vKipcbiAqIEV4dGVuZHMgdGhlIEF6dXJlIFNESyB3aXRoIHN1cHBvcnQgZm9yIGEgZ2l2ZW4gaW5zdHJ1bWVudGVyIGltcGxlbWVudGF0aW9uLlxuICpcbiAqIEBwYXJhbSBpbnN0cnVtZW50ZXIgLSBUaGUgaW5zdHJ1bWVudGVyIGltcGxlbWVudGF0aW9uIHRvIHVzZS5cbiAqL1xuZnVuY3Rpb24gdXNlSW5zdHJ1bWVudGVyKGluc3RydW1lbnRlcikge1xuICAgIHN0YXRlX2pzXzEuc3RhdGUuaW5zdHJ1bWVudGVySW1wbGVtZW50YXRpb24gPSBpbnN0cnVtZW50ZXI7XG59XG4vKipcbiAqIEdldHMgdGhlIGN1cnJlbnRseSBzZXQgaW5zdHJ1bWVudGVyLCBhIE5vLU9wIGluc3RydW1lbnRlciBieSBkZWZhdWx0LlxuICpcbiAqIEByZXR1cm5zIFRoZSBjdXJyZW50bHkgc2V0IGluc3RydW1lbnRlclxuICovXG5mdW5jdGlvbiBnZXRJbnN0cnVtZW50ZXIoKSB7XG4gICAgaWYgKCFzdGF0ZV9qc18xLnN0YXRlLmluc3RydW1lbnRlckltcGxlbWVudGF0aW9uKSB7XG4gICAgICAgIHN0YXRlX2pzXzEuc3RhdGUuaW5zdHJ1bWVudGVySW1wbGVtZW50YXRpb24gPSBjcmVhdGVEZWZhdWx0SW5zdHJ1bWVudGVyKCk7XG4gICAgfVxuICAgIHJldHVybiBzdGF0ZV9qc18xLnN0YXRlLmluc3RydW1lbnRlckltcGxlbWVudGF0aW9uO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5zdHJ1bWVudGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-tracing/dist/commonjs/instrumenter.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-tracing/dist/commonjs/state.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@azure/core-tracing/dist/commonjs/state.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.state = void 0;\n/**\n * @internal\n *\n * Holds the singleton instrumenter, to be shared across CJS and ESM imports.\n */\nexports.state = {\n    instrumenterImplementation: undefined,\n};\n//# sourceMappingURL=state-cjs.cjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdHJhY2luZy9kaXN0L2NvbW1vbmpzL3N0YXRlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXRyYWNpbmcvZGlzdC9jb21tb25qcy9zdGF0ZS5qcz9kYmM3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnN0YXRlID0gdm9pZCAwO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqXG4gKiBIb2xkcyB0aGUgc2luZ2xldG9uIGluc3RydW1lbnRlciwgdG8gYmUgc2hhcmVkIGFjcm9zcyBDSlMgYW5kIEVTTSBpbXBvcnRzLlxuICovXG5leHBvcnRzLnN0YXRlID0ge1xuICAgIGluc3RydW1lbnRlckltcGxlbWVudGF0aW9uOiB1bmRlZmluZWQsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RhdGUtY2pzLmNqcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-tracing/dist/commonjs/state.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-tracing/dist/commonjs/tracingClient.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@azure/core-tracing/dist/commonjs/tracingClient.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createTracingClient = createTracingClient;\nconst instrumenter_js_1 = __webpack_require__(/*! ./instrumenter.js */ \"(rsc)/./node_modules/@azure/core-tracing/dist/commonjs/instrumenter.js\");\nconst tracingContext_js_1 = __webpack_require__(/*! ./tracingContext.js */ \"(rsc)/./node_modules/@azure/core-tracing/dist/commonjs/tracingContext.js\");\n/**\n * Creates a new tracing client.\n *\n * @param options - Options used to configure the tracing client.\n * @returns - An instance of {@link TracingClient}.\n */\nfunction createTracingClient(options) {\n    const { namespace, packageName, packageVersion } = options;\n    function startSpan(name, operationOptions, spanOptions) {\n        var _a;\n        const startSpanResult = (0, instrumenter_js_1.getInstrumenter)().startSpan(name, Object.assign(Object.assign({}, spanOptions), { packageName: packageName, packageVersion: packageVersion, tracingContext: (_a = operationOptions === null || operationOptions === void 0 ? void 0 : operationOptions.tracingOptions) === null || _a === void 0 ? void 0 : _a.tracingContext }));\n        let tracingContext = startSpanResult.tracingContext;\n        const span = startSpanResult.span;\n        if (!tracingContext.getValue(tracingContext_js_1.knownContextKeys.namespace)) {\n            tracingContext = tracingContext.setValue(tracingContext_js_1.knownContextKeys.namespace, namespace);\n        }\n        span.setAttribute(\"az.namespace\", tracingContext.getValue(tracingContext_js_1.knownContextKeys.namespace));\n        const updatedOptions = Object.assign({}, operationOptions, {\n            tracingOptions: Object.assign(Object.assign({}, operationOptions === null || operationOptions === void 0 ? void 0 : operationOptions.tracingOptions), { tracingContext }),\n        });\n        return {\n            span,\n            updatedOptions,\n        };\n    }\n    async function withSpan(name, operationOptions, callback, spanOptions) {\n        const { span, updatedOptions } = startSpan(name, operationOptions, spanOptions);\n        try {\n            const result = await withContext(updatedOptions.tracingOptions.tracingContext, () => Promise.resolve(callback(updatedOptions, span)));\n            span.setStatus({ status: \"success\" });\n            return result;\n        }\n        catch (err) {\n            span.setStatus({ status: \"error\", error: err });\n            throw err;\n        }\n        finally {\n            span.end();\n        }\n    }\n    function withContext(context, callback, ...callbackArgs) {\n        return (0, instrumenter_js_1.getInstrumenter)().withContext(context, callback, ...callbackArgs);\n    }\n    /**\n     * Parses a traceparent header value into a span identifier.\n     *\n     * @param traceparentHeader - The traceparent header to parse.\n     * @returns An implementation-specific identifier for the span.\n     */\n    function parseTraceparentHeader(traceparentHeader) {\n        return (0, instrumenter_js_1.getInstrumenter)().parseTraceparentHeader(traceparentHeader);\n    }\n    /**\n     * Creates a set of request headers to propagate tracing information to a backend.\n     *\n     * @param tracingContext - The context containing the span to serialize.\n     * @returns The set of headers to add to a request.\n     */\n    function createRequestHeaders(tracingContext) {\n        return (0, instrumenter_js_1.getInstrumenter)().createRequestHeaders(tracingContext);\n    }\n    return {\n        startSpan,\n        withSpan,\n        withContext,\n        parseTraceparentHeader,\n        createRequestHeaders,\n    };\n}\n//# sourceMappingURL=tracingClient.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdHJhY2luZy9kaXN0L2NvbW1vbmpzL3RyYWNpbmdDbGllbnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDJCQUEyQjtBQUMzQiwwQkFBMEIsbUJBQU8sQ0FBQyxpR0FBbUI7QUFDckQsNEJBQTRCLG1CQUFPLENBQUMscUdBQXFCO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLG9CQUFvQjtBQUNsRDtBQUNBO0FBQ0EsWUFBWSx5Q0FBeUM7QUFDckQ7QUFDQTtBQUNBLHVIQUF1SCxrQkFBa0IsNk9BQTZPO0FBQ3RYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQztBQUMvQywwREFBMEQsMEdBQTBHLGdCQUFnQjtBQUNwTCxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHVCQUF1QjtBQUN2QztBQUNBO0FBQ0EsNkJBQTZCLG1CQUFtQjtBQUNoRDtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNkJBQTZCO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdHJhY2luZy9kaXN0L2NvbW1vbmpzL3RyYWNpbmdDbGllbnQuanM/ZTA4ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jcmVhdGVUcmFjaW5nQ2xpZW50ID0gY3JlYXRlVHJhY2luZ0NsaWVudDtcbmNvbnN0IGluc3RydW1lbnRlcl9qc18xID0gcmVxdWlyZShcIi4vaW5zdHJ1bWVudGVyLmpzXCIpO1xuY29uc3QgdHJhY2luZ0NvbnRleHRfanNfMSA9IHJlcXVpcmUoXCIuL3RyYWNpbmdDb250ZXh0LmpzXCIpO1xuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHRyYWNpbmcgY2xpZW50LlxuICpcbiAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyB1c2VkIHRvIGNvbmZpZ3VyZSB0aGUgdHJhY2luZyBjbGllbnQuXG4gKiBAcmV0dXJucyAtIEFuIGluc3RhbmNlIG9mIHtAbGluayBUcmFjaW5nQ2xpZW50fS5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlVHJhY2luZ0NsaWVudChvcHRpb25zKSB7XG4gICAgY29uc3QgeyBuYW1lc3BhY2UsIHBhY2thZ2VOYW1lLCBwYWNrYWdlVmVyc2lvbiB9ID0gb3B0aW9ucztcbiAgICBmdW5jdGlvbiBzdGFydFNwYW4obmFtZSwgb3BlcmF0aW9uT3B0aW9ucywgc3Bhbk9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCBzdGFydFNwYW5SZXN1bHQgPSAoMCwgaW5zdHJ1bWVudGVyX2pzXzEuZ2V0SW5zdHJ1bWVudGVyKSgpLnN0YXJ0U3BhbihuYW1lLCBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHNwYW5PcHRpb25zKSwgeyBwYWNrYWdlTmFtZTogcGFja2FnZU5hbWUsIHBhY2thZ2VWZXJzaW9uOiBwYWNrYWdlVmVyc2lvbiwgdHJhY2luZ0NvbnRleHQ6IChfYSA9IG9wZXJhdGlvbk9wdGlvbnMgPT09IG51bGwgfHwgb3BlcmF0aW9uT3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3BlcmF0aW9uT3B0aW9ucy50cmFjaW5nT3B0aW9ucykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnRyYWNpbmdDb250ZXh0IH0pKTtcbiAgICAgICAgbGV0IHRyYWNpbmdDb250ZXh0ID0gc3RhcnRTcGFuUmVzdWx0LnRyYWNpbmdDb250ZXh0O1xuICAgICAgICBjb25zdCBzcGFuID0gc3RhcnRTcGFuUmVzdWx0LnNwYW47XG4gICAgICAgIGlmICghdHJhY2luZ0NvbnRleHQuZ2V0VmFsdWUodHJhY2luZ0NvbnRleHRfanNfMS5rbm93bkNvbnRleHRLZXlzLm5hbWVzcGFjZSkpIHtcbiAgICAgICAgICAgIHRyYWNpbmdDb250ZXh0ID0gdHJhY2luZ0NvbnRleHQuc2V0VmFsdWUodHJhY2luZ0NvbnRleHRfanNfMS5rbm93bkNvbnRleHRLZXlzLm5hbWVzcGFjZSwgbmFtZXNwYWNlKTtcbiAgICAgICAgfVxuICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZShcImF6Lm5hbWVzcGFjZVwiLCB0cmFjaW5nQ29udGV4dC5nZXRWYWx1ZSh0cmFjaW5nQ29udGV4dF9qc18xLmtub3duQ29udGV4dEtleXMubmFtZXNwYWNlKSk7XG4gICAgICAgIGNvbnN0IHVwZGF0ZWRPcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgb3BlcmF0aW9uT3B0aW9ucywge1xuICAgICAgICAgICAgdHJhY2luZ09wdGlvbnM6IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgb3BlcmF0aW9uT3B0aW9ucyA9PT0gbnVsbCB8fCBvcGVyYXRpb25PcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcGVyYXRpb25PcHRpb25zLnRyYWNpbmdPcHRpb25zKSwgeyB0cmFjaW5nQ29udGV4dCB9KSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzcGFuLFxuICAgICAgICAgICAgdXBkYXRlZE9wdGlvbnMsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGFzeW5jIGZ1bmN0aW9uIHdpdGhTcGFuKG5hbWUsIG9wZXJhdGlvbk9wdGlvbnMsIGNhbGxiYWNrLCBzcGFuT3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IHNwYW4sIHVwZGF0ZWRPcHRpb25zIH0gPSBzdGFydFNwYW4obmFtZSwgb3BlcmF0aW9uT3B0aW9ucywgc3Bhbk9wdGlvbnMpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgd2l0aENvbnRleHQodXBkYXRlZE9wdGlvbnMudHJhY2luZ09wdGlvbnMudHJhY2luZ0NvbnRleHQsICgpID0+IFByb21pc2UucmVzb2x2ZShjYWxsYmFjayh1cGRhdGVkT3B0aW9ucywgc3BhbikpKTtcbiAgICAgICAgICAgIHNwYW4uc2V0U3RhdHVzKHsgc3RhdHVzOiBcInN1Y2Nlc3NcIiB9KTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgc3Bhbi5zZXRTdGF0dXMoeyBzdGF0dXM6IFwiZXJyb3JcIiwgZXJyb3I6IGVyciB9KTtcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHNwYW4uZW5kKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gd2l0aENvbnRleHQoY29udGV4dCwgY2FsbGJhY2ssIC4uLmNhbGxiYWNrQXJncykge1xuICAgICAgICByZXR1cm4gKDAsIGluc3RydW1lbnRlcl9qc18xLmdldEluc3RydW1lbnRlcikoKS53aXRoQ29udGV4dChjb250ZXh0LCBjYWxsYmFjaywgLi4uY2FsbGJhY2tBcmdzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGFyc2VzIGEgdHJhY2VwYXJlbnQgaGVhZGVyIHZhbHVlIGludG8gYSBzcGFuIGlkZW50aWZpZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdHJhY2VwYXJlbnRIZWFkZXIgLSBUaGUgdHJhY2VwYXJlbnQgaGVhZGVyIHRvIHBhcnNlLlxuICAgICAqIEByZXR1cm5zIEFuIGltcGxlbWVudGF0aW9uLXNwZWNpZmljIGlkZW50aWZpZXIgZm9yIHRoZSBzcGFuLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhcnNlVHJhY2VwYXJlbnRIZWFkZXIodHJhY2VwYXJlbnRIZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuICgwLCBpbnN0cnVtZW50ZXJfanNfMS5nZXRJbnN0cnVtZW50ZXIpKCkucGFyc2VUcmFjZXBhcmVudEhlYWRlcih0cmFjZXBhcmVudEhlYWRlcik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzZXQgb2YgcmVxdWVzdCBoZWFkZXJzIHRvIHByb3BhZ2F0ZSB0cmFjaW5nIGluZm9ybWF0aW9uIHRvIGEgYmFja2VuZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0cmFjaW5nQ29udGV4dCAtIFRoZSBjb250ZXh0IGNvbnRhaW5pbmcgdGhlIHNwYW4gdG8gc2VyaWFsaXplLlxuICAgICAqIEByZXR1cm5zIFRoZSBzZXQgb2YgaGVhZGVycyB0byBhZGQgdG8gYSByZXF1ZXN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVJlcXVlc3RIZWFkZXJzKHRyYWNpbmdDb250ZXh0KSB7XG4gICAgICAgIHJldHVybiAoMCwgaW5zdHJ1bWVudGVyX2pzXzEuZ2V0SW5zdHJ1bWVudGVyKSgpLmNyZWF0ZVJlcXVlc3RIZWFkZXJzKHRyYWNpbmdDb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RhcnRTcGFuLFxuICAgICAgICB3aXRoU3BhbixcbiAgICAgICAgd2l0aENvbnRleHQsXG4gICAgICAgIHBhcnNlVHJhY2VwYXJlbnRIZWFkZXIsXG4gICAgICAgIGNyZWF0ZVJlcXVlc3RIZWFkZXJzLFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10cmFjaW5nQ2xpZW50LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-tracing/dist/commonjs/tracingClient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-tracing/dist/commonjs/tracingContext.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@azure/core-tracing/dist/commonjs/tracingContext.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TracingContextImpl = exports.knownContextKeys = void 0;\nexports.createTracingContext = createTracingContext;\n/** @internal */\nexports.knownContextKeys = {\n    span: Symbol.for(\"@azure/core-tracing span\"),\n    namespace: Symbol.for(\"@azure/core-tracing namespace\"),\n};\n/**\n * Creates a new {@link TracingContext} with the given options.\n * @param options - A set of known keys that may be set on the context.\n * @returns A new {@link TracingContext} with the given options.\n *\n * @internal\n */\nfunction createTracingContext(options = {}) {\n    let context = new TracingContextImpl(options.parentContext);\n    if (options.span) {\n        context = context.setValue(exports.knownContextKeys.span, options.span);\n    }\n    if (options.namespace) {\n        context = context.setValue(exports.knownContextKeys.namespace, options.namespace);\n    }\n    return context;\n}\n/** @internal */\nclass TracingContextImpl {\n    constructor(initialContext) {\n        this._contextMap =\n            initialContext instanceof TracingContextImpl\n                ? new Map(initialContext._contextMap)\n                : new Map();\n    }\n    setValue(key, value) {\n        const newContext = new TracingContextImpl(this);\n        newContext._contextMap.set(key, value);\n        return newContext;\n    }\n    getValue(key) {\n        return this._contextMap.get(key);\n    }\n    deleteValue(key) {\n        const newContext = new TracingContextImpl(this);\n        newContext._contextMap.delete(key);\n        return newContext;\n    }\n}\nexports.TracingContextImpl = TracingContextImpl;\n//# sourceMappingURL=tracingContext.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdHJhY2luZy9kaXN0L2NvbW1vbmpzL3RyYWNpbmdDb250ZXh0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwwQkFBMEIsR0FBRyx3QkFBd0I7QUFDckQsNEJBQTRCO0FBQzVCO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHNCQUFzQjtBQUN4QztBQUNBLG1CQUFtQixzQkFBc0I7QUFDekM7QUFDQTtBQUNBO0FBQ0EsMENBQTBDO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS10cmFjaW5nL2Rpc3QvY29tbW9uanMvdHJhY2luZ0NvbnRleHQuanM/ODA3YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5UcmFjaW5nQ29udGV4dEltcGwgPSBleHBvcnRzLmtub3duQ29udGV4dEtleXMgPSB2b2lkIDA7XG5leHBvcnRzLmNyZWF0ZVRyYWNpbmdDb250ZXh0ID0gY3JlYXRlVHJhY2luZ0NvbnRleHQ7XG4vKiogQGludGVybmFsICovXG5leHBvcnRzLmtub3duQ29udGV4dEtleXMgPSB7XG4gICAgc3BhbjogU3ltYm9sLmZvcihcIkBhenVyZS9jb3JlLXRyYWNpbmcgc3BhblwiKSxcbiAgICBuYW1lc3BhY2U6IFN5bWJvbC5mb3IoXCJAYXp1cmUvY29yZS10cmFjaW5nIG5hbWVzcGFjZVwiKSxcbn07XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcge0BsaW5rIFRyYWNpbmdDb250ZXh0fSB3aXRoIHRoZSBnaXZlbiBvcHRpb25zLlxuICogQHBhcmFtIG9wdGlvbnMgLSBBIHNldCBvZiBrbm93biBrZXlzIHRoYXQgbWF5IGJlIHNldCBvbiB0aGUgY29udGV4dC5cbiAqIEByZXR1cm5zIEEgbmV3IHtAbGluayBUcmFjaW5nQ29udGV4dH0gd2l0aCB0aGUgZ2l2ZW4gb3B0aW9ucy5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gY3JlYXRlVHJhY2luZ0NvbnRleHQob3B0aW9ucyA9IHt9KSB7XG4gICAgbGV0IGNvbnRleHQgPSBuZXcgVHJhY2luZ0NvbnRleHRJbXBsKG9wdGlvbnMucGFyZW50Q29udGV4dCk7XG4gICAgaWYgKG9wdGlvbnMuc3Bhbikge1xuICAgICAgICBjb250ZXh0ID0gY29udGV4dC5zZXRWYWx1ZShleHBvcnRzLmtub3duQ29udGV4dEtleXMuc3Bhbiwgb3B0aW9ucy5zcGFuKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMubmFtZXNwYWNlKSB7XG4gICAgICAgIGNvbnRleHQgPSBjb250ZXh0LnNldFZhbHVlKGV4cG9ydHMua25vd25Db250ZXh0S2V5cy5uYW1lc3BhY2UsIG9wdGlvbnMubmFtZXNwYWNlKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRleHQ7XG59XG4vKiogQGludGVybmFsICovXG5jbGFzcyBUcmFjaW5nQ29udGV4dEltcGwge1xuICAgIGNvbnN0cnVjdG9yKGluaXRpYWxDb250ZXh0KSB7XG4gICAgICAgIHRoaXMuX2NvbnRleHRNYXAgPVxuICAgICAgICAgICAgaW5pdGlhbENvbnRleHQgaW5zdGFuY2VvZiBUcmFjaW5nQ29udGV4dEltcGxcbiAgICAgICAgICAgICAgICA/IG5ldyBNYXAoaW5pdGlhbENvbnRleHQuX2NvbnRleHRNYXApXG4gICAgICAgICAgICAgICAgOiBuZXcgTWFwKCk7XG4gICAgfVxuICAgIHNldFZhbHVlKGtleSwgdmFsdWUpIHtcbiAgICAgICAgY29uc3QgbmV3Q29udGV4dCA9IG5ldyBUcmFjaW5nQ29udGV4dEltcGwodGhpcyk7XG4gICAgICAgIG5ld0NvbnRleHQuX2NvbnRleHRNYXAuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gbmV3Q29udGV4dDtcbiAgICB9XG4gICAgZ2V0VmFsdWUoa2V5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb250ZXh0TWFwLmdldChrZXkpO1xuICAgIH1cbiAgICBkZWxldGVWYWx1ZShrZXkpIHtcbiAgICAgICAgY29uc3QgbmV3Q29udGV4dCA9IG5ldyBUcmFjaW5nQ29udGV4dEltcGwodGhpcyk7XG4gICAgICAgIG5ld0NvbnRleHQuX2NvbnRleHRNYXAuZGVsZXRlKGtleSk7XG4gICAgICAgIHJldHVybiBuZXdDb250ZXh0O1xuICAgIH1cbn1cbmV4cG9ydHMuVHJhY2luZ0NvbnRleHRJbXBsID0gVHJhY2luZ0NvbnRleHRJbXBsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhY2luZ0NvbnRleHQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-tracing/dist/commonjs/tracingContext.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-util/dist/commonjs/aborterUtils.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@azure/core-util/dist/commonjs/aborterUtils.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.cancelablePromiseRace = cancelablePromiseRace;\n/**\n * promise.race() wrapper that aborts rest of promises as soon as the first promise settles.\n */\nasync function cancelablePromiseRace(abortablePromiseBuilders, options) {\n    var _a, _b;\n    const aborter = new AbortController();\n    function abortHandler() {\n        aborter.abort();\n    }\n    (_a = options === null || options === void 0 ? void 0 : options.abortSignal) === null || _a === void 0 ? void 0 : _a.addEventListener(\"abort\", abortHandler);\n    try {\n        return await Promise.race(abortablePromiseBuilders.map((p) => p({ abortSignal: aborter.signal })));\n    }\n    finally {\n        aborter.abort();\n        (_b = options === null || options === void 0 ? void 0 : options.abortSignal) === null || _b === void 0 ? void 0 : _b.removeEventListener(\"abort\", abortHandler);\n    }\n}\n//# sourceMappingURL=aborterUtils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdXRpbC9kaXN0L2NvbW1vbmpzL2Fib3J0ZXJVdGlscy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwRUFBMEUsNkJBQTZCO0FBQ3ZHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS11dGlsL2Rpc3QvY29tbW9uanMvYWJvcnRlclV0aWxzLmpzPzVmYmIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY2FuY2VsYWJsZVByb21pc2VSYWNlID0gY2FuY2VsYWJsZVByb21pc2VSYWNlO1xuLyoqXG4gKiBwcm9taXNlLnJhY2UoKSB3cmFwcGVyIHRoYXQgYWJvcnRzIHJlc3Qgb2YgcHJvbWlzZXMgYXMgc29vbiBhcyB0aGUgZmlyc3QgcHJvbWlzZSBzZXR0bGVzLlxuICovXG5hc3luYyBmdW5jdGlvbiBjYW5jZWxhYmxlUHJvbWlzZVJhY2UoYWJvcnRhYmxlUHJvbWlzZUJ1aWxkZXJzLCBvcHRpb25zKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICBjb25zdCBhYm9ydGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgIGZ1bmN0aW9uIGFib3J0SGFuZGxlcigpIHtcbiAgICAgICAgYWJvcnRlci5hYm9ydCgpO1xuICAgIH1cbiAgICAoX2EgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuYWJvcnRTaWduYWwpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgYWJvcnRIYW5kbGVyKTtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gYXdhaXQgUHJvbWlzZS5yYWNlKGFib3J0YWJsZVByb21pc2VCdWlsZGVycy5tYXAoKHApID0+IHAoeyBhYm9ydFNpZ25hbDogYWJvcnRlci5zaWduYWwgfSkpKTtcbiAgICB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIGFib3J0ZXIuYWJvcnQoKTtcbiAgICAgICAgKF9iID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmFib3J0U2lnbmFsKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIGFib3J0SGFuZGxlcik7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWJvcnRlclV0aWxzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-util/dist/commonjs/aborterUtils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-util/dist/commonjs/createAbortablePromise.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@azure/core-util/dist/commonjs/createAbortablePromise.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createAbortablePromise = createAbortablePromise;\nconst abort_controller_1 = __webpack_require__(/*! @azure/abort-controller */ \"(rsc)/./node_modules/@azure/abort-controller/dist/commonjs/index.js\");\n/**\n * Creates an abortable promise.\n * @param buildPromise - A function that takes the resolve and reject functions as parameters.\n * @param options - The options for the abortable promise.\n * @returns A promise that can be aborted.\n */\nfunction createAbortablePromise(buildPromise, options) {\n    const { cleanupBeforeAbort, abortSignal, abortErrorMsg } = options !== null && options !== void 0 ? options : {};\n    return new Promise((resolve, reject) => {\n        function rejectOnAbort() {\n            reject(new abort_controller_1.AbortError(abortErrorMsg !== null && abortErrorMsg !== void 0 ? abortErrorMsg : \"The operation was aborted.\"));\n        }\n        function removeListeners() {\n            abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.removeEventListener(\"abort\", onAbort);\n        }\n        function onAbort() {\n            cleanupBeforeAbort === null || cleanupBeforeAbort === void 0 ? void 0 : cleanupBeforeAbort();\n            removeListeners();\n            rejectOnAbort();\n        }\n        if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {\n            return rejectOnAbort();\n        }\n        try {\n            buildPromise((x) => {\n                removeListeners();\n                resolve(x);\n            }, (x) => {\n                removeListeners();\n                reject(x);\n            });\n        }\n        catch (err) {\n            reject(err);\n        }\n        abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.addEventListener(\"abort\", onAbort);\n    });\n}\n//# sourceMappingURL=createAbortablePromise.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdXRpbC9kaXN0L2NvbW1vbmpzL2NyZWF0ZUFib3J0YWJsZVByb21pc2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDhCQUE4QjtBQUM5QiwyQkFBMkIsbUJBQU8sQ0FBQyxvR0FBeUI7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLGlEQUFpRDtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdXRpbC9kaXN0L2NvbW1vbmpzL2NyZWF0ZUFib3J0YWJsZVByb21pc2UuanM/YWZhMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jcmVhdGVBYm9ydGFibGVQcm9taXNlID0gY3JlYXRlQWJvcnRhYmxlUHJvbWlzZTtcbmNvbnN0IGFib3J0X2NvbnRyb2xsZXJfMSA9IHJlcXVpcmUoXCJAYXp1cmUvYWJvcnQtY29udHJvbGxlclwiKTtcbi8qKlxuICogQ3JlYXRlcyBhbiBhYm9ydGFibGUgcHJvbWlzZS5cbiAqIEBwYXJhbSBidWlsZFByb21pc2UgLSBBIGZ1bmN0aW9uIHRoYXQgdGFrZXMgdGhlIHJlc29sdmUgYW5kIHJlamVjdCBmdW5jdGlvbnMgYXMgcGFyYW1ldGVycy5cbiAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgZm9yIHRoZSBhYm9ydGFibGUgcHJvbWlzZS5cbiAqIEByZXR1cm5zIEEgcHJvbWlzZSB0aGF0IGNhbiBiZSBhYm9ydGVkLlxuICovXG5mdW5jdGlvbiBjcmVhdGVBYm9ydGFibGVQcm9taXNlKGJ1aWxkUHJvbWlzZSwgb3B0aW9ucykge1xuICAgIGNvbnN0IHsgY2xlYW51cEJlZm9yZUFib3J0LCBhYm9ydFNpZ25hbCwgYWJvcnRFcnJvck1zZyB9ID0gb3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDAgPyBvcHRpb25zIDoge307XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0T25BYm9ydCgpIHtcbiAgICAgICAgICAgIHJlamVjdChuZXcgYWJvcnRfY29udHJvbGxlcl8xLkFib3J0RXJyb3IoYWJvcnRFcnJvck1zZyAhPT0gbnVsbCAmJiBhYm9ydEVycm9yTXNnICE9PSB2b2lkIDAgPyBhYm9ydEVycm9yTXNnIDogXCJUaGUgb3BlcmF0aW9uIHdhcyBhYm9ydGVkLlwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXJzKCkge1xuICAgICAgICAgICAgYWJvcnRTaWduYWwgPT09IG51bGwgfHwgYWJvcnRTaWduYWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGFib3J0U2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvbkFib3J0KTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBvbkFib3J0KCkge1xuICAgICAgICAgICAgY2xlYW51cEJlZm9yZUFib3J0ID09PSBudWxsIHx8IGNsZWFudXBCZWZvcmVBYm9ydCA9PT0gdm9pZCAwID8gdm9pZCAwIDogY2xlYW51cEJlZm9yZUFib3J0KCk7XG4gICAgICAgICAgICByZW1vdmVMaXN0ZW5lcnMoKTtcbiAgICAgICAgICAgIHJlamVjdE9uQWJvcnQoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYWJvcnRTaWduYWwgPT09IG51bGwgfHwgYWJvcnRTaWduYWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGFib3J0U2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgICAgICAgIHJldHVybiByZWplY3RPbkFib3J0KCk7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGJ1aWxkUHJvbWlzZSgoeCkgPT4ge1xuICAgICAgICAgICAgICAgIHJlbW92ZUxpc3RlbmVycygpO1xuICAgICAgICAgICAgICAgIHJlc29sdmUoeCk7XG4gICAgICAgICAgICB9LCAoeCkgPT4ge1xuICAgICAgICAgICAgICAgIHJlbW92ZUxpc3RlbmVycygpO1xuICAgICAgICAgICAgICAgIHJlamVjdCh4KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICB9XG4gICAgICAgIGFib3J0U2lnbmFsID09PSBudWxsIHx8IGFib3J0U2lnbmFsID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhYm9ydFNpZ25hbC5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb25BYm9ydCk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVBYm9ydGFibGVQcm9taXNlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-util/dist/commonjs/createAbortablePromise.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-util/dist/commonjs/delay.js":
/*!**************************************************************!*\
  !*** ./node_modules/@azure/core-util/dist/commonjs/delay.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.delay = delay;\nexports.calculateRetryDelay = calculateRetryDelay;\nconst createAbortablePromise_js_1 = __webpack_require__(/*! ./createAbortablePromise.js */ \"(rsc)/./node_modules/@azure/core-util/dist/commonjs/createAbortablePromise.js\");\nconst util_1 = __webpack_require__(/*! @typespec/ts-http-runtime/internal/util */ \"(rsc)/./node_modules/@typespec/ts-http-runtime/dist/commonjs/util/internal.js\");\nconst StandardAbortMessage = \"The delay was aborted.\";\n/**\n * A wrapper for setTimeout that resolves a promise after timeInMs milliseconds.\n * @param timeInMs - The number of milliseconds to be delayed.\n * @param options - The options for delay - currently abort options\n * @returns Promise that is resolved after timeInMs\n */\nfunction delay(timeInMs, options) {\n    let token;\n    const { abortSignal, abortErrorMsg } = options !== null && options !== void 0 ? options : {};\n    return (0, createAbortablePromise_js_1.createAbortablePromise)((resolve) => {\n        token = setTimeout(resolve, timeInMs);\n    }, {\n        cleanupBeforeAbort: () => clearTimeout(token),\n        abortSignal,\n        abortErrorMsg: abortErrorMsg !== null && abortErrorMsg !== void 0 ? abortErrorMsg : StandardAbortMessage,\n    });\n}\n/**\n * Calculates the delay interval for retry attempts using exponential delay with jitter.\n * @param retryAttempt - The current retry attempt number.\n * @param config - The exponential retry configuration.\n * @returns An object containing the calculated retry delay.\n */\nfunction calculateRetryDelay(retryAttempt, config) {\n    // Exponentially increase the delay each time\n    const exponentialDelay = config.retryDelayInMs * Math.pow(2, retryAttempt);\n    // Don't let the delay exceed the maximum\n    const clampedDelay = Math.min(config.maxRetryDelayInMs, exponentialDelay);\n    // Allow the final value to have some \"jitter\" (within 50% of the delay size) so\n    // that retries across multiple clients don't occur simultaneously.\n    const retryAfterInMs = clampedDelay / 2 + (0, util_1.getRandomIntegerInclusive)(0, clampedDelay / 2);\n    return { retryAfterInMs };\n}\n//# sourceMappingURL=delay.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdXRpbC9kaXN0L2NvbW1vbmpzL2RlbGF5LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhO0FBQ2IsMkJBQTJCO0FBQzNCLG9DQUFvQyxtQkFBTyxDQUFDLGtIQUE2QjtBQUN6RSxlQUFlLG1CQUFPLENBQUMsOEhBQXlDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksNkJBQTZCO0FBQ3pDO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS11dGlsL2Rpc3QvY29tbW9uanMvZGVsYXkuanM/YjI3ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWxheSA9IGRlbGF5O1xuZXhwb3J0cy5jYWxjdWxhdGVSZXRyeURlbGF5ID0gY2FsY3VsYXRlUmV0cnlEZWxheTtcbmNvbnN0IGNyZWF0ZUFib3J0YWJsZVByb21pc2VfanNfMSA9IHJlcXVpcmUoXCIuL2NyZWF0ZUFib3J0YWJsZVByb21pc2UuanNcIik7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiQHR5cGVzcGVjL3RzLWh0dHAtcnVudGltZS9pbnRlcm5hbC91dGlsXCIpO1xuY29uc3QgU3RhbmRhcmRBYm9ydE1lc3NhZ2UgPSBcIlRoZSBkZWxheSB3YXMgYWJvcnRlZC5cIjtcbi8qKlxuICogQSB3cmFwcGVyIGZvciBzZXRUaW1lb3V0IHRoYXQgcmVzb2x2ZXMgYSBwcm9taXNlIGFmdGVyIHRpbWVJbk1zIG1pbGxpc2Vjb25kcy5cbiAqIEBwYXJhbSB0aW1lSW5NcyAtIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGJlIGRlbGF5ZWQuXG4gKiBAcGFyYW0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIGZvciBkZWxheSAtIGN1cnJlbnRseSBhYm9ydCBvcHRpb25zXG4gKiBAcmV0dXJucyBQcm9taXNlIHRoYXQgaXMgcmVzb2x2ZWQgYWZ0ZXIgdGltZUluTXNcbiAqL1xuZnVuY3Rpb24gZGVsYXkodGltZUluTXMsIG9wdGlvbnMpIHtcbiAgICBsZXQgdG9rZW47XG4gICAgY29uc3QgeyBhYm9ydFNpZ25hbCwgYWJvcnRFcnJvck1zZyB9ID0gb3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDAgPyBvcHRpb25zIDoge307XG4gICAgcmV0dXJuICgwLCBjcmVhdGVBYm9ydGFibGVQcm9taXNlX2pzXzEuY3JlYXRlQWJvcnRhYmxlUHJvbWlzZSkoKHJlc29sdmUpID0+IHtcbiAgICAgICAgdG9rZW4gPSBzZXRUaW1lb3V0KHJlc29sdmUsIHRpbWVJbk1zKTtcbiAgICB9LCB7XG4gICAgICAgIGNsZWFudXBCZWZvcmVBYm9ydDogKCkgPT4gY2xlYXJUaW1lb3V0KHRva2VuKSxcbiAgICAgICAgYWJvcnRTaWduYWwsXG4gICAgICAgIGFib3J0RXJyb3JNc2c6IGFib3J0RXJyb3JNc2cgIT09IG51bGwgJiYgYWJvcnRFcnJvck1zZyAhPT0gdm9pZCAwID8gYWJvcnRFcnJvck1zZyA6IFN0YW5kYXJkQWJvcnRNZXNzYWdlLFxuICAgIH0pO1xufVxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBkZWxheSBpbnRlcnZhbCBmb3IgcmV0cnkgYXR0ZW1wdHMgdXNpbmcgZXhwb25lbnRpYWwgZGVsYXkgd2l0aCBqaXR0ZXIuXG4gKiBAcGFyYW0gcmV0cnlBdHRlbXB0IC0gVGhlIGN1cnJlbnQgcmV0cnkgYXR0ZW1wdCBudW1iZXIuXG4gKiBAcGFyYW0gY29uZmlnIC0gVGhlIGV4cG9uZW50aWFsIHJldHJ5IGNvbmZpZ3VyYXRpb24uXG4gKiBAcmV0dXJucyBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgY2FsY3VsYXRlZCByZXRyeSBkZWxheS5cbiAqL1xuZnVuY3Rpb24gY2FsY3VsYXRlUmV0cnlEZWxheShyZXRyeUF0dGVtcHQsIGNvbmZpZykge1xuICAgIC8vIEV4cG9uZW50aWFsbHkgaW5jcmVhc2UgdGhlIGRlbGF5IGVhY2ggdGltZVxuICAgIGNvbnN0IGV4cG9uZW50aWFsRGVsYXkgPSBjb25maWcucmV0cnlEZWxheUluTXMgKiBNYXRoLnBvdygyLCByZXRyeUF0dGVtcHQpO1xuICAgIC8vIERvbid0IGxldCB0aGUgZGVsYXkgZXhjZWVkIHRoZSBtYXhpbXVtXG4gICAgY29uc3QgY2xhbXBlZERlbGF5ID0gTWF0aC5taW4oY29uZmlnLm1heFJldHJ5RGVsYXlJbk1zLCBleHBvbmVudGlhbERlbGF5KTtcbiAgICAvLyBBbGxvdyB0aGUgZmluYWwgdmFsdWUgdG8gaGF2ZSBzb21lIFwiaml0dGVyXCIgKHdpdGhpbiA1MCUgb2YgdGhlIGRlbGF5IHNpemUpIHNvXG4gICAgLy8gdGhhdCByZXRyaWVzIGFjcm9zcyBtdWx0aXBsZSBjbGllbnRzIGRvbid0IG9jY3VyIHNpbXVsdGFuZW91c2x5LlxuICAgIGNvbnN0IHJldHJ5QWZ0ZXJJbk1zID0gY2xhbXBlZERlbGF5IC8gMiArICgwLCB1dGlsXzEuZ2V0UmFuZG9tSW50ZWdlckluY2x1c2l2ZSkoMCwgY2xhbXBlZERlbGF5IC8gMik7XG4gICAgcmV0dXJuIHsgcmV0cnlBZnRlckluTXMgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlbGF5LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-util/dist/commonjs/delay.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-util/dist/commonjs/error.js":
/*!**************************************************************!*\
  !*** ./node_modules/@azure/core-util/dist/commonjs/error.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getErrorMessage = getErrorMessage;\nconst util_1 = __webpack_require__(/*! @typespec/ts-http-runtime/internal/util */ \"(rsc)/./node_modules/@typespec/ts-http-runtime/dist/commonjs/util/internal.js\");\n/**\n * Given what is thought to be an error object, return the message if possible.\n * If the message is missing, returns a stringified version of the input.\n * @param e - Something thrown from a try block\n * @returns The error message or a string of the input\n */\nfunction getErrorMessage(e) {\n    if ((0, util_1.isError)(e)) {\n        return e.message;\n    }\n    else {\n        let stringified;\n        try {\n            if (typeof e === \"object\" && e) {\n                stringified = JSON.stringify(e);\n            }\n            else {\n                stringified = String(e);\n            }\n        }\n        catch (err) {\n            stringified = \"[unable to stringify input]\";\n        }\n        return `Unknown error ${stringified}`;\n    }\n}\n//# sourceMappingURL=error.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdXRpbC9kaXN0L2NvbW1vbmpzL2Vycm9yLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx1QkFBdUI7QUFDdkIsZUFBZSxtQkFBTyxDQUFDLDhIQUF5QztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLFlBQVk7QUFDNUM7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS11dGlsL2Rpc3QvY29tbW9uanMvZXJyb3IuanM/YmExOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRFcnJvck1lc3NhZ2UgPSBnZXRFcnJvck1lc3NhZ2U7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiQHR5cGVzcGVjL3RzLWh0dHAtcnVudGltZS9pbnRlcm5hbC91dGlsXCIpO1xuLyoqXG4gKiBHaXZlbiB3aGF0IGlzIHRob3VnaHQgdG8gYmUgYW4gZXJyb3Igb2JqZWN0LCByZXR1cm4gdGhlIG1lc3NhZ2UgaWYgcG9zc2libGUuXG4gKiBJZiB0aGUgbWVzc2FnZSBpcyBtaXNzaW5nLCByZXR1cm5zIGEgc3RyaW5naWZpZWQgdmVyc2lvbiBvZiB0aGUgaW5wdXQuXG4gKiBAcGFyYW0gZSAtIFNvbWV0aGluZyB0aHJvd24gZnJvbSBhIHRyeSBibG9ja1xuICogQHJldHVybnMgVGhlIGVycm9yIG1lc3NhZ2Ugb3IgYSBzdHJpbmcgb2YgdGhlIGlucHV0XG4gKi9cbmZ1bmN0aW9uIGdldEVycm9yTWVzc2FnZShlKSB7XG4gICAgaWYgKCgwLCB1dGlsXzEuaXNFcnJvcikoZSkpIHtcbiAgICAgICAgcmV0dXJuIGUubWVzc2FnZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGxldCBzdHJpbmdpZmllZDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZSA9PT0gXCJvYmplY3RcIiAmJiBlKSB7XG4gICAgICAgICAgICAgICAgc3RyaW5naWZpZWQgPSBKU09OLnN0cmluZ2lmeShlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0cmluZ2lmaWVkID0gU3RyaW5nKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHN0cmluZ2lmaWVkID0gXCJbdW5hYmxlIHRvIHN0cmluZ2lmeSBpbnB1dF1cIjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYFVua25vd24gZXJyb3IgJHtzdHJpbmdpZmllZH1gO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9yLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-util/dist/commonjs/error.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-util/dist/commonjs/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@azure/core-util/dist/commonjs/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isWebWorker = exports.isReactNative = exports.isNodeRuntime = exports.isNodeLike = exports.isNode = exports.isDeno = exports.isBun = exports.isBrowser = exports.objectHasProperty = exports.isObjectWithProperties = exports.isDefined = exports.getErrorMessage = exports.delay = exports.createAbortablePromise = exports.cancelablePromiseRace = void 0;\nexports.calculateRetryDelay = calculateRetryDelay;\nexports.computeSha256Hash = computeSha256Hash;\nexports.computeSha256Hmac = computeSha256Hmac;\nexports.getRandomIntegerInclusive = getRandomIntegerInclusive;\nexports.isError = isError;\nexports.isObject = isObject;\nexports.randomUUID = randomUUID;\nexports.uint8ArrayToString = uint8ArrayToString;\nexports.stringToUint8Array = stringToUint8Array;\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\nconst tspRuntime = tslib_1.__importStar(__webpack_require__(/*! @typespec/ts-http-runtime/internal/util */ \"(rsc)/./node_modules/@typespec/ts-http-runtime/dist/commonjs/util/internal.js\"));\nvar aborterUtils_js_1 = __webpack_require__(/*! ./aborterUtils.js */ \"(rsc)/./node_modules/@azure/core-util/dist/commonjs/aborterUtils.js\");\nObject.defineProperty(exports, \"cancelablePromiseRace\", ({ enumerable: true, get: function () { return aborterUtils_js_1.cancelablePromiseRace; } }));\nvar createAbortablePromise_js_1 = __webpack_require__(/*! ./createAbortablePromise.js */ \"(rsc)/./node_modules/@azure/core-util/dist/commonjs/createAbortablePromise.js\");\nObject.defineProperty(exports, \"createAbortablePromise\", ({ enumerable: true, get: function () { return createAbortablePromise_js_1.createAbortablePromise; } }));\nvar delay_js_1 = __webpack_require__(/*! ./delay.js */ \"(rsc)/./node_modules/@azure/core-util/dist/commonjs/delay.js\");\nObject.defineProperty(exports, \"delay\", ({ enumerable: true, get: function () { return delay_js_1.delay; } }));\nvar error_js_1 = __webpack_require__(/*! ./error.js */ \"(rsc)/./node_modules/@azure/core-util/dist/commonjs/error.js\");\nObject.defineProperty(exports, \"getErrorMessage\", ({ enumerable: true, get: function () { return error_js_1.getErrorMessage; } }));\nvar typeGuards_js_1 = __webpack_require__(/*! ./typeGuards.js */ \"(rsc)/./node_modules/@azure/core-util/dist/commonjs/typeGuards.js\");\nObject.defineProperty(exports, \"isDefined\", ({ enumerable: true, get: function () { return typeGuards_js_1.isDefined; } }));\nObject.defineProperty(exports, \"isObjectWithProperties\", ({ enumerable: true, get: function () { return typeGuards_js_1.isObjectWithProperties; } }));\nObject.defineProperty(exports, \"objectHasProperty\", ({ enumerable: true, get: function () { return typeGuards_js_1.objectHasProperty; } }));\n/**\n * Calculates the delay interval for retry attempts using exponential delay with jitter.\n *\n * @param retryAttempt - The current retry attempt number.\n *\n * @param config - The exponential retry configuration.\n *\n * @returns An object containing the calculated retry delay.\n */\nfunction calculateRetryDelay(retryAttempt, config) {\n    return tspRuntime.calculateRetryDelay(retryAttempt, config);\n}\n/**\n * Generates a SHA-256 hash.\n *\n * @param content - The data to be included in the hash.\n *\n * @param encoding - The textual encoding to use for the returned hash.\n */\nfunction computeSha256Hash(content, encoding) {\n    return tspRuntime.computeSha256Hash(content, encoding);\n}\n/**\n * Generates a SHA-256 HMAC signature.\n *\n * @param key - The HMAC key represented as a base64 string, used to generate the cryptographic HMAC hash.\n *\n * @param stringToSign - The data to be signed.\n *\n * @param encoding - The textual encoding to use for the returned HMAC digest.\n */\nfunction computeSha256Hmac(key, stringToSign, encoding) {\n    return tspRuntime.computeSha256Hmac(key, stringToSign, encoding);\n}\n/**\n * Returns a random integer value between a lower and upper bound, inclusive of both bounds. Note that this uses Math.random and isn't secure. If you need to use this for any kind of security purpose, find a better source of random.\n *\n * @param min - The smallest integer value allowed.\n *\n * @param max - The largest integer value allowed.\n */\nfunction getRandomIntegerInclusive(min, max) {\n    return tspRuntime.getRandomIntegerInclusive(min, max);\n}\n/**\n * Typeguard for an error object shape (has name and message)\n *\n * @param e - Something caught by a catch clause.\n */\nfunction isError(e) {\n    return tspRuntime.isError(e);\n}\n/**\n * Helper to determine when an input is a generic JS object.\n *\n * @returns true when input is an object type that is not null, Array, RegExp, or Date.\n */\nfunction isObject(input) {\n    return tspRuntime.isObject(input);\n}\n/**\n * Generated Universally Unique Identifier\n *\n * @returns RFC4122 v4 UUID.\n */\nfunction randomUUID() {\n    return tspRuntime.randomUUID();\n}\n/**\n * A constant that indicates whether the environment the code is running is a Web Browser.\n */\nexports.isBrowser = tspRuntime.isBrowser;\n/**\n * A constant that indicates whether the environment the code is running is Bun.sh.\n */\nexports.isBun = tspRuntime.isBun;\n/**\n * A constant that indicates whether the environment the code is running is Deno.\n */\nexports.isDeno = tspRuntime.isDeno;\n/**\n * A constant that indicates whether the environment the code is running is a Node.js compatible environment.\n *\n * @deprecated\n *\n * Use `isNodeLike` instead.\n */\nexports.isNode = tspRuntime.isNodeLike;\n/**\n * A constant that indicates whether the environment the code is running is a Node.js compatible environment.\n */\nexports.isNodeLike = tspRuntime.isNodeLike;\n/**\n * A constant that indicates whether the environment the code is running is Node.JS.\n */\nexports.isNodeRuntime = tspRuntime.isNodeRuntime;\n/**\n * A constant that indicates whether the environment the code is running is in React-Native.\n */\nexports.isReactNative = tspRuntime.isReactNative;\n/**\n * A constant that indicates whether the environment the code is running is a Web Worker.\n */\nexports.isWebWorker = tspRuntime.isWebWorker;\n/**\n * The helper that transforms bytes with specific character encoding into string\n * @param bytes - the uint8array bytes\n * @param format - the format we use to encode the byte\n * @returns a string of the encoded string\n */\nfunction uint8ArrayToString(bytes, format) {\n    return tspRuntime.uint8ArrayToString(bytes, format);\n}\n/**\n * The helper that transforms string to specific character encoded bytes array.\n * @param value - the string to be converted\n * @param format - the format we use to decode the value\n * @returns a uint8array\n */\nfunction stringToUint8Array(value, format) {\n    return tspRuntime.stringToUint8Array(value, format);\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-util/dist/commonjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-util/dist/commonjs/typeGuards.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@azure/core-util/dist/commonjs/typeGuards.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isDefined = isDefined;\nexports.isObjectWithProperties = isObjectWithProperties;\nexports.objectHasProperty = objectHasProperty;\n/**\n * Helper TypeGuard that checks if something is defined or not.\n * @param thing - Anything\n */\nfunction isDefined(thing) {\n    return typeof thing !== \"undefined\" && thing !== null;\n}\n/**\n * Helper TypeGuard that checks if the input is an object with the specified properties.\n * @param thing - Anything.\n * @param properties - The name of the properties that should appear in the object.\n */\nfunction isObjectWithProperties(thing, properties) {\n    if (!isDefined(thing) || typeof thing !== \"object\") {\n        return false;\n    }\n    for (const property of properties) {\n        if (!objectHasProperty(thing, property)) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Helper TypeGuard that checks if the input is an object with the specified property.\n * @param thing - Any object.\n * @param property - The name of the property that should appear in the object.\n */\nfunction objectHasProperty(thing, property) {\n    return (isDefined(thing) && typeof thing === \"object\" && property in thing);\n}\n//# sourceMappingURL=typeGuards.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdXRpbC9kaXN0L2NvbW1vbmpzL3R5cGVHdWFyZHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGlCQUFpQjtBQUNqQiw4QkFBOEI7QUFDOUIseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXV0aWwvZGlzdC9jb21tb25qcy90eXBlR3VhcmRzLmpzPzRiZGUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNEZWZpbmVkID0gaXNEZWZpbmVkO1xuZXhwb3J0cy5pc09iamVjdFdpdGhQcm9wZXJ0aWVzID0gaXNPYmplY3RXaXRoUHJvcGVydGllcztcbmV4cG9ydHMub2JqZWN0SGFzUHJvcGVydHkgPSBvYmplY3RIYXNQcm9wZXJ0eTtcbi8qKlxuICogSGVscGVyIFR5cGVHdWFyZCB0aGF0IGNoZWNrcyBpZiBzb21ldGhpbmcgaXMgZGVmaW5lZCBvciBub3QuXG4gKiBAcGFyYW0gdGhpbmcgLSBBbnl0aGluZ1xuICovXG5mdW5jdGlvbiBpc0RlZmluZWQodGhpbmcpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaW5nICE9PSBcInVuZGVmaW5lZFwiICYmIHRoaW5nICE9PSBudWxsO1xufVxuLyoqXG4gKiBIZWxwZXIgVHlwZUd1YXJkIHRoYXQgY2hlY2tzIGlmIHRoZSBpbnB1dCBpcyBhbiBvYmplY3Qgd2l0aCB0aGUgc3BlY2lmaWVkIHByb3BlcnRpZXMuXG4gKiBAcGFyYW0gdGhpbmcgLSBBbnl0aGluZy5cbiAqIEBwYXJhbSBwcm9wZXJ0aWVzIC0gVGhlIG5hbWUgb2YgdGhlIHByb3BlcnRpZXMgdGhhdCBzaG91bGQgYXBwZWFyIGluIHRoZSBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0V2l0aFByb3BlcnRpZXModGhpbmcsIHByb3BlcnRpZXMpIHtcbiAgICBpZiAoIWlzRGVmaW5lZCh0aGluZykgfHwgdHlwZW9mIHRoaW5nICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBwcm9wZXJ0eSBvZiBwcm9wZXJ0aWVzKSB7XG4gICAgICAgIGlmICghb2JqZWN0SGFzUHJvcGVydHkodGhpbmcsIHByb3BlcnR5KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuLyoqXG4gKiBIZWxwZXIgVHlwZUd1YXJkIHRoYXQgY2hlY2tzIGlmIHRoZSBpbnB1dCBpcyBhbiBvYmplY3Qgd2l0aCB0aGUgc3BlY2lmaWVkIHByb3BlcnR5LlxuICogQHBhcmFtIHRoaW5nIC0gQW55IG9iamVjdC5cbiAqIEBwYXJhbSBwcm9wZXJ0eSAtIFRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB0aGF0IHNob3VsZCBhcHBlYXIgaW4gdGhlIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gb2JqZWN0SGFzUHJvcGVydHkodGhpbmcsIHByb3BlcnR5KSB7XG4gICAgcmV0dXJuIChpc0RlZmluZWQodGhpbmcpICYmIHR5cGVvZiB0aGluZyA9PT0gXCJvYmplY3RcIiAmJiBwcm9wZXJ0eSBpbiB0aGluZyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10eXBlR3VhcmRzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-util/dist/commonjs/typeGuards.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist/commonjs/client/identityClient.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist/commonjs/client/identityClient.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.IdentityClient = void 0;\nexports.getIdentityClientAuthorityHost = getIdentityClientAuthorityHost;\nconst core_client_1 = __webpack_require__(/*! @azure/core-client */ \"(rsc)/./node_modules/@azure/core-client/dist/commonjs/index.js\");\nconst core_util_1 = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/commonjs/index.js\");\nconst core_rest_pipeline_1 = __webpack_require__(/*! @azure/core-rest-pipeline */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/index.js\");\nconst errors_js_1 = __webpack_require__(/*! ../errors.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/errors.js\");\nconst identityTokenEndpoint_js_1 = __webpack_require__(/*! ../util/identityTokenEndpoint.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/identityTokenEndpoint.js\");\nconst constants_js_1 = __webpack_require__(/*! ../constants.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/constants.js\");\nconst tracing_js_1 = __webpack_require__(/*! ../util/tracing.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/tracing.js\");\nconst logging_js_1 = __webpack_require__(/*! ../util/logging.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/logging.js\");\nconst utils_js_1 = __webpack_require__(/*! ../credentials/managedIdentityCredential/utils.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/managedIdentityCredential/utils.js\");\nconst noCorrelationId = \"noCorrelationId\";\n/**\n * @internal\n */\nfunction getIdentityClientAuthorityHost(options) {\n    // The authorityHost can come from options or from the AZURE_AUTHORITY_HOST environment variable.\n    let authorityHost = options?.authorityHost;\n    // The AZURE_AUTHORITY_HOST environment variable can only be provided in Node.js.\n    if (core_util_1.isNode) {\n        authorityHost = authorityHost ?? process.env.AZURE_AUTHORITY_HOST;\n    }\n    // If the authorityHost is not provided, we use the default one from the public cloud: https://login.microsoftonline.com\n    return authorityHost ?? constants_js_1.DefaultAuthorityHost;\n}\n/**\n * The network module used by the Identity credentials.\n *\n * It allows for credentials to abort any pending request independently of the MSAL flow,\n * by calling to the `abortRequests()` method.\n *\n */\nclass IdentityClient extends core_client_1.ServiceClient {\n    authorityHost;\n    allowLoggingAccountIdentifiers;\n    abortControllers;\n    allowInsecureConnection = false;\n    // used for WorkloadIdentity\n    tokenCredentialOptions;\n    constructor(options) {\n        const packageDetails = `azsdk-js-identity/${constants_js_1.SDK_VERSION}`;\n        const userAgentPrefix = options?.userAgentOptions?.userAgentPrefix\n            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n            : `${packageDetails}`;\n        const baseUri = getIdentityClientAuthorityHost(options);\n        if (!baseUri.startsWith(\"https:\")) {\n            throw new Error(\"The authorityHost address must use the 'https' protocol.\");\n        }\n        super({\n            requestContentType: \"application/json; charset=utf-8\",\n            retryOptions: {\n                maxRetries: 3,\n            },\n            ...options,\n            userAgentOptions: {\n                userAgentPrefix,\n            },\n            baseUri,\n        });\n        this.authorityHost = baseUri;\n        this.abortControllers = new Map();\n        this.allowLoggingAccountIdentifiers = options?.loggingOptions?.allowLoggingAccountIdentifiers;\n        // used for WorkloadIdentity\n        this.tokenCredentialOptions = { ...options };\n        // used for ManagedIdentity\n        if (options?.allowInsecureConnection) {\n            this.allowInsecureConnection = options.allowInsecureConnection;\n        }\n    }\n    async sendTokenRequest(request) {\n        logging_js_1.logger.info(`IdentityClient: sending token request to [${request.url}]`);\n        const response = await this.sendRequest(request);\n        if (response.bodyAsText && (response.status === 200 || response.status === 201)) {\n            const parsedBody = JSON.parse(response.bodyAsText);\n            if (!parsedBody.access_token) {\n                return null;\n            }\n            this.logIdentifiers(response);\n            const token = {\n                accessToken: {\n                    token: parsedBody.access_token,\n                    expiresOnTimestamp: (0, utils_js_1.parseExpirationTimestamp)(parsedBody),\n                    refreshAfterTimestamp: (0, utils_js_1.parseRefreshTimestamp)(parsedBody),\n                    tokenType: \"Bearer\",\n                },\n                refreshToken: parsedBody.refresh_token,\n            };\n            logging_js_1.logger.info(`IdentityClient: [${request.url}] token acquired, expires on ${token.accessToken.expiresOnTimestamp}`);\n            return token;\n        }\n        else {\n            const error = new errors_js_1.AuthenticationError(response.status, response.bodyAsText);\n            logging_js_1.logger.warning(`IdentityClient: authentication error. HTTP status: ${response.status}, ${error.errorResponse.errorDescription}`);\n            throw error;\n        }\n    }\n    async refreshAccessToken(tenantId, clientId, scopes, refreshToken, clientSecret, options = {}) {\n        if (refreshToken === undefined) {\n            return null;\n        }\n        logging_js_1.logger.info(`IdentityClient: refreshing access token with client ID: ${clientId}, scopes: ${scopes} started`);\n        const refreshParams = {\n            grant_type: \"refresh_token\",\n            client_id: clientId,\n            refresh_token: refreshToken,\n            scope: scopes,\n        };\n        if (clientSecret !== undefined) {\n            refreshParams.client_secret = clientSecret;\n        }\n        const query = new URLSearchParams(refreshParams);\n        return tracing_js_1.tracingClient.withSpan(\"IdentityClient.refreshAccessToken\", options, async (updatedOptions) => {\n            try {\n                const urlSuffix = (0, identityTokenEndpoint_js_1.getIdentityTokenEndpointSuffix)(tenantId);\n                const request = (0, core_rest_pipeline_1.createPipelineRequest)({\n                    url: `${this.authorityHost}/${tenantId}/${urlSuffix}`,\n                    method: \"POST\",\n                    body: query.toString(),\n                    abortSignal: options.abortSignal,\n                    headers: (0, core_rest_pipeline_1.createHttpHeaders)({\n                        Accept: \"application/json\",\n                        \"Content-Type\": \"application/x-www-form-urlencoded\",\n                    }),\n                    tracingOptions: updatedOptions.tracingOptions,\n                });\n                const response = await this.sendTokenRequest(request);\n                logging_js_1.logger.info(`IdentityClient: refreshed token for client ID: ${clientId}`);\n                return response;\n            }\n            catch (err) {\n                if (err.name === errors_js_1.AuthenticationErrorName &&\n                    err.errorResponse.error === \"interaction_required\") {\n                    // It's likely that the refresh token has expired, so\n                    // return null so that the credential implementation will\n                    // initiate the authentication flow again.\n                    logging_js_1.logger.info(`IdentityClient: interaction required for client ID: ${clientId}`);\n                    return null;\n                }\n                else {\n                    logging_js_1.logger.warning(`IdentityClient: failed refreshing token for client ID: ${clientId}: ${err}`);\n                    throw err;\n                }\n            }\n        });\n    }\n    // Here is a custom layer that allows us to abort requests that go through MSAL,\n    // since MSAL doesn't allow us to pass options all the way through.\n    generateAbortSignal(correlationId) {\n        const controller = new AbortController();\n        const controllers = this.abortControllers.get(correlationId) || [];\n        controllers.push(controller);\n        this.abortControllers.set(correlationId, controllers);\n        const existingOnAbort = controller.signal.onabort;\n        controller.signal.onabort = (...params) => {\n            this.abortControllers.set(correlationId, undefined);\n            if (existingOnAbort) {\n                existingOnAbort.apply(controller.signal, params);\n            }\n        };\n        return controller.signal;\n    }\n    abortRequests(correlationId) {\n        const key = correlationId || noCorrelationId;\n        const controllers = [\n            ...(this.abortControllers.get(key) || []),\n            // MSAL passes no correlation ID to the get requests...\n            ...(this.abortControllers.get(noCorrelationId) || []),\n        ];\n        if (!controllers.length) {\n            return;\n        }\n        for (const controller of controllers) {\n            controller.abort();\n        }\n        this.abortControllers.set(key, undefined);\n    }\n    getCorrelationId(options) {\n        const parameter = options?.body\n            ?.split(\"&\")\n            .map((part) => part.split(\"=\"))\n            .find(([key]) => key === \"client-request-id\");\n        return parameter && parameter.length ? parameter[1] || noCorrelationId : noCorrelationId;\n    }\n    // The MSAL network module methods follow\n    async sendGetRequestAsync(url, options) {\n        const request = (0, core_rest_pipeline_1.createPipelineRequest)({\n            url,\n            method: \"GET\",\n            body: options?.body,\n            allowInsecureConnection: this.allowInsecureConnection,\n            headers: (0, core_rest_pipeline_1.createHttpHeaders)(options?.headers),\n            abortSignal: this.generateAbortSignal(noCorrelationId),\n        });\n        const response = await this.sendRequest(request);\n        this.logIdentifiers(response);\n        return {\n            body: response.bodyAsText ? JSON.parse(response.bodyAsText) : undefined,\n            headers: response.headers.toJSON(),\n            status: response.status,\n        };\n    }\n    async sendPostRequestAsync(url, options) {\n        const request = (0, core_rest_pipeline_1.createPipelineRequest)({\n            url,\n            method: \"POST\",\n            body: options?.body,\n            headers: (0, core_rest_pipeline_1.createHttpHeaders)(options?.headers),\n            allowInsecureConnection: this.allowInsecureConnection,\n            // MSAL doesn't send the correlation ID on the get requests.\n            abortSignal: this.generateAbortSignal(this.getCorrelationId(options)),\n        });\n        const response = await this.sendRequest(request);\n        this.logIdentifiers(response);\n        return {\n            body: response.bodyAsText ? JSON.parse(response.bodyAsText) : undefined,\n            headers: response.headers.toJSON(),\n            status: response.status,\n        };\n    }\n    /**\n     *\n     * @internal\n     */\n    getTokenCredentialOptions() {\n        return this.tokenCredentialOptions;\n    }\n    /**\n     * If allowLoggingAccountIdentifiers was set on the constructor options\n     * we try to log the account identifiers by parsing the received access token.\n     *\n     * The account identifiers we try to log are:\n     * - `appid`: The application or Client Identifier.\n     * - `upn`: User Principal Name.\n     *   - It might not be available in some authentication scenarios.\n     *   - If it's not available, we put a placeholder: \"No User Principal Name available\".\n     * - `tid`: Tenant Identifier.\n     * - `oid`: Object Identifier of the authenticated user.\n     */\n    logIdentifiers(response) {\n        if (!this.allowLoggingAccountIdentifiers || !response.bodyAsText) {\n            return;\n        }\n        const unavailableUpn = \"No User Principal Name available\";\n        try {\n            const parsed = response.parsedBody || JSON.parse(response.bodyAsText);\n            const accessToken = parsed.access_token;\n            if (!accessToken) {\n                // Without an access token allowLoggingAccountIdentifiers isn't useful.\n                return;\n            }\n            const base64Metadata = accessToken.split(\".\")[1];\n            const { appid, upn, tid, oid } = JSON.parse(Buffer.from(base64Metadata, \"base64\").toString(\"utf8\"));\n            logging_js_1.logger.info(`[Authenticated account] Client ID: ${appid}. Tenant ID: ${tid}. User Principal Name: ${upn || unavailableUpn}. Object ID (user): ${oid}`);\n        }\n        catch (e) {\n            logging_js_1.logger.warning(\"allowLoggingAccountIdentifiers was set, but we couldn't log the account information. Error:\", e.message);\n        }\n    }\n}\nexports.IdentityClient = IdentityClient;\n//# sourceMappingURL=identityClient.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist/commonjs/client/identityClient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist/commonjs/constants.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@azure/identity/dist/commonjs/constants.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DEFAULT_TOKEN_CACHE_NAME = exports.CACHE_NON_CAE_SUFFIX = exports.CACHE_CAE_SUFFIX = exports.ALL_TENANTS = exports.DefaultAuthority = exports.DefaultAuthorityHost = exports.AzureAuthorityHosts = exports.DefaultTenantId = exports.DeveloperSignOnClientId = exports.SDK_VERSION = void 0;\n/**\n * Current version of the `@azure/identity` package.\n */\nexports.SDK_VERSION = `4.11.1`;\n/**\n * The default client ID for authentication\n * @internal\n */\n// TODO: temporary - this is the Azure CLI clientID - we'll replace it when\n// Developer Sign On application is available\n// https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/src/Constants.cs#L9\nexports.DeveloperSignOnClientId = \"04b07795-8ddb-461a-bbee-02f9e1bf7b46\";\n/**\n * The default tenant for authentication\n * @internal\n */\nexports.DefaultTenantId = \"common\";\n/**\n * A list of known Azure authority hosts\n */\nvar AzureAuthorityHosts;\n(function (AzureAuthorityHosts) {\n    /**\n     * China-based Azure Authority Host\n     */\n    AzureAuthorityHosts[\"AzureChina\"] = \"https://login.chinacloudapi.cn\";\n    /**\n     * Germany-based Azure Authority Host\n     *\n     * @deprecated Microsoft Cloud Germany was closed on October 29th, 2021.\n     *\n     * */\n    AzureAuthorityHosts[\"AzureGermany\"] = \"https://login.microsoftonline.de\";\n    /**\n     * US Government Azure Authority Host\n     */\n    AzureAuthorityHosts[\"AzureGovernment\"] = \"https://login.microsoftonline.us\";\n    /**\n     * Public Cloud Azure Authority Host\n     */\n    AzureAuthorityHosts[\"AzurePublicCloud\"] = \"https://login.microsoftonline.com\";\n})(AzureAuthorityHosts || (exports.AzureAuthorityHosts = AzureAuthorityHosts = {}));\n/**\n * @internal\n * The default authority host.\n */\nexports.DefaultAuthorityHost = AzureAuthorityHosts.AzurePublicCloud;\n/**\n * @internal\n * The default environment host for Azure Public Cloud\n */\nexports.DefaultAuthority = \"login.microsoftonline.com\";\n/**\n * @internal\n * Allow acquiring tokens for any tenant for multi-tentant auth.\n */\nexports.ALL_TENANTS = [\"*\"];\n/**\n * @internal\n */\nexports.CACHE_CAE_SUFFIX = \"cae\";\n/**\n * @internal\n */\nexports.CACHE_NON_CAE_SUFFIX = \"nocae\";\n/**\n * @internal\n *\n * The default name for the cache persistence plugin.\n * Matches the constant defined in the cache persistence package.\n */\nexports.DEFAULT_TOKEN_CACHE_NAME = \"msal.cache\";\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QvY29tbW9uanMvY29uc3RhbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQ0FBZ0MsR0FBRyw0QkFBNEIsR0FBRyx3QkFBd0IsR0FBRyxtQkFBbUIsR0FBRyx3QkFBd0IsR0FBRyw0QkFBNEIsR0FBRywyQkFBMkIsR0FBRyx1QkFBdUIsR0FBRywrQkFBK0IsR0FBRyxtQkFBbUI7QUFDMVI7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsMEJBQTBCLDJCQUEyQiwyQkFBMkI7QUFDakY7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9pZGVudGl0eS9kaXN0L2NvbW1vbmpzL2NvbnN0YW50cy5qcz85ODQ5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRFRkFVTFRfVE9LRU5fQ0FDSEVfTkFNRSA9IGV4cG9ydHMuQ0FDSEVfTk9OX0NBRV9TVUZGSVggPSBleHBvcnRzLkNBQ0hFX0NBRV9TVUZGSVggPSBleHBvcnRzLkFMTF9URU5BTlRTID0gZXhwb3J0cy5EZWZhdWx0QXV0aG9yaXR5ID0gZXhwb3J0cy5EZWZhdWx0QXV0aG9yaXR5SG9zdCA9IGV4cG9ydHMuQXp1cmVBdXRob3JpdHlIb3N0cyA9IGV4cG9ydHMuRGVmYXVsdFRlbmFudElkID0gZXhwb3J0cy5EZXZlbG9wZXJTaWduT25DbGllbnRJZCA9IGV4cG9ydHMuU0RLX1ZFUlNJT04gPSB2b2lkIDA7XG4vKipcbiAqIEN1cnJlbnQgdmVyc2lvbiBvZiB0aGUgYEBhenVyZS9pZGVudGl0eWAgcGFja2FnZS5cbiAqL1xuZXhwb3J0cy5TREtfVkVSU0lPTiA9IGA0LjExLjFgO1xuLyoqXG4gKiBUaGUgZGVmYXVsdCBjbGllbnQgSUQgZm9yIGF1dGhlbnRpY2F0aW9uXG4gKiBAaW50ZXJuYWxcbiAqL1xuLy8gVE9ETzogdGVtcG9yYXJ5IC0gdGhpcyBpcyB0aGUgQXp1cmUgQ0xJIGNsaWVudElEIC0gd2UnbGwgcmVwbGFjZSBpdCB3aGVuXG4vLyBEZXZlbG9wZXIgU2lnbiBPbiBhcHBsaWNhdGlvbiBpcyBhdmFpbGFibGVcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9BenVyZS9henVyZS1zZGstZm9yLW5ldC9ibG9iL21haW4vc2RrL2lkZW50aXR5L0F6dXJlLklkZW50aXR5L3NyYy9Db25zdGFudHMuY3MjTDlcbmV4cG9ydHMuRGV2ZWxvcGVyU2lnbk9uQ2xpZW50SWQgPSBcIjA0YjA3Nzk1LThkZGItNDYxYS1iYmVlLTAyZjllMWJmN2I0NlwiO1xuLyoqXG4gKiBUaGUgZGVmYXVsdCB0ZW5hbnQgZm9yIGF1dGhlbnRpY2F0aW9uXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0cy5EZWZhdWx0VGVuYW50SWQgPSBcImNvbW1vblwiO1xuLyoqXG4gKiBBIGxpc3Qgb2Yga25vd24gQXp1cmUgYXV0aG9yaXR5IGhvc3RzXG4gKi9cbnZhciBBenVyZUF1dGhvcml0eUhvc3RzO1xuKGZ1bmN0aW9uIChBenVyZUF1dGhvcml0eUhvc3RzKSB7XG4gICAgLyoqXG4gICAgICogQ2hpbmEtYmFzZWQgQXp1cmUgQXV0aG9yaXR5IEhvc3RcbiAgICAgKi9cbiAgICBBenVyZUF1dGhvcml0eUhvc3RzW1wiQXp1cmVDaGluYVwiXSA9IFwiaHR0cHM6Ly9sb2dpbi5jaGluYWNsb3VkYXBpLmNuXCI7XG4gICAgLyoqXG4gICAgICogR2VybWFueS1iYXNlZCBBenVyZSBBdXRob3JpdHkgSG9zdFxuICAgICAqXG4gICAgICogQGRlcHJlY2F0ZWQgTWljcm9zb2Z0IENsb3VkIEdlcm1hbnkgd2FzIGNsb3NlZCBvbiBPY3RvYmVyIDI5dGgsIDIwMjEuXG4gICAgICpcbiAgICAgKiAqL1xuICAgIEF6dXJlQXV0aG9yaXR5SG9zdHNbXCJBenVyZUdlcm1hbnlcIl0gPSBcImh0dHBzOi8vbG9naW4ubWljcm9zb2Z0b25saW5lLmRlXCI7XG4gICAgLyoqXG4gICAgICogVVMgR292ZXJubWVudCBBenVyZSBBdXRob3JpdHkgSG9zdFxuICAgICAqL1xuICAgIEF6dXJlQXV0aG9yaXR5SG9zdHNbXCJBenVyZUdvdmVybm1lbnRcIl0gPSBcImh0dHBzOi8vbG9naW4ubWljcm9zb2Z0b25saW5lLnVzXCI7XG4gICAgLyoqXG4gICAgICogUHVibGljIENsb3VkIEF6dXJlIEF1dGhvcml0eSBIb3N0XG4gICAgICovXG4gICAgQXp1cmVBdXRob3JpdHlIb3N0c1tcIkF6dXJlUHVibGljQ2xvdWRcIl0gPSBcImh0dHBzOi8vbG9naW4ubWljcm9zb2Z0b25saW5lLmNvbVwiO1xufSkoQXp1cmVBdXRob3JpdHlIb3N0cyB8fCAoZXhwb3J0cy5BenVyZUF1dGhvcml0eUhvc3RzID0gQXp1cmVBdXRob3JpdHlIb3N0cyA9IHt9KSk7XG4vKipcbiAqIEBpbnRlcm5hbFxuICogVGhlIGRlZmF1bHQgYXV0aG9yaXR5IGhvc3QuXG4gKi9cbmV4cG9ydHMuRGVmYXVsdEF1dGhvcml0eUhvc3QgPSBBenVyZUF1dGhvcml0eUhvc3RzLkF6dXJlUHVibGljQ2xvdWQ7XG4vKipcbiAqIEBpbnRlcm5hbFxuICogVGhlIGRlZmF1bHQgZW52aXJvbm1lbnQgaG9zdCBmb3IgQXp1cmUgUHVibGljIENsb3VkXG4gKi9cbmV4cG9ydHMuRGVmYXVsdEF1dGhvcml0eSA9IFwibG9naW4ubWljcm9zb2Z0b25saW5lLmNvbVwiO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqIEFsbG93IGFjcXVpcmluZyB0b2tlbnMgZm9yIGFueSB0ZW5hbnQgZm9yIG11bHRpLXRlbnRhbnQgYXV0aC5cbiAqL1xuZXhwb3J0cy5BTExfVEVOQU5UUyA9IFtcIipcIl07XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnRzLkNBQ0hFX0NBRV9TVUZGSVggPSBcImNhZVwiO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0cy5DQUNIRV9OT05fQ0FFX1NVRkZJWCA9IFwibm9jYWVcIjtcbi8qKlxuICogQGludGVybmFsXG4gKlxuICogVGhlIGRlZmF1bHQgbmFtZSBmb3IgdGhlIGNhY2hlIHBlcnNpc3RlbmNlIHBsdWdpbi5cbiAqIE1hdGNoZXMgdGhlIGNvbnN0YW50IGRlZmluZWQgaW4gdGhlIGNhY2hlIHBlcnNpc3RlbmNlIHBhY2thZ2UuXG4gKi9cbmV4cG9ydHMuREVGQVVMVF9UT0tFTl9DQUNIRV9OQU1FID0gXCJtc2FsLmNhY2hlXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist/commonjs/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/authorizationCodeCredential.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist/commonjs/credentials/authorizationCodeCredential.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AuthorizationCodeCredential = void 0;\nconst tenantIdUtils_js_1 = __webpack_require__(/*! ../util/tenantIdUtils.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/tenantIdUtils.js\");\nconst tenantIdUtils_js_2 = __webpack_require__(/*! ../util/tenantIdUtils.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/tenantIdUtils.js\");\nconst logging_js_1 = __webpack_require__(/*! ../util/logging.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/logging.js\");\nconst scopeUtils_js_1 = __webpack_require__(/*! ../util/scopeUtils.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/scopeUtils.js\");\nconst tracing_js_1 = __webpack_require__(/*! ../util/tracing.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/tracing.js\");\nconst msalClient_js_1 = __webpack_require__(/*! ../msal/nodeFlows/msalClient.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/msal/nodeFlows/msalClient.js\");\nconst logger = (0, logging_js_1.credentialLogger)(\"AuthorizationCodeCredential\");\n/**\n * Enables authentication to Microsoft Entra ID using an authorization code\n * that was obtained through the authorization code flow, described in more detail\n * in the Microsoft Entra ID documentation:\n *\n * https://learn.microsoft.com/entra/identity-platform/v2-oauth2-auth-code-flow\n */\nclass AuthorizationCodeCredential {\n    msalClient;\n    disableAutomaticAuthentication;\n    authorizationCode;\n    redirectUri;\n    tenantId;\n    additionallyAllowedTenantIds;\n    clientSecret;\n    /**\n     * @hidden\n     * @internal\n     */\n    constructor(tenantId, clientId, clientSecretOrAuthorizationCode, authorizationCodeOrRedirectUri, redirectUriOrOptions, options) {\n        (0, tenantIdUtils_js_2.checkTenantId)(logger, tenantId);\n        this.clientSecret = clientSecretOrAuthorizationCode;\n        if (typeof redirectUriOrOptions === \"string\") {\n            // the clientId+clientSecret constructor\n            this.authorizationCode = authorizationCodeOrRedirectUri;\n            this.redirectUri = redirectUriOrOptions;\n            // in this case, options are good as they come\n        }\n        else {\n            // clientId only\n            this.authorizationCode = clientSecretOrAuthorizationCode;\n            this.redirectUri = authorizationCodeOrRedirectUri;\n            this.clientSecret = undefined;\n            options = redirectUriOrOptions;\n        }\n        // TODO: Validate tenant if provided\n        this.tenantId = tenantId;\n        this.additionallyAllowedTenantIds = (0, tenantIdUtils_js_1.resolveAdditionallyAllowedTenantIds)(options?.additionallyAllowedTenants);\n        this.msalClient = (0, msalClient_js_1.createMsalClient)(clientId, tenantId, {\n            ...options,\n            logger,\n            tokenCredentialOptions: options ?? {},\n        });\n    }\n    /**\n     * Authenticates with Microsoft Entra ID and returns an access token if successful.\n     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this\n     *                TokenCredential implementation might make.\n     */\n    async getToken(scopes, options = {}) {\n        return tracing_js_1.tracingClient.withSpan(`${this.constructor.name}.getToken`, options, async (newOptions) => {\n            const tenantId = (0, tenantIdUtils_js_1.processMultiTenantRequest)(this.tenantId, newOptions, this.additionallyAllowedTenantIds);\n            newOptions.tenantId = tenantId;\n            const arrayScopes = (0, scopeUtils_js_1.ensureScopes)(scopes);\n            return this.msalClient.getTokenByAuthorizationCode(arrayScopes, this.redirectUri, this.authorizationCode, this.clientSecret, {\n                ...newOptions,\n                disableAutomaticAuthentication: this.disableAutomaticAuthentication,\n            });\n        });\n    }\n}\nexports.AuthorizationCodeCredential = AuthorizationCodeCredential;\n//# sourceMappingURL=authorizationCodeCredential.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QvY29tbW9uanMvY3JlZGVudGlhbHMvYXV0aG9yaXphdGlvbkNvZGVDcmVkZW50aWFsLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxtQ0FBbUM7QUFDbkMsMkJBQTJCLG1CQUFPLENBQUMsMEdBQTBCO0FBQzdELDJCQUEyQixtQkFBTyxDQUFDLDBHQUEwQjtBQUM3RCxxQkFBcUIsbUJBQU8sQ0FBQyw4RkFBb0I7QUFDakQsd0JBQXdCLG1CQUFPLENBQUMsb0dBQXVCO0FBQ3ZELHFCQUFxQixtQkFBTyxDQUFDLDhGQUFvQjtBQUNqRCx3QkFBd0IsbUJBQU8sQ0FBQyx3SEFBaUM7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlEO0FBQ2pELFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsa0NBQWtDO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkMsc0RBQXNELHNCQUFzQjtBQUM1RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9pZGVudGl0eS9kaXN0L2NvbW1vbmpzL2NyZWRlbnRpYWxzL2F1dGhvcml6YXRpb25Db2RlQ3JlZGVudGlhbC5qcz80MDhlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkF1dGhvcml6YXRpb25Db2RlQ3JlZGVudGlhbCA9IHZvaWQgMDtcbmNvbnN0IHRlbmFudElkVXRpbHNfanNfMSA9IHJlcXVpcmUoXCIuLi91dGlsL3RlbmFudElkVXRpbHMuanNcIik7XG5jb25zdCB0ZW5hbnRJZFV0aWxzX2pzXzIgPSByZXF1aXJlKFwiLi4vdXRpbC90ZW5hbnRJZFV0aWxzLmpzXCIpO1xuY29uc3QgbG9nZ2luZ19qc18xID0gcmVxdWlyZShcIi4uL3V0aWwvbG9nZ2luZy5qc1wiKTtcbmNvbnN0IHNjb3BlVXRpbHNfanNfMSA9IHJlcXVpcmUoXCIuLi91dGlsL3Njb3BlVXRpbHMuanNcIik7XG5jb25zdCB0cmFjaW5nX2pzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC90cmFjaW5nLmpzXCIpO1xuY29uc3QgbXNhbENsaWVudF9qc18xID0gcmVxdWlyZShcIi4uL21zYWwvbm9kZUZsb3dzL21zYWxDbGllbnQuanNcIik7XG5jb25zdCBsb2dnZXIgPSAoMCwgbG9nZ2luZ19qc18xLmNyZWRlbnRpYWxMb2dnZXIpKFwiQXV0aG9yaXphdGlvbkNvZGVDcmVkZW50aWFsXCIpO1xuLyoqXG4gKiBFbmFibGVzIGF1dGhlbnRpY2F0aW9uIHRvIE1pY3Jvc29mdCBFbnRyYSBJRCB1c2luZyBhbiBhdXRob3JpemF0aW9uIGNvZGVcbiAqIHRoYXQgd2FzIG9idGFpbmVkIHRocm91Z2ggdGhlIGF1dGhvcml6YXRpb24gY29kZSBmbG93LCBkZXNjcmliZWQgaW4gbW9yZSBkZXRhaWxcbiAqIGluIHRoZSBNaWNyb3NvZnQgRW50cmEgSUQgZG9jdW1lbnRhdGlvbjpcbiAqXG4gKiBodHRwczovL2xlYXJuLm1pY3Jvc29mdC5jb20vZW50cmEvaWRlbnRpdHktcGxhdGZvcm0vdjItb2F1dGgyLWF1dGgtY29kZS1mbG93XG4gKi9cbmNsYXNzIEF1dGhvcml6YXRpb25Db2RlQ3JlZGVudGlhbCB7XG4gICAgbXNhbENsaWVudDtcbiAgICBkaXNhYmxlQXV0b21hdGljQXV0aGVudGljYXRpb247XG4gICAgYXV0aG9yaXphdGlvbkNvZGU7XG4gICAgcmVkaXJlY3RVcmk7XG4gICAgdGVuYW50SWQ7XG4gICAgYWRkaXRpb25hbGx5QWxsb3dlZFRlbmFudElkcztcbiAgICBjbGllbnRTZWNyZXQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHRlbmFudElkLCBjbGllbnRJZCwgY2xpZW50U2VjcmV0T3JBdXRob3JpemF0aW9uQ29kZSwgYXV0aG9yaXphdGlvbkNvZGVPclJlZGlyZWN0VXJpLCByZWRpcmVjdFVyaU9yT3B0aW9ucywgb3B0aW9ucykge1xuICAgICAgICAoMCwgdGVuYW50SWRVdGlsc19qc18yLmNoZWNrVGVuYW50SWQpKGxvZ2dlciwgdGVuYW50SWQpO1xuICAgICAgICB0aGlzLmNsaWVudFNlY3JldCA9IGNsaWVudFNlY3JldE9yQXV0aG9yaXphdGlvbkNvZGU7XG4gICAgICAgIGlmICh0eXBlb2YgcmVkaXJlY3RVcmlPck9wdGlvbnMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIC8vIHRoZSBjbGllbnRJZCtjbGllbnRTZWNyZXQgY29uc3RydWN0b3JcbiAgICAgICAgICAgIHRoaXMuYXV0aG9yaXphdGlvbkNvZGUgPSBhdXRob3JpemF0aW9uQ29kZU9yUmVkaXJlY3RVcmk7XG4gICAgICAgICAgICB0aGlzLnJlZGlyZWN0VXJpID0gcmVkaXJlY3RVcmlPck9wdGlvbnM7XG4gICAgICAgICAgICAvLyBpbiB0aGlzIGNhc2UsIG9wdGlvbnMgYXJlIGdvb2QgYXMgdGhleSBjb21lXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBjbGllbnRJZCBvbmx5XG4gICAgICAgICAgICB0aGlzLmF1dGhvcml6YXRpb25Db2RlID0gY2xpZW50U2VjcmV0T3JBdXRob3JpemF0aW9uQ29kZTtcbiAgICAgICAgICAgIHRoaXMucmVkaXJlY3RVcmkgPSBhdXRob3JpemF0aW9uQ29kZU9yUmVkaXJlY3RVcmk7XG4gICAgICAgICAgICB0aGlzLmNsaWVudFNlY3JldCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIG9wdGlvbnMgPSByZWRpcmVjdFVyaU9yT3B0aW9ucztcbiAgICAgICAgfVxuICAgICAgICAvLyBUT0RPOiBWYWxpZGF0ZSB0ZW5hbnQgaWYgcHJvdmlkZWRcbiAgICAgICAgdGhpcy50ZW5hbnRJZCA9IHRlbmFudElkO1xuICAgICAgICB0aGlzLmFkZGl0aW9uYWxseUFsbG93ZWRUZW5hbnRJZHMgPSAoMCwgdGVuYW50SWRVdGlsc19qc18xLnJlc29sdmVBZGRpdGlvbmFsbHlBbGxvd2VkVGVuYW50SWRzKShvcHRpb25zPy5hZGRpdGlvbmFsbHlBbGxvd2VkVGVuYW50cyk7XG4gICAgICAgIHRoaXMubXNhbENsaWVudCA9ICgwLCBtc2FsQ2xpZW50X2pzXzEuY3JlYXRlTXNhbENsaWVudCkoY2xpZW50SWQsIHRlbmFudElkLCB7XG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgbG9nZ2VyLFxuICAgICAgICAgICAgdG9rZW5DcmVkZW50aWFsT3B0aW9uczogb3B0aW9ucyA/PyB7fSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEF1dGhlbnRpY2F0ZXMgd2l0aCBNaWNyb3NvZnQgRW50cmEgSUQgYW5kIHJldHVybnMgYW4gYWNjZXNzIHRva2VuIGlmIHN1Y2Nlc3NmdWwuXG4gICAgICogSWYgYXV0aGVudGljYXRpb24gZmFpbHMsIGEge0BsaW5rIENyZWRlbnRpYWxVbmF2YWlsYWJsZUVycm9yfSB3aWxsIGJlIHRocm93biB3aXRoIHRoZSBkZXRhaWxzIG9mIHRoZSBmYWlsdXJlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHNjb3BlcyAtIFRoZSBsaXN0IG9mIHNjb3BlcyBmb3Igd2hpY2ggdGhlIHRva2VuIHdpbGwgaGF2ZSBhY2Nlc3MuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgb3B0aW9ucyB1c2VkIHRvIGNvbmZpZ3VyZSBhbnkgcmVxdWVzdHMgdGhpc1xuICAgICAqICAgICAgICAgICAgICAgIFRva2VuQ3JlZGVudGlhbCBpbXBsZW1lbnRhdGlvbiBtaWdodCBtYWtlLlxuICAgICAqL1xuICAgIGFzeW5jIGdldFRva2VuKHNjb3Blcywgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHJldHVybiB0cmFjaW5nX2pzXzEudHJhY2luZ0NsaWVudC53aXRoU3BhbihgJHt0aGlzLmNvbnN0cnVjdG9yLm5hbWV9LmdldFRva2VuYCwgb3B0aW9ucywgYXN5bmMgKG5ld09wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHRlbmFudElkID0gKDAsIHRlbmFudElkVXRpbHNfanNfMS5wcm9jZXNzTXVsdGlUZW5hbnRSZXF1ZXN0KSh0aGlzLnRlbmFudElkLCBuZXdPcHRpb25zLCB0aGlzLmFkZGl0aW9uYWxseUFsbG93ZWRUZW5hbnRJZHMpO1xuICAgICAgICAgICAgbmV3T3B0aW9ucy50ZW5hbnRJZCA9IHRlbmFudElkO1xuICAgICAgICAgICAgY29uc3QgYXJyYXlTY29wZXMgPSAoMCwgc2NvcGVVdGlsc19qc18xLmVuc3VyZVNjb3Blcykoc2NvcGVzKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1zYWxDbGllbnQuZ2V0VG9rZW5CeUF1dGhvcml6YXRpb25Db2RlKGFycmF5U2NvcGVzLCB0aGlzLnJlZGlyZWN0VXJpLCB0aGlzLmF1dGhvcml6YXRpb25Db2RlLCB0aGlzLmNsaWVudFNlY3JldCwge1xuICAgICAgICAgICAgICAgIC4uLm5ld09wdGlvbnMsXG4gICAgICAgICAgICAgICAgZGlzYWJsZUF1dG9tYXRpY0F1dGhlbnRpY2F0aW9uOiB0aGlzLmRpc2FibGVBdXRvbWF0aWNBdXRoZW50aWNhdGlvbixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLkF1dGhvcml6YXRpb25Db2RlQ3JlZGVudGlhbCA9IEF1dGhvcml6YXRpb25Db2RlQ3JlZGVudGlhbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF1dGhvcml6YXRpb25Db2RlQ3JlZGVudGlhbC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/authorizationCodeCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/azureCliCredential.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist/commonjs/credentials/azureCliCredential.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AzureCliCredential = exports.cliCredentialInternals = void 0;\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\nconst tenantIdUtils_js_1 = __webpack_require__(/*! ../util/tenantIdUtils.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/tenantIdUtils.js\");\nconst logging_js_1 = __webpack_require__(/*! ../util/logging.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/logging.js\");\nconst scopeUtils_js_1 = __webpack_require__(/*! ../util/scopeUtils.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/scopeUtils.js\");\nconst errors_js_1 = __webpack_require__(/*! ../errors.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/errors.js\");\nconst child_process_1 = tslib_1.__importDefault(__webpack_require__(/*! child_process */ \"child_process\"));\nconst tracing_js_1 = __webpack_require__(/*! ../util/tracing.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/tracing.js\");\nconst subscriptionUtils_js_1 = __webpack_require__(/*! ../util/subscriptionUtils.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/subscriptionUtils.js\");\nconst logger = (0, logging_js_1.credentialLogger)(\"AzureCliCredential\");\n/**\n * Mockable reference to the CLI credential cliCredentialFunctions\n * @internal\n */\nexports.cliCredentialInternals = {\n    /**\n     * @internal\n     */\n    getSafeWorkingDir() {\n        if (process.platform === \"win32\") {\n            let systemRoot = process.env.SystemRoot || process.env[\"SYSTEMROOT\"];\n            if (!systemRoot) {\n                logger.getToken.warning(\"The SystemRoot environment variable is not set. This may cause issues when using the Azure CLI credential.\");\n                systemRoot = \"C:\\\\Windows\";\n            }\n            return systemRoot;\n        }\n        else {\n            return \"/bin\";\n        }\n    },\n    /**\n     * Gets the access token from Azure CLI\n     * @param resource - The resource to use when getting the token\n     * @internal\n     */\n    async getAzureCliAccessToken(resource, tenantId, subscription, timeout) {\n        let tenantSection = [];\n        let subscriptionSection = [];\n        if (tenantId) {\n            tenantSection = [\"--tenant\", tenantId];\n        }\n        if (subscription) {\n            // Add quotes around the subscription to handle subscriptions with spaces\n            subscriptionSection = [\"--subscription\", `\"${subscription}\"`];\n        }\n        return new Promise((resolve, reject) => {\n            try {\n                const args = [\n                    \"account\",\n                    \"get-access-token\",\n                    \"--output\",\n                    \"json\",\n                    \"--resource\",\n                    resource,\n                    ...tenantSection,\n                    ...subscriptionSection,\n                ];\n                const command = [\"az\", ...args].join(\" \");\n                child_process_1.default.exec(command, { cwd: exports.cliCredentialInternals.getSafeWorkingDir(), timeout }, (error, stdout, stderr) => {\n                    resolve({ stdout: stdout, stderr: stderr, error });\n                });\n            }\n            catch (err) {\n                reject(err);\n            }\n        });\n    },\n};\n/**\n * This credential will use the currently logged-in user login information\n * via the Azure CLI ('az') commandline tool.\n * To do so, it will read the user access token and expire time\n * with Azure CLI command \"az account get-access-token\".\n */\nclass AzureCliCredential {\n    tenantId;\n    additionallyAllowedTenantIds;\n    timeout;\n    subscription;\n    /**\n     * Creates an instance of the {@link AzureCliCredential}.\n     *\n     * To use this credential, ensure that you have already logged\n     * in via the 'az' tool using the command \"az login\" from the commandline.\n     *\n     * @param options - Options, to optionally allow multi-tenant requests.\n     */\n    constructor(options) {\n        if (options?.tenantId) {\n            (0, tenantIdUtils_js_1.checkTenantId)(logger, options?.tenantId);\n            this.tenantId = options?.tenantId;\n        }\n        if (options?.subscription) {\n            (0, subscriptionUtils_js_1.checkSubscription)(logger, options?.subscription);\n            this.subscription = options?.subscription;\n        }\n        this.additionallyAllowedTenantIds = (0, tenantIdUtils_js_1.resolveAdditionallyAllowedTenantIds)(options?.additionallyAllowedTenants);\n        this.timeout = options?.processTimeoutInMs;\n    }\n    /**\n     * Authenticates with Microsoft Entra ID and returns an access token if successful.\n     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this\n     *                TokenCredential implementation might make.\n     */\n    async getToken(scopes, options = {}) {\n        const tenantId = (0, tenantIdUtils_js_1.processMultiTenantRequest)(this.tenantId, options, this.additionallyAllowedTenantIds);\n        if (tenantId) {\n            (0, tenantIdUtils_js_1.checkTenantId)(logger, tenantId);\n        }\n        if (this.subscription) {\n            (0, subscriptionUtils_js_1.checkSubscription)(logger, this.subscription);\n        }\n        const scope = typeof scopes === \"string\" ? scopes : scopes[0];\n        logger.getToken.info(`Using the scope ${scope}`);\n        return tracing_js_1.tracingClient.withSpan(`${this.constructor.name}.getToken`, options, async () => {\n            try {\n                (0, scopeUtils_js_1.ensureValidScopeForDevTimeCreds)(scope, logger);\n                const resource = (0, scopeUtils_js_1.getScopeResource)(scope);\n                const obj = await exports.cliCredentialInternals.getAzureCliAccessToken(resource, tenantId, this.subscription, this.timeout);\n                const specificScope = obj.stderr?.match(\"(.*)az login --scope(.*)\");\n                const isLoginError = obj.stderr?.match(\"(.*)az login(.*)\") && !specificScope;\n                const isNotInstallError = obj.stderr?.match(\"az:(.*)not found\") || obj.stderr?.startsWith(\"'az' is not recognized\");\n                if (isNotInstallError) {\n                    const error = new errors_js_1.CredentialUnavailableError(\"Azure CLI could not be found. Please visit https://aka.ms/azure-cli for installation instructions and then, once installed, authenticate to your Azure account using 'az login'.\");\n                    logger.getToken.info((0, logging_js_1.formatError)(scopes, error));\n                    throw error;\n                }\n                if (isLoginError) {\n                    const error = new errors_js_1.CredentialUnavailableError(\"Please run 'az login' from a command prompt to authenticate before using this credential.\");\n                    logger.getToken.info((0, logging_js_1.formatError)(scopes, error));\n                    throw error;\n                }\n                try {\n                    const responseData = obj.stdout;\n                    const response = this.parseRawResponse(responseData);\n                    logger.getToken.info((0, logging_js_1.formatSuccess)(scopes));\n                    return response;\n                }\n                catch (e) {\n                    if (obj.stderr) {\n                        throw new errors_js_1.CredentialUnavailableError(obj.stderr);\n                    }\n                    throw e;\n                }\n            }\n            catch (err) {\n                const error = err.name === \"CredentialUnavailableError\"\n                    ? err\n                    : new errors_js_1.CredentialUnavailableError(err.message || \"Unknown error while trying to retrieve the access token\");\n                logger.getToken.info((0, logging_js_1.formatError)(scopes, error));\n                throw error;\n            }\n        });\n    }\n    /**\n     * Parses the raw JSON response from the Azure CLI into a usable AccessToken object\n     *\n     * @param rawResponse - The raw JSON response from the Azure CLI\n     * @returns An access token with the expiry time parsed from the raw response\n     *\n     * The expiryTime of the credential's access token, in milliseconds, is calculated as follows:\n     *\n     * When available, expires_on (introduced in Azure CLI v2.54.0) will be preferred. Otherwise falls back to expiresOn.\n     */\n    parseRawResponse(rawResponse) {\n        const response = JSON.parse(rawResponse);\n        const token = response.accessToken;\n        // if available, expires_on will be a number representing seconds since epoch.\n        // ensure it's a number or NaN\n        let expiresOnTimestamp = Number.parseInt(response.expires_on, 10) * 1000;\n        if (!isNaN(expiresOnTimestamp)) {\n            logger.getToken.info(\"expires_on is available and is valid, using it\");\n            return {\n                token,\n                expiresOnTimestamp,\n                tokenType: \"Bearer\",\n            };\n        }\n        // fallback to the older expiresOn - an RFC3339 date string\n        expiresOnTimestamp = new Date(response.expiresOn).getTime();\n        // ensure expiresOn is well-formatted\n        if (isNaN(expiresOnTimestamp)) {\n            throw new errors_js_1.CredentialUnavailableError(`Unexpected response from Azure CLI when getting token. Expected \"expiresOn\" to be a RFC3339 date string. Got: \"${response.expiresOn}\"`);\n        }\n        return {\n            token,\n            expiresOnTimestamp,\n            tokenType: \"Bearer\",\n        };\n    }\n}\nexports.AzureCliCredential = AzureCliCredential;\n//# sourceMappingURL=azureCliCredential.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/azureCliCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/azureDeveloperCliCredential.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist/commonjs/credentials/azureDeveloperCliCredential.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AzureDeveloperCliCredential = exports.developerCliCredentialInternals = void 0;\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\nconst logging_js_1 = __webpack_require__(/*! ../util/logging.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/logging.js\");\nconst errors_js_1 = __webpack_require__(/*! ../errors.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/errors.js\");\nconst child_process_1 = tslib_1.__importDefault(__webpack_require__(/*! child_process */ \"child_process\"));\nconst tenantIdUtils_js_1 = __webpack_require__(/*! ../util/tenantIdUtils.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/tenantIdUtils.js\");\nconst tracing_js_1 = __webpack_require__(/*! ../util/tracing.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/tracing.js\");\nconst scopeUtils_js_1 = __webpack_require__(/*! ../util/scopeUtils.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/scopeUtils.js\");\nconst logger = (0, logging_js_1.credentialLogger)(\"AzureDeveloperCliCredential\");\n/**\n * Mockable reference to the Developer CLI credential cliCredentialFunctions\n * @internal\n */\nexports.developerCliCredentialInternals = {\n    /**\n     * @internal\n     */\n    getSafeWorkingDir() {\n        if (process.platform === \"win32\") {\n            let systemRoot = process.env.SystemRoot || process.env[\"SYSTEMROOT\"];\n            if (!systemRoot) {\n                logger.getToken.warning(\"The SystemRoot environment variable is not set. This may cause issues when using the Azure Developer CLI credential.\");\n                systemRoot = \"C:\\\\Windows\";\n            }\n            return systemRoot;\n        }\n        else {\n            return \"/bin\";\n        }\n    },\n    /**\n     * Gets the access token from Azure Developer CLI\n     * @param scopes - The scopes to use when getting the token\n     * @internal\n     */\n    async getAzdAccessToken(scopes, tenantId, timeout) {\n        let tenantSection = [];\n        if (tenantId) {\n            tenantSection = [\"--tenant-id\", tenantId];\n        }\n        return new Promise((resolve, reject) => {\n            try {\n                const args = [\n                    \"auth\",\n                    \"token\",\n                    \"--output\",\n                    \"json\",\n                    ...scopes.reduce((previous, current) => previous.concat(\"--scope\", current), []),\n                    ...tenantSection,\n                ];\n                const command = [\"azd\", ...args].join(\" \");\n                child_process_1.default.exec(command, {\n                    cwd: exports.developerCliCredentialInternals.getSafeWorkingDir(),\n                    timeout,\n                }, (error, stdout, stderr) => {\n                    resolve({ stdout, stderr, error });\n                });\n            }\n            catch (err) {\n                reject(err);\n            }\n        });\n    },\n};\n/**\n * Azure Developer CLI is a command-line interface tool that allows developers to create, manage, and deploy\n * resources in Azure. It's built on top of the Azure CLI and provides additional functionality specific\n * to Azure developers. It allows users to authenticate as a user and/or a service principal against\n * <a href=\"https://learn.microsoft.com/entra/fundamentals/\">Microsoft Entra ID</a>. The\n * AzureDeveloperCliCredential authenticates in a development environment and acquires a token on behalf of\n * the logged-in user or service principal in the Azure Developer CLI. It acts as the Azure Developer CLI logged in user or\n * service principal and executes an Azure CLI command underneath to authenticate the application against\n * Microsoft Entra ID.\n *\n * <h2> Configure AzureDeveloperCliCredential </h2>\n *\n * To use this credential, the developer needs to authenticate locally in Azure Developer CLI using one of the\n * commands below:\n *\n * <ol>\n *     <li>Run \"azd auth login\" in Azure Developer CLI to authenticate interactively as a user.</li>\n *     <li>Run \"azd auth login --client-id clientID --client-secret clientSecret\n *     --tenant-id tenantID\" to authenticate as a service principal.</li>\n * </ol>\n *\n * You may need to repeat this process after a certain time period, depending on the refresh token validity in your\n * organization. Generally, the refresh token validity period is a few weeks to a few months.\n * AzureDeveloperCliCredential will prompt you to sign in again.\n */\nclass AzureDeveloperCliCredential {\n    tenantId;\n    additionallyAllowedTenantIds;\n    timeout;\n    /**\n     * Creates an instance of the {@link AzureDeveloperCliCredential}.\n     *\n     * To use this credential, ensure that you have already logged\n     * in via the 'azd' tool using the command \"azd auth login\" from the commandline.\n     *\n     * @param options - Options, to optionally allow multi-tenant requests.\n     */\n    constructor(options) {\n        if (options?.tenantId) {\n            (0, tenantIdUtils_js_1.checkTenantId)(logger, options?.tenantId);\n            this.tenantId = options?.tenantId;\n        }\n        this.additionallyAllowedTenantIds = (0, tenantIdUtils_js_1.resolveAdditionallyAllowedTenantIds)(options?.additionallyAllowedTenants);\n        this.timeout = options?.processTimeoutInMs;\n    }\n    /**\n     * Authenticates with Microsoft Entra ID and returns an access token if successful.\n     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this\n     *                TokenCredential implementation might make.\n     */\n    async getToken(scopes, options = {}) {\n        const tenantId = (0, tenantIdUtils_js_1.processMultiTenantRequest)(this.tenantId, options, this.additionallyAllowedTenantIds);\n        if (tenantId) {\n            (0, tenantIdUtils_js_1.checkTenantId)(logger, tenantId);\n        }\n        let scopeList;\n        if (typeof scopes === \"string\") {\n            scopeList = [scopes];\n        }\n        else {\n            scopeList = scopes;\n        }\n        logger.getToken.info(`Using the scopes ${scopes}`);\n        return tracing_js_1.tracingClient.withSpan(`${this.constructor.name}.getToken`, options, async () => {\n            try {\n                scopeList.forEach((scope) => {\n                    (0, scopeUtils_js_1.ensureValidScopeForDevTimeCreds)(scope, logger);\n                });\n                const obj = await exports.developerCliCredentialInternals.getAzdAccessToken(scopeList, tenantId, this.timeout);\n                const isNotLoggedInError = obj.stderr?.match(\"not logged in, run `azd login` to login\") ||\n                    obj.stderr?.match(\"not logged in, run `azd auth login` to login\");\n                const isNotInstallError = obj.stderr?.match(\"azd:(.*)not found\") ||\n                    obj.stderr?.startsWith(\"'azd' is not recognized\");\n                if (isNotInstallError || (obj.error && obj.error.code === \"ENOENT\")) {\n                    const error = new errors_js_1.CredentialUnavailableError(\"Azure Developer CLI couldn't be found. To mitigate this issue, see the troubleshooting guidelines at https://aka.ms/azsdk/js/identity/azdevclicredential/troubleshoot.\");\n                    logger.getToken.info((0, logging_js_1.formatError)(scopes, error));\n                    throw error;\n                }\n                if (isNotLoggedInError) {\n                    const error = new errors_js_1.CredentialUnavailableError(\"Please run 'azd auth login' from a command prompt to authenticate before using this credential. For more information, see the troubleshooting guidelines at https://aka.ms/azsdk/js/identity/azdevclicredential/troubleshoot.\");\n                    logger.getToken.info((0, logging_js_1.formatError)(scopes, error));\n                    throw error;\n                }\n                try {\n                    const resp = JSON.parse(obj.stdout);\n                    logger.getToken.info((0, logging_js_1.formatSuccess)(scopes));\n                    return {\n                        token: resp.token,\n                        expiresOnTimestamp: new Date(resp.expiresOn).getTime(),\n                        tokenType: \"Bearer\",\n                    };\n                }\n                catch (e) {\n                    if (obj.stderr) {\n                        throw new errors_js_1.CredentialUnavailableError(obj.stderr);\n                    }\n                    throw e;\n                }\n            }\n            catch (err) {\n                const error = err.name === \"CredentialUnavailableError\"\n                    ? err\n                    : new errors_js_1.CredentialUnavailableError(err.message || \"Unknown error while trying to retrieve the access token\");\n                logger.getToken.info((0, logging_js_1.formatError)(scopes, error));\n                throw error;\n            }\n        });\n    }\n}\nexports.AzureDeveloperCliCredential = AzureDeveloperCliCredential;\n//# sourceMappingURL=azureDeveloperCliCredential.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/azureDeveloperCliCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/azurePipelinesCredential.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist/commonjs/credentials/azurePipelinesCredential.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AzurePipelinesCredential = void 0;\nexports.handleOidcResponse = handleOidcResponse;\nconst errors_js_1 = __webpack_require__(/*! ../errors.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/errors.js\");\nconst core_rest_pipeline_1 = __webpack_require__(/*! @azure/core-rest-pipeline */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/index.js\");\nconst clientAssertionCredential_js_1 = __webpack_require__(/*! ./clientAssertionCredential.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/clientAssertionCredential.js\");\nconst identityClient_js_1 = __webpack_require__(/*! ../client/identityClient.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/client/identityClient.js\");\nconst tenantIdUtils_js_1 = __webpack_require__(/*! ../util/tenantIdUtils.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/tenantIdUtils.js\");\nconst logging_js_1 = __webpack_require__(/*! ../util/logging.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/logging.js\");\nconst credentialName = \"AzurePipelinesCredential\";\nconst logger = (0, logging_js_1.credentialLogger)(credentialName);\nconst OIDC_API_VERSION = \"7.1\";\n/**\n * This credential is designed to be used in Azure Pipelines with service connections\n * as a setup for workload identity federation.\n */\nclass AzurePipelinesCredential {\n    clientAssertionCredential;\n    identityClient;\n    /**\n     * AzurePipelinesCredential supports Federated Identity on Azure Pipelines through Service Connections.\n     * @param tenantId - tenantId associated with the service connection\n     * @param clientId - clientId associated with the service connection\n     * @param serviceConnectionId - Unique ID for the service connection, as found in the querystring's resourceId key\n     * @param systemAccessToken - The pipeline's <see href=\"https://learn.microsoft.com/azure/devops/pipelines/build/variables?view=azure-devops%26tabs=yaml#systemaccesstoken\">System.AccessToken</see> value.\n     * @param options - The identity client options to use for authentication.\n     */\n    constructor(tenantId, clientId, serviceConnectionId, systemAccessToken, options = {}) {\n        if (!clientId) {\n            throw new errors_js_1.CredentialUnavailableError(`${credentialName}: is unavailable. clientId is a required parameter.`);\n        }\n        if (!tenantId) {\n            throw new errors_js_1.CredentialUnavailableError(`${credentialName}: is unavailable. tenantId is a required parameter.`);\n        }\n        if (!serviceConnectionId) {\n            throw new errors_js_1.CredentialUnavailableError(`${credentialName}: is unavailable. serviceConnectionId is a required parameter.`);\n        }\n        if (!systemAccessToken) {\n            throw new errors_js_1.CredentialUnavailableError(`${credentialName}: is unavailable. systemAccessToken is a required parameter.`);\n        }\n        // Allow these headers to be logged for troubleshooting by AzurePipelines.\n        options.loggingOptions = {\n            ...options?.loggingOptions,\n            additionalAllowedHeaderNames: [\n                ...(options.loggingOptions?.additionalAllowedHeaderNames ?? []),\n                \"x-vss-e2eid\",\n                \"x-msedge-ref\",\n            ],\n        };\n        this.identityClient = new identityClient_js_1.IdentityClient(options);\n        (0, tenantIdUtils_js_1.checkTenantId)(logger, tenantId);\n        logger.info(`Invoking AzurePipelinesCredential with tenant ID: ${tenantId}, client ID: ${clientId}, and service connection ID: ${serviceConnectionId}`);\n        if (!process.env.SYSTEM_OIDCREQUESTURI) {\n            throw new errors_js_1.CredentialUnavailableError(`${credentialName}: is unavailable. Ensure that you're running this task in an Azure Pipeline, so that following missing system variable(s) can be defined- \"SYSTEM_OIDCREQUESTURI\"`);\n        }\n        const oidcRequestUrl = `${process.env.SYSTEM_OIDCREQUESTURI}?api-version=${OIDC_API_VERSION}&serviceConnectionId=${serviceConnectionId}`;\n        logger.info(`Invoking ClientAssertionCredential with tenant ID: ${tenantId}, client ID: ${clientId} and service connection ID: ${serviceConnectionId}`);\n        this.clientAssertionCredential = new clientAssertionCredential_js_1.ClientAssertionCredential(tenantId, clientId, this.requestOidcToken.bind(this, oidcRequestUrl, systemAccessToken), options);\n    }\n    /**\n     * Authenticates with Microsoft Entra ID and returns an access token if successful.\n     * If authentication fails, a {@link CredentialUnavailableError} or {@link AuthenticationError} will be thrown with the details of the failure.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this\n     *                TokenCredential implementation might make.\n     */\n    async getToken(scopes, options) {\n        if (!this.clientAssertionCredential) {\n            const errorMessage = `${credentialName}: is unavailable. To use Federation Identity in Azure Pipelines, the following parameters are required - \n      tenantId,\n      clientId,\n      serviceConnectionId,\n      systemAccessToken,\n      \"SYSTEM_OIDCREQUESTURI\".      \n      See the troubleshooting guide for more information: https://aka.ms/azsdk/js/identity/azurepipelinescredential/troubleshoot`;\n            logger.error(errorMessage);\n            throw new errors_js_1.CredentialUnavailableError(errorMessage);\n        }\n        logger.info(\"Invoking getToken() of Client Assertion Credential\");\n        return this.clientAssertionCredential.getToken(scopes, options);\n    }\n    /**\n     *\n     * @param oidcRequestUrl - oidc request url\n     * @param systemAccessToken - system access token\n     * @returns OIDC token from Azure Pipelines\n     */\n    async requestOidcToken(oidcRequestUrl, systemAccessToken) {\n        logger.info(\"Requesting OIDC token from Azure Pipelines...\");\n        logger.info(oidcRequestUrl);\n        const request = (0, core_rest_pipeline_1.createPipelineRequest)({\n            url: oidcRequestUrl,\n            method: \"POST\",\n            headers: (0, core_rest_pipeline_1.createHttpHeaders)({\n                \"Content-Type\": \"application/json\",\n                Authorization: `Bearer ${systemAccessToken}`,\n                // Prevents the service from responding with a redirect HTTP status code (useful for automation).\n                \"X-TFS-FedAuthRedirect\": \"Suppress\",\n            }),\n        });\n        const response = await this.identityClient.sendRequest(request);\n        return handleOidcResponse(response);\n    }\n}\nexports.AzurePipelinesCredential = AzurePipelinesCredential;\nfunction handleOidcResponse(response) {\n    // OIDC token is present in `bodyAsText` field\n    const text = response.bodyAsText;\n    if (!text) {\n        logger.error(`${credentialName}: Authentication Failed. Received null token from OIDC request. Response status- ${response.status}. Complete response - ${JSON.stringify(response)}`);\n        throw new errors_js_1.AuthenticationError(response.status, {\n            error: `${credentialName}: Authentication Failed. Received null token from OIDC request.`,\n            error_description: `${JSON.stringify(response)}. See the troubleshooting guide for more information: https://aka.ms/azsdk/js/identity/azurepipelinescredential/troubleshoot`,\n        });\n    }\n    try {\n        const result = JSON.parse(text);\n        if (result?.oidcToken) {\n            return result.oidcToken;\n        }\n        else {\n            const errorMessage = `${credentialName}: Authentication Failed. oidcToken field not detected in the response.`;\n            let errorDescription = ``;\n            if (response.status !== 200) {\n                errorDescription = `Response body = ${text}. Response Headers [\"x-vss-e2eid\"] = ${response.headers.get(\"x-vss-e2eid\")} and [\"x-msedge-ref\"] = ${response.headers.get(\"x-msedge-ref\")}. See the troubleshooting guide for more information: https://aka.ms/azsdk/js/identity/azurepipelinescredential/troubleshoot`;\n            }\n            logger.error(errorMessage);\n            logger.error(errorDescription);\n            throw new errors_js_1.AuthenticationError(response.status, {\n                error: errorMessage,\n                error_description: errorDescription,\n            });\n        }\n    }\n    catch (e) {\n        const errorDetails = `${credentialName}: Authentication Failed. oidcToken field not detected in the response.`;\n        logger.error(`Response from service = ${text}, Response Headers [\"x-vss-e2eid\"] = ${response.headers.get(\"x-vss-e2eid\")} \n      and [\"x-msedge-ref\"] = ${response.headers.get(\"x-msedge-ref\")}, error message = ${e.message}`);\n        logger.error(errorDetails);\n        throw new errors_js_1.AuthenticationError(response.status, {\n            error: errorDetails,\n            error_description: `Response = ${text}. Response headers [\"x-vss-e2eid\"] = ${response.headers.get(\"x-vss-e2eid\")} and [\"x-msedge-ref\"] =  ${response.headers.get(\"x-msedge-ref\")}. See the troubleshooting guide for more information: https://aka.ms/azsdk/js/identity/azurepipelinescredential/troubleshoot`,\n        });\n    }\n}\n//# sourceMappingURL=azurePipelinesCredential.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QvY29tbW9uanMvY3JlZGVudGlhbHMvYXp1cmVQaXBlbGluZXNDcmVkZW50aWFsLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQ0FBZ0M7QUFDaEMsMEJBQTBCO0FBQzFCLG9CQUFvQixtQkFBTyxDQUFDLGtGQUFjO0FBQzFDLDZCQUE2QixtQkFBTyxDQUFDLHdHQUEyQjtBQUNoRSx1Q0FBdUMsbUJBQU8sQ0FBQyxtSUFBZ0M7QUFDL0UsNEJBQTRCLG1CQUFPLENBQUMsZ0hBQTZCO0FBQ2pFLDJCQUEyQixtQkFBTyxDQUFDLDBHQUEwQjtBQUM3RCxxQkFBcUIsbUJBQU8sQ0FBQyw4RkFBb0I7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0ZBQXdGO0FBQ3hGO0FBQ0EsZ0VBQWdFLGVBQWU7QUFDL0U7QUFDQTtBQUNBLGdFQUFnRSxlQUFlO0FBQy9FO0FBQ0E7QUFDQSxnRUFBZ0UsZUFBZTtBQUMvRTtBQUNBO0FBQ0EsZ0VBQWdFLGVBQWU7QUFDL0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUVBQXlFLFNBQVMsZUFBZSxTQUFTLCtCQUErQixvQkFBb0I7QUFDN0o7QUFDQSxnRUFBZ0UsZUFBZTtBQUMvRTtBQUNBLGtDQUFrQyxrQ0FBa0MsZUFBZSxpQkFBaUIsdUJBQXVCLG9CQUFvQjtBQUMvSSwwRUFBMEUsU0FBUyxlQUFlLFVBQVUsNkJBQTZCLG9CQUFvQjtBQUM3SjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxrQ0FBa0MsSUFBSSwyQkFBMkI7QUFDcEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsZUFBZTtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLGtCQUFrQjtBQUMzRDtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixlQUFlLG1GQUFtRixnQkFBZ0Isd0JBQXdCLHlCQUF5QjtBQUMzTDtBQUNBLHNCQUFzQixlQUFlO0FBQ3JDLGtDQUFrQyx5QkFBeUI7QUFDM0QsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLGVBQWU7QUFDbkQ7QUFDQTtBQUNBLHNEQUFzRCxLQUFLLHVDQUF1QyxxQ0FBcUMseUJBQXlCLHFDQUFxQztBQUNyTTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLGVBQWU7QUFDL0MsZ0RBQWdELEtBQUssdUNBQXVDO0FBQzVGLCtCQUErQixxQ0FBcUMsb0JBQW9CLFVBQVU7QUFDbEc7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLEtBQUssdUNBQXVDLHFDQUFxQywwQkFBMEIscUNBQXFDO0FBQzdMLFNBQVM7QUFDVDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9pZGVudGl0eS9kaXN0L2NvbW1vbmpzL2NyZWRlbnRpYWxzL2F6dXJlUGlwZWxpbmVzQ3JlZGVudGlhbC5qcz9iMTYyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkF6dXJlUGlwZWxpbmVzQ3JlZGVudGlhbCA9IHZvaWQgMDtcbmV4cG9ydHMuaGFuZGxlT2lkY1Jlc3BvbnNlID0gaGFuZGxlT2lkY1Jlc3BvbnNlO1xuY29uc3QgZXJyb3JzX2pzXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JzLmpzXCIpO1xuY29uc3QgY29yZV9yZXN0X3BpcGVsaW5lXzEgPSByZXF1aXJlKFwiQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZVwiKTtcbmNvbnN0IGNsaWVudEFzc2VydGlvbkNyZWRlbnRpYWxfanNfMSA9IHJlcXVpcmUoXCIuL2NsaWVudEFzc2VydGlvbkNyZWRlbnRpYWwuanNcIik7XG5jb25zdCBpZGVudGl0eUNsaWVudF9qc18xID0gcmVxdWlyZShcIi4uL2NsaWVudC9pZGVudGl0eUNsaWVudC5qc1wiKTtcbmNvbnN0IHRlbmFudElkVXRpbHNfanNfMSA9IHJlcXVpcmUoXCIuLi91dGlsL3RlbmFudElkVXRpbHMuanNcIik7XG5jb25zdCBsb2dnaW5nX2pzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9sb2dnaW5nLmpzXCIpO1xuY29uc3QgY3JlZGVudGlhbE5hbWUgPSBcIkF6dXJlUGlwZWxpbmVzQ3JlZGVudGlhbFwiO1xuY29uc3QgbG9nZ2VyID0gKDAsIGxvZ2dpbmdfanNfMS5jcmVkZW50aWFsTG9nZ2VyKShjcmVkZW50aWFsTmFtZSk7XG5jb25zdCBPSURDX0FQSV9WRVJTSU9OID0gXCI3LjFcIjtcbi8qKlxuICogVGhpcyBjcmVkZW50aWFsIGlzIGRlc2lnbmVkIHRvIGJlIHVzZWQgaW4gQXp1cmUgUGlwZWxpbmVzIHdpdGggc2VydmljZSBjb25uZWN0aW9uc1xuICogYXMgYSBzZXR1cCBmb3Igd29ya2xvYWQgaWRlbnRpdHkgZmVkZXJhdGlvbi5cbiAqL1xuY2xhc3MgQXp1cmVQaXBlbGluZXNDcmVkZW50aWFsIHtcbiAgICBjbGllbnRBc3NlcnRpb25DcmVkZW50aWFsO1xuICAgIGlkZW50aXR5Q2xpZW50O1xuICAgIC8qKlxuICAgICAqIEF6dXJlUGlwZWxpbmVzQ3JlZGVudGlhbCBzdXBwb3J0cyBGZWRlcmF0ZWQgSWRlbnRpdHkgb24gQXp1cmUgUGlwZWxpbmVzIHRocm91Z2ggU2VydmljZSBDb25uZWN0aW9ucy5cbiAgICAgKiBAcGFyYW0gdGVuYW50SWQgLSB0ZW5hbnRJZCBhc3NvY2lhdGVkIHdpdGggdGhlIHNlcnZpY2UgY29ubmVjdGlvblxuICAgICAqIEBwYXJhbSBjbGllbnRJZCAtIGNsaWVudElkIGFzc29jaWF0ZWQgd2l0aCB0aGUgc2VydmljZSBjb25uZWN0aW9uXG4gICAgICogQHBhcmFtIHNlcnZpY2VDb25uZWN0aW9uSWQgLSBVbmlxdWUgSUQgZm9yIHRoZSBzZXJ2aWNlIGNvbm5lY3Rpb24sIGFzIGZvdW5kIGluIHRoZSBxdWVyeXN0cmluZydzIHJlc291cmNlSWQga2V5XG4gICAgICogQHBhcmFtIHN5c3RlbUFjY2Vzc1Rva2VuIC0gVGhlIHBpcGVsaW5lJ3MgPHNlZSBocmVmPVwiaHR0cHM6Ly9sZWFybi5taWNyb3NvZnQuY29tL2F6dXJlL2Rldm9wcy9waXBlbGluZXMvYnVpbGQvdmFyaWFibGVzP3ZpZXc9YXp1cmUtZGV2b3BzJTI2dGFicz15YW1sI3N5c3RlbWFjY2Vzc3Rva2VuXCI+U3lzdGVtLkFjY2Vzc1Rva2VuPC9zZWU+IHZhbHVlLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIGlkZW50aXR5IGNsaWVudCBvcHRpb25zIHRvIHVzZSBmb3IgYXV0aGVudGljYXRpb24uXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodGVuYW50SWQsIGNsaWVudElkLCBzZXJ2aWNlQ29ubmVjdGlvbklkLCBzeXN0ZW1BY2Nlc3NUb2tlbiwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIGlmICghY2xpZW50SWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5DcmVkZW50aWFsVW5hdmFpbGFibGVFcnJvcihgJHtjcmVkZW50aWFsTmFtZX06IGlzIHVuYXZhaWxhYmxlLiBjbGllbnRJZCBpcyBhIHJlcXVpcmVkIHBhcmFtZXRlci5gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRlbmFudElkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuQ3JlZGVudGlhbFVuYXZhaWxhYmxlRXJyb3IoYCR7Y3JlZGVudGlhbE5hbWV9OiBpcyB1bmF2YWlsYWJsZS4gdGVuYW50SWQgaXMgYSByZXF1aXJlZCBwYXJhbWV0ZXIuYCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzZXJ2aWNlQ29ubmVjdGlvbklkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuQ3JlZGVudGlhbFVuYXZhaWxhYmxlRXJyb3IoYCR7Y3JlZGVudGlhbE5hbWV9OiBpcyB1bmF2YWlsYWJsZS4gc2VydmljZUNvbm5lY3Rpb25JZCBpcyBhIHJlcXVpcmVkIHBhcmFtZXRlci5gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXN5c3RlbUFjY2Vzc1Rva2VuKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuQ3JlZGVudGlhbFVuYXZhaWxhYmxlRXJyb3IoYCR7Y3JlZGVudGlhbE5hbWV9OiBpcyB1bmF2YWlsYWJsZS4gc3lzdGVtQWNjZXNzVG9rZW4gaXMgYSByZXF1aXJlZCBwYXJhbWV0ZXIuYCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQWxsb3cgdGhlc2UgaGVhZGVycyB0byBiZSBsb2dnZWQgZm9yIHRyb3VibGVzaG9vdGluZyBieSBBenVyZVBpcGVsaW5lcy5cbiAgICAgICAgb3B0aW9ucy5sb2dnaW5nT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnM/LmxvZ2dpbmdPcHRpb25zLFxuICAgICAgICAgICAgYWRkaXRpb25hbEFsbG93ZWRIZWFkZXJOYW1lczogW1xuICAgICAgICAgICAgICAgIC4uLihvcHRpb25zLmxvZ2dpbmdPcHRpb25zPy5hZGRpdGlvbmFsQWxsb3dlZEhlYWRlck5hbWVzID8/IFtdKSxcbiAgICAgICAgICAgICAgICBcIngtdnNzLWUyZWlkXCIsXG4gICAgICAgICAgICAgICAgXCJ4LW1zZWRnZS1yZWZcIixcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaWRlbnRpdHlDbGllbnQgPSBuZXcgaWRlbnRpdHlDbGllbnRfanNfMS5JZGVudGl0eUNsaWVudChvcHRpb25zKTtcbiAgICAgICAgKDAsIHRlbmFudElkVXRpbHNfanNfMS5jaGVja1RlbmFudElkKShsb2dnZXIsIHRlbmFudElkKTtcbiAgICAgICAgbG9nZ2VyLmluZm8oYEludm9raW5nIEF6dXJlUGlwZWxpbmVzQ3JlZGVudGlhbCB3aXRoIHRlbmFudCBJRDogJHt0ZW5hbnRJZH0sIGNsaWVudCBJRDogJHtjbGllbnRJZH0sIGFuZCBzZXJ2aWNlIGNvbm5lY3Rpb24gSUQ6ICR7c2VydmljZUNvbm5lY3Rpb25JZH1gKTtcbiAgICAgICAgaWYgKCFwcm9jZXNzLmVudi5TWVNURU1fT0lEQ1JFUVVFU1RVUkkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5DcmVkZW50aWFsVW5hdmFpbGFibGVFcnJvcihgJHtjcmVkZW50aWFsTmFtZX06IGlzIHVuYXZhaWxhYmxlLiBFbnN1cmUgdGhhdCB5b3UncmUgcnVubmluZyB0aGlzIHRhc2sgaW4gYW4gQXp1cmUgUGlwZWxpbmUsIHNvIHRoYXQgZm9sbG93aW5nIG1pc3Npbmcgc3lzdGVtIHZhcmlhYmxlKHMpIGNhbiBiZSBkZWZpbmVkLSBcIlNZU1RFTV9PSURDUkVRVUVTVFVSSVwiYCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb2lkY1JlcXVlc3RVcmwgPSBgJHtwcm9jZXNzLmVudi5TWVNURU1fT0lEQ1JFUVVFU1RVUkl9P2FwaS12ZXJzaW9uPSR7T0lEQ19BUElfVkVSU0lPTn0mc2VydmljZUNvbm5lY3Rpb25JZD0ke3NlcnZpY2VDb25uZWN0aW9uSWR9YDtcbiAgICAgICAgbG9nZ2VyLmluZm8oYEludm9raW5nIENsaWVudEFzc2VydGlvbkNyZWRlbnRpYWwgd2l0aCB0ZW5hbnQgSUQ6ICR7dGVuYW50SWR9LCBjbGllbnQgSUQ6ICR7Y2xpZW50SWR9IGFuZCBzZXJ2aWNlIGNvbm5lY3Rpb24gSUQ6ICR7c2VydmljZUNvbm5lY3Rpb25JZH1gKTtcbiAgICAgICAgdGhpcy5jbGllbnRBc3NlcnRpb25DcmVkZW50aWFsID0gbmV3IGNsaWVudEFzc2VydGlvbkNyZWRlbnRpYWxfanNfMS5DbGllbnRBc3NlcnRpb25DcmVkZW50aWFsKHRlbmFudElkLCBjbGllbnRJZCwgdGhpcy5yZXF1ZXN0T2lkY1Rva2VuLmJpbmQodGhpcywgb2lkY1JlcXVlc3RVcmwsIHN5c3RlbUFjY2Vzc1Rva2VuKSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEF1dGhlbnRpY2F0ZXMgd2l0aCBNaWNyb3NvZnQgRW50cmEgSUQgYW5kIHJldHVybnMgYW4gYWNjZXNzIHRva2VuIGlmIHN1Y2Nlc3NmdWwuXG4gICAgICogSWYgYXV0aGVudGljYXRpb24gZmFpbHMsIGEge0BsaW5rIENyZWRlbnRpYWxVbmF2YWlsYWJsZUVycm9yfSBvciB7QGxpbmsgQXV0aGVudGljYXRpb25FcnJvcn0gd2lsbCBiZSB0aHJvd24gd2l0aCB0aGUgZGV0YWlscyBvZiB0aGUgZmFpbHVyZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzY29wZXMgLSBUaGUgbGlzdCBvZiBzY29wZXMgZm9yIHdoaWNoIHRoZSB0b2tlbiB3aWxsIGhhdmUgYWNjZXNzLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgdXNlZCB0byBjb25maWd1cmUgYW55IHJlcXVlc3RzIHRoaXNcbiAgICAgKiAgICAgICAgICAgICAgICBUb2tlbkNyZWRlbnRpYWwgaW1wbGVtZW50YXRpb24gbWlnaHQgbWFrZS5cbiAgICAgKi9cbiAgICBhc3luYyBnZXRUb2tlbihzY29wZXMsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNsaWVudEFzc2VydGlvbkNyZWRlbnRpYWwpIHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGAke2NyZWRlbnRpYWxOYW1lfTogaXMgdW5hdmFpbGFibGUuIFRvIHVzZSBGZWRlcmF0aW9uIElkZW50aXR5IGluIEF6dXJlIFBpcGVsaW5lcywgdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzIGFyZSByZXF1aXJlZCAtIFxuICAgICAgdGVuYW50SWQsXG4gICAgICBjbGllbnRJZCxcbiAgICAgIHNlcnZpY2VDb25uZWN0aW9uSWQsXG4gICAgICBzeXN0ZW1BY2Nlc3NUb2tlbixcbiAgICAgIFwiU1lTVEVNX09JRENSRVFVRVNUVVJJXCIuICAgICAgXG4gICAgICBTZWUgdGhlIHRyb3VibGVzaG9vdGluZyBndWlkZSBmb3IgbW9yZSBpbmZvcm1hdGlvbjogaHR0cHM6Ly9ha2EubXMvYXpzZGsvanMvaWRlbnRpdHkvYXp1cmVwaXBlbGluZXNjcmVkZW50aWFsL3Ryb3VibGVzaG9vdGA7XG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IoZXJyb3JNZXNzYWdlKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5DcmVkZW50aWFsVW5hdmFpbGFibGVFcnJvcihlcnJvck1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICAgIGxvZ2dlci5pbmZvKFwiSW52b2tpbmcgZ2V0VG9rZW4oKSBvZiBDbGllbnQgQXNzZXJ0aW9uIENyZWRlbnRpYWxcIik7XG4gICAgICAgIHJldHVybiB0aGlzLmNsaWVudEFzc2VydGlvbkNyZWRlbnRpYWwuZ2V0VG9rZW4oc2NvcGVzLCBvcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb2lkY1JlcXVlc3RVcmwgLSBvaWRjIHJlcXVlc3QgdXJsXG4gICAgICogQHBhcmFtIHN5c3RlbUFjY2Vzc1Rva2VuIC0gc3lzdGVtIGFjY2VzcyB0b2tlblxuICAgICAqIEByZXR1cm5zIE9JREMgdG9rZW4gZnJvbSBBenVyZSBQaXBlbGluZXNcbiAgICAgKi9cbiAgICBhc3luYyByZXF1ZXN0T2lkY1Rva2VuKG9pZGNSZXF1ZXN0VXJsLCBzeXN0ZW1BY2Nlc3NUb2tlbikge1xuICAgICAgICBsb2dnZXIuaW5mbyhcIlJlcXVlc3RpbmcgT0lEQyB0b2tlbiBmcm9tIEF6dXJlIFBpcGVsaW5lcy4uLlwiKTtcbiAgICAgICAgbG9nZ2VyLmluZm8ob2lkY1JlcXVlc3RVcmwpO1xuICAgICAgICBjb25zdCByZXF1ZXN0ID0gKDAsIGNvcmVfcmVzdF9waXBlbGluZV8xLmNyZWF0ZVBpcGVsaW5lUmVxdWVzdCkoe1xuICAgICAgICAgICAgdXJsOiBvaWRjUmVxdWVzdFVybCxcbiAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgICAgICBoZWFkZXJzOiAoMCwgY29yZV9yZXN0X3BpcGVsaW5lXzEuY3JlYXRlSHR0cEhlYWRlcnMpKHtcbiAgICAgICAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7c3lzdGVtQWNjZXNzVG9rZW59YCxcbiAgICAgICAgICAgICAgICAvLyBQcmV2ZW50cyB0aGUgc2VydmljZSBmcm9tIHJlc3BvbmRpbmcgd2l0aCBhIHJlZGlyZWN0IEhUVFAgc3RhdHVzIGNvZGUgKHVzZWZ1bCBmb3IgYXV0b21hdGlvbikuXG4gICAgICAgICAgICAgICAgXCJYLVRGUy1GZWRBdXRoUmVkaXJlY3RcIjogXCJTdXBwcmVzc1wiLFxuICAgICAgICAgICAgfSksXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuaWRlbnRpdHlDbGllbnQuc2VuZFJlcXVlc3QocmVxdWVzdCk7XG4gICAgICAgIHJldHVybiBoYW5kbGVPaWRjUmVzcG9uc2UocmVzcG9uc2UpO1xuICAgIH1cbn1cbmV4cG9ydHMuQXp1cmVQaXBlbGluZXNDcmVkZW50aWFsID0gQXp1cmVQaXBlbGluZXNDcmVkZW50aWFsO1xuZnVuY3Rpb24gaGFuZGxlT2lkY1Jlc3BvbnNlKHJlc3BvbnNlKSB7XG4gICAgLy8gT0lEQyB0b2tlbiBpcyBwcmVzZW50IGluIGBib2R5QXNUZXh0YCBmaWVsZFxuICAgIGNvbnN0IHRleHQgPSByZXNwb25zZS5ib2R5QXNUZXh0O1xuICAgIGlmICghdGV4dCkge1xuICAgICAgICBsb2dnZXIuZXJyb3IoYCR7Y3JlZGVudGlhbE5hbWV9OiBBdXRoZW50aWNhdGlvbiBGYWlsZWQuIFJlY2VpdmVkIG51bGwgdG9rZW4gZnJvbSBPSURDIHJlcXVlc3QuIFJlc3BvbnNlIHN0YXR1cy0gJHtyZXNwb25zZS5zdGF0dXN9LiBDb21wbGV0ZSByZXNwb25zZSAtICR7SlNPTi5zdHJpbmdpZnkocmVzcG9uc2UpfWApO1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuQXV0aGVudGljYXRpb25FcnJvcihyZXNwb25zZS5zdGF0dXMsIHtcbiAgICAgICAgICAgIGVycm9yOiBgJHtjcmVkZW50aWFsTmFtZX06IEF1dGhlbnRpY2F0aW9uIEZhaWxlZC4gUmVjZWl2ZWQgbnVsbCB0b2tlbiBmcm9tIE9JREMgcmVxdWVzdC5gLFxuICAgICAgICAgICAgZXJyb3JfZGVzY3JpcHRpb246IGAke0pTT04uc3RyaW5naWZ5KHJlc3BvbnNlKX0uIFNlZSB0aGUgdHJvdWJsZXNob290aW5nIGd1aWRlIGZvciBtb3JlIGluZm9ybWF0aW9uOiBodHRwczovL2FrYS5tcy9henNkay9qcy9pZGVudGl0eS9henVyZXBpcGVsaW5lc2NyZWRlbnRpYWwvdHJvdWJsZXNob290YCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IEpTT04ucGFyc2UodGV4dCk7XG4gICAgICAgIGlmIChyZXN1bHQ/Lm9pZGNUb2tlbikge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5vaWRjVG9rZW47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBgJHtjcmVkZW50aWFsTmFtZX06IEF1dGhlbnRpY2F0aW9uIEZhaWxlZC4gb2lkY1Rva2VuIGZpZWxkIG5vdCBkZXRlY3RlZCBpbiB0aGUgcmVzcG9uc2UuYDtcbiAgICAgICAgICAgIGxldCBlcnJvckRlc2NyaXB0aW9uID0gYGA7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzICE9PSAyMDApIHtcbiAgICAgICAgICAgICAgICBlcnJvckRlc2NyaXB0aW9uID0gYFJlc3BvbnNlIGJvZHkgPSAke3RleHR9LiBSZXNwb25zZSBIZWFkZXJzIFtcIngtdnNzLWUyZWlkXCJdID0gJHtyZXNwb25zZS5oZWFkZXJzLmdldChcIngtdnNzLWUyZWlkXCIpfSBhbmQgW1wieC1tc2VkZ2UtcmVmXCJdID0gJHtyZXNwb25zZS5oZWFkZXJzLmdldChcIngtbXNlZGdlLXJlZlwiKX0uIFNlZSB0aGUgdHJvdWJsZXNob290aW5nIGd1aWRlIGZvciBtb3JlIGluZm9ybWF0aW9uOiBodHRwczovL2FrYS5tcy9henNkay9qcy9pZGVudGl0eS9henVyZXBpcGVsaW5lc2NyZWRlbnRpYWwvdHJvdWJsZXNob290YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihlcnJvck1lc3NhZ2UpO1xuICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGVycm9yRGVzY3JpcHRpb24pO1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkF1dGhlbnRpY2F0aW9uRXJyb3IocmVzcG9uc2Uuc3RhdHVzLCB7XG4gICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yTWVzc2FnZSxcbiAgICAgICAgICAgICAgICBlcnJvcl9kZXNjcmlwdGlvbjogZXJyb3JEZXNjcmlwdGlvbixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnN0IGVycm9yRGV0YWlscyA9IGAke2NyZWRlbnRpYWxOYW1lfTogQXV0aGVudGljYXRpb24gRmFpbGVkLiBvaWRjVG9rZW4gZmllbGQgbm90IGRldGVjdGVkIGluIHRoZSByZXNwb25zZS5gO1xuICAgICAgICBsb2dnZXIuZXJyb3IoYFJlc3BvbnNlIGZyb20gc2VydmljZSA9ICR7dGV4dH0sIFJlc3BvbnNlIEhlYWRlcnMgW1wieC12c3MtZTJlaWRcIl0gPSAke3Jlc3BvbnNlLmhlYWRlcnMuZ2V0KFwieC12c3MtZTJlaWRcIil9IFxuICAgICAgYW5kIFtcIngtbXNlZGdlLXJlZlwiXSA9ICR7cmVzcG9uc2UuaGVhZGVycy5nZXQoXCJ4LW1zZWRnZS1yZWZcIil9LCBlcnJvciBtZXNzYWdlID0gJHtlLm1lc3NhZ2V9YCk7XG4gICAgICAgIGxvZ2dlci5lcnJvcihlcnJvckRldGFpbHMpO1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuQXV0aGVudGljYXRpb25FcnJvcihyZXNwb25zZS5zdGF0dXMsIHtcbiAgICAgICAgICAgIGVycm9yOiBlcnJvckRldGFpbHMsXG4gICAgICAgICAgICBlcnJvcl9kZXNjcmlwdGlvbjogYFJlc3BvbnNlID0gJHt0ZXh0fS4gUmVzcG9uc2UgaGVhZGVycyBbXCJ4LXZzcy1lMmVpZFwiXSA9ICR7cmVzcG9uc2UuaGVhZGVycy5nZXQoXCJ4LXZzcy1lMmVpZFwiKX0gYW5kIFtcIngtbXNlZGdlLXJlZlwiXSA9ICAke3Jlc3BvbnNlLmhlYWRlcnMuZ2V0KFwieC1tc2VkZ2UtcmVmXCIpfS4gU2VlIHRoZSB0cm91Ymxlc2hvb3RpbmcgZ3VpZGUgZm9yIG1vcmUgaW5mb3JtYXRpb246IGh0dHBzOi8vYWthLm1zL2F6c2RrL2pzL2lkZW50aXR5L2F6dXJlcGlwZWxpbmVzY3JlZGVudGlhbC90cm91Ymxlc2hvb3RgLFxuICAgICAgICB9KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1henVyZVBpcGVsaW5lc0NyZWRlbnRpYWwuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/azurePipelinesCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/azurePowerShellCredential.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist/commonjs/credentials/azurePowerShellCredential.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AzurePowerShellCredential = exports.commandStack = exports.powerShellPublicErrorMessages = exports.powerShellErrors = void 0;\nexports.formatCommand = formatCommand;\nexports.parseJsonToken = parseJsonToken;\nconst tenantIdUtils_js_1 = __webpack_require__(/*! ../util/tenantIdUtils.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/tenantIdUtils.js\");\nconst logging_js_1 = __webpack_require__(/*! ../util/logging.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/logging.js\");\nconst scopeUtils_js_1 = __webpack_require__(/*! ../util/scopeUtils.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/scopeUtils.js\");\nconst errors_js_1 = __webpack_require__(/*! ../errors.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/errors.js\");\nconst processUtils_js_1 = __webpack_require__(/*! ../util/processUtils.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/processUtils.js\");\nconst tracing_js_1 = __webpack_require__(/*! ../util/tracing.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/tracing.js\");\nconst logger = (0, logging_js_1.credentialLogger)(\"AzurePowerShellCredential\");\nconst isWindows = process.platform === \"win32\";\n/**\n * Returns a platform-appropriate command name by appending \".exe\" on Windows.\n *\n * @internal\n */\nfunction formatCommand(commandName) {\n    if (isWindows) {\n        return `${commandName}.exe`;\n    }\n    else {\n        return commandName;\n    }\n}\n/**\n * Receives a list of commands to run, executes them, then returns the outputs.\n * If anything fails, an error is thrown.\n * @internal\n */\nasync function runCommands(commands, timeout) {\n    const results = [];\n    for (const command of commands) {\n        const [file, ...parameters] = command;\n        const result = (await processUtils_js_1.processUtils.execFile(file, parameters, {\n            encoding: \"utf8\",\n            timeout,\n        }));\n        results.push(result);\n    }\n    return results;\n}\n/**\n * Known PowerShell errors\n * @internal\n */\nexports.powerShellErrors = {\n    login: \"Run Connect-AzAccount to login\",\n    installed: \"The specified module 'Az.Accounts' with version '2.2.0' was not loaded because no valid module file was found in any module directory\",\n};\n/**\n * Messages to use when throwing in this credential.\n * @internal\n */\nexports.powerShellPublicErrorMessages = {\n    login: \"Please run 'Connect-AzAccount' from PowerShell to authenticate before using this credential.\",\n    installed: `The 'Az.Account' module >= 2.2.0 is not installed. Install the Azure Az PowerShell module with: \"Install-Module -Name Az -Scope CurrentUser -Repository PSGallery -Force\".`,\n    troubleshoot: `To troubleshoot, visit https://aka.ms/azsdk/js/identity/powershellcredential/troubleshoot.`,\n};\n// PowerShell Azure User not logged in error check.\nconst isLoginError = (err) => err.message.match(`(.*)${exports.powerShellErrors.login}(.*)`);\n// Az Module not Installed in Azure PowerShell check.\nconst isNotInstalledError = (err) => err.message.match(exports.powerShellErrors.installed);\n/**\n * The PowerShell commands to be tried, in order.\n *\n * @internal\n */\nexports.commandStack = [formatCommand(\"pwsh\")];\nif (isWindows) {\n    exports.commandStack.push(formatCommand(\"powershell\"));\n}\n/**\n * This credential will use the currently logged-in user information from the\n * Azure PowerShell module. To do so, it will read the user access token and\n * expire time with Azure PowerShell command `Get-AzAccessToken -ResourceUrl {ResourceScope}`\n */\nclass AzurePowerShellCredential {\n    tenantId;\n    additionallyAllowedTenantIds;\n    timeout;\n    /**\n     * Creates an instance of the {@link AzurePowerShellCredential}.\n     *\n     * To use this credential:\n     * - Install the Azure Az PowerShell module with:\n     *   `Install-Module -Name Az -Scope CurrentUser -Repository PSGallery -Force`.\n     * - You have already logged in to Azure PowerShell using the command\n     * `Connect-AzAccount` from the command line.\n     *\n     * @param options - Options, to optionally allow multi-tenant requests.\n     */\n    constructor(options) {\n        if (options?.tenantId) {\n            (0, tenantIdUtils_js_1.checkTenantId)(logger, options?.tenantId);\n            this.tenantId = options?.tenantId;\n        }\n        this.additionallyAllowedTenantIds = (0, tenantIdUtils_js_1.resolveAdditionallyAllowedTenantIds)(options?.additionallyAllowedTenants);\n        this.timeout = options?.processTimeoutInMs;\n    }\n    /**\n     * Gets the access token from Azure PowerShell\n     * @param resource - The resource to use when getting the token\n     */\n    async getAzurePowerShellAccessToken(resource, tenantId, timeout) {\n        // Clone the stack to avoid mutating it while iterating\n        for (const powerShellCommand of [...exports.commandStack]) {\n            try {\n                await runCommands([[powerShellCommand, \"/?\"]], timeout);\n            }\n            catch (e) {\n                // Remove this credential from the original stack so that we don't try it again.\n                exports.commandStack.shift();\n                continue;\n            }\n            const results = await runCommands([\n                [\n                    powerShellCommand,\n                    \"-NoProfile\",\n                    \"-NonInteractive\",\n                    \"-Command\",\n                    `\n          $tenantId = \"${tenantId ?? \"\"}\"\n          $m = Import-Module Az.Accounts -MinimumVersion 2.2.0 -PassThru\n          $useSecureString = $m.Version -ge [version]'2.17.0' -and $m.Version -lt [version]'5.0.0'\n\n          $params = @{\n            ResourceUrl = \"${resource}\"\n          }\n\n          if ($tenantId.Length -gt 0) {\n            $params[\"TenantId\"] = $tenantId\n          }\n\n          if ($useSecureString) {\n            $params[\"AsSecureString\"] = $true\n          }\n\n          $token = Get-AzAccessToken @params\n\n          $result = New-Object -TypeName PSObject\n          $result | Add-Member -MemberType NoteProperty -Name ExpiresOn -Value $token.ExpiresOn\n\n          if ($token.Token -is [System.Security.SecureString]) {\n            if ($PSVersionTable.PSVersion.Major -lt 7) {\n              $ssPtr = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($token.Token)\n              try {\n                $result | Add-Member -MemberType NoteProperty -Name Token -Value ([System.Runtime.InteropServices.Marshal]::PtrToStringBSTR($ssPtr))\n              }\n              finally {\n                [System.Runtime.InteropServices.Marshal]::ZeroFreeBSTR($ssPtr)\n              }\n            }\n            else {\n              $result | Add-Member -MemberType NoteProperty -Name Token -Value ($token.Token | ConvertFrom-SecureString -AsPlainText)\n            }\n          }\n          else {\n            $result | Add-Member -MemberType NoteProperty -Name Token -Value $token.Token\n          }\n\n          Write-Output (ConvertTo-Json $result)\n          `,\n                ],\n            ]);\n            const result = results[0];\n            return parseJsonToken(result);\n        }\n        throw new Error(`Unable to execute PowerShell. Ensure that it is installed in your system`);\n    }\n    /**\n     * Authenticates with Microsoft Entra ID and returns an access token if successful.\n     * If the authentication cannot be performed through PowerShell, a {@link CredentialUnavailableError} will be thrown.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this TokenCredential implementation might make.\n     */\n    async getToken(scopes, options = {}) {\n        return tracing_js_1.tracingClient.withSpan(`${this.constructor.name}.getToken`, options, async () => {\n            const tenantId = (0, tenantIdUtils_js_1.processMultiTenantRequest)(this.tenantId, options, this.additionallyAllowedTenantIds);\n            const scope = typeof scopes === \"string\" ? scopes : scopes[0];\n            if (tenantId) {\n                (0, tenantIdUtils_js_1.checkTenantId)(logger, tenantId);\n            }\n            try {\n                (0, scopeUtils_js_1.ensureValidScopeForDevTimeCreds)(scope, logger);\n                logger.getToken.info(`Using the scope ${scope}`);\n                const resource = (0, scopeUtils_js_1.getScopeResource)(scope);\n                const response = await this.getAzurePowerShellAccessToken(resource, tenantId, this.timeout);\n                logger.getToken.info((0, logging_js_1.formatSuccess)(scopes));\n                return {\n                    token: response.Token,\n                    expiresOnTimestamp: new Date(response.ExpiresOn).getTime(),\n                    tokenType: \"Bearer\",\n                };\n            }\n            catch (err) {\n                if (isNotInstalledError(err)) {\n                    const error = new errors_js_1.CredentialUnavailableError(exports.powerShellPublicErrorMessages.installed);\n                    logger.getToken.info((0, logging_js_1.formatError)(scope, error));\n                    throw error;\n                }\n                else if (isLoginError(err)) {\n                    const error = new errors_js_1.CredentialUnavailableError(exports.powerShellPublicErrorMessages.login);\n                    logger.getToken.info((0, logging_js_1.formatError)(scope, error));\n                    throw error;\n                }\n                const error = new errors_js_1.CredentialUnavailableError(`${err}. ${exports.powerShellPublicErrorMessages.troubleshoot}`);\n                logger.getToken.info((0, logging_js_1.formatError)(scope, error));\n                throw error;\n            }\n        });\n    }\n}\nexports.AzurePowerShellCredential = AzurePowerShellCredential;\n/**\n *\n * @internal\n */\nasync function parseJsonToken(result) {\n    const jsonRegex = /{[^{}]*}/g;\n    const matches = result.match(jsonRegex);\n    let resultWithoutToken = result;\n    if (matches) {\n        try {\n            for (const item of matches) {\n                try {\n                    const jsonContent = JSON.parse(item);\n                    if (jsonContent?.Token) {\n                        resultWithoutToken = resultWithoutToken.replace(item, \"\");\n                        if (resultWithoutToken) {\n                            logger.getToken.warning(resultWithoutToken);\n                        }\n                        return jsonContent;\n                    }\n                }\n                catch (e) {\n                    continue;\n                }\n            }\n        }\n        catch (e) {\n            throw new Error(`Unable to parse the output of PowerShell. Received output: ${result}`);\n        }\n    }\n    throw new Error(`No access token found in the output. Received output: ${result}`);\n}\n//# sourceMappingURL=azurePowerShellCredential.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/azurePowerShellCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/brokerCredential.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist/commonjs/credentials/brokerCredential.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BrokerCredential = void 0;\nconst tenantIdUtils_js_1 = __webpack_require__(/*! ../util/tenantIdUtils.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/tenantIdUtils.js\");\nconst logging_js_1 = __webpack_require__(/*! ../util/logging.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/logging.js\");\nconst scopeUtils_js_1 = __webpack_require__(/*! ../util/scopeUtils.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/scopeUtils.js\");\nconst tracing_js_1 = __webpack_require__(/*! ../util/tracing.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/tracing.js\");\nconst msalClient_js_1 = __webpack_require__(/*! ../msal/nodeFlows/msalClient.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/msal/nodeFlows/msalClient.js\");\nconst constants_js_1 = __webpack_require__(/*! ../constants.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/constants.js\");\nconst errors_js_1 = __webpack_require__(/*! ../errors.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/errors.js\");\nconst logger = (0, logging_js_1.credentialLogger)(\"BrokerCredential\");\n/**\n * Enables authentication to Microsoft Entra ID using WAM (Web Account Manager) broker.\n * This credential extends InteractiveBrowserCredential and provides additional broker-specific functionality.\n */\nclass BrokerCredential {\n    brokerMsalClient;\n    brokerTenantId;\n    brokerAdditionallyAllowedTenantIds;\n    /**\n     * Creates an instance of BrokerCredential with the required broker options.\n     *\n     * This credential uses WAM (Web Account Manager) for authentication, which provides\n     * better security and user experience on Windows platforms.\n     *\n     * @param options - Options for configuring the broker credential, including required broker options.\n     */\n    constructor(options) {\n        this.brokerTenantId = (0, tenantIdUtils_js_1.resolveTenantId)(logger, options.tenantId);\n        this.brokerAdditionallyAllowedTenantIds = (0, tenantIdUtils_js_1.resolveAdditionallyAllowedTenantIds)(options?.additionallyAllowedTenants);\n        const msalClientOptions = {\n            ...options,\n            tokenCredentialOptions: options,\n            logger,\n            brokerOptions: {\n                enabled: true,\n                parentWindowHandle: new Uint8Array(0),\n                useDefaultBrokerAccount: true,\n            },\n        };\n        this.brokerMsalClient = (0, msalClient_js_1.createMsalClient)(constants_js_1.DeveloperSignOnClientId, this.brokerTenantId, msalClientOptions);\n    }\n    /**\n     * Authenticates with Microsoft Entra ID using WAM broker and returns an access token if successful.\n     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n     *\n     * This method extends the base getToken method to support silentAuthenticationOnly option\n     * when using broker authentication.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure the token request, including silentAuthenticationOnly option.\n     */\n    async getToken(scopes, options = {}) {\n        return tracing_js_1.tracingClient.withSpan(`${this.constructor.name}.getToken`, options, async (newOptions) => {\n            newOptions.tenantId = (0, tenantIdUtils_js_1.processMultiTenantRequest)(this.brokerTenantId, newOptions, this.brokerAdditionallyAllowedTenantIds, logger);\n            const arrayScopes = (0, scopeUtils_js_1.ensureScopes)(scopes);\n            try {\n                return this.brokerMsalClient.getBrokeredToken(arrayScopes, true, {\n                    ...newOptions,\n                    disableAutomaticAuthentication: true,\n                });\n            }\n            catch (e) {\n                logger.getToken.info((0, logging_js_1.formatError)(arrayScopes, e));\n                throw new errors_js_1.CredentialUnavailableError(\"Failed to acquire token using broker authentication\", { cause: e });\n            }\n        });\n    }\n}\nexports.BrokerCredential = BrokerCredential;\n//# sourceMappingURL=brokerCredential.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QvY29tbW9uanMvY3JlZGVudGlhbHMvYnJva2VyQ3JlZGVudGlhbC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsd0JBQXdCO0FBQ3hCLDJCQUEyQixtQkFBTyxDQUFDLDBHQUEwQjtBQUM3RCxxQkFBcUIsbUJBQU8sQ0FBQyw4RkFBb0I7QUFDakQsd0JBQXdCLG1CQUFPLENBQUMsb0dBQXVCO0FBQ3ZELHFCQUFxQixtQkFBTyxDQUFDLDhGQUFvQjtBQUNqRCx3QkFBd0IsbUJBQU8sQ0FBQyx3SEFBaUM7QUFDakUsdUJBQXVCLG1CQUFPLENBQUMsd0ZBQWlCO0FBQ2hELG9CQUFvQixtQkFBTyxDQUFDLGtGQUFjO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsa0NBQWtDO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDLHNEQUFzRCxzQkFBc0I7QUFDNUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLDBIQUEwSCxVQUFVO0FBQ3BJO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9pZGVudGl0eS9kaXN0L2NvbW1vbmpzL2NyZWRlbnRpYWxzL2Jyb2tlckNyZWRlbnRpYWwuanM/ZmY5ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Ccm9rZXJDcmVkZW50aWFsID0gdm9pZCAwO1xuY29uc3QgdGVuYW50SWRVdGlsc19qc18xID0gcmVxdWlyZShcIi4uL3V0aWwvdGVuYW50SWRVdGlscy5qc1wiKTtcbmNvbnN0IGxvZ2dpbmdfanNfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xvZ2dpbmcuanNcIik7XG5jb25zdCBzY29wZVV0aWxzX2pzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9zY29wZVV0aWxzLmpzXCIpO1xuY29uc3QgdHJhY2luZ19qc18xID0gcmVxdWlyZShcIi4uL3V0aWwvdHJhY2luZy5qc1wiKTtcbmNvbnN0IG1zYWxDbGllbnRfanNfMSA9IHJlcXVpcmUoXCIuLi9tc2FsL25vZGVGbG93cy9tc2FsQ2xpZW50LmpzXCIpO1xuY29uc3QgY29uc3RhbnRzX2pzXzEgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzLmpzXCIpO1xuY29uc3QgZXJyb3JzX2pzXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JzLmpzXCIpO1xuY29uc3QgbG9nZ2VyID0gKDAsIGxvZ2dpbmdfanNfMS5jcmVkZW50aWFsTG9nZ2VyKShcIkJyb2tlckNyZWRlbnRpYWxcIik7XG4vKipcbiAqIEVuYWJsZXMgYXV0aGVudGljYXRpb24gdG8gTWljcm9zb2Z0IEVudHJhIElEIHVzaW5nIFdBTSAoV2ViIEFjY291bnQgTWFuYWdlcikgYnJva2VyLlxuICogVGhpcyBjcmVkZW50aWFsIGV4dGVuZHMgSW50ZXJhY3RpdmVCcm93c2VyQ3JlZGVudGlhbCBhbmQgcHJvdmlkZXMgYWRkaXRpb25hbCBicm9rZXItc3BlY2lmaWMgZnVuY3Rpb25hbGl0eS5cbiAqL1xuY2xhc3MgQnJva2VyQ3JlZGVudGlhbCB7XG4gICAgYnJva2VyTXNhbENsaWVudDtcbiAgICBicm9rZXJUZW5hbnRJZDtcbiAgICBicm9rZXJBZGRpdGlvbmFsbHlBbGxvd2VkVGVuYW50SWRzO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgQnJva2VyQ3JlZGVudGlhbCB3aXRoIHRoZSByZXF1aXJlZCBicm9rZXIgb3B0aW9ucy5cbiAgICAgKlxuICAgICAqIFRoaXMgY3JlZGVudGlhbCB1c2VzIFdBTSAoV2ViIEFjY291bnQgTWFuYWdlcikgZm9yIGF1dGhlbnRpY2F0aW9uLCB3aGljaCBwcm92aWRlc1xuICAgICAqIGJldHRlciBzZWN1cml0eSBhbmQgdXNlciBleHBlcmllbmNlIG9uIFdpbmRvd3MgcGxhdGZvcm1zLlxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIGZvciBjb25maWd1cmluZyB0aGUgYnJva2VyIGNyZWRlbnRpYWwsIGluY2x1ZGluZyByZXF1aXJlZCBicm9rZXIgb3B0aW9ucy5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuYnJva2VyVGVuYW50SWQgPSAoMCwgdGVuYW50SWRVdGlsc19qc18xLnJlc29sdmVUZW5hbnRJZCkobG9nZ2VyLCBvcHRpb25zLnRlbmFudElkKTtcbiAgICAgICAgdGhpcy5icm9rZXJBZGRpdGlvbmFsbHlBbGxvd2VkVGVuYW50SWRzID0gKDAsIHRlbmFudElkVXRpbHNfanNfMS5yZXNvbHZlQWRkaXRpb25hbGx5QWxsb3dlZFRlbmFudElkcykob3B0aW9ucz8uYWRkaXRpb25hbGx5QWxsb3dlZFRlbmFudHMpO1xuICAgICAgICBjb25zdCBtc2FsQ2xpZW50T3B0aW9ucyA9IHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICB0b2tlbkNyZWRlbnRpYWxPcHRpb25zOiBvcHRpb25zLFxuICAgICAgICAgICAgbG9nZ2VyLFxuICAgICAgICAgICAgYnJva2VyT3B0aW9uczoge1xuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgcGFyZW50V2luZG93SGFuZGxlOiBuZXcgVWludDhBcnJheSgwKSxcbiAgICAgICAgICAgICAgICB1c2VEZWZhdWx0QnJva2VyQWNjb3VudDogdHJ1ZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuYnJva2VyTXNhbENsaWVudCA9ICgwLCBtc2FsQ2xpZW50X2pzXzEuY3JlYXRlTXNhbENsaWVudCkoY29uc3RhbnRzX2pzXzEuRGV2ZWxvcGVyU2lnbk9uQ2xpZW50SWQsIHRoaXMuYnJva2VyVGVuYW50SWQsIG1zYWxDbGllbnRPcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQXV0aGVudGljYXRlcyB3aXRoIE1pY3Jvc29mdCBFbnRyYSBJRCB1c2luZyBXQU0gYnJva2VyIGFuZCByZXR1cm5zIGFuIGFjY2VzcyB0b2tlbiBpZiBzdWNjZXNzZnVsLlxuICAgICAqIElmIGF1dGhlbnRpY2F0aW9uIGZhaWxzLCBhIHtAbGluayBDcmVkZW50aWFsVW5hdmFpbGFibGVFcnJvcn0gd2lsbCBiZSB0aHJvd24gd2l0aCB0aGUgZGV0YWlscyBvZiB0aGUgZmFpbHVyZS5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIGV4dGVuZHMgdGhlIGJhc2UgZ2V0VG9rZW4gbWV0aG9kIHRvIHN1cHBvcnQgc2lsZW50QXV0aGVudGljYXRpb25Pbmx5IG9wdGlvblxuICAgICAqIHdoZW4gdXNpbmcgYnJva2VyIGF1dGhlbnRpY2F0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHNjb3BlcyAtIFRoZSBsaXN0IG9mIHNjb3BlcyBmb3Igd2hpY2ggdGhlIHRva2VuIHdpbGwgaGF2ZSBhY2Nlc3MuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgb3B0aW9ucyB1c2VkIHRvIGNvbmZpZ3VyZSB0aGUgdG9rZW4gcmVxdWVzdCwgaW5jbHVkaW5nIHNpbGVudEF1dGhlbnRpY2F0aW9uT25seSBvcHRpb24uXG4gICAgICovXG4gICAgYXN5bmMgZ2V0VG9rZW4oc2NvcGVzLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgcmV0dXJuIHRyYWNpbmdfanNfMS50cmFjaW5nQ2xpZW50LndpdGhTcGFuKGAke3RoaXMuY29uc3RydWN0b3IubmFtZX0uZ2V0VG9rZW5gLCBvcHRpb25zLCBhc3luYyAobmV3T3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgbmV3T3B0aW9ucy50ZW5hbnRJZCA9ICgwLCB0ZW5hbnRJZFV0aWxzX2pzXzEucHJvY2Vzc011bHRpVGVuYW50UmVxdWVzdCkodGhpcy5icm9rZXJUZW5hbnRJZCwgbmV3T3B0aW9ucywgdGhpcy5icm9rZXJBZGRpdGlvbmFsbHlBbGxvd2VkVGVuYW50SWRzLCBsb2dnZXIpO1xuICAgICAgICAgICAgY29uc3QgYXJyYXlTY29wZXMgPSAoMCwgc2NvcGVVdGlsc19qc18xLmVuc3VyZVNjb3Blcykoc2NvcGVzKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYnJva2VyTXNhbENsaWVudC5nZXRCcm9rZXJlZFRva2VuKGFycmF5U2NvcGVzLCB0cnVlLCB7XG4gICAgICAgICAgICAgICAgICAgIC4uLm5ld09wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVBdXRvbWF0aWNBdXRoZW50aWNhdGlvbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmdldFRva2VuLmluZm8oKDAsIGxvZ2dpbmdfanNfMS5mb3JtYXRFcnJvcikoYXJyYXlTY29wZXMsIGUpKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuQ3JlZGVudGlhbFVuYXZhaWxhYmxlRXJyb3IoXCJGYWlsZWQgdG8gYWNxdWlyZSB0b2tlbiB1c2luZyBicm9rZXIgYXV0aGVudGljYXRpb25cIiwgeyBjYXVzZTogZSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5Ccm9rZXJDcmVkZW50aWFsID0gQnJva2VyQ3JlZGVudGlhbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJyb2tlckNyZWRlbnRpYWwuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/brokerCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/chainedTokenCredential.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist/commonjs/credentials/chainedTokenCredential.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ChainedTokenCredential = exports.logger = void 0;\nconst errors_js_1 = __webpack_require__(/*! ../errors.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/errors.js\");\nconst logging_js_1 = __webpack_require__(/*! ../util/logging.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/logging.js\");\nconst tracing_js_1 = __webpack_require__(/*! ../util/tracing.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/tracing.js\");\n/**\n * @internal\n */\nexports.logger = (0, logging_js_1.credentialLogger)(\"ChainedTokenCredential\");\n/**\n * Enables multiple `TokenCredential` implementations to be tried in order until\n * one of the getToken methods returns an access token. For more information, see\n * [ChainedTokenCredential overview](https://aka.ms/azsdk/js/identity/credential-chains#use-chainedtokencredential-for-granularity).\n */\nclass ChainedTokenCredential {\n    _sources = [];\n    /**\n     * Creates an instance of ChainedTokenCredential using the given credentials.\n     *\n     * @param sources - `TokenCredential` implementations to be tried in order.\n     *\n     * Example usage:\n     * ```ts snippet:chained_token_credential_example\n     * import { ClientSecretCredential, ChainedTokenCredential } from \"@azure/identity\";\n     *\n     * const tenantId = \"<tenant-id>\";\n     * const clientId = \"<client-id>\";\n     * const clientSecret = \"<client-secret>\";\n     * const anotherClientId = \"<another-client-id>\";\n     * const anotherSecret = \"<another-client-secret>\";\n     *\n     * const firstCredential = new ClientSecretCredential(tenantId, clientId, clientSecret);\n     * const secondCredential = new ClientSecretCredential(tenantId, anotherClientId, anotherSecret);\n     *\n     * const credentialChain = new ChainedTokenCredential(firstCredential, secondCredential);\n     * ```\n     */\n    constructor(...sources) {\n        this._sources = sources;\n    }\n    /**\n     * Returns the first access token returned by one of the chained\n     * `TokenCredential` implementations.  Throws an {@link AggregateAuthenticationError}\n     * when one or more credentials throws an {@link AuthenticationError} and\n     * no credentials have returned an access token.\n     *\n     * This method is called automatically by Azure SDK client libraries. You may call this method\n     * directly, but you must also handle token caching and token refreshing.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this\n     *                `TokenCredential` implementation might make.\n     */\n    async getToken(scopes, options = {}) {\n        const { token } = await this.getTokenInternal(scopes, options);\n        return token;\n    }\n    async getTokenInternal(scopes, options = {}) {\n        let token = null;\n        let successfulCredential;\n        const errors = [];\n        return tracing_js_1.tracingClient.withSpan(\"ChainedTokenCredential.getToken\", options, async (updatedOptions) => {\n            for (let i = 0; i < this._sources.length && token === null; i++) {\n                try {\n                    token = await this._sources[i].getToken(scopes, updatedOptions);\n                    successfulCredential = this._sources[i];\n                }\n                catch (err) {\n                    if (err.name === \"CredentialUnavailableError\" ||\n                        err.name === \"AuthenticationRequiredError\") {\n                        errors.push(err);\n                    }\n                    else {\n                        exports.logger.getToken.info((0, logging_js_1.formatError)(scopes, err));\n                        throw err;\n                    }\n                }\n            }\n            if (!token && errors.length > 0) {\n                const err = new errors_js_1.AggregateAuthenticationError(errors, \"ChainedTokenCredential authentication failed.\");\n                exports.logger.getToken.info((0, logging_js_1.formatError)(scopes, err));\n                throw err;\n            }\n            exports.logger.getToken.info(`Result for ${successfulCredential.constructor.name}: ${(0, logging_js_1.formatSuccess)(scopes)}`);\n            if (token === null) {\n                throw new errors_js_1.CredentialUnavailableError(\"Failed to retrieve a valid token\");\n            }\n            return { token, successfulCredential };\n        });\n    }\n}\nexports.ChainedTokenCredential = ChainedTokenCredential;\n//# sourceMappingURL=chainedTokenCredential.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QvY29tbW9uanMvY3JlZGVudGlhbHMvY2hhaW5lZFRva2VuQ3JlZGVudGlhbC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsOEJBQThCLEdBQUcsY0FBYztBQUMvQyxvQkFBb0IsbUJBQU8sQ0FBQyxrRkFBYztBQUMxQyxxQkFBcUIsbUJBQU8sQ0FBQyw4RkFBb0I7QUFDakQscUJBQXFCLG1CQUFPLENBQUMsOEZBQW9CO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGlEQUFpRDtBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0Q7QUFDdEQsK0NBQStDLDJCQUEyQjtBQUMxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkMsZ0JBQWdCLFFBQVE7QUFDeEI7QUFDQTtBQUNBLCtDQUErQztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qiw0Q0FBNEM7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RCxzQ0FBc0MsSUFBSSx3Q0FBd0M7QUFDekk7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCLFNBQVM7QUFDVDtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvaWRlbnRpdHkvZGlzdC9jb21tb25qcy9jcmVkZW50aWFscy9jaGFpbmVkVG9rZW5DcmVkZW50aWFsLmpzPzBkMTAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ2hhaW5lZFRva2VuQ3JlZGVudGlhbCA9IGV4cG9ydHMubG9nZ2VyID0gdm9pZCAwO1xuY29uc3QgZXJyb3JzX2pzXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JzLmpzXCIpO1xuY29uc3QgbG9nZ2luZ19qc18xID0gcmVxdWlyZShcIi4uL3V0aWwvbG9nZ2luZy5qc1wiKTtcbmNvbnN0IHRyYWNpbmdfanNfMSA9IHJlcXVpcmUoXCIuLi91dGlsL3RyYWNpbmcuanNcIik7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnRzLmxvZ2dlciA9ICgwLCBsb2dnaW5nX2pzXzEuY3JlZGVudGlhbExvZ2dlcikoXCJDaGFpbmVkVG9rZW5DcmVkZW50aWFsXCIpO1xuLyoqXG4gKiBFbmFibGVzIG11bHRpcGxlIGBUb2tlbkNyZWRlbnRpYWxgIGltcGxlbWVudGF0aW9ucyB0byBiZSB0cmllZCBpbiBvcmRlciB1bnRpbFxuICogb25lIG9mIHRoZSBnZXRUb2tlbiBtZXRob2RzIHJldHVybnMgYW4gYWNjZXNzIHRva2VuLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG4gKiBbQ2hhaW5lZFRva2VuQ3JlZGVudGlhbCBvdmVydmlld10oaHR0cHM6Ly9ha2EubXMvYXpzZGsvanMvaWRlbnRpdHkvY3JlZGVudGlhbC1jaGFpbnMjdXNlLWNoYWluZWR0b2tlbmNyZWRlbnRpYWwtZm9yLWdyYW51bGFyaXR5KS5cbiAqL1xuY2xhc3MgQ2hhaW5lZFRva2VuQ3JlZGVudGlhbCB7XG4gICAgX3NvdXJjZXMgPSBbXTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIENoYWluZWRUb2tlbkNyZWRlbnRpYWwgdXNpbmcgdGhlIGdpdmVuIGNyZWRlbnRpYWxzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHNvdXJjZXMgLSBgVG9rZW5DcmVkZW50aWFsYCBpbXBsZW1lbnRhdGlvbnMgdG8gYmUgdHJpZWQgaW4gb3JkZXIuXG4gICAgICpcbiAgICAgKiBFeGFtcGxlIHVzYWdlOlxuICAgICAqIGBgYHRzIHNuaXBwZXQ6Y2hhaW5lZF90b2tlbl9jcmVkZW50aWFsX2V4YW1wbGVcbiAgICAgKiBpbXBvcnQgeyBDbGllbnRTZWNyZXRDcmVkZW50aWFsLCBDaGFpbmVkVG9rZW5DcmVkZW50aWFsIH0gZnJvbSBcIkBhenVyZS9pZGVudGl0eVwiO1xuICAgICAqXG4gICAgICogY29uc3QgdGVuYW50SWQgPSBcIjx0ZW5hbnQtaWQ+XCI7XG4gICAgICogY29uc3QgY2xpZW50SWQgPSBcIjxjbGllbnQtaWQ+XCI7XG4gICAgICogY29uc3QgY2xpZW50U2VjcmV0ID0gXCI8Y2xpZW50LXNlY3JldD5cIjtcbiAgICAgKiBjb25zdCBhbm90aGVyQ2xpZW50SWQgPSBcIjxhbm90aGVyLWNsaWVudC1pZD5cIjtcbiAgICAgKiBjb25zdCBhbm90aGVyU2VjcmV0ID0gXCI8YW5vdGhlci1jbGllbnQtc2VjcmV0PlwiO1xuICAgICAqXG4gICAgICogY29uc3QgZmlyc3RDcmVkZW50aWFsID0gbmV3IENsaWVudFNlY3JldENyZWRlbnRpYWwodGVuYW50SWQsIGNsaWVudElkLCBjbGllbnRTZWNyZXQpO1xuICAgICAqIGNvbnN0IHNlY29uZENyZWRlbnRpYWwgPSBuZXcgQ2xpZW50U2VjcmV0Q3JlZGVudGlhbCh0ZW5hbnRJZCwgYW5vdGhlckNsaWVudElkLCBhbm90aGVyU2VjcmV0KTtcbiAgICAgKlxuICAgICAqIGNvbnN0IGNyZWRlbnRpYWxDaGFpbiA9IG5ldyBDaGFpbmVkVG9rZW5DcmVkZW50aWFsKGZpcnN0Q3JlZGVudGlhbCwgc2Vjb25kQ3JlZGVudGlhbCk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoLi4uc291cmNlcykge1xuICAgICAgICB0aGlzLl9zb3VyY2VzID0gc291cmNlcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgZmlyc3QgYWNjZXNzIHRva2VuIHJldHVybmVkIGJ5IG9uZSBvZiB0aGUgY2hhaW5lZFxuICAgICAqIGBUb2tlbkNyZWRlbnRpYWxgIGltcGxlbWVudGF0aW9ucy4gIFRocm93cyBhbiB7QGxpbmsgQWdncmVnYXRlQXV0aGVudGljYXRpb25FcnJvcn1cbiAgICAgKiB3aGVuIG9uZSBvciBtb3JlIGNyZWRlbnRpYWxzIHRocm93cyBhbiB7QGxpbmsgQXV0aGVudGljYXRpb25FcnJvcn0gYW5kXG4gICAgICogbm8gY3JlZGVudGlhbHMgaGF2ZSByZXR1cm5lZCBhbiBhY2Nlc3MgdG9rZW4uXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgYXV0b21hdGljYWxseSBieSBBenVyZSBTREsgY2xpZW50IGxpYnJhcmllcy4gWW91IG1heSBjYWxsIHRoaXMgbWV0aG9kXG4gICAgICogZGlyZWN0bHksIGJ1dCB5b3UgbXVzdCBhbHNvIGhhbmRsZSB0b2tlbiBjYWNoaW5nIGFuZCB0b2tlbiByZWZyZXNoaW5nLlxuICAgICAqXG4gICAgICogQHBhcmFtIHNjb3BlcyAtIFRoZSBsaXN0IG9mIHNjb3BlcyBmb3Igd2hpY2ggdGhlIHRva2VuIHdpbGwgaGF2ZSBhY2Nlc3MuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgb3B0aW9ucyB1c2VkIHRvIGNvbmZpZ3VyZSBhbnkgcmVxdWVzdHMgdGhpc1xuICAgICAqICAgICAgICAgICAgICAgIGBUb2tlbkNyZWRlbnRpYWxgIGltcGxlbWVudGF0aW9uIG1pZ2h0IG1ha2UuXG4gICAgICovXG4gICAgYXN5bmMgZ2V0VG9rZW4oc2NvcGVzLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgY29uc3QgeyB0b2tlbiB9ID0gYXdhaXQgdGhpcy5nZXRUb2tlbkludGVybmFsKHNjb3Blcywgb3B0aW9ucyk7XG4gICAgICAgIHJldHVybiB0b2tlbjtcbiAgICB9XG4gICAgYXN5bmMgZ2V0VG9rZW5JbnRlcm5hbChzY29wZXMsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBsZXQgdG9rZW4gPSBudWxsO1xuICAgICAgICBsZXQgc3VjY2Vzc2Z1bENyZWRlbnRpYWw7XG4gICAgICAgIGNvbnN0IGVycm9ycyA9IFtdO1xuICAgICAgICByZXR1cm4gdHJhY2luZ19qc18xLnRyYWNpbmdDbGllbnQud2l0aFNwYW4oXCJDaGFpbmVkVG9rZW5DcmVkZW50aWFsLmdldFRva2VuXCIsIG9wdGlvbnMsIGFzeW5jICh1cGRhdGVkT3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9zb3VyY2VzLmxlbmd0aCAmJiB0b2tlbiA9PT0gbnVsbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdG9rZW4gPSBhd2FpdCB0aGlzLl9zb3VyY2VzW2ldLmdldFRva2VuKHNjb3BlcywgdXBkYXRlZE9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzZnVsQ3JlZGVudGlhbCA9IHRoaXMuX3NvdXJjZXNbaV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVyci5uYW1lID09PSBcIkNyZWRlbnRpYWxVbmF2YWlsYWJsZUVycm9yXCIgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVyci5uYW1lID09PSBcIkF1dGhlbnRpY2F0aW9uUmVxdWlyZWRFcnJvclwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMucHVzaChlcnIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXhwb3J0cy5sb2dnZXIuZ2V0VG9rZW4uaW5mbygoMCwgbG9nZ2luZ19qc18xLmZvcm1hdEVycm9yKShzY29wZXMsIGVycikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0b2tlbiAmJiBlcnJvcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVyciA9IG5ldyBlcnJvcnNfanNfMS5BZ2dyZWdhdGVBdXRoZW50aWNhdGlvbkVycm9yKGVycm9ycywgXCJDaGFpbmVkVG9rZW5DcmVkZW50aWFsIGF1dGhlbnRpY2F0aW9uIGZhaWxlZC5cIik7XG4gICAgICAgICAgICAgICAgZXhwb3J0cy5sb2dnZXIuZ2V0VG9rZW4uaW5mbygoMCwgbG9nZ2luZ19qc18xLmZvcm1hdEVycm9yKShzY29wZXMsIGVycikpO1xuICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGV4cG9ydHMubG9nZ2VyLmdldFRva2VuLmluZm8oYFJlc3VsdCBmb3IgJHtzdWNjZXNzZnVsQ3JlZGVudGlhbC5jb25zdHJ1Y3Rvci5uYW1lfTogJHsoMCwgbG9nZ2luZ19qc18xLmZvcm1hdFN1Y2Nlc3MpKHNjb3Blcyl9YCk7XG4gICAgICAgICAgICBpZiAodG9rZW4gPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuQ3JlZGVudGlhbFVuYXZhaWxhYmxlRXJyb3IoXCJGYWlsZWQgdG8gcmV0cmlldmUgYSB2YWxpZCB0b2tlblwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IHRva2VuLCBzdWNjZXNzZnVsQ3JlZGVudGlhbCB9O1xuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLkNoYWluZWRUb2tlbkNyZWRlbnRpYWwgPSBDaGFpbmVkVG9rZW5DcmVkZW50aWFsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2hhaW5lZFRva2VuQ3JlZGVudGlhbC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/chainedTokenCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/clientAssertionCredential.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist/commonjs/credentials/clientAssertionCredential.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ClientAssertionCredential = void 0;\nconst msalClient_js_1 = __webpack_require__(/*! ../msal/nodeFlows/msalClient.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/msal/nodeFlows/msalClient.js\");\nconst tenantIdUtils_js_1 = __webpack_require__(/*! ../util/tenantIdUtils.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/tenantIdUtils.js\");\nconst errors_js_1 = __webpack_require__(/*! ../errors.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/errors.js\");\nconst logging_js_1 = __webpack_require__(/*! ../util/logging.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/logging.js\");\nconst tracing_js_1 = __webpack_require__(/*! ../util/tracing.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/tracing.js\");\nconst logger = (0, logging_js_1.credentialLogger)(\"ClientAssertionCredential\");\n/**\n * Authenticates a service principal with a JWT assertion.\n */\nclass ClientAssertionCredential {\n    msalClient;\n    tenantId;\n    additionallyAllowedTenantIds;\n    getAssertion;\n    options;\n    /**\n     * Creates an instance of the ClientAssertionCredential with the details\n     * needed to authenticate against Microsoft Entra ID with a client\n     * assertion provided by the developer through the `getAssertion` function parameter.\n     *\n     * @param tenantId - The Microsoft Entra tenant (directory) ID.\n     * @param clientId - The client (application) ID of an App Registration in the tenant.\n     * @param getAssertion - A function that retrieves the assertion for the credential to use.\n     * @param options - Options for configuring the client which makes the authentication request.\n     */\n    constructor(tenantId, clientId, getAssertion, options = {}) {\n        if (!tenantId) {\n            throw new errors_js_1.CredentialUnavailableError(\"ClientAssertionCredential: tenantId is a required parameter.\");\n        }\n        if (!clientId) {\n            throw new errors_js_1.CredentialUnavailableError(\"ClientAssertionCredential: clientId is a required parameter.\");\n        }\n        if (!getAssertion) {\n            throw new errors_js_1.CredentialUnavailableError(\"ClientAssertionCredential: clientAssertion is a required parameter.\");\n        }\n        this.tenantId = tenantId;\n        this.additionallyAllowedTenantIds = (0, tenantIdUtils_js_1.resolveAdditionallyAllowedTenantIds)(options?.additionallyAllowedTenants);\n        this.options = options;\n        this.getAssertion = getAssertion;\n        this.msalClient = (0, msalClient_js_1.createMsalClient)(clientId, tenantId, {\n            ...options,\n            logger,\n            tokenCredentialOptions: this.options,\n        });\n    }\n    /**\n     * Authenticates with Microsoft Entra ID and returns an access token if successful.\n     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this\n     *                TokenCredential implementation might make.\n     */\n    async getToken(scopes, options = {}) {\n        return tracing_js_1.tracingClient.withSpan(`${this.constructor.name}.getToken`, options, async (newOptions) => {\n            newOptions.tenantId = (0, tenantIdUtils_js_1.processMultiTenantRequest)(this.tenantId, newOptions, this.additionallyAllowedTenantIds, logger);\n            const arrayScopes = Array.isArray(scopes) ? scopes : [scopes];\n            return this.msalClient.getTokenByClientAssertion(arrayScopes, this.getAssertion, newOptions);\n        });\n    }\n}\nexports.ClientAssertionCredential = ClientAssertionCredential;\n//# sourceMappingURL=clientAssertionCredential.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QvY29tbW9uanMvY3JlZGVudGlhbHMvY2xpZW50QXNzZXJ0aW9uQ3JlZGVudGlhbC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUNBQWlDO0FBQ2pDLHdCQUF3QixtQkFBTyxDQUFDLHdIQUFpQztBQUNqRSwyQkFBMkIsbUJBQU8sQ0FBQywwR0FBMEI7QUFDN0Qsb0JBQW9CLG1CQUFPLENBQUMsa0ZBQWM7QUFDMUMscUJBQXFCLG1CQUFPLENBQUMsOEZBQW9CO0FBQ2pELHFCQUFxQixtQkFBTyxDQUFDLDhGQUFvQjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOERBQThEO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLGtDQUFrQztBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDLHNEQUFzRCxzQkFBc0I7QUFDNUU7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9pZGVudGl0eS9kaXN0L2NvbW1vbmpzL2NyZWRlbnRpYWxzL2NsaWVudEFzc2VydGlvbkNyZWRlbnRpYWwuanM/NDQ0MCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5DbGllbnRBc3NlcnRpb25DcmVkZW50aWFsID0gdm9pZCAwO1xuY29uc3QgbXNhbENsaWVudF9qc18xID0gcmVxdWlyZShcIi4uL21zYWwvbm9kZUZsb3dzL21zYWxDbGllbnQuanNcIik7XG5jb25zdCB0ZW5hbnRJZFV0aWxzX2pzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC90ZW5hbnRJZFV0aWxzLmpzXCIpO1xuY29uc3QgZXJyb3JzX2pzXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JzLmpzXCIpO1xuY29uc3QgbG9nZ2luZ19qc18xID0gcmVxdWlyZShcIi4uL3V0aWwvbG9nZ2luZy5qc1wiKTtcbmNvbnN0IHRyYWNpbmdfanNfMSA9IHJlcXVpcmUoXCIuLi91dGlsL3RyYWNpbmcuanNcIik7XG5jb25zdCBsb2dnZXIgPSAoMCwgbG9nZ2luZ19qc18xLmNyZWRlbnRpYWxMb2dnZXIpKFwiQ2xpZW50QXNzZXJ0aW9uQ3JlZGVudGlhbFwiKTtcbi8qKlxuICogQXV0aGVudGljYXRlcyBhIHNlcnZpY2UgcHJpbmNpcGFsIHdpdGggYSBKV1QgYXNzZXJ0aW9uLlxuICovXG5jbGFzcyBDbGllbnRBc3NlcnRpb25DcmVkZW50aWFsIHtcbiAgICBtc2FsQ2xpZW50O1xuICAgIHRlbmFudElkO1xuICAgIGFkZGl0aW9uYWxseUFsbG93ZWRUZW5hbnRJZHM7XG4gICAgZ2V0QXNzZXJ0aW9uO1xuICAgIG9wdGlvbnM7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiB0aGUgQ2xpZW50QXNzZXJ0aW9uQ3JlZGVudGlhbCB3aXRoIHRoZSBkZXRhaWxzXG4gICAgICogbmVlZGVkIHRvIGF1dGhlbnRpY2F0ZSBhZ2FpbnN0IE1pY3Jvc29mdCBFbnRyYSBJRCB3aXRoIGEgY2xpZW50XG4gICAgICogYXNzZXJ0aW9uIHByb3ZpZGVkIGJ5IHRoZSBkZXZlbG9wZXIgdGhyb3VnaCB0aGUgYGdldEFzc2VydGlvbmAgZnVuY3Rpb24gcGFyYW1ldGVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHRlbmFudElkIC0gVGhlIE1pY3Jvc29mdCBFbnRyYSB0ZW5hbnQgKGRpcmVjdG9yeSkgSUQuXG4gICAgICogQHBhcmFtIGNsaWVudElkIC0gVGhlIGNsaWVudCAoYXBwbGljYXRpb24pIElEIG9mIGFuIEFwcCBSZWdpc3RyYXRpb24gaW4gdGhlIHRlbmFudC5cbiAgICAgKiBAcGFyYW0gZ2V0QXNzZXJ0aW9uIC0gQSBmdW5jdGlvbiB0aGF0IHJldHJpZXZlcyB0aGUgYXNzZXJ0aW9uIGZvciB0aGUgY3JlZGVudGlhbCB0byB1c2UuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIGZvciBjb25maWd1cmluZyB0aGUgY2xpZW50IHdoaWNoIG1ha2VzIHRoZSBhdXRoZW50aWNhdGlvbiByZXF1ZXN0LlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHRlbmFudElkLCBjbGllbnRJZCwgZ2V0QXNzZXJ0aW9uLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgaWYgKCF0ZW5hbnRJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkNyZWRlbnRpYWxVbmF2YWlsYWJsZUVycm9yKFwiQ2xpZW50QXNzZXJ0aW9uQ3JlZGVudGlhbDogdGVuYW50SWQgaXMgYSByZXF1aXJlZCBwYXJhbWV0ZXIuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghY2xpZW50SWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5DcmVkZW50aWFsVW5hdmFpbGFibGVFcnJvcihcIkNsaWVudEFzc2VydGlvbkNyZWRlbnRpYWw6IGNsaWVudElkIGlzIGEgcmVxdWlyZWQgcGFyYW1ldGVyLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWdldEFzc2VydGlvbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkNyZWRlbnRpYWxVbmF2YWlsYWJsZUVycm9yKFwiQ2xpZW50QXNzZXJ0aW9uQ3JlZGVudGlhbDogY2xpZW50QXNzZXJ0aW9uIGlzIGEgcmVxdWlyZWQgcGFyYW1ldGVyLlwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRlbmFudElkID0gdGVuYW50SWQ7XG4gICAgICAgIHRoaXMuYWRkaXRpb25hbGx5QWxsb3dlZFRlbmFudElkcyA9ICgwLCB0ZW5hbnRJZFV0aWxzX2pzXzEucmVzb2x2ZUFkZGl0aW9uYWxseUFsbG93ZWRUZW5hbnRJZHMpKG9wdGlvbnM/LmFkZGl0aW9uYWxseUFsbG93ZWRUZW5hbnRzKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5nZXRBc3NlcnRpb24gPSBnZXRBc3NlcnRpb247XG4gICAgICAgIHRoaXMubXNhbENsaWVudCA9ICgwLCBtc2FsQ2xpZW50X2pzXzEuY3JlYXRlTXNhbENsaWVudCkoY2xpZW50SWQsIHRlbmFudElkLCB7XG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgbG9nZ2VyLFxuICAgICAgICAgICAgdG9rZW5DcmVkZW50aWFsT3B0aW9uczogdGhpcy5vcHRpb25zLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQXV0aGVudGljYXRlcyB3aXRoIE1pY3Jvc29mdCBFbnRyYSBJRCBhbmQgcmV0dXJucyBhbiBhY2Nlc3MgdG9rZW4gaWYgc3VjY2Vzc2Z1bC5cbiAgICAgKiBJZiBhdXRoZW50aWNhdGlvbiBmYWlscywgYSB7QGxpbmsgQ3JlZGVudGlhbFVuYXZhaWxhYmxlRXJyb3J9IHdpbGwgYmUgdGhyb3duIHdpdGggdGhlIGRldGFpbHMgb2YgdGhlIGZhaWx1cmUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc2NvcGVzIC0gVGhlIGxpc3Qgb2Ygc2NvcGVzIGZvciB3aGljaCB0aGUgdG9rZW4gd2lsbCBoYXZlIGFjY2Vzcy5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIHVzZWQgdG8gY29uZmlndXJlIGFueSByZXF1ZXN0cyB0aGlzXG4gICAgICogICAgICAgICAgICAgICAgVG9rZW5DcmVkZW50aWFsIGltcGxlbWVudGF0aW9uIG1pZ2h0IG1ha2UuXG4gICAgICovXG4gICAgYXN5bmMgZ2V0VG9rZW4oc2NvcGVzLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgcmV0dXJuIHRyYWNpbmdfanNfMS50cmFjaW5nQ2xpZW50LndpdGhTcGFuKGAke3RoaXMuY29uc3RydWN0b3IubmFtZX0uZ2V0VG9rZW5gLCBvcHRpb25zLCBhc3luYyAobmV3T3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgbmV3T3B0aW9ucy50ZW5hbnRJZCA9ICgwLCB0ZW5hbnRJZFV0aWxzX2pzXzEucHJvY2Vzc011bHRpVGVuYW50UmVxdWVzdCkodGhpcy50ZW5hbnRJZCwgbmV3T3B0aW9ucywgdGhpcy5hZGRpdGlvbmFsbHlBbGxvd2VkVGVuYW50SWRzLCBsb2dnZXIpO1xuICAgICAgICAgICAgY29uc3QgYXJyYXlTY29wZXMgPSBBcnJheS5pc0FycmF5KHNjb3BlcykgPyBzY29wZXMgOiBbc2NvcGVzXTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1zYWxDbGllbnQuZ2V0VG9rZW5CeUNsaWVudEFzc2VydGlvbihhcnJheVNjb3BlcywgdGhpcy5nZXRBc3NlcnRpb24sIG5ld09wdGlvbnMpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLkNsaWVudEFzc2VydGlvbkNyZWRlbnRpYWwgPSBDbGllbnRBc3NlcnRpb25DcmVkZW50aWFsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2xpZW50QXNzZXJ0aW9uQ3JlZGVudGlhbC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/clientAssertionCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/clientCertificateCredential.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist/commonjs/credentials/clientCertificateCredential.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ClientCertificateCredential = void 0;\nexports.parseCertificate = parseCertificate;\nconst msalClient_js_1 = __webpack_require__(/*! ../msal/nodeFlows/msalClient.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/msal/nodeFlows/msalClient.js\");\nconst node_crypto_1 = __webpack_require__(/*! node:crypto */ \"node:crypto\");\nconst tenantIdUtils_js_1 = __webpack_require__(/*! ../util/tenantIdUtils.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/tenantIdUtils.js\");\nconst logging_js_1 = __webpack_require__(/*! ../util/logging.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/logging.js\");\nconst promises_1 = __webpack_require__(/*! node:fs/promises */ \"node:fs/promises\");\nconst tracing_js_1 = __webpack_require__(/*! ../util/tracing.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/tracing.js\");\nconst credentialName = \"ClientCertificateCredential\";\nconst logger = (0, logging_js_1.credentialLogger)(credentialName);\n/**\n * Enables authentication to Microsoft Entra ID using a PEM-encoded\n * certificate that is assigned to an App Registration. More information\n * on how to configure certificate authentication can be found here:\n *\n * https://learn.microsoft.com/azure/active-directory/develop/active-directory-certificate-credentials#register-your-certificate-with-azure-ad\n *\n */\nclass ClientCertificateCredential {\n    tenantId;\n    additionallyAllowedTenantIds;\n    certificateConfiguration;\n    sendCertificateChain;\n    msalClient;\n    constructor(tenantId, clientId, certificatePathOrConfiguration, options = {}) {\n        if (!tenantId || !clientId) {\n            throw new Error(`${credentialName}: tenantId and clientId are required parameters.`);\n        }\n        this.tenantId = tenantId;\n        this.additionallyAllowedTenantIds = (0, tenantIdUtils_js_1.resolveAdditionallyAllowedTenantIds)(options?.additionallyAllowedTenants);\n        this.sendCertificateChain = options.sendCertificateChain;\n        this.certificateConfiguration = {\n            ...(typeof certificatePathOrConfiguration === \"string\"\n                ? {\n                    certificatePath: certificatePathOrConfiguration,\n                }\n                : certificatePathOrConfiguration),\n        };\n        const certificate = this.certificateConfiguration\n            .certificate;\n        const certificatePath = this.certificateConfiguration\n            .certificatePath;\n        if (!this.certificateConfiguration || !(certificate || certificatePath)) {\n            throw new Error(`${credentialName}: Provide either a PEM certificate in string form, or the path to that certificate in the filesystem. To troubleshoot, visit https://aka.ms/azsdk/js/identity/serviceprincipalauthentication/troubleshoot.`);\n        }\n        if (certificate && certificatePath) {\n            throw new Error(`${credentialName}: To avoid unexpected behaviors, providing both the contents of a PEM certificate and the path to a PEM certificate is forbidden. To troubleshoot, visit https://aka.ms/azsdk/js/identity/serviceprincipalauthentication/troubleshoot.`);\n        }\n        this.msalClient = (0, msalClient_js_1.createMsalClient)(clientId, tenantId, {\n            ...options,\n            logger,\n            tokenCredentialOptions: options,\n        });\n    }\n    /**\n     * Authenticates with Microsoft Entra ID and returns an access token if successful.\n     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this\n     *                TokenCredential implementation might make.\n     */\n    async getToken(scopes, options = {}) {\n        return tracing_js_1.tracingClient.withSpan(`${credentialName}.getToken`, options, async (newOptions) => {\n            newOptions.tenantId = (0, tenantIdUtils_js_1.processMultiTenantRequest)(this.tenantId, newOptions, this.additionallyAllowedTenantIds, logger);\n            const arrayScopes = Array.isArray(scopes) ? scopes : [scopes];\n            const certificate = await this.buildClientCertificate();\n            return this.msalClient.getTokenByClientCertificate(arrayScopes, certificate, newOptions);\n        });\n    }\n    async buildClientCertificate() {\n        const parts = await parseCertificate(this.certificateConfiguration, this.sendCertificateChain ?? false);\n        let privateKey;\n        if (this.certificateConfiguration.certificatePassword !== undefined) {\n            privateKey = (0, node_crypto_1.createPrivateKey)({\n                key: parts.certificateContents,\n                passphrase: this.certificateConfiguration.certificatePassword,\n                format: \"pem\",\n            })\n                .export({\n                format: \"pem\",\n                type: \"pkcs8\",\n            })\n                .toString();\n        }\n        else {\n            privateKey = parts.certificateContents;\n        }\n        return {\n            thumbprint: parts.thumbprint,\n            thumbprintSha256: parts.thumbprintSha256,\n            privateKey,\n            x5c: parts.x5c,\n        };\n    }\n}\nexports.ClientCertificateCredential = ClientCertificateCredential;\n/**\n * Parses a certificate into its relevant parts\n *\n * @param certificateConfiguration - The certificate contents or path to the certificate\n * @param sendCertificateChain - true if the entire certificate chain should be sent for SNI, false otherwise\n * @returns The parsed certificate parts and the certificate contents\n */\nasync function parseCertificate(certificateConfiguration, sendCertificateChain) {\n    const certificate = certificateConfiguration.certificate;\n    const certificatePath = certificateConfiguration\n        .certificatePath;\n    const certificateContents = certificate || (await (0, promises_1.readFile)(certificatePath, \"utf8\"));\n    const x5c = sendCertificateChain ? certificateContents : undefined;\n    const certificatePattern = /(-+BEGIN CERTIFICATE-+)(\\n\\r?|\\r\\n?)([A-Za-z0-9+/\\n\\r]+=*)(\\n\\r?|\\r\\n?)(-+END CERTIFICATE-+)/g;\n    const publicKeys = [];\n    // Match all possible certificates, in the order they are in the file. These will form the chain that is used for x5c\n    let match;\n    do {\n        match = certificatePattern.exec(certificateContents);\n        if (match) {\n            publicKeys.push(match[3]);\n        }\n    } while (match);\n    if (publicKeys.length === 0) {\n        throw new Error(\"The file at the specified path does not contain a PEM-encoded certificate.\");\n    }\n    const thumbprint = (0, node_crypto_1.createHash)(\"sha1\") // CodeQL [SM04514] Needed for backward compatibility reason\n        .update(Buffer.from(publicKeys[0], \"base64\"))\n        .digest(\"hex\")\n        .toUpperCase();\n    const thumbprintSha256 = (0, node_crypto_1.createHash)(\"sha256\")\n        .update(Buffer.from(publicKeys[0], \"base64\"))\n        .digest(\"hex\")\n        .toUpperCase();\n    return {\n        certificateContents,\n        thumbprintSha256,\n        thumbprint,\n        x5c,\n    };\n}\n//# sourceMappingURL=clientCertificateCredential.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/clientCertificateCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/clientSecretCredential.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist/commonjs/credentials/clientSecretCredential.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ClientSecretCredential = void 0;\nconst msalClient_js_1 = __webpack_require__(/*! ../msal/nodeFlows/msalClient.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/msal/nodeFlows/msalClient.js\");\nconst tenantIdUtils_js_1 = __webpack_require__(/*! ../util/tenantIdUtils.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/tenantIdUtils.js\");\nconst errors_js_1 = __webpack_require__(/*! ../errors.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/errors.js\");\nconst logging_js_1 = __webpack_require__(/*! ../util/logging.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/logging.js\");\nconst scopeUtils_js_1 = __webpack_require__(/*! ../util/scopeUtils.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/scopeUtils.js\");\nconst tracing_js_1 = __webpack_require__(/*! ../util/tracing.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/tracing.js\");\nconst logger = (0, logging_js_1.credentialLogger)(\"ClientSecretCredential\");\n/**\n * Enables authentication to Microsoft Entra ID using a client secret\n * that was generated for an App Registration. More information on how\n * to configure a client secret can be found here:\n *\n * https://learn.microsoft.com/entra/identity-platform/quickstart-configure-app-access-web-apis#add-credentials-to-your-web-application\n *\n */\nclass ClientSecretCredential {\n    tenantId;\n    additionallyAllowedTenantIds;\n    msalClient;\n    clientSecret;\n    /**\n     * Creates an instance of the ClientSecretCredential with the details\n     * needed to authenticate against Microsoft Entra ID with a client\n     * secret.\n     *\n     * @param tenantId - The Microsoft Entra tenant (directory) ID.\n     * @param clientId - The client (application) ID of an App Registration in the tenant.\n     * @param clientSecret - A client secret that was generated for the App Registration.\n     * @param options - Options for configuring the client which makes the authentication request.\n     */\n    constructor(tenantId, clientId, clientSecret, options = {}) {\n        if (!tenantId) {\n            throw new errors_js_1.CredentialUnavailableError(\"ClientSecretCredential: tenantId is a required parameter. To troubleshoot, visit https://aka.ms/azsdk/js/identity/serviceprincipalauthentication/troubleshoot.\");\n        }\n        if (!clientId) {\n            throw new errors_js_1.CredentialUnavailableError(\"ClientSecretCredential: clientId is a required parameter. To troubleshoot, visit https://aka.ms/azsdk/js/identity/serviceprincipalauthentication/troubleshoot.\");\n        }\n        if (!clientSecret) {\n            throw new errors_js_1.CredentialUnavailableError(\"ClientSecretCredential: clientSecret is a required parameter. To troubleshoot, visit https://aka.ms/azsdk/js/identity/serviceprincipalauthentication/troubleshoot.\");\n        }\n        this.clientSecret = clientSecret;\n        this.tenantId = tenantId;\n        this.additionallyAllowedTenantIds = (0, tenantIdUtils_js_1.resolveAdditionallyAllowedTenantIds)(options?.additionallyAllowedTenants);\n        this.msalClient = (0, msalClient_js_1.createMsalClient)(clientId, tenantId, {\n            ...options,\n            logger,\n            tokenCredentialOptions: options,\n        });\n    }\n    /**\n     * Authenticates with Microsoft Entra ID and returns an access token if successful.\n     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this\n     *                TokenCredential implementation might make.\n     */\n    async getToken(scopes, options = {}) {\n        return tracing_js_1.tracingClient.withSpan(`${this.constructor.name}.getToken`, options, async (newOptions) => {\n            newOptions.tenantId = (0, tenantIdUtils_js_1.processMultiTenantRequest)(this.tenantId, newOptions, this.additionallyAllowedTenantIds, logger);\n            const arrayScopes = (0, scopeUtils_js_1.ensureScopes)(scopes);\n            return this.msalClient.getTokenByClientSecret(arrayScopes, this.clientSecret, newOptions);\n        });\n    }\n}\nexports.ClientSecretCredential = ClientSecretCredential;\n//# sourceMappingURL=clientSecretCredential.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QvY29tbW9uanMvY3JlZGVudGlhbHMvY2xpZW50U2VjcmV0Q3JlZGVudGlhbC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsOEJBQThCO0FBQzlCLHdCQUF3QixtQkFBTyxDQUFDLHdIQUFpQztBQUNqRSwyQkFBMkIsbUJBQU8sQ0FBQywwR0FBMEI7QUFDN0Qsb0JBQW9CLG1CQUFPLENBQUMsa0ZBQWM7QUFDMUMscUJBQXFCLG1CQUFPLENBQUMsOEZBQW9CO0FBQ2pELHdCQUF3QixtQkFBTyxDQUFDLG9HQUF1QjtBQUN2RCxxQkFBcUIsbUJBQU8sQ0FBQyw4RkFBb0I7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOERBQThEO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxrQ0FBa0M7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QztBQUN2QyxzREFBc0Qsc0JBQXNCO0FBQzVFO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvaWRlbnRpdHkvZGlzdC9jb21tb25qcy9jcmVkZW50aWFscy9jbGllbnRTZWNyZXRDcmVkZW50aWFsLmpzPzQ4Y2YiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ2xpZW50U2VjcmV0Q3JlZGVudGlhbCA9IHZvaWQgMDtcbmNvbnN0IG1zYWxDbGllbnRfanNfMSA9IHJlcXVpcmUoXCIuLi9tc2FsL25vZGVGbG93cy9tc2FsQ2xpZW50LmpzXCIpO1xuY29uc3QgdGVuYW50SWRVdGlsc19qc18xID0gcmVxdWlyZShcIi4uL3V0aWwvdGVuYW50SWRVdGlscy5qc1wiKTtcbmNvbnN0IGVycm9yc19qc18xID0gcmVxdWlyZShcIi4uL2Vycm9ycy5qc1wiKTtcbmNvbnN0IGxvZ2dpbmdfanNfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xvZ2dpbmcuanNcIik7XG5jb25zdCBzY29wZVV0aWxzX2pzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9zY29wZVV0aWxzLmpzXCIpO1xuY29uc3QgdHJhY2luZ19qc18xID0gcmVxdWlyZShcIi4uL3V0aWwvdHJhY2luZy5qc1wiKTtcbmNvbnN0IGxvZ2dlciA9ICgwLCBsb2dnaW5nX2pzXzEuY3JlZGVudGlhbExvZ2dlcikoXCJDbGllbnRTZWNyZXRDcmVkZW50aWFsXCIpO1xuLyoqXG4gKiBFbmFibGVzIGF1dGhlbnRpY2F0aW9uIHRvIE1pY3Jvc29mdCBFbnRyYSBJRCB1c2luZyBhIGNsaWVudCBzZWNyZXRcbiAqIHRoYXQgd2FzIGdlbmVyYXRlZCBmb3IgYW4gQXBwIFJlZ2lzdHJhdGlvbi4gTW9yZSBpbmZvcm1hdGlvbiBvbiBob3dcbiAqIHRvIGNvbmZpZ3VyZSBhIGNsaWVudCBzZWNyZXQgY2FuIGJlIGZvdW5kIGhlcmU6XG4gKlxuICogaHR0cHM6Ly9sZWFybi5taWNyb3NvZnQuY29tL2VudHJhL2lkZW50aXR5LXBsYXRmb3JtL3F1aWNrc3RhcnQtY29uZmlndXJlLWFwcC1hY2Nlc3Mtd2ViLWFwaXMjYWRkLWNyZWRlbnRpYWxzLXRvLXlvdXItd2ViLWFwcGxpY2F0aW9uXG4gKlxuICovXG5jbGFzcyBDbGllbnRTZWNyZXRDcmVkZW50aWFsIHtcbiAgICB0ZW5hbnRJZDtcbiAgICBhZGRpdGlvbmFsbHlBbGxvd2VkVGVuYW50SWRzO1xuICAgIG1zYWxDbGllbnQ7XG4gICAgY2xpZW50U2VjcmV0O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgdGhlIENsaWVudFNlY3JldENyZWRlbnRpYWwgd2l0aCB0aGUgZGV0YWlsc1xuICAgICAqIG5lZWRlZCB0byBhdXRoZW50aWNhdGUgYWdhaW5zdCBNaWNyb3NvZnQgRW50cmEgSUQgd2l0aCBhIGNsaWVudFxuICAgICAqIHNlY3JldC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0ZW5hbnRJZCAtIFRoZSBNaWNyb3NvZnQgRW50cmEgdGVuYW50IChkaXJlY3RvcnkpIElELlxuICAgICAqIEBwYXJhbSBjbGllbnRJZCAtIFRoZSBjbGllbnQgKGFwcGxpY2F0aW9uKSBJRCBvZiBhbiBBcHAgUmVnaXN0cmF0aW9uIGluIHRoZSB0ZW5hbnQuXG4gICAgICogQHBhcmFtIGNsaWVudFNlY3JldCAtIEEgY2xpZW50IHNlY3JldCB0aGF0IHdhcyBnZW5lcmF0ZWQgZm9yIHRoZSBBcHAgUmVnaXN0cmF0aW9uLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyBmb3IgY29uZmlndXJpbmcgdGhlIGNsaWVudCB3aGljaCBtYWtlcyB0aGUgYXV0aGVudGljYXRpb24gcmVxdWVzdC5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih0ZW5hbnRJZCwgY2xpZW50SWQsIGNsaWVudFNlY3JldCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIGlmICghdGVuYW50SWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5DcmVkZW50aWFsVW5hdmFpbGFibGVFcnJvcihcIkNsaWVudFNlY3JldENyZWRlbnRpYWw6IHRlbmFudElkIGlzIGEgcmVxdWlyZWQgcGFyYW1ldGVyLiBUbyB0cm91Ymxlc2hvb3QsIHZpc2l0IGh0dHBzOi8vYWthLm1zL2F6c2RrL2pzL2lkZW50aXR5L3NlcnZpY2VwcmluY2lwYWxhdXRoZW50aWNhdGlvbi90cm91Ymxlc2hvb3QuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghY2xpZW50SWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5DcmVkZW50aWFsVW5hdmFpbGFibGVFcnJvcihcIkNsaWVudFNlY3JldENyZWRlbnRpYWw6IGNsaWVudElkIGlzIGEgcmVxdWlyZWQgcGFyYW1ldGVyLiBUbyB0cm91Ymxlc2hvb3QsIHZpc2l0IGh0dHBzOi8vYWthLm1zL2F6c2RrL2pzL2lkZW50aXR5L3NlcnZpY2VwcmluY2lwYWxhdXRoZW50aWNhdGlvbi90cm91Ymxlc2hvb3QuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghY2xpZW50U2VjcmV0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuQ3JlZGVudGlhbFVuYXZhaWxhYmxlRXJyb3IoXCJDbGllbnRTZWNyZXRDcmVkZW50aWFsOiBjbGllbnRTZWNyZXQgaXMgYSByZXF1aXJlZCBwYXJhbWV0ZXIuIFRvIHRyb3VibGVzaG9vdCwgdmlzaXQgaHR0cHM6Ly9ha2EubXMvYXpzZGsvanMvaWRlbnRpdHkvc2VydmljZXByaW5jaXBhbGF1dGhlbnRpY2F0aW9uL3Ryb3VibGVzaG9vdC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jbGllbnRTZWNyZXQgPSBjbGllbnRTZWNyZXQ7XG4gICAgICAgIHRoaXMudGVuYW50SWQgPSB0ZW5hbnRJZDtcbiAgICAgICAgdGhpcy5hZGRpdGlvbmFsbHlBbGxvd2VkVGVuYW50SWRzID0gKDAsIHRlbmFudElkVXRpbHNfanNfMS5yZXNvbHZlQWRkaXRpb25hbGx5QWxsb3dlZFRlbmFudElkcykob3B0aW9ucz8uYWRkaXRpb25hbGx5QWxsb3dlZFRlbmFudHMpO1xuICAgICAgICB0aGlzLm1zYWxDbGllbnQgPSAoMCwgbXNhbENsaWVudF9qc18xLmNyZWF0ZU1zYWxDbGllbnQpKGNsaWVudElkLCB0ZW5hbnRJZCwge1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGxvZ2dlcixcbiAgICAgICAgICAgIHRva2VuQ3JlZGVudGlhbE9wdGlvbnM6IG9wdGlvbnMsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBdXRoZW50aWNhdGVzIHdpdGggTWljcm9zb2Z0IEVudHJhIElEIGFuZCByZXR1cm5zIGFuIGFjY2VzcyB0b2tlbiBpZiBzdWNjZXNzZnVsLlxuICAgICAqIElmIGF1dGhlbnRpY2F0aW9uIGZhaWxzLCBhIHtAbGluayBDcmVkZW50aWFsVW5hdmFpbGFibGVFcnJvcn0gd2lsbCBiZSB0aHJvd24gd2l0aCB0aGUgZGV0YWlscyBvZiB0aGUgZmFpbHVyZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzY29wZXMgLSBUaGUgbGlzdCBvZiBzY29wZXMgZm9yIHdoaWNoIHRoZSB0b2tlbiB3aWxsIGhhdmUgYWNjZXNzLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgdXNlZCB0byBjb25maWd1cmUgYW55IHJlcXVlc3RzIHRoaXNcbiAgICAgKiAgICAgICAgICAgICAgICBUb2tlbkNyZWRlbnRpYWwgaW1wbGVtZW50YXRpb24gbWlnaHQgbWFrZS5cbiAgICAgKi9cbiAgICBhc3luYyBnZXRUb2tlbihzY29wZXMsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICByZXR1cm4gdHJhY2luZ19qc18xLnRyYWNpbmdDbGllbnQud2l0aFNwYW4oYCR7dGhpcy5jb25zdHJ1Y3Rvci5uYW1lfS5nZXRUb2tlbmAsIG9wdGlvbnMsIGFzeW5jIChuZXdPcHRpb25zKSA9PiB7XG4gICAgICAgICAgICBuZXdPcHRpb25zLnRlbmFudElkID0gKDAsIHRlbmFudElkVXRpbHNfanNfMS5wcm9jZXNzTXVsdGlUZW5hbnRSZXF1ZXN0KSh0aGlzLnRlbmFudElkLCBuZXdPcHRpb25zLCB0aGlzLmFkZGl0aW9uYWxseUFsbG93ZWRUZW5hbnRJZHMsIGxvZ2dlcik7XG4gICAgICAgICAgICBjb25zdCBhcnJheVNjb3BlcyA9ICgwLCBzY29wZVV0aWxzX2pzXzEuZW5zdXJlU2NvcGVzKShzY29wZXMpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubXNhbENsaWVudC5nZXRUb2tlbkJ5Q2xpZW50U2VjcmV0KGFycmF5U2NvcGVzLCB0aGlzLmNsaWVudFNlY3JldCwgbmV3T3B0aW9ucyk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydHMuQ2xpZW50U2VjcmV0Q3JlZGVudGlhbCA9IENsaWVudFNlY3JldENyZWRlbnRpYWw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jbGllbnRTZWNyZXRDcmVkZW50aWFsLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/clientSecretCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/defaultAzureCredential.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist/commonjs/credentials/defaultAzureCredential.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DefaultAzureCredential = exports.UnavailableDefaultCredential = void 0;\nconst chainedTokenCredential_js_1 = __webpack_require__(/*! ./chainedTokenCredential.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/chainedTokenCredential.js\");\nconst logging_js_1 = __webpack_require__(/*! ../util/logging.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/logging.js\");\nconst defaultAzureCredentialFunctions_js_1 = __webpack_require__(/*! ./defaultAzureCredentialFunctions.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/defaultAzureCredentialFunctions.js\");\nconst logger = (0, logging_js_1.credentialLogger)(\"DefaultAzureCredential\");\n/**\n * A no-op credential that logs the reason it was skipped if getToken is called.\n * @internal\n */\nclass UnavailableDefaultCredential {\n    credentialUnavailableErrorMessage;\n    credentialName;\n    constructor(credentialName, message) {\n        this.credentialName = credentialName;\n        this.credentialUnavailableErrorMessage = message;\n    }\n    getToken() {\n        logger.getToken.info(`Skipping ${this.credentialName}, reason: ${this.credentialUnavailableErrorMessage}`);\n        return Promise.resolve(null);\n    }\n}\nexports.UnavailableDefaultCredential = UnavailableDefaultCredential;\n/**\n * Provides a default {@link ChainedTokenCredential} configuration that works for most\n * applications that use Azure SDK client libraries. For more information, see\n * [DefaultAzureCredential overview](https://aka.ms/azsdk/js/identity/credential-chains#use-defaultazurecredential-for-flexibility).\n *\n * The following credential types will be tried, in order:\n *\n * - {@link EnvironmentCredential}\n * - {@link WorkloadIdentityCredential}\n * - {@link ManagedIdentityCredential}\n * - {@link VisualStudioCodeCredential}\n * - {@link AzureCliCredential}\n * - {@link AzurePowerShellCredential}\n * - {@link AzureDeveloperCliCredential}\n *\n * Consult the documentation of these credential types for more information\n * on how they attempt authentication.\n *\n * Selecting credentials\n *\n * Set environment variable AZURE_TOKEN_CREDENTIALS to select a subset of the credential chain.\n * DefaultAzureCredential will try only the specified credential(s), but its other behavior remains the same.\n * Valid values for AZURE_TOKEN_CREDENTIALS are the name of any single type in the above chain, for example\n * \"EnvironmentCredential\" or \"AzureCliCredential\", and these special values:\n *\n *   - \"dev\": try [VisualStudioCodeCredential], [AzureCliCredential], [AzurePowerShellCredential] and [AzureDeveloperCliCredential], in that order\n *   - \"prod\": try [EnvironmentCredential], [WorkloadIdentityCredential], and [ManagedIdentityCredential], in that order\n *\n */\nclass DefaultAzureCredential extends chainedTokenCredential_js_1.ChainedTokenCredential {\n    constructor(options) {\n        // If AZURE_TOKEN_CREDENTIALS is not set, use the default credential chain.\n        const azureTokenCredentials = process.env.AZURE_TOKEN_CREDENTIALS\n            ? process.env.AZURE_TOKEN_CREDENTIALS.trim().toLowerCase()\n            : undefined;\n        const devCredentialFunctions = [\n            defaultAzureCredentialFunctions_js_1.createDefaultVisualStudioCodeCredential,\n            defaultAzureCredentialFunctions_js_1.createDefaultAzureCliCredential,\n            defaultAzureCredentialFunctions_js_1.createDefaultAzurePowershellCredential,\n            defaultAzureCredentialFunctions_js_1.createDefaultAzureDeveloperCliCredential,\n            defaultAzureCredentialFunctions_js_1.createDefaultBrokerCredential,\n        ];\n        const prodCredentialFunctions = [\n            defaultAzureCredentialFunctions_js_1.createDefaultEnvironmentCredential,\n            defaultAzureCredentialFunctions_js_1.createDefaultWorkloadIdentityCredential,\n            defaultAzureCredentialFunctions_js_1.createDefaultManagedIdentityCredential,\n        ];\n        let credentialFunctions = [];\n        const validCredentialNames = \"EnvironmentCredential, WorkloadIdentityCredential, ManagedIdentityCredential, VisualStudioCodeCredential, AzureCliCredential, AzurePowerShellCredential, AzureDeveloperCliCredential\";\n        // If AZURE_TOKEN_CREDENTIALS is set, use it to determine which credentials to use.\n        // The value of AZURE_TOKEN_CREDENTIALS should be either \"dev\" or \"prod\" or any one of these credentials - {validCredentialNames}.\n        if (azureTokenCredentials) {\n            switch (azureTokenCredentials) {\n                case \"dev\":\n                    credentialFunctions = devCredentialFunctions;\n                    break;\n                case \"prod\":\n                    credentialFunctions = prodCredentialFunctions;\n                    break;\n                case \"environmentcredential\":\n                    credentialFunctions = [defaultAzureCredentialFunctions_js_1.createDefaultEnvironmentCredential];\n                    break;\n                case \"workloadidentitycredential\":\n                    credentialFunctions = [defaultAzureCredentialFunctions_js_1.createDefaultWorkloadIdentityCredential];\n                    break;\n                case \"managedidentitycredential\":\n                    credentialFunctions = [defaultAzureCredentialFunctions_js_1.createDefaultManagedIdentityCredential];\n                    break;\n                case \"visualstudiocodecredential\":\n                    credentialFunctions = [defaultAzureCredentialFunctions_js_1.createDefaultVisualStudioCodeCredential];\n                    break;\n                case \"azureclicredential\":\n                    credentialFunctions = [defaultAzureCredentialFunctions_js_1.createDefaultAzureCliCredential];\n                    break;\n                case \"azurepowershellcredential\":\n                    credentialFunctions = [defaultAzureCredentialFunctions_js_1.createDefaultAzurePowershellCredential];\n                    break;\n                case \"azuredeveloperclicredential\":\n                    credentialFunctions = [defaultAzureCredentialFunctions_js_1.createDefaultAzureDeveloperCliCredential];\n                    break;\n                default: {\n                    // If AZURE_TOKEN_CREDENTIALS is set to an unsupported value, throw an error.\n                    // This will prevent the creation of the DefaultAzureCredential.\n                    const errorMessage = `Invalid value for AZURE_TOKEN_CREDENTIALS = ${process.env.AZURE_TOKEN_CREDENTIALS}. Valid values are 'prod' or 'dev' or any of these credentials - ${validCredentialNames}.`;\n                    logger.warning(errorMessage);\n                    throw new Error(errorMessage);\n                }\n            }\n        }\n        else {\n            // If AZURE_TOKEN_CREDENTIALS is not set, use the default credential chain.\n            credentialFunctions = [...prodCredentialFunctions, ...devCredentialFunctions];\n        }\n        // Errors from individual credentials should not be thrown in the DefaultAzureCredential constructor, instead throwing on getToken() which is handled by ChainedTokenCredential.\n        // When adding new credentials to the default chain, consider:\n        // 1. Making the constructor parameters required and explicit\n        // 2. Validating any required parameters in the factory function\n        // 3. Returning a UnavailableDefaultCredential from the factory function if a credential is unavailable for any reason\n        const credentials = credentialFunctions.map((createCredentialFn) => {\n            try {\n                return createCredentialFn(options);\n            }\n            catch (err) {\n                logger.warning(`Skipped ${createCredentialFn.name} because of an error creating the credential: ${err}`);\n                return new UnavailableDefaultCredential(createCredentialFn.name, err.message);\n            }\n        });\n        super(...credentials);\n    }\n}\nexports.DefaultAzureCredential = DefaultAzureCredential;\n//# sourceMappingURL=defaultAzureCredential.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/defaultAzureCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/defaultAzureCredentialFunctions.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist/commonjs/credentials/defaultAzureCredentialFunctions.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createDefaultBrokerCredential = createDefaultBrokerCredential;\nexports.createDefaultVisualStudioCodeCredential = createDefaultVisualStudioCodeCredential;\nexports.createDefaultManagedIdentityCredential = createDefaultManagedIdentityCredential;\nexports.createDefaultWorkloadIdentityCredential = createDefaultWorkloadIdentityCredential;\nexports.createDefaultAzureDeveloperCliCredential = createDefaultAzureDeveloperCliCredential;\nexports.createDefaultAzureCliCredential = createDefaultAzureCliCredential;\nexports.createDefaultAzurePowershellCredential = createDefaultAzurePowershellCredential;\nexports.createDefaultEnvironmentCredential = createDefaultEnvironmentCredential;\nconst environmentCredential_js_1 = __webpack_require__(/*! ./environmentCredential.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/environmentCredential.js\");\nconst index_js_1 = __webpack_require__(/*! ./managedIdentityCredential/index.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/managedIdentityCredential/index.js\");\nconst workloadIdentityCredential_js_1 = __webpack_require__(/*! ./workloadIdentityCredential.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/workloadIdentityCredential.js\");\nconst azureDeveloperCliCredential_js_1 = __webpack_require__(/*! ./azureDeveloperCliCredential.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/azureDeveloperCliCredential.js\");\nconst azureCliCredential_js_1 = __webpack_require__(/*! ./azureCliCredential.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/azureCliCredential.js\");\nconst azurePowerShellCredential_js_1 = __webpack_require__(/*! ./azurePowerShellCredential.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/azurePowerShellCredential.js\");\nconst visualStudioCodeCredential_js_1 = __webpack_require__(/*! ./visualStudioCodeCredential.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/visualStudioCodeCredential.js\");\nconst brokerCredential_js_1 = __webpack_require__(/*! ./brokerCredential.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/brokerCredential.js\");\n/**\n * Creates a {@link BrokerCredential} instance with the provided options.\n * This credential uses the Windows Authentication Manager (WAM) broker for authentication.\n * It will only attempt to authenticate silently using the default broker account\n *\n * @param options - Options for configuring the credential.\n *\n * @internal\n */\nfunction createDefaultBrokerCredential(options = {}) {\n    return new brokerCredential_js_1.BrokerCredential(options);\n}\n/**\n * Creates a {@link VisualStudioCodeCredential} from the provided options.\n * @param options - Options to configure the credential.\n *\n * @internal\n */\nfunction createDefaultVisualStudioCodeCredential(options = {}) {\n    return new visualStudioCodeCredential_js_1.VisualStudioCodeCredential(options);\n}\n/**\n * Creates a {@link ManagedIdentityCredential} from the provided options.\n * @param options - Options to configure the credential.\n *\n * @internal\n */\nfunction createDefaultManagedIdentityCredential(options = {}) {\n    options.retryOptions ??= {\n        maxRetries: 5,\n        retryDelayInMs: 800,\n    };\n    const managedIdentityClientId = options?.managedIdentityClientId ??\n        process.env.AZURE_CLIENT_ID;\n    const workloadIdentityClientId = options?.workloadIdentityClientId ??\n        managedIdentityClientId;\n    const managedResourceId = options\n        ?.managedIdentityResourceId;\n    const workloadFile = process.env.AZURE_FEDERATED_TOKEN_FILE;\n    const tenantId = options?.tenantId ?? process.env.AZURE_TENANT_ID;\n    if (managedResourceId) {\n        const managedIdentityResourceIdOptions = {\n            ...options,\n            resourceId: managedResourceId,\n        };\n        return new index_js_1.ManagedIdentityCredential(managedIdentityResourceIdOptions);\n    }\n    if (workloadFile && workloadIdentityClientId) {\n        const workloadIdentityCredentialOptions = {\n            ...options,\n            tenantId: tenantId,\n        };\n        return new index_js_1.ManagedIdentityCredential(workloadIdentityClientId, workloadIdentityCredentialOptions);\n    }\n    if (managedIdentityClientId) {\n        const managedIdentityClientOptions = {\n            ...options,\n            clientId: managedIdentityClientId,\n        };\n        return new index_js_1.ManagedIdentityCredential(managedIdentityClientOptions);\n    }\n    // We may be able to return a UnavailableCredential here, but that may be a breaking change\n    return new index_js_1.ManagedIdentityCredential(options);\n}\n/**\n * Creates a {@link WorkloadIdentityCredential} from the provided options.\n * @param options - Options to configure the credential.\n *\n * @internal\n */\nfunction createDefaultWorkloadIdentityCredential(options) {\n    const managedIdentityClientId = options?.managedIdentityClientId ??\n        process.env.AZURE_CLIENT_ID;\n    const workloadIdentityClientId = options?.workloadIdentityClientId ??\n        managedIdentityClientId;\n    const workloadFile = process.env.AZURE_FEDERATED_TOKEN_FILE;\n    const tenantId = options?.tenantId ?? process.env.AZURE_TENANT_ID;\n    if (workloadFile && workloadIdentityClientId) {\n        const workloadIdentityCredentialOptions = {\n            ...options,\n            tenantId,\n            clientId: workloadIdentityClientId,\n            tokenFilePath: workloadFile,\n        };\n        return new workloadIdentityCredential_js_1.WorkloadIdentityCredential(workloadIdentityCredentialOptions);\n    }\n    if (tenantId) {\n        const workloadIdentityClientTenantOptions = {\n            ...options,\n            tenantId,\n        };\n        return new workloadIdentityCredential_js_1.WorkloadIdentityCredential(workloadIdentityClientTenantOptions);\n    }\n    // We may be able to return a UnavailableCredential here, but that may be a breaking change\n    return new workloadIdentityCredential_js_1.WorkloadIdentityCredential(options);\n}\n/**\n * Creates a {@link AzureDeveloperCliCredential} from the provided options.\n * @param options - Options to configure the credential.\n *\n * @internal\n */\nfunction createDefaultAzureDeveloperCliCredential(options = {}) {\n    return new azureDeveloperCliCredential_js_1.AzureDeveloperCliCredential(options);\n}\n/**\n * Creates a {@link AzureCliCredential} from the provided options.\n * @param options - Options to configure the credential.\n *\n * @internal\n */\nfunction createDefaultAzureCliCredential(options = {}) {\n    return new azureCliCredential_js_1.AzureCliCredential(options);\n}\n/**\n * Creates a {@link AzurePowerShellCredential} from the provided options.\n * @param options - Options to configure the credential.\n *\n * @internal\n */\nfunction createDefaultAzurePowershellCredential(options = {}) {\n    return new azurePowerShellCredential_js_1.AzurePowerShellCredential(options);\n}\n/**\n * Creates an {@link EnvironmentCredential} from the provided options.\n * @param options - Options to configure the credential.\n *\n * @internal\n */\nfunction createDefaultEnvironmentCredential(options = {}) {\n    return new environmentCredential_js_1.EnvironmentCredential(options);\n}\n//# sourceMappingURL=defaultAzureCredentialFunctions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QvY29tbW9uanMvY3JlZGVudGlhbHMvZGVmYXVsdEF6dXJlQ3JlZGVudGlhbEZ1bmN0aW9ucy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QscUNBQXFDO0FBQ3JDLCtDQUErQztBQUMvQyw4Q0FBOEM7QUFDOUMsK0NBQStDO0FBQy9DLGdEQUFnRDtBQUNoRCx1Q0FBdUM7QUFDdkMsOENBQThDO0FBQzlDLDBDQUEwQztBQUMxQyxtQ0FBbUMsbUJBQU8sQ0FBQywySEFBNEI7QUFDdkUsbUJBQW1CLG1CQUFPLENBQUMsK0lBQXNDO0FBQ2pFLHdDQUF3QyxtQkFBTyxDQUFDLHFJQUFpQztBQUNqRix5Q0FBeUMsbUJBQU8sQ0FBQyx1SUFBa0M7QUFDbkYsZ0NBQWdDLG1CQUFPLENBQUMscUhBQXlCO0FBQ2pFLHVDQUF1QyxtQkFBTyxDQUFDLG1JQUFnQztBQUMvRSx3Q0FBd0MsbUJBQU8sQ0FBQyxxSUFBaUM7QUFDakYsOEJBQThCLG1CQUFPLENBQUMsaUhBQXVCO0FBQzdEO0FBQ0EsY0FBYyx3QkFBd0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQ7QUFDbkQ7QUFDQTtBQUNBO0FBQ0EsY0FBYyxrQ0FBa0M7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2REFBNkQ7QUFDN0Q7QUFDQTtBQUNBO0FBQ0EsY0FBYyxpQ0FBaUM7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0REFBNEQ7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLGtDQUFrQztBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsbUNBQW1DO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOERBQThEO0FBQzlEO0FBQ0E7QUFDQTtBQUNBLGNBQWMsMEJBQTBCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQXFEO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBLGNBQWMsaUNBQWlDO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNERBQTREO0FBQzVEO0FBQ0E7QUFDQTtBQUNBLGVBQWUsNkJBQTZCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0RBQXdEO0FBQ3hEO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QvY29tbW9uanMvY3JlZGVudGlhbHMvZGVmYXVsdEF6dXJlQ3JlZGVudGlhbEZ1bmN0aW9ucy5qcz8xM2Q2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNyZWF0ZURlZmF1bHRCcm9rZXJDcmVkZW50aWFsID0gY3JlYXRlRGVmYXVsdEJyb2tlckNyZWRlbnRpYWw7XG5leHBvcnRzLmNyZWF0ZURlZmF1bHRWaXN1YWxTdHVkaW9Db2RlQ3JlZGVudGlhbCA9IGNyZWF0ZURlZmF1bHRWaXN1YWxTdHVkaW9Db2RlQ3JlZGVudGlhbDtcbmV4cG9ydHMuY3JlYXRlRGVmYXVsdE1hbmFnZWRJZGVudGl0eUNyZWRlbnRpYWwgPSBjcmVhdGVEZWZhdWx0TWFuYWdlZElkZW50aXR5Q3JlZGVudGlhbDtcbmV4cG9ydHMuY3JlYXRlRGVmYXVsdFdvcmtsb2FkSWRlbnRpdHlDcmVkZW50aWFsID0gY3JlYXRlRGVmYXVsdFdvcmtsb2FkSWRlbnRpdHlDcmVkZW50aWFsO1xuZXhwb3J0cy5jcmVhdGVEZWZhdWx0QXp1cmVEZXZlbG9wZXJDbGlDcmVkZW50aWFsID0gY3JlYXRlRGVmYXVsdEF6dXJlRGV2ZWxvcGVyQ2xpQ3JlZGVudGlhbDtcbmV4cG9ydHMuY3JlYXRlRGVmYXVsdEF6dXJlQ2xpQ3JlZGVudGlhbCA9IGNyZWF0ZURlZmF1bHRBenVyZUNsaUNyZWRlbnRpYWw7XG5leHBvcnRzLmNyZWF0ZURlZmF1bHRBenVyZVBvd2Vyc2hlbGxDcmVkZW50aWFsID0gY3JlYXRlRGVmYXVsdEF6dXJlUG93ZXJzaGVsbENyZWRlbnRpYWw7XG5leHBvcnRzLmNyZWF0ZURlZmF1bHRFbnZpcm9ubWVudENyZWRlbnRpYWwgPSBjcmVhdGVEZWZhdWx0RW52aXJvbm1lbnRDcmVkZW50aWFsO1xuY29uc3QgZW52aXJvbm1lbnRDcmVkZW50aWFsX2pzXzEgPSByZXF1aXJlKFwiLi9lbnZpcm9ubWVudENyZWRlbnRpYWwuanNcIik7XG5jb25zdCBpbmRleF9qc18xID0gcmVxdWlyZShcIi4vbWFuYWdlZElkZW50aXR5Q3JlZGVudGlhbC9pbmRleC5qc1wiKTtcbmNvbnN0IHdvcmtsb2FkSWRlbnRpdHlDcmVkZW50aWFsX2pzXzEgPSByZXF1aXJlKFwiLi93b3JrbG9hZElkZW50aXR5Q3JlZGVudGlhbC5qc1wiKTtcbmNvbnN0IGF6dXJlRGV2ZWxvcGVyQ2xpQ3JlZGVudGlhbF9qc18xID0gcmVxdWlyZShcIi4vYXp1cmVEZXZlbG9wZXJDbGlDcmVkZW50aWFsLmpzXCIpO1xuY29uc3QgYXp1cmVDbGlDcmVkZW50aWFsX2pzXzEgPSByZXF1aXJlKFwiLi9henVyZUNsaUNyZWRlbnRpYWwuanNcIik7XG5jb25zdCBhenVyZVBvd2VyU2hlbGxDcmVkZW50aWFsX2pzXzEgPSByZXF1aXJlKFwiLi9henVyZVBvd2VyU2hlbGxDcmVkZW50aWFsLmpzXCIpO1xuY29uc3QgdmlzdWFsU3R1ZGlvQ29kZUNyZWRlbnRpYWxfanNfMSA9IHJlcXVpcmUoXCIuL3Zpc3VhbFN0dWRpb0NvZGVDcmVkZW50aWFsLmpzXCIpO1xuY29uc3QgYnJva2VyQ3JlZGVudGlhbF9qc18xID0gcmVxdWlyZShcIi4vYnJva2VyQ3JlZGVudGlhbC5qc1wiKTtcbi8qKlxuICogQ3JlYXRlcyBhIHtAbGluayBCcm9rZXJDcmVkZW50aWFsfSBpbnN0YW5jZSB3aXRoIHRoZSBwcm92aWRlZCBvcHRpb25zLlxuICogVGhpcyBjcmVkZW50aWFsIHVzZXMgdGhlIFdpbmRvd3MgQXV0aGVudGljYXRpb24gTWFuYWdlciAoV0FNKSBicm9rZXIgZm9yIGF1dGhlbnRpY2F0aW9uLlxuICogSXQgd2lsbCBvbmx5IGF0dGVtcHQgdG8gYXV0aGVudGljYXRlIHNpbGVudGx5IHVzaW5nIHRoZSBkZWZhdWx0IGJyb2tlciBhY2NvdW50XG4gKlxuICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIGZvciBjb25maWd1cmluZyB0aGUgY3JlZGVudGlhbC5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRGVmYXVsdEJyb2tlckNyZWRlbnRpYWwob3B0aW9ucyA9IHt9KSB7XG4gICAgcmV0dXJuIG5ldyBicm9rZXJDcmVkZW50aWFsX2pzXzEuQnJva2VyQ3JlZGVudGlhbChvcHRpb25zKTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIHtAbGluayBWaXN1YWxTdHVkaW9Db2RlQ3JlZGVudGlhbH0gZnJvbSB0aGUgcHJvdmlkZWQgb3B0aW9ucy5cbiAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyB0byBjb25maWd1cmUgdGhlIGNyZWRlbnRpYWwuXG4gKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZURlZmF1bHRWaXN1YWxTdHVkaW9Db2RlQ3JlZGVudGlhbChvcHRpb25zID0ge30pIHtcbiAgICByZXR1cm4gbmV3IHZpc3VhbFN0dWRpb0NvZGVDcmVkZW50aWFsX2pzXzEuVmlzdWFsU3R1ZGlvQ29kZUNyZWRlbnRpYWwob3B0aW9ucyk7XG59XG4vKipcbiAqIENyZWF0ZXMgYSB7QGxpbmsgTWFuYWdlZElkZW50aXR5Q3JlZGVudGlhbH0gZnJvbSB0aGUgcHJvdmlkZWQgb3B0aW9ucy5cbiAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyB0byBjb25maWd1cmUgdGhlIGNyZWRlbnRpYWwuXG4gKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZURlZmF1bHRNYW5hZ2VkSWRlbnRpdHlDcmVkZW50aWFsKG9wdGlvbnMgPSB7fSkge1xuICAgIG9wdGlvbnMucmV0cnlPcHRpb25zID8/PSB7XG4gICAgICAgIG1heFJldHJpZXM6IDUsXG4gICAgICAgIHJldHJ5RGVsYXlJbk1zOiA4MDAsXG4gICAgfTtcbiAgICBjb25zdCBtYW5hZ2VkSWRlbnRpdHlDbGllbnRJZCA9IG9wdGlvbnM/Lm1hbmFnZWRJZGVudGl0eUNsaWVudElkID8/XG4gICAgICAgIHByb2Nlc3MuZW52LkFaVVJFX0NMSUVOVF9JRDtcbiAgICBjb25zdCB3b3JrbG9hZElkZW50aXR5Q2xpZW50SWQgPSBvcHRpb25zPy53b3JrbG9hZElkZW50aXR5Q2xpZW50SWQgPz9cbiAgICAgICAgbWFuYWdlZElkZW50aXR5Q2xpZW50SWQ7XG4gICAgY29uc3QgbWFuYWdlZFJlc291cmNlSWQgPSBvcHRpb25zXG4gICAgICAgID8ubWFuYWdlZElkZW50aXR5UmVzb3VyY2VJZDtcbiAgICBjb25zdCB3b3JrbG9hZEZpbGUgPSBwcm9jZXNzLmVudi5BWlVSRV9GRURFUkFURURfVE9LRU5fRklMRTtcbiAgICBjb25zdCB0ZW5hbnRJZCA9IG9wdGlvbnM/LnRlbmFudElkID8/IHByb2Nlc3MuZW52LkFaVVJFX1RFTkFOVF9JRDtcbiAgICBpZiAobWFuYWdlZFJlc291cmNlSWQpIHtcbiAgICAgICAgY29uc3QgbWFuYWdlZElkZW50aXR5UmVzb3VyY2VJZE9wdGlvbnMgPSB7XG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgcmVzb3VyY2VJZDogbWFuYWdlZFJlc291cmNlSWQsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBuZXcgaW5kZXhfanNfMS5NYW5hZ2VkSWRlbnRpdHlDcmVkZW50aWFsKG1hbmFnZWRJZGVudGl0eVJlc291cmNlSWRPcHRpb25zKTtcbiAgICB9XG4gICAgaWYgKHdvcmtsb2FkRmlsZSAmJiB3b3JrbG9hZElkZW50aXR5Q2xpZW50SWQpIHtcbiAgICAgICAgY29uc3Qgd29ya2xvYWRJZGVudGl0eUNyZWRlbnRpYWxPcHRpb25zID0ge1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIHRlbmFudElkOiB0ZW5hbnRJZCxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIG5ldyBpbmRleF9qc18xLk1hbmFnZWRJZGVudGl0eUNyZWRlbnRpYWwod29ya2xvYWRJZGVudGl0eUNsaWVudElkLCB3b3JrbG9hZElkZW50aXR5Q3JlZGVudGlhbE9wdGlvbnMpO1xuICAgIH1cbiAgICBpZiAobWFuYWdlZElkZW50aXR5Q2xpZW50SWQpIHtcbiAgICAgICAgY29uc3QgbWFuYWdlZElkZW50aXR5Q2xpZW50T3B0aW9ucyA9IHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBjbGllbnRJZDogbWFuYWdlZElkZW50aXR5Q2xpZW50SWQsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBuZXcgaW5kZXhfanNfMS5NYW5hZ2VkSWRlbnRpdHlDcmVkZW50aWFsKG1hbmFnZWRJZGVudGl0eUNsaWVudE9wdGlvbnMpO1xuICAgIH1cbiAgICAvLyBXZSBtYXkgYmUgYWJsZSB0byByZXR1cm4gYSBVbmF2YWlsYWJsZUNyZWRlbnRpYWwgaGVyZSwgYnV0IHRoYXQgbWF5IGJlIGEgYnJlYWtpbmcgY2hhbmdlXG4gICAgcmV0dXJuIG5ldyBpbmRleF9qc18xLk1hbmFnZWRJZGVudGl0eUNyZWRlbnRpYWwob3B0aW9ucyk7XG59XG4vKipcbiAqIENyZWF0ZXMgYSB7QGxpbmsgV29ya2xvYWRJZGVudGl0eUNyZWRlbnRpYWx9IGZyb20gdGhlIHByb3ZpZGVkIG9wdGlvbnMuXG4gKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgdG8gY29uZmlndXJlIHRoZSBjcmVkZW50aWFsLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBjcmVhdGVEZWZhdWx0V29ya2xvYWRJZGVudGl0eUNyZWRlbnRpYWwob3B0aW9ucykge1xuICAgIGNvbnN0IG1hbmFnZWRJZGVudGl0eUNsaWVudElkID0gb3B0aW9ucz8ubWFuYWdlZElkZW50aXR5Q2xpZW50SWQgPz9cbiAgICAgICAgcHJvY2Vzcy5lbnYuQVpVUkVfQ0xJRU5UX0lEO1xuICAgIGNvbnN0IHdvcmtsb2FkSWRlbnRpdHlDbGllbnRJZCA9IG9wdGlvbnM/Lndvcmtsb2FkSWRlbnRpdHlDbGllbnRJZCA/P1xuICAgICAgICBtYW5hZ2VkSWRlbnRpdHlDbGllbnRJZDtcbiAgICBjb25zdCB3b3JrbG9hZEZpbGUgPSBwcm9jZXNzLmVudi5BWlVSRV9GRURFUkFURURfVE9LRU5fRklMRTtcbiAgICBjb25zdCB0ZW5hbnRJZCA9IG9wdGlvbnM/LnRlbmFudElkID8/IHByb2Nlc3MuZW52LkFaVVJFX1RFTkFOVF9JRDtcbiAgICBpZiAod29ya2xvYWRGaWxlICYmIHdvcmtsb2FkSWRlbnRpdHlDbGllbnRJZCkge1xuICAgICAgICBjb25zdCB3b3JrbG9hZElkZW50aXR5Q3JlZGVudGlhbE9wdGlvbnMgPSB7XG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgdGVuYW50SWQsXG4gICAgICAgICAgICBjbGllbnRJZDogd29ya2xvYWRJZGVudGl0eUNsaWVudElkLFxuICAgICAgICAgICAgdG9rZW5GaWxlUGF0aDogd29ya2xvYWRGaWxlLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gbmV3IHdvcmtsb2FkSWRlbnRpdHlDcmVkZW50aWFsX2pzXzEuV29ya2xvYWRJZGVudGl0eUNyZWRlbnRpYWwod29ya2xvYWRJZGVudGl0eUNyZWRlbnRpYWxPcHRpb25zKTtcbiAgICB9XG4gICAgaWYgKHRlbmFudElkKSB7XG4gICAgICAgIGNvbnN0IHdvcmtsb2FkSWRlbnRpdHlDbGllbnRUZW5hbnRPcHRpb25zID0ge1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIHRlbmFudElkLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gbmV3IHdvcmtsb2FkSWRlbnRpdHlDcmVkZW50aWFsX2pzXzEuV29ya2xvYWRJZGVudGl0eUNyZWRlbnRpYWwod29ya2xvYWRJZGVudGl0eUNsaWVudFRlbmFudE9wdGlvbnMpO1xuICAgIH1cbiAgICAvLyBXZSBtYXkgYmUgYWJsZSB0byByZXR1cm4gYSBVbmF2YWlsYWJsZUNyZWRlbnRpYWwgaGVyZSwgYnV0IHRoYXQgbWF5IGJlIGEgYnJlYWtpbmcgY2hhbmdlXG4gICAgcmV0dXJuIG5ldyB3b3JrbG9hZElkZW50aXR5Q3JlZGVudGlhbF9qc18xLldvcmtsb2FkSWRlbnRpdHlDcmVkZW50aWFsKG9wdGlvbnMpO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEge0BsaW5rIEF6dXJlRGV2ZWxvcGVyQ2xpQ3JlZGVudGlhbH0gZnJvbSB0aGUgcHJvdmlkZWQgb3B0aW9ucy5cbiAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyB0byBjb25maWd1cmUgdGhlIGNyZWRlbnRpYWwuXG4gKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZURlZmF1bHRBenVyZURldmVsb3BlckNsaUNyZWRlbnRpYWwob3B0aW9ucyA9IHt9KSB7XG4gICAgcmV0dXJuIG5ldyBhenVyZURldmVsb3BlckNsaUNyZWRlbnRpYWxfanNfMS5BenVyZURldmVsb3BlckNsaUNyZWRlbnRpYWwob3B0aW9ucyk7XG59XG4vKipcbiAqIENyZWF0ZXMgYSB7QGxpbmsgQXp1cmVDbGlDcmVkZW50aWFsfSBmcm9tIHRoZSBwcm92aWRlZCBvcHRpb25zLlxuICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIHRvIGNvbmZpZ3VyZSB0aGUgY3JlZGVudGlhbC5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRGVmYXVsdEF6dXJlQ2xpQ3JlZGVudGlhbChvcHRpb25zID0ge30pIHtcbiAgICByZXR1cm4gbmV3IGF6dXJlQ2xpQ3JlZGVudGlhbF9qc18xLkF6dXJlQ2xpQ3JlZGVudGlhbChvcHRpb25zKTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIHtAbGluayBBenVyZVBvd2VyU2hlbGxDcmVkZW50aWFsfSBmcm9tIHRoZSBwcm92aWRlZCBvcHRpb25zLlxuICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIHRvIGNvbmZpZ3VyZSB0aGUgY3JlZGVudGlhbC5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRGVmYXVsdEF6dXJlUG93ZXJzaGVsbENyZWRlbnRpYWwob3B0aW9ucyA9IHt9KSB7XG4gICAgcmV0dXJuIG5ldyBhenVyZVBvd2VyU2hlbGxDcmVkZW50aWFsX2pzXzEuQXp1cmVQb3dlclNoZWxsQ3JlZGVudGlhbChvcHRpb25zKTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhbiB7QGxpbmsgRW52aXJvbm1lbnRDcmVkZW50aWFsfSBmcm9tIHRoZSBwcm92aWRlZCBvcHRpb25zLlxuICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIHRvIGNvbmZpZ3VyZSB0aGUgY3JlZGVudGlhbC5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRGVmYXVsdEVudmlyb25tZW50Q3JlZGVudGlhbChvcHRpb25zID0ge30pIHtcbiAgICByZXR1cm4gbmV3IGVudmlyb25tZW50Q3JlZGVudGlhbF9qc18xLkVudmlyb25tZW50Q3JlZGVudGlhbChvcHRpb25zKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlZmF1bHRBenVyZUNyZWRlbnRpYWxGdW5jdGlvbnMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/defaultAzureCredentialFunctions.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/deviceCodeCredential.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist/commonjs/credentials/deviceCodeCredential.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DeviceCodeCredential = void 0;\nexports.defaultDeviceCodePromptCallback = defaultDeviceCodePromptCallback;\nconst tenantIdUtils_js_1 = __webpack_require__(/*! ../util/tenantIdUtils.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/tenantIdUtils.js\");\nconst logging_js_1 = __webpack_require__(/*! ../util/logging.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/logging.js\");\nconst scopeUtils_js_1 = __webpack_require__(/*! ../util/scopeUtils.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/scopeUtils.js\");\nconst tracing_js_1 = __webpack_require__(/*! ../util/tracing.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/tracing.js\");\nconst msalClient_js_1 = __webpack_require__(/*! ../msal/nodeFlows/msalClient.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/msal/nodeFlows/msalClient.js\");\nconst constants_js_1 = __webpack_require__(/*! ../constants.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/constants.js\");\nconst logger = (0, logging_js_1.credentialLogger)(\"DeviceCodeCredential\");\n/**\n * Method that logs the user code from the DeviceCodeCredential.\n * @param deviceCodeInfo - The device code.\n */\nfunction defaultDeviceCodePromptCallback(deviceCodeInfo) {\n    console.log(deviceCodeInfo.message);\n}\n/**\n * Enables authentication to Microsoft Entra ID using a device code\n * that the user can enter into https://microsoft.com/devicelogin.\n */\nclass DeviceCodeCredential {\n    tenantId;\n    additionallyAllowedTenantIds;\n    disableAutomaticAuthentication;\n    msalClient;\n    userPromptCallback;\n    /**\n     * Creates an instance of DeviceCodeCredential with the details needed\n     * to initiate the device code authorization flow with Microsoft Entra ID.\n     *\n     * A message will be logged, giving users a code that they can use to authenticate once they go to https://microsoft.com/devicelogin\n     *\n     * Developers can configure how this message is shown by passing a custom `userPromptCallback`:\n     *\n     * ```ts snippet:device_code_credential_example\n     * import { DeviceCodeCredential } from \"@azure/identity\";\n     *\n     * const credential = new DeviceCodeCredential({\n     *   tenantId: process.env.AZURE_TENANT_ID,\n     *   clientId: process.env.AZURE_CLIENT_ID,\n     *   userPromptCallback: (info) => {\n     *     console.log(\"CUSTOMIZED PROMPT CALLBACK\", info.message);\n     *   },\n     * });\n     * ```\n     *\n     * @param options - Options for configuring the client which makes the authentication requests.\n     */\n    constructor(options) {\n        this.tenantId = options?.tenantId;\n        this.additionallyAllowedTenantIds = (0, tenantIdUtils_js_1.resolveAdditionallyAllowedTenantIds)(options?.additionallyAllowedTenants);\n        const clientId = options?.clientId ?? constants_js_1.DeveloperSignOnClientId;\n        const tenantId = (0, tenantIdUtils_js_1.resolveTenantId)(logger, options?.tenantId, clientId);\n        this.userPromptCallback = options?.userPromptCallback ?? defaultDeviceCodePromptCallback;\n        this.msalClient = (0, msalClient_js_1.createMsalClient)(clientId, tenantId, {\n            ...options,\n            logger,\n            tokenCredentialOptions: options || {},\n        });\n        this.disableAutomaticAuthentication = options?.disableAutomaticAuthentication;\n    }\n    /**\n     * Authenticates with Microsoft Entra ID and returns an access token if successful.\n     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n     *\n     * If the user provided the option `disableAutomaticAuthentication`,\n     * once the token can't be retrieved silently,\n     * this method won't attempt to request user interaction to retrieve the token.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this\n     *                TokenCredential implementation might make.\n     */\n    async getToken(scopes, options = {}) {\n        return tracing_js_1.tracingClient.withSpan(`${this.constructor.name}.getToken`, options, async (newOptions) => {\n            newOptions.tenantId = (0, tenantIdUtils_js_1.processMultiTenantRequest)(this.tenantId, newOptions, this.additionallyAllowedTenantIds, logger);\n            const arrayScopes = (0, scopeUtils_js_1.ensureScopes)(scopes);\n            return this.msalClient.getTokenByDeviceCode(arrayScopes, this.userPromptCallback, {\n                ...newOptions,\n                disableAutomaticAuthentication: this.disableAutomaticAuthentication,\n            });\n        });\n    }\n    /**\n     * Authenticates with Microsoft Entra ID and returns an access token if successful.\n     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n     *\n     * If the token can't be retrieved silently, this method will always generate a challenge for the user.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this\n     *                  TokenCredential implementation might make.\n     */\n    async authenticate(scopes, options = {}) {\n        return tracing_js_1.tracingClient.withSpan(`${this.constructor.name}.authenticate`, options, async (newOptions) => {\n            const arrayScopes = Array.isArray(scopes) ? scopes : [scopes];\n            await this.msalClient.getTokenByDeviceCode(arrayScopes, this.userPromptCallback, {\n                ...newOptions,\n                disableAutomaticAuthentication: false, // this method should always allow user interaction\n            });\n            return this.msalClient.getActiveAccount();\n        });\n    }\n}\nexports.DeviceCodeCredential = DeviceCodeCredential;\n//# sourceMappingURL=deviceCodeCredential.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/deviceCodeCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/environmentCredential.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist/commonjs/credentials/environmentCredential.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.EnvironmentCredential = exports.AllSupportedEnvironmentVariables = void 0;\nexports.getSendCertificateChain = getSendCertificateChain;\nconst errors_js_1 = __webpack_require__(/*! ../errors.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/errors.js\");\nconst logging_js_1 = __webpack_require__(/*! ../util/logging.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/logging.js\");\nconst clientCertificateCredential_js_1 = __webpack_require__(/*! ./clientCertificateCredential.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/clientCertificateCredential.js\");\nconst clientSecretCredential_js_1 = __webpack_require__(/*! ./clientSecretCredential.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/clientSecretCredential.js\");\nconst usernamePasswordCredential_js_1 = __webpack_require__(/*! ./usernamePasswordCredential.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/usernamePasswordCredential.js\");\nconst tenantIdUtils_js_1 = __webpack_require__(/*! ../util/tenantIdUtils.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/tenantIdUtils.js\");\nconst tracing_js_1 = __webpack_require__(/*! ../util/tracing.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/tracing.js\");\n/**\n * Contains the list of all supported environment variable names so that an\n * appropriate error message can be generated when no credentials can be\n * configured.\n *\n * @internal\n */\nexports.AllSupportedEnvironmentVariables = [\n    \"AZURE_TENANT_ID\",\n    \"AZURE_CLIENT_ID\",\n    \"AZURE_CLIENT_SECRET\",\n    \"AZURE_CLIENT_CERTIFICATE_PATH\",\n    \"AZURE_CLIENT_CERTIFICATE_PASSWORD\",\n    \"AZURE_USERNAME\",\n    \"AZURE_PASSWORD\",\n    \"AZURE_ADDITIONALLY_ALLOWED_TENANTS\",\n    \"AZURE_CLIENT_SEND_CERTIFICATE_CHAIN\",\n];\nfunction getAdditionallyAllowedTenants() {\n    const additionallyAllowedValues = process.env.AZURE_ADDITIONALLY_ALLOWED_TENANTS ?? \"\";\n    return additionallyAllowedValues.split(\";\");\n}\nconst credentialName = \"EnvironmentCredential\";\nconst logger = (0, logging_js_1.credentialLogger)(credentialName);\nfunction getSendCertificateChain() {\n    const sendCertificateChain = (process.env.AZURE_CLIENT_SEND_CERTIFICATE_CHAIN ?? \"\").toLowerCase();\n    const result = sendCertificateChain === \"true\" || sendCertificateChain === \"1\";\n    logger.verbose(`AZURE_CLIENT_SEND_CERTIFICATE_CHAIN: ${process.env.AZURE_CLIENT_SEND_CERTIFICATE_CHAIN}; sendCertificateChain: ${result}`);\n    return result;\n}\n/**\n * Enables authentication to Microsoft Entra ID using a client secret or certificate.\n */\nclass EnvironmentCredential {\n    _credential = undefined;\n    /**\n     * Creates an instance of the EnvironmentCredential class and decides what credential to use depending on the available environment variables.\n     *\n     * Required environment variables:\n     * - `AZURE_TENANT_ID`: The Microsoft Entra tenant (directory) ID.\n     * - `AZURE_CLIENT_ID`: The client (application) ID of an App Registration in the tenant.\n     *\n     * If setting the AZURE_TENANT_ID, then you can also set the additionally allowed tenants\n     * - `AZURE_ADDITIONALLY_ALLOWED_TENANTS`: For multi-tenant applications, specifies additional tenants for which the credential may acquire tokens with a single semicolon delimited string. Use * to allow all tenants.\n     *\n     * Environment variables used for client credential authentication:\n     * - `AZURE_CLIENT_SECRET`: A client secret that was generated for the App Registration.\n     * - `AZURE_CLIENT_CERTIFICATE_PATH`: The path to a PEM certificate to use during the authentication, instead of the client secret.\n     * - `AZURE_CLIENT_CERTIFICATE_PASSWORD`: (optional) password for the certificate file.\n     * - `AZURE_CLIENT_SEND_CERTIFICATE_CHAIN`: (optional) indicates that the certificate chain should be set in x5c header to support subject name / issuer based authentication.\n     *\n     * Username and password authentication is deprecated, since it doesn't support multifactor authentication (MFA). See https://aka.ms/azsdk/identity/mfa for more details. Users can still provide environment variables for this authentication method:\n     * - `AZURE_USERNAME`: Username to authenticate with.\n     * - `AZURE_PASSWORD`: Password to authenticate with.\n     *\n     * If the environment variables required to perform the authentication are missing, a {@link CredentialUnavailableError} will be thrown.\n     * If the authentication fails, or if there's an unknown error, an {@link AuthenticationError} will be thrown.\n     *\n     * @param options - Options for configuring the client which makes the authentication request.\n     */\n    constructor(options) {\n        // Keep track of any missing environment variables for error details\n        const assigned = (0, logging_js_1.processEnvVars)(exports.AllSupportedEnvironmentVariables).assigned.join(\", \");\n        logger.info(`Found the following environment variables: ${assigned}`);\n        const tenantId = process.env.AZURE_TENANT_ID, clientId = process.env.AZURE_CLIENT_ID, clientSecret = process.env.AZURE_CLIENT_SECRET;\n        const additionallyAllowedTenantIds = getAdditionallyAllowedTenants();\n        const sendCertificateChain = getSendCertificateChain();\n        const newOptions = { ...options, additionallyAllowedTenantIds, sendCertificateChain };\n        if (tenantId) {\n            (0, tenantIdUtils_js_1.checkTenantId)(logger, tenantId);\n        }\n        if (tenantId && clientId && clientSecret) {\n            logger.info(`Invoking ClientSecretCredential with tenant ID: ${tenantId}, clientId: ${clientId} and clientSecret: [REDACTED]`);\n            this._credential = new clientSecretCredential_js_1.ClientSecretCredential(tenantId, clientId, clientSecret, newOptions);\n            return;\n        }\n        const certificatePath = process.env.AZURE_CLIENT_CERTIFICATE_PATH;\n        const certificatePassword = process.env.AZURE_CLIENT_CERTIFICATE_PASSWORD;\n        if (tenantId && clientId && certificatePath) {\n            logger.info(`Invoking ClientCertificateCredential with tenant ID: ${tenantId}, clientId: ${clientId} and certificatePath: ${certificatePath}`);\n            this._credential = new clientCertificateCredential_js_1.ClientCertificateCredential(tenantId, clientId, { certificatePath, certificatePassword }, newOptions);\n            return;\n        }\n        const username = process.env.AZURE_USERNAME;\n        const password = process.env.AZURE_PASSWORD;\n        if (tenantId && clientId && username && password) {\n            logger.info(`Invoking UsernamePasswordCredential with tenant ID: ${tenantId}, clientId: ${clientId} and username: ${username}`);\n            logger.warning(\"Environment is configured to use username and password authentication. This authentication method is deprecated, as it doesn't support multifactor authentication (MFA). Use a more secure credential. For more details, see https://aka.ms/azsdk/identity/mfa.\");\n            this._credential = new usernamePasswordCredential_js_1.UsernamePasswordCredential(tenantId, clientId, username, password, newOptions);\n        }\n    }\n    /**\n     * Authenticates with Microsoft Entra ID and returns an access token if successful.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - Optional parameters. See {@link GetTokenOptions}.\n     */\n    async getToken(scopes, options = {}) {\n        return tracing_js_1.tracingClient.withSpan(`${credentialName}.getToken`, options, async (newOptions) => {\n            if (this._credential) {\n                try {\n                    const result = await this._credential.getToken(scopes, newOptions);\n                    logger.getToken.info((0, logging_js_1.formatSuccess)(scopes));\n                    return result;\n                }\n                catch (err) {\n                    const authenticationError = new errors_js_1.AuthenticationError(400, {\n                        error: `${credentialName} authentication failed. To troubleshoot, visit https://aka.ms/azsdk/js/identity/environmentcredential/troubleshoot.`,\n                        error_description: err.message.toString().split(\"More details:\").join(\"\"),\n                    });\n                    logger.getToken.info((0, logging_js_1.formatError)(scopes, authenticationError));\n                    throw authenticationError;\n                }\n            }\n            throw new errors_js_1.CredentialUnavailableError(`${credentialName} is unavailable. No underlying credential could be used. To troubleshoot, visit https://aka.ms/azsdk/js/identity/environmentcredential/troubleshoot.`);\n        });\n    }\n}\nexports.EnvironmentCredential = EnvironmentCredential;\n//# sourceMappingURL=environmentCredential.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/environmentCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/interactiveBrowserCredential.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist/commonjs/credentials/interactiveBrowserCredential.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.InteractiveBrowserCredential = void 0;\nconst tenantIdUtils_js_1 = __webpack_require__(/*! ../util/tenantIdUtils.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/tenantIdUtils.js\");\nconst logging_js_1 = __webpack_require__(/*! ../util/logging.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/logging.js\");\nconst scopeUtils_js_1 = __webpack_require__(/*! ../util/scopeUtils.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/scopeUtils.js\");\nconst tracing_js_1 = __webpack_require__(/*! ../util/tracing.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/tracing.js\");\nconst msalClient_js_1 = __webpack_require__(/*! ../msal/nodeFlows/msalClient.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/msal/nodeFlows/msalClient.js\");\nconst constants_js_1 = __webpack_require__(/*! ../constants.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/constants.js\");\nconst logger = (0, logging_js_1.credentialLogger)(\"InteractiveBrowserCredential\");\n/**\n * Enables authentication to Microsoft Entra ID inside of the web browser\n * using the interactive login flow.\n */\nclass InteractiveBrowserCredential {\n    tenantId;\n    additionallyAllowedTenantIds;\n    msalClient;\n    disableAutomaticAuthentication;\n    browserCustomizationOptions;\n    loginHint;\n    /**\n     * Creates an instance of InteractiveBrowserCredential with the details needed.\n     *\n     * This credential uses the [Authorization Code Flow](https://learn.microsoft.com/entra/identity-platform/v2-oauth2-auth-code-flow).\n     * On Node.js, it will open a browser window while it listens for a redirect response from the authentication service.\n     * On browsers, it authenticates via popups. The `loginStyle` optional parameter can be set to `redirect` to authenticate by redirecting the user to an Azure secure login page, which then will redirect the user back to the web application where the authentication started.\n     *\n     * For Node.js, if a `clientId` is provided, the Microsoft Entra application will need to be configured to have a \"Mobile and desktop applications\" redirect endpoint.\n     * Follow our guide on [setting up Redirect URIs for Desktop apps that calls to web APIs](https://learn.microsoft.com/entra/identity-platform/scenario-desktop-app-registration#redirect-uris).\n     *\n     * @param options - Options for configuring the client which makes the authentication requests.\n     */\n    constructor(options) {\n        this.tenantId = (0, tenantIdUtils_js_1.resolveTenantId)(logger, options.tenantId, options.clientId);\n        this.additionallyAllowedTenantIds = (0, tenantIdUtils_js_1.resolveAdditionallyAllowedTenantIds)(options?.additionallyAllowedTenants);\n        const msalClientOptions = {\n            ...options,\n            tokenCredentialOptions: options,\n            logger,\n        };\n        const ibcNodeOptions = options;\n        this.browserCustomizationOptions = ibcNodeOptions.browserCustomizationOptions;\n        this.loginHint = ibcNodeOptions.loginHint;\n        if (ibcNodeOptions?.brokerOptions?.enabled) {\n            if (!ibcNodeOptions?.brokerOptions?.parentWindowHandle) {\n                throw new Error(\"In order to do WAM authentication, `parentWindowHandle` under `brokerOptions` is a required parameter\");\n            }\n            else {\n                msalClientOptions.brokerOptions = {\n                    enabled: true,\n                    parentWindowHandle: ibcNodeOptions.brokerOptions.parentWindowHandle,\n                    legacyEnableMsaPassthrough: ibcNodeOptions.brokerOptions?.legacyEnableMsaPassthrough,\n                    useDefaultBrokerAccount: ibcNodeOptions.brokerOptions?.useDefaultBrokerAccount,\n                };\n            }\n        }\n        this.msalClient = (0, msalClient_js_1.createMsalClient)(options.clientId ?? constants_js_1.DeveloperSignOnClientId, this.tenantId, msalClientOptions);\n        this.disableAutomaticAuthentication = options?.disableAutomaticAuthentication;\n    }\n    /**\n     * Authenticates with Microsoft Entra ID and returns an access token if successful.\n     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n     *\n     * If the user provided the option `disableAutomaticAuthentication`,\n     * once the token can't be retrieved silently,\n     * this method won't attempt to request user interaction to retrieve the token.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this\n     *                TokenCredential implementation might make.\n     */\n    async getToken(scopes, options = {}) {\n        return tracing_js_1.tracingClient.withSpan(`${this.constructor.name}.getToken`, options, async (newOptions) => {\n            newOptions.tenantId = (0, tenantIdUtils_js_1.processMultiTenantRequest)(this.tenantId, newOptions, this.additionallyAllowedTenantIds, logger);\n            const arrayScopes = (0, scopeUtils_js_1.ensureScopes)(scopes);\n            return this.msalClient.getTokenByInteractiveRequest(arrayScopes, {\n                ...newOptions,\n                disableAutomaticAuthentication: this.disableAutomaticAuthentication,\n                browserCustomizationOptions: this.browserCustomizationOptions,\n                loginHint: this.loginHint,\n            });\n        });\n    }\n    /**\n     * Authenticates with Microsoft Entra ID and returns an access token if successful.\n     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n     *\n     * If the token can't be retrieved silently, this method will always generate a challenge for the user.\n     *\n     * On Node.js, this credential has [Proof Key for Code Exchange (PKCE)](https://datatracker.ietf.org/doc/html/rfc7636) enabled by default.\n     * PKCE is a security feature that mitigates authentication code interception attacks.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this\n     *                  TokenCredential implementation might make.\n     */\n    async authenticate(scopes, options = {}) {\n        return tracing_js_1.tracingClient.withSpan(`${this.constructor.name}.authenticate`, options, async (newOptions) => {\n            const arrayScopes = (0, scopeUtils_js_1.ensureScopes)(scopes);\n            await this.msalClient.getTokenByInteractiveRequest(arrayScopes, {\n                ...newOptions,\n                disableAutomaticAuthentication: false, // this method should always allow user interaction\n                browserCustomizationOptions: this.browserCustomizationOptions,\n                loginHint: this.loginHint,\n            });\n            return this.msalClient.getActiveAccount();\n        });\n    }\n}\nexports.InteractiveBrowserCredential = InteractiveBrowserCredential;\n//# sourceMappingURL=interactiveBrowserCredential.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/interactiveBrowserCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/managedIdentityCredential/imdsMsi.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist/commonjs/credentials/managedIdentityCredential/imdsMsi.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.imdsMsi = void 0;\nconst core_rest_pipeline_1 = __webpack_require__(/*! @azure/core-rest-pipeline */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/index.js\");\nconst core_util_1 = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/commonjs/index.js\");\nconst logging_js_1 = __webpack_require__(/*! ../../util/logging.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/logging.js\");\nconst utils_js_1 = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/managedIdentityCredential/utils.js\");\nconst tracing_js_1 = __webpack_require__(/*! ../../util/tracing.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/tracing.js\");\nconst msiName = \"ManagedIdentityCredential - IMDS\";\nconst logger = (0, logging_js_1.credentialLogger)(msiName);\nconst imdsHost = \"http://169.254.169.254\";\nconst imdsEndpointPath = \"/metadata/identity/oauth2/token\";\n/**\n * Generates an invalid request options to get a response quickly from IMDS endpoint.\n * The response indicates the availability of IMSD service; otherwise the request would time out.\n */\nfunction prepareInvalidRequestOptions(scopes) {\n    const resource = (0, utils_js_1.mapScopesToResource)(scopes);\n    if (!resource) {\n        throw new Error(`${msiName}: Multiple scopes are not supported.`);\n    }\n    // Pod Identity will try to process this request even if the Metadata header is missing.\n    // We can exclude the request query to ensure no IMDS endpoint tries to process the ping request.\n    const url = new URL(imdsEndpointPath, process.env.AZURE_POD_IDENTITY_AUTHORITY_HOST ?? imdsHost);\n    const rawHeaders = {\n        Accept: \"application/json\",\n        // intentionally leave out the Metadata header to invoke an error from IMDS endpoint.\n    };\n    return {\n        // intentionally not including any query\n        url: `${url}`,\n        method: \"GET\",\n        headers: (0, core_rest_pipeline_1.createHttpHeaders)(rawHeaders),\n    };\n}\n/**\n * Defines how to determine whether the Azure IMDS MSI is available.\n *\n * Actually getting the token once we determine IMDS is available is handled by MSAL.\n */\nexports.imdsMsi = {\n    name: \"imdsMsi\",\n    async isAvailable(options) {\n        const { scopes, identityClient, getTokenOptions } = options;\n        const resource = (0, utils_js_1.mapScopesToResource)(scopes);\n        if (!resource) {\n            logger.info(`${msiName}: Unavailable. Multiple scopes are not supported.`);\n            return false;\n        }\n        // if the PodIdentityEndpoint environment variable was set no need to probe the endpoint, it can be assumed to exist\n        if (process.env.AZURE_POD_IDENTITY_AUTHORITY_HOST) {\n            return true;\n        }\n        if (!identityClient) {\n            throw new Error(\"Missing IdentityClient\");\n        }\n        const requestOptions = prepareInvalidRequestOptions(resource);\n        return tracing_js_1.tracingClient.withSpan(\"ManagedIdentityCredential-pingImdsEndpoint\", getTokenOptions ?? {}, async (updatedOptions) => {\n            requestOptions.tracingOptions = updatedOptions.tracingOptions;\n            // Create a request with a timeout since we expect that\n            // not having a \"Metadata\" header should cause an error to be\n            // returned quickly from the endpoint, proving its availability.\n            const request = (0, core_rest_pipeline_1.createPipelineRequest)(requestOptions);\n            // Default to 1000 if the default of 0 is used.\n            // Negative values can still be used to disable the timeout.\n            request.timeout = updatedOptions.requestOptions?.timeout || 1000;\n            // This MSI uses the imdsEndpoint to get the token, which only uses http://\n            request.allowInsecureConnection = true;\n            let response;\n            try {\n                logger.info(`${msiName}: Pinging the Azure IMDS endpoint`);\n                response = await identityClient.sendRequest(request);\n            }\n            catch (err) {\n                // If the request failed, or Node.js was unable to establish a connection,\n                // or the host was down, we'll assume the IMDS endpoint isn't available.\n                if ((0, core_util_1.isError)(err)) {\n                    logger.verbose(`${msiName}: Caught error ${err.name}: ${err.message}`);\n                }\n                // This is a special case for Docker Desktop which responds with a 403 with a message that contains \"A socket operation was attempted to an unreachable network\" or \"A socket operation was attempted to an unreachable host\"\n                // rather than just timing out, as expected.\n                logger.info(`${msiName}: The Azure IMDS endpoint is unavailable`);\n                return false;\n            }\n            if (response.status === 403) {\n                if (response.bodyAsText?.includes(\"unreachable\")) {\n                    logger.info(`${msiName}: The Azure IMDS endpoint is unavailable`);\n                    logger.info(`${msiName}: ${response.bodyAsText}`);\n                    return false;\n                }\n            }\n            // If we received any response, the endpoint is available\n            logger.info(`${msiName}: The Azure IMDS endpoint is available`);\n            return true;\n        });\n    },\n};\n//# sourceMappingURL=imdsMsi.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/managedIdentityCredential/imdsMsi.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/managedIdentityCredential/imdsRetryPolicy.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist/commonjs/credentials/managedIdentityCredential/imdsRetryPolicy.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.imdsRetryPolicy = imdsRetryPolicy;\nconst core_rest_pipeline_1 = __webpack_require__(/*! @azure/core-rest-pipeline */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/index.js\");\nconst core_util_1 = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/commonjs/index.js\");\n// Matches the default retry configuration in expontentialRetryStrategy.ts\nconst DEFAULT_CLIENT_MAX_RETRY_INTERVAL = 1000 * 64;\n// For 410 responses, we need at least 70 seconds total retry duration\n// With 5 retries using exponential backoff: delays of d, 2d, 4d, 8d, 16d sum to 31d\n// Accounting for jitter (which can reduce delays by 20%), we need 31d * 0.8 >= 70\n// So we need d >= 70/24.8 = 2.82 seconds. Using 3 seconds to be safe.\nconst MIN_DELAY_FOR_410_MS = 3000;\n/**\n * An additional policy that retries on 404 and 410 errors. The default retry policy does not retry on\n * 404s or 410s, but the IMDS endpoint can return these when the token is not yet available or when\n * the identity is still being set up. This policy will retry on 404s and 410s with an exponential backoff.\n * For 410 responses, it uses a minimum 3-second initial delay to ensure at least 70 seconds total duration.\n *\n * @param msiRetryConfig - The retry configuration for the MSI credential.\n * @returns - The policy that will retry on 404s and 410s.\n */\nfunction imdsRetryPolicy(msiRetryConfig) {\n    return (0, core_rest_pipeline_1.retryPolicy)([\n        {\n            name: \"imdsRetryPolicy\",\n            retry: ({ retryCount, response }) => {\n                if (response?.status !== 404 && response?.status !== 410) {\n                    return { skipStrategy: true };\n                }\n                // For 410 responses, use a minimum 3-second delay to ensure at least 70 seconds total retry duration\n                const initialDelayMs = response?.status === 410\n                    ? Math.max(MIN_DELAY_FOR_410_MS, msiRetryConfig.startDelayInMs)\n                    : msiRetryConfig.startDelayInMs;\n                return (0, core_util_1.calculateRetryDelay)(retryCount, {\n                    retryDelayInMs: initialDelayMs,\n                    maxRetryDelayInMs: DEFAULT_CLIENT_MAX_RETRY_INTERVAL,\n                });\n            },\n        },\n    ], {\n        maxRetries: msiRetryConfig.maxRetries,\n    });\n}\n//# sourceMappingURL=imdsRetryPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QvY29tbW9uanMvY3JlZGVudGlhbHMvbWFuYWdlZElkZW50aXR5Q3JlZGVudGlhbC9pbWRzUmV0cnlQb2xpY3kuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHVCQUF1QjtBQUN2Qiw2QkFBNkIsbUJBQU8sQ0FBQyx3R0FBMkI7QUFDaEUsb0JBQW9CLG1CQUFPLENBQUMsc0ZBQWtCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isc0JBQXNCO0FBQzVDO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9pZGVudGl0eS9kaXN0L2NvbW1vbmpzL2NyZWRlbnRpYWxzL21hbmFnZWRJZGVudGl0eUNyZWRlbnRpYWwvaW1kc1JldHJ5UG9saWN5LmpzPzkzYWEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaW1kc1JldHJ5UG9saWN5ID0gaW1kc1JldHJ5UG9saWN5O1xuY29uc3QgY29yZV9yZXN0X3BpcGVsaW5lXzEgPSByZXF1aXJlKFwiQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZVwiKTtcbmNvbnN0IGNvcmVfdXRpbF8xID0gcmVxdWlyZShcIkBhenVyZS9jb3JlLXV0aWxcIik7XG4vLyBNYXRjaGVzIHRoZSBkZWZhdWx0IHJldHJ5IGNvbmZpZ3VyYXRpb24gaW4gZXhwb250ZW50aWFsUmV0cnlTdHJhdGVneS50c1xuY29uc3QgREVGQVVMVF9DTElFTlRfTUFYX1JFVFJZX0lOVEVSVkFMID0gMTAwMCAqIDY0O1xuLy8gRm9yIDQxMCByZXNwb25zZXMsIHdlIG5lZWQgYXQgbGVhc3QgNzAgc2Vjb25kcyB0b3RhbCByZXRyeSBkdXJhdGlvblxuLy8gV2l0aCA1IHJldHJpZXMgdXNpbmcgZXhwb25lbnRpYWwgYmFja29mZjogZGVsYXlzIG9mIGQsIDJkLCA0ZCwgOGQsIDE2ZCBzdW0gdG8gMzFkXG4vLyBBY2NvdW50aW5nIGZvciBqaXR0ZXIgKHdoaWNoIGNhbiByZWR1Y2UgZGVsYXlzIGJ5IDIwJSksIHdlIG5lZWQgMzFkICogMC44ID49IDcwXG4vLyBTbyB3ZSBuZWVkIGQgPj0gNzAvMjQuOCA9IDIuODIgc2Vjb25kcy4gVXNpbmcgMyBzZWNvbmRzIHRvIGJlIHNhZmUuXG5jb25zdCBNSU5fREVMQVlfRk9SXzQxMF9NUyA9IDMwMDA7XG4vKipcbiAqIEFuIGFkZGl0aW9uYWwgcG9saWN5IHRoYXQgcmV0cmllcyBvbiA0MDQgYW5kIDQxMCBlcnJvcnMuIFRoZSBkZWZhdWx0IHJldHJ5IHBvbGljeSBkb2VzIG5vdCByZXRyeSBvblxuICogNDA0cyBvciA0MTBzLCBidXQgdGhlIElNRFMgZW5kcG9pbnQgY2FuIHJldHVybiB0aGVzZSB3aGVuIHRoZSB0b2tlbiBpcyBub3QgeWV0IGF2YWlsYWJsZSBvciB3aGVuXG4gKiB0aGUgaWRlbnRpdHkgaXMgc3RpbGwgYmVpbmcgc2V0IHVwLiBUaGlzIHBvbGljeSB3aWxsIHJldHJ5IG9uIDQwNHMgYW5kIDQxMHMgd2l0aCBhbiBleHBvbmVudGlhbCBiYWNrb2ZmLlxuICogRm9yIDQxMCByZXNwb25zZXMsIGl0IHVzZXMgYSBtaW5pbXVtIDMtc2Vjb25kIGluaXRpYWwgZGVsYXkgdG8gZW5zdXJlIGF0IGxlYXN0IDcwIHNlY29uZHMgdG90YWwgZHVyYXRpb24uXG4gKlxuICogQHBhcmFtIG1zaVJldHJ5Q29uZmlnIC0gVGhlIHJldHJ5IGNvbmZpZ3VyYXRpb24gZm9yIHRoZSBNU0kgY3JlZGVudGlhbC5cbiAqIEByZXR1cm5zIC0gVGhlIHBvbGljeSB0aGF0IHdpbGwgcmV0cnkgb24gNDA0cyBhbmQgNDEwcy5cbiAqL1xuZnVuY3Rpb24gaW1kc1JldHJ5UG9saWN5KG1zaVJldHJ5Q29uZmlnKSB7XG4gICAgcmV0dXJuICgwLCBjb3JlX3Jlc3RfcGlwZWxpbmVfMS5yZXRyeVBvbGljeSkoW1xuICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiBcImltZHNSZXRyeVBvbGljeVwiLFxuICAgICAgICAgICAgcmV0cnk6ICh7IHJldHJ5Q291bnQsIHJlc3BvbnNlIH0pID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2U/LnN0YXR1cyAhPT0gNDA0ICYmIHJlc3BvbnNlPy5zdGF0dXMgIT09IDQxMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBza2lwU3RyYXRlZ3k6IHRydWUgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gRm9yIDQxMCByZXNwb25zZXMsIHVzZSBhIG1pbmltdW0gMy1zZWNvbmQgZGVsYXkgdG8gZW5zdXJlIGF0IGxlYXN0IDcwIHNlY29uZHMgdG90YWwgcmV0cnkgZHVyYXRpb25cbiAgICAgICAgICAgICAgICBjb25zdCBpbml0aWFsRGVsYXlNcyA9IHJlc3BvbnNlPy5zdGF0dXMgPT09IDQxMFxuICAgICAgICAgICAgICAgICAgICA/IE1hdGgubWF4KE1JTl9ERUxBWV9GT1JfNDEwX01TLCBtc2lSZXRyeUNvbmZpZy5zdGFydERlbGF5SW5NcylcbiAgICAgICAgICAgICAgICAgICAgOiBtc2lSZXRyeUNvbmZpZy5zdGFydERlbGF5SW5NcztcbiAgICAgICAgICAgICAgICByZXR1cm4gKDAsIGNvcmVfdXRpbF8xLmNhbGN1bGF0ZVJldHJ5RGVsYXkpKHJldHJ5Q291bnQsIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0cnlEZWxheUluTXM6IGluaXRpYWxEZWxheU1zLFxuICAgICAgICAgICAgICAgICAgICBtYXhSZXRyeURlbGF5SW5NczogREVGQVVMVF9DTElFTlRfTUFYX1JFVFJZX0lOVEVSVkFMLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICBdLCB7XG4gICAgICAgIG1heFJldHJpZXM6IG1zaVJldHJ5Q29uZmlnLm1heFJldHJpZXMsXG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbWRzUmV0cnlQb2xpY3kuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/managedIdentityCredential/imdsRetryPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/managedIdentityCredential/index.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist/commonjs/credentials/managedIdentityCredential/index.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ManagedIdentityCredential = void 0;\nconst logger_1 = __webpack_require__(/*! @azure/logger */ \"(rsc)/./node_modules/@azure/logger/dist/commonjs/index.js\");\nconst msal_node_1 = __webpack_require__(/*! @azure/msal-node */ \"(rsc)/./node_modules/@azure/msal-node/lib/msal-node.cjs\");\nconst identityClient_js_1 = __webpack_require__(/*! ../../client/identityClient.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/client/identityClient.js\");\nconst errors_js_1 = __webpack_require__(/*! ../../errors.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/errors.js\");\nconst utils_js_1 = __webpack_require__(/*! ../../msal/utils.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/msal/utils.js\");\nconst imdsRetryPolicy_js_1 = __webpack_require__(/*! ./imdsRetryPolicy.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/managedIdentityCredential/imdsRetryPolicy.js\");\nconst logging_js_1 = __webpack_require__(/*! ../../util/logging.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/logging.js\");\nconst tracing_js_1 = __webpack_require__(/*! ../../util/tracing.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/tracing.js\");\nconst imdsMsi_js_1 = __webpack_require__(/*! ./imdsMsi.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/managedIdentityCredential/imdsMsi.js\");\nconst tokenExchangeMsi_js_1 = __webpack_require__(/*! ./tokenExchangeMsi.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/managedIdentityCredential/tokenExchangeMsi.js\");\nconst utils_js_2 = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/managedIdentityCredential/utils.js\");\nconst logger = (0, logging_js_1.credentialLogger)(\"ManagedIdentityCredential\");\n/**\n * Attempts authentication using a managed identity available at the deployment environment.\n * This authentication type works in Azure VMs, App Service instances, Azure Functions applications,\n * Azure Kubernetes Services, Azure Service Fabric instances and inside of the Azure Cloud Shell.\n *\n * More information about configuring managed identities can be found here:\n * https://learn.microsoft.com/azure/active-directory/managed-identities-azure-resources/overview\n */\nclass ManagedIdentityCredential {\n    managedIdentityApp;\n    identityClient;\n    clientId;\n    resourceId;\n    objectId;\n    msiRetryConfig = {\n        maxRetries: 5,\n        startDelayInMs: 800,\n        intervalIncrement: 2,\n    };\n    isAvailableIdentityClient;\n    /**\n     * @internal\n     * @hidden\n     */\n    constructor(clientIdOrOptions, options) {\n        let _options;\n        if (typeof clientIdOrOptions === \"string\") {\n            this.clientId = clientIdOrOptions;\n            _options = options ?? {};\n        }\n        else {\n            this.clientId = clientIdOrOptions?.clientId;\n            _options = clientIdOrOptions ?? {};\n        }\n        this.resourceId = _options?.resourceId;\n        this.objectId = _options?.objectId;\n        // For JavaScript users.\n        const providedIds = [\n            { key: \"clientId\", value: this.clientId },\n            { key: \"resourceId\", value: this.resourceId },\n            { key: \"objectId\", value: this.objectId },\n        ].filter((id) => id.value);\n        if (providedIds.length > 1) {\n            throw new Error(`ManagedIdentityCredential: only one of 'clientId', 'resourceId', or 'objectId' can be provided. Received values: ${JSON.stringify({ clientId: this.clientId, resourceId: this.resourceId, objectId: this.objectId })}`);\n        }\n        // ManagedIdentity uses http for local requests\n        _options.allowInsecureConnection = true;\n        if (_options.retryOptions?.maxRetries !== undefined) {\n            this.msiRetryConfig.maxRetries = _options.retryOptions.maxRetries;\n        }\n        this.identityClient = new identityClient_js_1.IdentityClient({\n            ..._options,\n            additionalPolicies: [{ policy: (0, imdsRetryPolicy_js_1.imdsRetryPolicy)(this.msiRetryConfig), position: \"perCall\" }],\n        });\n        this.managedIdentityApp = new msal_node_1.ManagedIdentityApplication({\n            managedIdentityIdParams: {\n                userAssignedClientId: this.clientId,\n                userAssignedResourceId: this.resourceId,\n                userAssignedObjectId: this.objectId,\n            },\n            system: {\n                disableInternalRetries: true,\n                networkClient: this.identityClient,\n                loggerOptions: {\n                    logLevel: (0, utils_js_1.getMSALLogLevel)((0, logger_1.getLogLevel)()),\n                    piiLoggingEnabled: _options.loggingOptions?.enableUnsafeSupportLogging,\n                    loggerCallback: (0, utils_js_1.defaultLoggerCallback)(logger),\n                },\n            },\n        });\n        this.isAvailableIdentityClient = new identityClient_js_1.IdentityClient({\n            ..._options,\n            retryOptions: {\n                maxRetries: 0,\n            },\n        });\n        const managedIdentitySource = this.managedIdentityApp.getManagedIdentitySource();\n        // CloudShell MSI will ignore any user-assigned identity passed as parameters. To avoid confusion, we prevent this from happening as early as possible.\n        if (managedIdentitySource === \"CloudShell\") {\n            if (this.clientId || this.resourceId || this.objectId) {\n                logger.warning(`CloudShell MSI detected with user-provided IDs - throwing. Received values: ${JSON.stringify({\n                    clientId: this.clientId,\n                    resourceId: this.resourceId,\n                    objectId: this.objectId,\n                })}.`);\n                throw new errors_js_1.CredentialUnavailableError(\"ManagedIdentityCredential: Specifying a user-assigned managed identity is not supported for CloudShell at runtime. When using Managed Identity in CloudShell, omit the clientId, resourceId, and objectId parameters.\");\n            }\n        }\n        // ServiceFabric does not support specifying user-assigned managed identity by client ID or resource ID. The managed identity selected is based on the resource configuration.\n        if (managedIdentitySource === \"ServiceFabric\") {\n            if (this.clientId || this.resourceId || this.objectId) {\n                logger.warning(`Service Fabric detected with user-provided IDs - throwing. Received values: ${JSON.stringify({\n                    clientId: this.clientId,\n                    resourceId: this.resourceId,\n                    objectId: this.objectId,\n                })}.`);\n                throw new errors_js_1.CredentialUnavailableError(`ManagedIdentityCredential: ${utils_js_2.serviceFabricErrorMessage}`);\n            }\n        }\n        logger.info(`Using ${managedIdentitySource} managed identity.`);\n        // Check if either clientId, resourceId or objectId was provided and log the value used\n        if (providedIds.length === 1) {\n            const { key, value } = providedIds[0];\n            logger.info(`${managedIdentitySource} with ${key}: ${value}`);\n        }\n    }\n    /**\n     * Authenticates with Microsoft Entra ID and returns an access token if successful.\n     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n     * If an unexpected error occurs, an {@link AuthenticationError} will be thrown with the details of the failure.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this\n     *                TokenCredential implementation might make.\n     */\n    async getToken(scopes, options = {}) {\n        logger.getToken.info(\"Using the MSAL provider for Managed Identity.\");\n        const resource = (0, utils_js_2.mapScopesToResource)(scopes);\n        if (!resource) {\n            throw new errors_js_1.CredentialUnavailableError(`ManagedIdentityCredential: Multiple scopes are not supported. Scopes: ${JSON.stringify(scopes)}`);\n        }\n        return tracing_js_1.tracingClient.withSpan(\"ManagedIdentityCredential.getToken\", options, async () => {\n            try {\n                const isTokenExchangeMsi = await tokenExchangeMsi_js_1.tokenExchangeMsi.isAvailable(this.clientId);\n                // Most scenarios are handled by MSAL except for two:\n                // AKS pod identity - MSAL does not implement the token exchange flow.\n                // IMDS Endpoint probing - MSAL does not do any probing before trying to get a token.\n                // As a DefaultAzureCredential optimization we probe the IMDS endpoint with a short timeout and no retries before actually trying to get a token\n                // We will continue to implement these features in the Identity library.\n                const identitySource = this.managedIdentityApp.getManagedIdentitySource();\n                const isImdsMsi = identitySource === \"DefaultToImds\" || identitySource === \"Imds\"; // Neither actually checks that IMDS endpoint is available, just that it's the source the MSAL _would_ try to use.\n                logger.getToken.info(`MSAL Identity source: ${identitySource}`);\n                if (isTokenExchangeMsi) {\n                    // In the AKS scenario we will use the existing tokenExchangeMsi indefinitely.\n                    logger.getToken.info(\"Using the token exchange managed identity.\");\n                    const result = await tokenExchangeMsi_js_1.tokenExchangeMsi.getToken({\n                        scopes,\n                        clientId: this.clientId,\n                        identityClient: this.identityClient,\n                        retryConfig: this.msiRetryConfig,\n                        resourceId: this.resourceId,\n                    });\n                    if (result === null) {\n                        throw new errors_js_1.CredentialUnavailableError(\"Attempted to use the token exchange managed identity, but received a null response.\");\n                    }\n                    return result;\n                }\n                else if (isImdsMsi) {\n                    // In the IMDS scenario we will probe the IMDS endpoint to ensure it's available before trying to get a token.\n                    // If the IMDS endpoint is not available and this is the source that MSAL will use, we will fail-fast with an error that tells DAC to move to the next credential.\n                    logger.getToken.info(\"Using the IMDS endpoint to probe for availability.\");\n                    const isAvailable = await imdsMsi_js_1.imdsMsi.isAvailable({\n                        scopes,\n                        clientId: this.clientId,\n                        getTokenOptions: options,\n                        identityClient: this.isAvailableIdentityClient,\n                        resourceId: this.resourceId,\n                    });\n                    if (!isAvailable) {\n                        throw new errors_js_1.CredentialUnavailableError(`Attempted to use the IMDS endpoint, but it is not available.`);\n                    }\n                }\n                // If we got this far, it means:\n                // - This is not a tokenExchangeMsi,\n                // - We already probed for IMDS endpoint availability and failed-fast if it's unreachable.\n                // We can proceed normally by calling MSAL for a token.\n                logger.getToken.info(\"Calling into MSAL for managed identity token.\");\n                const token = await this.managedIdentityApp.acquireToken({\n                    resource,\n                });\n                this.ensureValidMsalToken(scopes, token, options);\n                logger.getToken.info((0, logging_js_1.formatSuccess)(scopes));\n                return {\n                    expiresOnTimestamp: token.expiresOn.getTime(),\n                    token: token.accessToken,\n                    refreshAfterTimestamp: token.refreshOn?.getTime(),\n                    tokenType: \"Bearer\",\n                };\n            }\n            catch (err) {\n                logger.getToken.error((0, logging_js_1.formatError)(scopes, err));\n                // AuthenticationRequiredError described as Error to enforce authentication after trying to retrieve a token silently.\n                // TODO: why would this _ever_ happen considering we're not trying the silent request in this flow?\n                if (err.name === \"AuthenticationRequiredError\") {\n                    throw err;\n                }\n                if (isNetworkError(err)) {\n                    throw new errors_js_1.CredentialUnavailableError(`ManagedIdentityCredential: Network unreachable. Message: ${err.message}`, { cause: err });\n                }\n                throw new errors_js_1.CredentialUnavailableError(`ManagedIdentityCredential: Authentication failed. Message ${err.message}`, { cause: err });\n            }\n        });\n    }\n    /**\n     * Ensures the validity of the MSAL token\n     */\n    ensureValidMsalToken(scopes, msalToken, getTokenOptions) {\n        const createError = (message) => {\n            logger.getToken.info(message);\n            return new errors_js_1.AuthenticationRequiredError({\n                scopes: Array.isArray(scopes) ? scopes : [scopes],\n                getTokenOptions,\n                message,\n            });\n        };\n        if (!msalToken) {\n            throw createError(\"No response.\");\n        }\n        if (!msalToken.expiresOn) {\n            throw createError(`Response had no \"expiresOn\" property.`);\n        }\n        if (!msalToken.accessToken) {\n            throw createError(`Response had no \"accessToken\" property.`);\n        }\n    }\n}\nexports.ManagedIdentityCredential = ManagedIdentityCredential;\nfunction isNetworkError(err) {\n    // MSAL error\n    if (err.errorCode === \"network_error\") {\n        return true;\n    }\n    // Probe errors\n    if (err.code === \"ENETUNREACH\" || err.code === \"EHOSTUNREACH\") {\n        return true;\n    }\n    // This is a special case for Docker Desktop which responds with a 403 with a message that contains \"A socket operation was attempted to an unreachable network\" or \"A socket operation was attempted to an unreachable host\"\n    // rather than just timing out, as expected.\n    if (err.statusCode === 403 || err.code === 403) {\n        if (err.message.includes(\"unreachable\")) {\n            return true;\n        }\n    }\n    return false;\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/managedIdentityCredential/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/managedIdentityCredential/tokenExchangeMsi.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist/commonjs/credentials/managedIdentityCredential/tokenExchangeMsi.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.tokenExchangeMsi = void 0;\nconst workloadIdentityCredential_js_1 = __webpack_require__(/*! ../workloadIdentityCredential.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/workloadIdentityCredential.js\");\nconst logging_js_1 = __webpack_require__(/*! ../../util/logging.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/logging.js\");\nconst msiName = \"ManagedIdentityCredential - Token Exchange\";\nconst logger = (0, logging_js_1.credentialLogger)(msiName);\n/**\n * Defines how to determine whether the token exchange MSI is available, and also how to retrieve a token from the token exchange MSI.\n *\n * Token exchange MSI (used by AKS) is the only MSI implementation handled entirely by Azure Identity.\n * The rest have been migrated to MSAL.\n */\nexports.tokenExchangeMsi = {\n    name: \"tokenExchangeMsi\",\n    async isAvailable(clientId) {\n        const env = process.env;\n        const result = Boolean((clientId || env.AZURE_CLIENT_ID) &&\n            env.AZURE_TENANT_ID &&\n            process.env.AZURE_FEDERATED_TOKEN_FILE);\n        if (!result) {\n            logger.info(`${msiName}: Unavailable. The environment variables needed are: AZURE_CLIENT_ID (or the client ID sent through the parameters), AZURE_TENANT_ID and AZURE_FEDERATED_TOKEN_FILE`);\n        }\n        return result;\n    },\n    async getToken(configuration, getTokenOptions = {}) {\n        const { scopes, clientId } = configuration;\n        const identityClientTokenCredentialOptions = {};\n        const workloadIdentityCredential = new workloadIdentityCredential_js_1.WorkloadIdentityCredential({\n            clientId,\n            tenantId: process.env.AZURE_TENANT_ID,\n            tokenFilePath: process.env.AZURE_FEDERATED_TOKEN_FILE,\n            ...identityClientTokenCredentialOptions,\n            disableInstanceDiscovery: true,\n        });\n        return workloadIdentityCredential.getToken(scopes, getTokenOptions);\n    },\n};\n//# sourceMappingURL=tokenExchangeMsi.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QvY29tbW9uanMvY3JlZGVudGlhbHMvbWFuYWdlZElkZW50aXR5Q3JlZGVudGlhbC90b2tlbkV4Y2hhbmdlTXNpLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx3QkFBd0I7QUFDeEIsd0NBQXdDLG1CQUFPLENBQUMsc0lBQWtDO0FBQ2xGLHFCQUFxQixtQkFBTyxDQUFDLGlHQUF1QjtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLFFBQVE7QUFDbkM7QUFDQTtBQUNBLEtBQUs7QUFDTCxzREFBc0Q7QUFDdEQsZ0JBQWdCLG1CQUFtQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvaWRlbnRpdHkvZGlzdC9jb21tb25qcy9jcmVkZW50aWFscy9tYW5hZ2VkSWRlbnRpdHlDcmVkZW50aWFsL3Rva2VuRXhjaGFuZ2VNc2kuanM/OTQwNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy50b2tlbkV4Y2hhbmdlTXNpID0gdm9pZCAwO1xuY29uc3Qgd29ya2xvYWRJZGVudGl0eUNyZWRlbnRpYWxfanNfMSA9IHJlcXVpcmUoXCIuLi93b3JrbG9hZElkZW50aXR5Q3JlZGVudGlhbC5qc1wiKTtcbmNvbnN0IGxvZ2dpbmdfanNfMSA9IHJlcXVpcmUoXCIuLi8uLi91dGlsL2xvZ2dpbmcuanNcIik7XG5jb25zdCBtc2lOYW1lID0gXCJNYW5hZ2VkSWRlbnRpdHlDcmVkZW50aWFsIC0gVG9rZW4gRXhjaGFuZ2VcIjtcbmNvbnN0IGxvZ2dlciA9ICgwLCBsb2dnaW5nX2pzXzEuY3JlZGVudGlhbExvZ2dlcikobXNpTmFtZSk7XG4vKipcbiAqIERlZmluZXMgaG93IHRvIGRldGVybWluZSB3aGV0aGVyIHRoZSB0b2tlbiBleGNoYW5nZSBNU0kgaXMgYXZhaWxhYmxlLCBhbmQgYWxzbyBob3cgdG8gcmV0cmlldmUgYSB0b2tlbiBmcm9tIHRoZSB0b2tlbiBleGNoYW5nZSBNU0kuXG4gKlxuICogVG9rZW4gZXhjaGFuZ2UgTVNJICh1c2VkIGJ5IEFLUykgaXMgdGhlIG9ubHkgTVNJIGltcGxlbWVudGF0aW9uIGhhbmRsZWQgZW50aXJlbHkgYnkgQXp1cmUgSWRlbnRpdHkuXG4gKiBUaGUgcmVzdCBoYXZlIGJlZW4gbWlncmF0ZWQgdG8gTVNBTC5cbiAqL1xuZXhwb3J0cy50b2tlbkV4Y2hhbmdlTXNpID0ge1xuICAgIG5hbWU6IFwidG9rZW5FeGNoYW5nZU1zaVwiLFxuICAgIGFzeW5jIGlzQXZhaWxhYmxlKGNsaWVudElkKSB7XG4gICAgICAgIGNvbnN0IGVudiA9IHByb2Nlc3MuZW52O1xuICAgICAgICBjb25zdCByZXN1bHQgPSBCb29sZWFuKChjbGllbnRJZCB8fCBlbnYuQVpVUkVfQ0xJRU5UX0lEKSAmJlxuICAgICAgICAgICAgZW52LkFaVVJFX1RFTkFOVF9JRCAmJlxuICAgICAgICAgICAgcHJvY2Vzcy5lbnYuQVpVUkVfRkVERVJBVEVEX1RPS0VOX0ZJTEUpO1xuICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgICAgbG9nZ2VyLmluZm8oYCR7bXNpTmFtZX06IFVuYXZhaWxhYmxlLiBUaGUgZW52aXJvbm1lbnQgdmFyaWFibGVzIG5lZWRlZCBhcmU6IEFaVVJFX0NMSUVOVF9JRCAob3IgdGhlIGNsaWVudCBJRCBzZW50IHRocm91Z2ggdGhlIHBhcmFtZXRlcnMpLCBBWlVSRV9URU5BTlRfSUQgYW5kIEFaVVJFX0ZFREVSQVRFRF9UT0tFTl9GSUxFYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuICAgIGFzeW5jIGdldFRva2VuKGNvbmZpZ3VyYXRpb24sIGdldFRva2VuT3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIGNvbnN0IHsgc2NvcGVzLCBjbGllbnRJZCB9ID0gY29uZmlndXJhdGlvbjtcbiAgICAgICAgY29uc3QgaWRlbnRpdHlDbGllbnRUb2tlbkNyZWRlbnRpYWxPcHRpb25zID0ge307XG4gICAgICAgIGNvbnN0IHdvcmtsb2FkSWRlbnRpdHlDcmVkZW50aWFsID0gbmV3IHdvcmtsb2FkSWRlbnRpdHlDcmVkZW50aWFsX2pzXzEuV29ya2xvYWRJZGVudGl0eUNyZWRlbnRpYWwoe1xuICAgICAgICAgICAgY2xpZW50SWQsXG4gICAgICAgICAgICB0ZW5hbnRJZDogcHJvY2Vzcy5lbnYuQVpVUkVfVEVOQU5UX0lELFxuICAgICAgICAgICAgdG9rZW5GaWxlUGF0aDogcHJvY2Vzcy5lbnYuQVpVUkVfRkVERVJBVEVEX1RPS0VOX0ZJTEUsXG4gICAgICAgICAgICAuLi5pZGVudGl0eUNsaWVudFRva2VuQ3JlZGVudGlhbE9wdGlvbnMsXG4gICAgICAgICAgICBkaXNhYmxlSW5zdGFuY2VEaXNjb3Zlcnk6IHRydWUsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gd29ya2xvYWRJZGVudGl0eUNyZWRlbnRpYWwuZ2V0VG9rZW4oc2NvcGVzLCBnZXRUb2tlbk9wdGlvbnMpO1xuICAgIH0sXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dG9rZW5FeGNoYW5nZU1zaS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/managedIdentityCredential/tokenExchangeMsi.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/managedIdentityCredential/utils.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist/commonjs/credentials/managedIdentityCredential/utils.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.serviceFabricErrorMessage = void 0;\nexports.mapScopesToResource = mapScopesToResource;\nexports.parseExpirationTimestamp = parseExpirationTimestamp;\nexports.parseRefreshTimestamp = parseRefreshTimestamp;\nconst DefaultScopeSuffix = \"/.default\";\n/**\n * Error message for Service Fabric Managed Identity environment.\n */\nexports.serviceFabricErrorMessage = \"Specifying a `clientId` or `resourceId` is not supported by the Service Fabric managed identity environment. The managed identity configuration is determined by the Service Fabric cluster resource configuration. See https://aka.ms/servicefabricmi for more information\";\n/**\n * Most MSIs send requests to the IMDS endpoint, or a similar endpoint.\n * These are GET requests that require sending a `resource` parameter on the query.\n * This resource can be derived from the scopes received through the getToken call, as long as only one scope is received.\n * Multiple scopes assume that the resulting token will have access to multiple resources, which won't be the case.\n *\n * For that reason, when we encounter multiple scopes, we return undefined.\n * It's up to the individual MSI implementations to throw the errors (which helps us provide less generic errors).\n */\nfunction mapScopesToResource(scopes) {\n    let scope = \"\";\n    if (Array.isArray(scopes)) {\n        if (scopes.length !== 1) {\n            return;\n        }\n        scope = scopes[0];\n    }\n    else if (typeof scopes === \"string\") {\n        scope = scopes;\n    }\n    if (!scope.endsWith(DefaultScopeSuffix)) {\n        return scope;\n    }\n    return scope.substr(0, scope.lastIndexOf(DefaultScopeSuffix));\n}\n/**\n * Given a token response, return the expiration timestamp as the number of milliseconds from the Unix epoch.\n * @param body - A parsed response body from the authentication endpoint.\n */\nfunction parseExpirationTimestamp(body) {\n    if (typeof body.expires_on === \"number\") {\n        return body.expires_on * 1000;\n    }\n    if (typeof body.expires_on === \"string\") {\n        const asNumber = +body.expires_on;\n        if (!isNaN(asNumber)) {\n            return asNumber * 1000;\n        }\n        const asDate = Date.parse(body.expires_on);\n        if (!isNaN(asDate)) {\n            return asDate;\n        }\n    }\n    if (typeof body.expires_in === \"number\") {\n        return Date.now() + body.expires_in * 1000;\n    }\n    throw new Error(`Failed to parse token expiration from body. expires_in=\"${body.expires_in}\", expires_on=\"${body.expires_on}\"`);\n}\n/**\n * Given a token response, return the expiration timestamp as the number of milliseconds from the Unix epoch.\n * @param body - A parsed response body from the authentication endpoint.\n */\nfunction parseRefreshTimestamp(body) {\n    if (body.refresh_on) {\n        if (typeof body.refresh_on === \"number\") {\n            return body.refresh_on * 1000;\n        }\n        if (typeof body.refresh_on === \"string\") {\n            const asNumber = +body.refresh_on;\n            if (!isNaN(asNumber)) {\n                return asNumber * 1000;\n            }\n            const asDate = Date.parse(body.refresh_on);\n            if (!isNaN(asDate)) {\n                return asDate;\n            }\n        }\n        throw new Error(`Failed to parse refresh_on from body. refresh_on=\"${body.refresh_on}\"`);\n    }\n    else {\n        return undefined;\n    }\n}\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QvY29tbW9uanMvY3JlZGVudGlhbHMvbWFuYWdlZElkZW50aXR5Q3JlZGVudGlhbC91dGlscy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUNBQWlDO0FBQ2pDLDJCQUEyQjtBQUMzQixnQ0FBZ0M7QUFDaEMsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0VBQStFLGdCQUFnQixpQkFBaUIsZ0JBQWdCO0FBQ2hJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2RUFBNkUsZ0JBQWdCO0FBQzdGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QvY29tbW9uanMvY3JlZGVudGlhbHMvbWFuYWdlZElkZW50aXR5Q3JlZGVudGlhbC91dGlscy5qcz8zNDFkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNlcnZpY2VGYWJyaWNFcnJvck1lc3NhZ2UgPSB2b2lkIDA7XG5leHBvcnRzLm1hcFNjb3Blc1RvUmVzb3VyY2UgPSBtYXBTY29wZXNUb1Jlc291cmNlO1xuZXhwb3J0cy5wYXJzZUV4cGlyYXRpb25UaW1lc3RhbXAgPSBwYXJzZUV4cGlyYXRpb25UaW1lc3RhbXA7XG5leHBvcnRzLnBhcnNlUmVmcmVzaFRpbWVzdGFtcCA9IHBhcnNlUmVmcmVzaFRpbWVzdGFtcDtcbmNvbnN0IERlZmF1bHRTY29wZVN1ZmZpeCA9IFwiLy5kZWZhdWx0XCI7XG4vKipcbiAqIEVycm9yIG1lc3NhZ2UgZm9yIFNlcnZpY2UgRmFicmljIE1hbmFnZWQgSWRlbnRpdHkgZW52aXJvbm1lbnQuXG4gKi9cbmV4cG9ydHMuc2VydmljZUZhYnJpY0Vycm9yTWVzc2FnZSA9IFwiU3BlY2lmeWluZyBhIGBjbGllbnRJZGAgb3IgYHJlc291cmNlSWRgIGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIFNlcnZpY2UgRmFicmljIG1hbmFnZWQgaWRlbnRpdHkgZW52aXJvbm1lbnQuIFRoZSBtYW5hZ2VkIGlkZW50aXR5IGNvbmZpZ3VyYXRpb24gaXMgZGV0ZXJtaW5lZCBieSB0aGUgU2VydmljZSBGYWJyaWMgY2x1c3RlciByZXNvdXJjZSBjb25maWd1cmF0aW9uLiBTZWUgaHR0cHM6Ly9ha2EubXMvc2VydmljZWZhYnJpY21pIGZvciBtb3JlIGluZm9ybWF0aW9uXCI7XG4vKipcbiAqIE1vc3QgTVNJcyBzZW5kIHJlcXVlc3RzIHRvIHRoZSBJTURTIGVuZHBvaW50LCBvciBhIHNpbWlsYXIgZW5kcG9pbnQuXG4gKiBUaGVzZSBhcmUgR0VUIHJlcXVlc3RzIHRoYXQgcmVxdWlyZSBzZW5kaW5nIGEgYHJlc291cmNlYCBwYXJhbWV0ZXIgb24gdGhlIHF1ZXJ5LlxuICogVGhpcyByZXNvdXJjZSBjYW4gYmUgZGVyaXZlZCBmcm9tIHRoZSBzY29wZXMgcmVjZWl2ZWQgdGhyb3VnaCB0aGUgZ2V0VG9rZW4gY2FsbCwgYXMgbG9uZyBhcyBvbmx5IG9uZSBzY29wZSBpcyByZWNlaXZlZC5cbiAqIE11bHRpcGxlIHNjb3BlcyBhc3N1bWUgdGhhdCB0aGUgcmVzdWx0aW5nIHRva2VuIHdpbGwgaGF2ZSBhY2Nlc3MgdG8gbXVsdGlwbGUgcmVzb3VyY2VzLCB3aGljaCB3b24ndCBiZSB0aGUgY2FzZS5cbiAqXG4gKiBGb3IgdGhhdCByZWFzb24sIHdoZW4gd2UgZW5jb3VudGVyIG11bHRpcGxlIHNjb3Blcywgd2UgcmV0dXJuIHVuZGVmaW5lZC5cbiAqIEl0J3MgdXAgdG8gdGhlIGluZGl2aWR1YWwgTVNJIGltcGxlbWVudGF0aW9ucyB0byB0aHJvdyB0aGUgZXJyb3JzICh3aGljaCBoZWxwcyB1cyBwcm92aWRlIGxlc3MgZ2VuZXJpYyBlcnJvcnMpLlxuICovXG5mdW5jdGlvbiBtYXBTY29wZXNUb1Jlc291cmNlKHNjb3Blcykge1xuICAgIGxldCBzY29wZSA9IFwiXCI7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc2NvcGVzKSkge1xuICAgICAgICBpZiAoc2NvcGVzLmxlbmd0aCAhPT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHNjb3BlID0gc2NvcGVzWzBdO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2Ygc2NvcGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHNjb3BlID0gc2NvcGVzO1xuICAgIH1cbiAgICBpZiAoIXNjb3BlLmVuZHNXaXRoKERlZmF1bHRTY29wZVN1ZmZpeCkpIHtcbiAgICAgICAgcmV0dXJuIHNjb3BlO1xuICAgIH1cbiAgICByZXR1cm4gc2NvcGUuc3Vic3RyKDAsIHNjb3BlLmxhc3RJbmRleE9mKERlZmF1bHRTY29wZVN1ZmZpeCkpO1xufVxuLyoqXG4gKiBHaXZlbiBhIHRva2VuIHJlc3BvbnNlLCByZXR1cm4gdGhlIGV4cGlyYXRpb24gdGltZXN0YW1wIGFzIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGZyb20gdGhlIFVuaXggZXBvY2guXG4gKiBAcGFyYW0gYm9keSAtIEEgcGFyc2VkIHJlc3BvbnNlIGJvZHkgZnJvbSB0aGUgYXV0aGVudGljYXRpb24gZW5kcG9pbnQuXG4gKi9cbmZ1bmN0aW9uIHBhcnNlRXhwaXJhdGlvblRpbWVzdGFtcChib2R5KSB7XG4gICAgaWYgKHR5cGVvZiBib2R5LmV4cGlyZXNfb24gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgcmV0dXJuIGJvZHkuZXhwaXJlc19vbiAqIDEwMDA7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgYm9keS5leHBpcmVzX29uID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGNvbnN0IGFzTnVtYmVyID0gK2JvZHkuZXhwaXJlc19vbjtcbiAgICAgICAgaWYgKCFpc05hTihhc051bWJlcikpIHtcbiAgICAgICAgICAgIHJldHVybiBhc051bWJlciAqIDEwMDA7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYXNEYXRlID0gRGF0ZS5wYXJzZShib2R5LmV4cGlyZXNfb24pO1xuICAgICAgICBpZiAoIWlzTmFOKGFzRGF0ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBhc0RhdGU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHR5cGVvZiBib2R5LmV4cGlyZXNfaW4gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgcmV0dXJuIERhdGUubm93KCkgKyBib2R5LmV4cGlyZXNfaW4gKiAxMDAwO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBwYXJzZSB0b2tlbiBleHBpcmF0aW9uIGZyb20gYm9keS4gZXhwaXJlc19pbj1cIiR7Ym9keS5leHBpcmVzX2lufVwiLCBleHBpcmVzX29uPVwiJHtib2R5LmV4cGlyZXNfb259XCJgKTtcbn1cbi8qKlxuICogR2l2ZW4gYSB0b2tlbiByZXNwb25zZSwgcmV0dXJuIHRoZSBleHBpcmF0aW9uIHRpbWVzdGFtcCBhcyB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBmcm9tIHRoZSBVbml4IGVwb2NoLlxuICogQHBhcmFtIGJvZHkgLSBBIHBhcnNlZCByZXNwb25zZSBib2R5IGZyb20gdGhlIGF1dGhlbnRpY2F0aW9uIGVuZHBvaW50LlxuICovXG5mdW5jdGlvbiBwYXJzZVJlZnJlc2hUaW1lc3RhbXAoYm9keSkge1xuICAgIGlmIChib2R5LnJlZnJlc2hfb24pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBib2R5LnJlZnJlc2hfb24gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBib2R5LnJlZnJlc2hfb24gKiAxMDAwO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgYm9keS5yZWZyZXNoX29uID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBjb25zdCBhc051bWJlciA9ICtib2R5LnJlZnJlc2hfb247XG4gICAgICAgICAgICBpZiAoIWlzTmFOKGFzTnVtYmVyKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhc051bWJlciAqIDEwMDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBhc0RhdGUgPSBEYXRlLnBhcnNlKGJvZHkucmVmcmVzaF9vbik7XG4gICAgICAgICAgICBpZiAoIWlzTmFOKGFzRGF0ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXNEYXRlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIHBhcnNlIHJlZnJlc2hfb24gZnJvbSBib2R5LiByZWZyZXNoX29uPVwiJHtib2R5LnJlZnJlc2hfb259XCJgKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/managedIdentityCredential/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/onBehalfOfCredential.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist/commonjs/credentials/onBehalfOfCredential.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OnBehalfOfCredential = void 0;\nconst msalClient_js_1 = __webpack_require__(/*! ../msal/nodeFlows/msalClient.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/msal/nodeFlows/msalClient.js\");\nconst logging_js_1 = __webpack_require__(/*! ../util/logging.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/logging.js\");\nconst tenantIdUtils_js_1 = __webpack_require__(/*! ../util/tenantIdUtils.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/tenantIdUtils.js\");\nconst errors_js_1 = __webpack_require__(/*! ../errors.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/errors.js\");\nconst node_crypto_1 = __webpack_require__(/*! node:crypto */ \"node:crypto\");\nconst scopeUtils_js_1 = __webpack_require__(/*! ../util/scopeUtils.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/scopeUtils.js\");\nconst promises_1 = __webpack_require__(/*! node:fs/promises */ \"node:fs/promises\");\nconst tracing_js_1 = __webpack_require__(/*! ../util/tracing.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/tracing.js\");\nconst credentialName = \"OnBehalfOfCredential\";\nconst logger = (0, logging_js_1.credentialLogger)(credentialName);\n/**\n * Enables authentication to Microsoft Entra ID using the [On Behalf Of flow](https://learn.microsoft.com/entra/identity-platform/v2-oauth2-on-behalf-of-flow).\n */\nclass OnBehalfOfCredential {\n    tenantId;\n    additionallyAllowedTenantIds;\n    msalClient;\n    sendCertificateChain;\n    certificatePath;\n    clientSecret;\n    userAssertionToken;\n    clientAssertion;\n    constructor(options) {\n        const { clientSecret } = options;\n        const { certificatePath, sendCertificateChain } = options;\n        const { getAssertion } = options;\n        const { tenantId, clientId, userAssertionToken, additionallyAllowedTenants: additionallyAllowedTenantIds, } = options;\n        if (!tenantId) {\n            throw new errors_js_1.CredentialUnavailableError(`${credentialName}: tenantId is a required parameter. To troubleshoot, visit https://aka.ms/azsdk/js/identity/serviceprincipalauthentication/troubleshoot.`);\n        }\n        if (!clientId) {\n            throw new errors_js_1.CredentialUnavailableError(`${credentialName}: clientId is a required parameter. To troubleshoot, visit https://aka.ms/azsdk/js/identity/serviceprincipalauthentication/troubleshoot.`);\n        }\n        if (!clientSecret && !certificatePath && !getAssertion) {\n            throw new errors_js_1.CredentialUnavailableError(`${credentialName}: You must provide one of clientSecret, certificatePath, or a getAssertion callback but none were provided. To troubleshoot, visit https://aka.ms/azsdk/js/identity/serviceprincipalauthentication/troubleshoot.`);\n        }\n        if (!userAssertionToken) {\n            throw new errors_js_1.CredentialUnavailableError(`${credentialName}: userAssertionToken is a required parameter. To troubleshoot, visit https://aka.ms/azsdk/js/identity/serviceprincipalauthentication/troubleshoot.`);\n        }\n        this.certificatePath = certificatePath;\n        this.clientSecret = clientSecret;\n        this.userAssertionToken = userAssertionToken;\n        this.sendCertificateChain = sendCertificateChain;\n        this.clientAssertion = getAssertion;\n        this.tenantId = tenantId;\n        this.additionallyAllowedTenantIds = (0, tenantIdUtils_js_1.resolveAdditionallyAllowedTenantIds)(additionallyAllowedTenantIds);\n        this.msalClient = (0, msalClient_js_1.createMsalClient)(clientId, this.tenantId, {\n            ...options,\n            logger,\n            tokenCredentialOptions: options,\n        });\n    }\n    /**\n     * Authenticates with Microsoft Entra ID and returns an access token if successful.\n     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure the underlying network requests.\n     */\n    async getToken(scopes, options = {}) {\n        return tracing_js_1.tracingClient.withSpan(`${credentialName}.getToken`, options, async (newOptions) => {\n            newOptions.tenantId = (0, tenantIdUtils_js_1.processMultiTenantRequest)(this.tenantId, newOptions, this.additionallyAllowedTenantIds, logger);\n            const arrayScopes = (0, scopeUtils_js_1.ensureScopes)(scopes);\n            if (this.certificatePath) {\n                const clientCertificate = await this.buildClientCertificate(this.certificatePath);\n                return this.msalClient.getTokenOnBehalfOf(arrayScopes, this.userAssertionToken, clientCertificate, newOptions);\n            }\n            else if (this.clientSecret) {\n                return this.msalClient.getTokenOnBehalfOf(arrayScopes, this.userAssertionToken, this.clientSecret, options);\n            }\n            else if (this.clientAssertion) {\n                return this.msalClient.getTokenOnBehalfOf(arrayScopes, this.userAssertionToken, this.clientAssertion, options);\n            }\n            else {\n                // this is an invalid scenario and is a bug, as the constructor should have thrown an error if neither clientSecret nor certificatePath nor clientAssertion were provided\n                throw new Error(\"Expected either clientSecret or certificatePath or clientAssertion to be defined.\");\n            }\n        });\n    }\n    async buildClientCertificate(certificatePath) {\n        try {\n            const parts = await this.parseCertificate({ certificatePath }, this.sendCertificateChain);\n            return {\n                thumbprint: parts.thumbprint,\n                thumbprintSha256: parts.thumbprintSha256,\n                privateKey: parts.certificateContents,\n                x5c: parts.x5c,\n            };\n        }\n        catch (error) {\n            logger.info((0, logging_js_1.formatError)(\"\", error));\n            throw error;\n        }\n    }\n    async parseCertificate(configuration, sendCertificateChain) {\n        const certificatePath = configuration.certificatePath;\n        const certificateContents = await (0, promises_1.readFile)(certificatePath, \"utf8\");\n        const x5c = sendCertificateChain ? certificateContents : undefined;\n        const certificatePattern = /(-+BEGIN CERTIFICATE-+)(\\n\\r?|\\r\\n?)([A-Za-z0-9+/\\n\\r]+=*)(\\n\\r?|\\r\\n?)(-+END CERTIFICATE-+)/g;\n        const publicKeys = [];\n        // Match all possible certificates, in the order they are in the file. These will form the chain that is used for x5c\n        let match;\n        do {\n            match = certificatePattern.exec(certificateContents);\n            if (match) {\n                publicKeys.push(match[3]);\n            }\n        } while (match);\n        if (publicKeys.length === 0) {\n            throw new Error(\"The file at the specified path does not contain a PEM-encoded certificate.\");\n        }\n        const thumbprint = (0, node_crypto_1.createHash)(\"sha1\") // CodeQL [SM04514] Needed for backward compatibility reason\n            .update(Buffer.from(publicKeys[0], \"base64\"))\n            .digest(\"hex\")\n            .toUpperCase();\n        const thumbprintSha256 = (0, node_crypto_1.createHash)(\"sha256\")\n            .update(Buffer.from(publicKeys[0], \"base64\"))\n            .digest(\"hex\")\n            .toUpperCase();\n        return {\n            certificateContents,\n            thumbprintSha256,\n            thumbprint,\n            x5c,\n        };\n    }\n}\nexports.OnBehalfOfCredential = OnBehalfOfCredential;\n//# sourceMappingURL=onBehalfOfCredential.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/onBehalfOfCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/usernamePasswordCredential.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist/commonjs/credentials/usernamePasswordCredential.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.UsernamePasswordCredential = void 0;\nconst msalClient_js_1 = __webpack_require__(/*! ../msal/nodeFlows/msalClient.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/msal/nodeFlows/msalClient.js\");\nconst tenantIdUtils_js_1 = __webpack_require__(/*! ../util/tenantIdUtils.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/tenantIdUtils.js\");\nconst errors_js_1 = __webpack_require__(/*! ../errors.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/errors.js\");\nconst logging_js_1 = __webpack_require__(/*! ../util/logging.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/logging.js\");\nconst scopeUtils_js_1 = __webpack_require__(/*! ../util/scopeUtils.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/scopeUtils.js\");\nconst tracing_js_1 = __webpack_require__(/*! ../util/tracing.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/tracing.js\");\nconst logger = (0, logging_js_1.credentialLogger)(\"UsernamePasswordCredential\");\n/**\n * Enables authentication to Microsoft Entra ID with a user's\n * username and password. This credential requires a high degree of\n * trust so you should only use it when other, more secure credential\n * types can't be used.\n * @deprecated UsernamePasswordCredential is deprecated. Use a more secure credential. See https://aka.ms/azsdk/identity/mfa for details.\n */\nclass UsernamePasswordCredential {\n    tenantId;\n    additionallyAllowedTenantIds;\n    msalClient;\n    username;\n    password;\n    /**\n     * Creates an instance of the UsernamePasswordCredential with the details\n     * needed to authenticate against Microsoft Entra ID with a username\n     * and password.\n     *\n     * @param tenantId - The Microsoft Entra tenant (directory).\n     * @param clientId - The client (application) ID of an App Registration in the tenant.\n     * @param username - The user account's e-mail address (user name).\n     * @param password - The user account's account password\n     * @param options - Options for configuring the client which makes the authentication request.\n     */\n    constructor(tenantId, clientId, username, password, options = {}) {\n        if (!tenantId) {\n            throw new errors_js_1.CredentialUnavailableError(\"UsernamePasswordCredential: tenantId is a required parameter. To troubleshoot, visit https://aka.ms/azsdk/js/identity/usernamepasswordcredential/troubleshoot.\");\n        }\n        if (!clientId) {\n            throw new errors_js_1.CredentialUnavailableError(\"UsernamePasswordCredential: clientId is a required parameter. To troubleshoot, visit https://aka.ms/azsdk/js/identity/usernamepasswordcredential/troubleshoot.\");\n        }\n        if (!username) {\n            throw new errors_js_1.CredentialUnavailableError(\"UsernamePasswordCredential: username is a required parameter. To troubleshoot, visit https://aka.ms/azsdk/js/identity/usernamepasswordcredential/troubleshoot.\");\n        }\n        if (!password) {\n            throw new errors_js_1.CredentialUnavailableError(\"UsernamePasswordCredential: password is a required parameter. To troubleshoot, visit https://aka.ms/azsdk/js/identity/usernamepasswordcredential/troubleshoot.\");\n        }\n        this.tenantId = tenantId;\n        this.additionallyAllowedTenantIds = (0, tenantIdUtils_js_1.resolveAdditionallyAllowedTenantIds)(options?.additionallyAllowedTenants);\n        this.username = username;\n        this.password = password;\n        this.msalClient = (0, msalClient_js_1.createMsalClient)(clientId, this.tenantId, {\n            ...options,\n            tokenCredentialOptions: options ?? {},\n        });\n    }\n    /**\n     * Authenticates with Microsoft Entra ID and returns an access token if successful.\n     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n     *\n     * If the user provided the option `disableAutomaticAuthentication`,\n     * once the token can't be retrieved silently,\n     * this method won't attempt to request user interaction to retrieve the token.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this\n     *                TokenCredential implementation might make.\n     */\n    async getToken(scopes, options = {}) {\n        return tracing_js_1.tracingClient.withSpan(`${this.constructor.name}.getToken`, options, async (newOptions) => {\n            newOptions.tenantId = (0, tenantIdUtils_js_1.processMultiTenantRequest)(this.tenantId, newOptions, this.additionallyAllowedTenantIds, logger);\n            const arrayScopes = (0, scopeUtils_js_1.ensureScopes)(scopes);\n            return this.msalClient.getTokenByUsernamePassword(arrayScopes, this.username, this.password, newOptions);\n        });\n    }\n}\nexports.UsernamePasswordCredential = UsernamePasswordCredential;\n//# sourceMappingURL=usernamePasswordCredential.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QvY29tbW9uanMvY3JlZGVudGlhbHMvdXNlcm5hbWVQYXNzd29yZENyZWRlbnRpYWwuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtDQUFrQztBQUNsQyx3QkFBd0IsbUJBQU8sQ0FBQyx3SEFBaUM7QUFDakUsMkJBQTJCLG1CQUFPLENBQUMsMEdBQTBCO0FBQzdELG9CQUFvQixtQkFBTyxDQUFDLGtGQUFjO0FBQzFDLHFCQUFxQixtQkFBTyxDQUFDLDhGQUFvQjtBQUNqRCx3QkFBd0IsbUJBQU8sQ0FBQyxvR0FBdUI7QUFDdkQscUJBQXFCLG1CQUFPLENBQUMsOEZBQW9CO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0VBQW9FO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRDtBQUNqRCxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLGtDQUFrQztBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkMsc0RBQXNELHNCQUFzQjtBQUM1RTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLGtDQUFrQztBQUNsQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QvY29tbW9uanMvY3JlZGVudGlhbHMvdXNlcm5hbWVQYXNzd29yZENyZWRlbnRpYWwuanM/NmNkYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Vc2VybmFtZVBhc3N3b3JkQ3JlZGVudGlhbCA9IHZvaWQgMDtcbmNvbnN0IG1zYWxDbGllbnRfanNfMSA9IHJlcXVpcmUoXCIuLi9tc2FsL25vZGVGbG93cy9tc2FsQ2xpZW50LmpzXCIpO1xuY29uc3QgdGVuYW50SWRVdGlsc19qc18xID0gcmVxdWlyZShcIi4uL3V0aWwvdGVuYW50SWRVdGlscy5qc1wiKTtcbmNvbnN0IGVycm9yc19qc18xID0gcmVxdWlyZShcIi4uL2Vycm9ycy5qc1wiKTtcbmNvbnN0IGxvZ2dpbmdfanNfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xvZ2dpbmcuanNcIik7XG5jb25zdCBzY29wZVV0aWxzX2pzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9zY29wZVV0aWxzLmpzXCIpO1xuY29uc3QgdHJhY2luZ19qc18xID0gcmVxdWlyZShcIi4uL3V0aWwvdHJhY2luZy5qc1wiKTtcbmNvbnN0IGxvZ2dlciA9ICgwLCBsb2dnaW5nX2pzXzEuY3JlZGVudGlhbExvZ2dlcikoXCJVc2VybmFtZVBhc3N3b3JkQ3JlZGVudGlhbFwiKTtcbi8qKlxuICogRW5hYmxlcyBhdXRoZW50aWNhdGlvbiB0byBNaWNyb3NvZnQgRW50cmEgSUQgd2l0aCBhIHVzZXInc1xuICogdXNlcm5hbWUgYW5kIHBhc3N3b3JkLiBUaGlzIGNyZWRlbnRpYWwgcmVxdWlyZXMgYSBoaWdoIGRlZ3JlZSBvZlxuICogdHJ1c3Qgc28geW91IHNob3VsZCBvbmx5IHVzZSBpdCB3aGVuIG90aGVyLCBtb3JlIHNlY3VyZSBjcmVkZW50aWFsXG4gKiB0eXBlcyBjYW4ndCBiZSB1c2VkLlxuICogQGRlcHJlY2F0ZWQgVXNlcm5hbWVQYXNzd29yZENyZWRlbnRpYWwgaXMgZGVwcmVjYXRlZC4gVXNlIGEgbW9yZSBzZWN1cmUgY3JlZGVudGlhbC4gU2VlIGh0dHBzOi8vYWthLm1zL2F6c2RrL2lkZW50aXR5L21mYSBmb3IgZGV0YWlscy5cbiAqL1xuY2xhc3MgVXNlcm5hbWVQYXNzd29yZENyZWRlbnRpYWwge1xuICAgIHRlbmFudElkO1xuICAgIGFkZGl0aW9uYWxseUFsbG93ZWRUZW5hbnRJZHM7XG4gICAgbXNhbENsaWVudDtcbiAgICB1c2VybmFtZTtcbiAgICBwYXNzd29yZDtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIHRoZSBVc2VybmFtZVBhc3N3b3JkQ3JlZGVudGlhbCB3aXRoIHRoZSBkZXRhaWxzXG4gICAgICogbmVlZGVkIHRvIGF1dGhlbnRpY2F0ZSBhZ2FpbnN0IE1pY3Jvc29mdCBFbnRyYSBJRCB3aXRoIGEgdXNlcm5hbWVcbiAgICAgKiBhbmQgcGFzc3dvcmQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdGVuYW50SWQgLSBUaGUgTWljcm9zb2Z0IEVudHJhIHRlbmFudCAoZGlyZWN0b3J5KS5cbiAgICAgKiBAcGFyYW0gY2xpZW50SWQgLSBUaGUgY2xpZW50IChhcHBsaWNhdGlvbikgSUQgb2YgYW4gQXBwIFJlZ2lzdHJhdGlvbiBpbiB0aGUgdGVuYW50LlxuICAgICAqIEBwYXJhbSB1c2VybmFtZSAtIFRoZSB1c2VyIGFjY291bnQncyBlLW1haWwgYWRkcmVzcyAodXNlciBuYW1lKS5cbiAgICAgKiBAcGFyYW0gcGFzc3dvcmQgLSBUaGUgdXNlciBhY2NvdW50J3MgYWNjb3VudCBwYXNzd29yZFxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyBmb3IgY29uZmlndXJpbmcgdGhlIGNsaWVudCB3aGljaCBtYWtlcyB0aGUgYXV0aGVudGljYXRpb24gcmVxdWVzdC5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih0ZW5hbnRJZCwgY2xpZW50SWQsIHVzZXJuYW1lLCBwYXNzd29yZCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIGlmICghdGVuYW50SWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5DcmVkZW50aWFsVW5hdmFpbGFibGVFcnJvcihcIlVzZXJuYW1lUGFzc3dvcmRDcmVkZW50aWFsOiB0ZW5hbnRJZCBpcyBhIHJlcXVpcmVkIHBhcmFtZXRlci4gVG8gdHJvdWJsZXNob290LCB2aXNpdCBodHRwczovL2FrYS5tcy9henNkay9qcy9pZGVudGl0eS91c2VybmFtZXBhc3N3b3JkY3JlZGVudGlhbC90cm91Ymxlc2hvb3QuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghY2xpZW50SWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5DcmVkZW50aWFsVW5hdmFpbGFibGVFcnJvcihcIlVzZXJuYW1lUGFzc3dvcmRDcmVkZW50aWFsOiBjbGllbnRJZCBpcyBhIHJlcXVpcmVkIHBhcmFtZXRlci4gVG8gdHJvdWJsZXNob290LCB2aXNpdCBodHRwczovL2FrYS5tcy9henNkay9qcy9pZGVudGl0eS91c2VybmFtZXBhc3N3b3JkY3JlZGVudGlhbC90cm91Ymxlc2hvb3QuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdXNlcm5hbWUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5DcmVkZW50aWFsVW5hdmFpbGFibGVFcnJvcihcIlVzZXJuYW1lUGFzc3dvcmRDcmVkZW50aWFsOiB1c2VybmFtZSBpcyBhIHJlcXVpcmVkIHBhcmFtZXRlci4gVG8gdHJvdWJsZXNob290LCB2aXNpdCBodHRwczovL2FrYS5tcy9henNkay9qcy9pZGVudGl0eS91c2VybmFtZXBhc3N3b3JkY3JlZGVudGlhbC90cm91Ymxlc2hvb3QuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghcGFzc3dvcmQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5DcmVkZW50aWFsVW5hdmFpbGFibGVFcnJvcihcIlVzZXJuYW1lUGFzc3dvcmRDcmVkZW50aWFsOiBwYXNzd29yZCBpcyBhIHJlcXVpcmVkIHBhcmFtZXRlci4gVG8gdHJvdWJsZXNob290LCB2aXNpdCBodHRwczovL2FrYS5tcy9henNkay9qcy9pZGVudGl0eS91c2VybmFtZXBhc3N3b3JkY3JlZGVudGlhbC90cm91Ymxlc2hvb3QuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudGVuYW50SWQgPSB0ZW5hbnRJZDtcbiAgICAgICAgdGhpcy5hZGRpdGlvbmFsbHlBbGxvd2VkVGVuYW50SWRzID0gKDAsIHRlbmFudElkVXRpbHNfanNfMS5yZXNvbHZlQWRkaXRpb25hbGx5QWxsb3dlZFRlbmFudElkcykob3B0aW9ucz8uYWRkaXRpb25hbGx5QWxsb3dlZFRlbmFudHMpO1xuICAgICAgICB0aGlzLnVzZXJuYW1lID0gdXNlcm5hbWU7XG4gICAgICAgIHRoaXMucGFzc3dvcmQgPSBwYXNzd29yZDtcbiAgICAgICAgdGhpcy5tc2FsQ2xpZW50ID0gKDAsIG1zYWxDbGllbnRfanNfMS5jcmVhdGVNc2FsQ2xpZW50KShjbGllbnRJZCwgdGhpcy50ZW5hbnRJZCwge1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIHRva2VuQ3JlZGVudGlhbE9wdGlvbnM6IG9wdGlvbnMgPz8ge30sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBdXRoZW50aWNhdGVzIHdpdGggTWljcm9zb2Z0IEVudHJhIElEIGFuZCByZXR1cm5zIGFuIGFjY2VzcyB0b2tlbiBpZiBzdWNjZXNzZnVsLlxuICAgICAqIElmIGF1dGhlbnRpY2F0aW9uIGZhaWxzLCBhIHtAbGluayBDcmVkZW50aWFsVW5hdmFpbGFibGVFcnJvcn0gd2lsbCBiZSB0aHJvd24gd2l0aCB0aGUgZGV0YWlscyBvZiB0aGUgZmFpbHVyZS5cbiAgICAgKlxuICAgICAqIElmIHRoZSB1c2VyIHByb3ZpZGVkIHRoZSBvcHRpb24gYGRpc2FibGVBdXRvbWF0aWNBdXRoZW50aWNhdGlvbmAsXG4gICAgICogb25jZSB0aGUgdG9rZW4gY2FuJ3QgYmUgcmV0cmlldmVkIHNpbGVudGx5LFxuICAgICAqIHRoaXMgbWV0aG9kIHdvbid0IGF0dGVtcHQgdG8gcmVxdWVzdCB1c2VyIGludGVyYWN0aW9uIHRvIHJldHJpZXZlIHRoZSB0b2tlbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzY29wZXMgLSBUaGUgbGlzdCBvZiBzY29wZXMgZm9yIHdoaWNoIHRoZSB0b2tlbiB3aWxsIGhhdmUgYWNjZXNzLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgdXNlZCB0byBjb25maWd1cmUgYW55IHJlcXVlc3RzIHRoaXNcbiAgICAgKiAgICAgICAgICAgICAgICBUb2tlbkNyZWRlbnRpYWwgaW1wbGVtZW50YXRpb24gbWlnaHQgbWFrZS5cbiAgICAgKi9cbiAgICBhc3luYyBnZXRUb2tlbihzY29wZXMsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICByZXR1cm4gdHJhY2luZ19qc18xLnRyYWNpbmdDbGllbnQud2l0aFNwYW4oYCR7dGhpcy5jb25zdHJ1Y3Rvci5uYW1lfS5nZXRUb2tlbmAsIG9wdGlvbnMsIGFzeW5jIChuZXdPcHRpb25zKSA9PiB7XG4gICAgICAgICAgICBuZXdPcHRpb25zLnRlbmFudElkID0gKDAsIHRlbmFudElkVXRpbHNfanNfMS5wcm9jZXNzTXVsdGlUZW5hbnRSZXF1ZXN0KSh0aGlzLnRlbmFudElkLCBuZXdPcHRpb25zLCB0aGlzLmFkZGl0aW9uYWxseUFsbG93ZWRUZW5hbnRJZHMsIGxvZ2dlcik7XG4gICAgICAgICAgICBjb25zdCBhcnJheVNjb3BlcyA9ICgwLCBzY29wZVV0aWxzX2pzXzEuZW5zdXJlU2NvcGVzKShzY29wZXMpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubXNhbENsaWVudC5nZXRUb2tlbkJ5VXNlcm5hbWVQYXNzd29yZChhcnJheVNjb3BlcywgdGhpcy51c2VybmFtZSwgdGhpcy5wYXNzd29yZCwgbmV3T3B0aW9ucyk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydHMuVXNlcm5hbWVQYXNzd29yZENyZWRlbnRpYWwgPSBVc2VybmFtZVBhc3N3b3JkQ3JlZGVudGlhbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZXJuYW1lUGFzc3dvcmRDcmVkZW50aWFsLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/usernamePasswordCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/visualStudioCodeCredential.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist/commonjs/credentials/visualStudioCodeCredential.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.VisualStudioCodeCredential = void 0;\nconst logging_js_1 = __webpack_require__(/*! ../util/logging.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/logging.js\");\nconst tenantIdUtils_js_1 = __webpack_require__(/*! ../util/tenantIdUtils.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/tenantIdUtils.js\");\nconst errors_js_1 = __webpack_require__(/*! ../errors.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/errors.js\");\nconst tenantIdUtils_js_2 = __webpack_require__(/*! ../util/tenantIdUtils.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/tenantIdUtils.js\");\nconst msalClient_js_1 = __webpack_require__(/*! ../msal/nodeFlows/msalClient.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/msal/nodeFlows/msalClient.js\");\nconst scopeUtils_js_1 = __webpack_require__(/*! ../util/scopeUtils.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/scopeUtils.js\");\nconst msalPlugins_js_1 = __webpack_require__(/*! ../msal/nodeFlows/msalPlugins.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/msal/nodeFlows/msalPlugins.js\");\nconst utils_js_1 = __webpack_require__(/*! ../msal/utils.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/msal/utils.js\");\nconst promises_1 = __webpack_require__(/*! node:fs/promises */ \"node:fs/promises\");\nconst CommonTenantId = \"common\";\nconst VSCodeClientId = \"aebc6443-996d-45c2-90f0-388ff96faa56\";\nconst logger = (0, logging_js_1.credentialLogger)(\"VisualStudioCodeCredential\");\n// Map of unsupported Tenant IDs and the errors we will be throwing.\nconst unsupportedTenantIds = {\n    adfs: \"The VisualStudioCodeCredential does not support authentication with ADFS tenants.\",\n};\nfunction checkUnsupportedTenant(tenantId) {\n    // If the Tenant ID isn't supported, we throw.\n    const unsupportedTenantError = unsupportedTenantIds[tenantId];\n    if (unsupportedTenantError) {\n        throw new errors_js_1.CredentialUnavailableError(unsupportedTenantError);\n    }\n}\n/**\n * Connects to Azure using the user account signed in through the Azure Resources extension in Visual Studio Code.\n * Once the user has logged in via the extension, this credential can share the same refresh token\n * that is cached by the extension.\n */\nclass VisualStudioCodeCredential {\n    tenantId;\n    additionallyAllowedTenantIds;\n    msalClient;\n    options;\n    /**\n     * Creates an instance of VisualStudioCodeCredential to use for automatically authenticating via VSCode.\n     *\n     * **Note**: `VisualStudioCodeCredential` is provided by a plugin package:\n     * `@azure/identity-vscode`. If this package is not installed, then authentication using\n     * `VisualStudioCodeCredential` will not be available.\n     *\n     * @param options - Options for configuring the client which makes the authentication request.\n     */\n    constructor(options) {\n        this.options = options || {};\n        if (options && options.tenantId) {\n            (0, tenantIdUtils_js_2.checkTenantId)(logger, options.tenantId);\n            this.tenantId = options.tenantId;\n        }\n        else {\n            this.tenantId = CommonTenantId;\n        }\n        this.additionallyAllowedTenantIds = (0, tenantIdUtils_js_1.resolveAdditionallyAllowedTenantIds)(options?.additionallyAllowedTenants);\n        checkUnsupportedTenant(this.tenantId);\n    }\n    /**\n     * Runs preparations for any further getToken request:\n     *   - Validates that the plugin is available.\n     *   - Loads the authentication record from VSCode if available.\n     *   - Creates the MSAL client with the loaded plugin and authentication record.\n     */\n    async prepare(scopes) {\n        const tenantId = (0, tenantIdUtils_js_1.processMultiTenantRequest)(this.tenantId, this.options, this.additionallyAllowedTenantIds, logger) || this.tenantId;\n        if (!(0, msalPlugins_js_1.hasVSCodePlugin)() || !msalPlugins_js_1.vsCodeAuthRecordPath) {\n            throw new errors_js_1.CredentialUnavailableError(\"Visual Studio Code Authentication is not available.\" +\n                \" Ensure you have have Azure Resources Extension installed in VS Code,\" +\n                \" signed into Azure via VS Code, installed the @azure/identity-vscode package,\" +\n                \" and properly configured the extension.\");\n        }\n        // Load the authentication record directly from the path\n        const authenticationRecord = await this.loadAuthRecord(msalPlugins_js_1.vsCodeAuthRecordPath, scopes);\n        this.msalClient = (0, msalClient_js_1.createMsalClient)(VSCodeClientId, tenantId, {\n            ...this.options,\n            isVSCodeCredential: true,\n            brokerOptions: {\n                enabled: true,\n                parentWindowHandle: new Uint8Array(0),\n                useDefaultBrokerAccount: true,\n            },\n            authenticationRecord,\n        });\n    }\n    /**\n     * The promise of the single preparation that will be executed at the first getToken request for an instance of this class.\n     */\n    preparePromise;\n    /**\n     * Runs preparations for any further getToken, but only once.\n     */\n    prepareOnce(scopes) {\n        if (!this.preparePromise) {\n            this.preparePromise = this.prepare(scopes);\n        }\n        return this.preparePromise;\n    }\n    /**\n     * Returns the token found by searching VSCode's authentication cache or\n     * returns null if no token could be found.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this\n     *                `TokenCredential` implementation might make.\n     */\n    async getToken(scopes, options) {\n        // Load the plugin and authentication record only once\n        const scopeArray = (0, scopeUtils_js_1.ensureScopes)(scopes);\n        await this.prepareOnce(scopeArray);\n        if (!this.msalClient) {\n            throw new errors_js_1.CredentialUnavailableError(\"Visual Studio Code Authentication failed to initialize.\" +\n                \" Ensure you have have Azure Resources Extension installed in VS Code,\" +\n                \" signed into Azure via VS Code, installed the @azure/identity-vscode package,\" +\n                \" and properly configured the extension.\");\n        }\n        return this.msalClient.getTokenByInteractiveRequest(scopeArray, options || {});\n    }\n    /**\n     * Loads the authentication record from the specified path.\n     * @param authRecordPath - The path to the authentication record file.\n     * @param scopes - The list of scopes for which the token will have access.\n     * @returns The authentication record or undefined if loading fails.\n     */\n    async loadAuthRecord(authRecordPath, scopes) {\n        try {\n            const authRecordContent = await (0, promises_1.readFile)(authRecordPath, { encoding: \"utf8\" });\n            return (0, utils_js_1.deserializeAuthenticationRecord)(authRecordContent);\n        }\n        catch (error) {\n            logger.getToken.info((0, logging_js_1.formatError)(scopes, error));\n            throw new errors_js_1.CredentialUnavailableError(\"Cannot load authentication record in Visual Studio Code.\" +\n                \" Ensure you have have Azure Resources Extension installed in VS Code,\" +\n                \" signed into Azure via VS Code, installed the @azure/identity-vscode package,\" +\n                \" and properly configured the extension.\");\n        }\n    }\n}\nexports.VisualStudioCodeCredential = VisualStudioCodeCredential;\n//# sourceMappingURL=visualStudioCodeCredential.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QvY29tbW9uanMvY3JlZGVudGlhbHMvdmlzdWFsU3R1ZGlvQ29kZUNyZWRlbnRpYWwuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtDQUFrQztBQUNsQyxxQkFBcUIsbUJBQU8sQ0FBQyw4RkFBb0I7QUFDakQsMkJBQTJCLG1CQUFPLENBQUMsMEdBQTBCO0FBQzdELG9CQUFvQixtQkFBTyxDQUFDLGtGQUFjO0FBQzFDLDJCQUEyQixtQkFBTyxDQUFDLDBHQUEwQjtBQUM3RCx3QkFBd0IsbUJBQU8sQ0FBQyx3SEFBaUM7QUFDakUsd0JBQXdCLG1CQUFPLENBQUMsb0dBQXVCO0FBQ3ZELHlCQUF5QixtQkFBTyxDQUFDLDBIQUFrQztBQUNuRSxtQkFBbUIsbUJBQU8sQ0FBQywwRkFBa0I7QUFDN0MsbUJBQW1CLG1CQUFPLENBQUMsMENBQWtCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFGQUFxRjtBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1RkFBdUYsa0JBQWtCO0FBQ3pHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9pZGVudGl0eS9kaXN0L2NvbW1vbmpzL2NyZWRlbnRpYWxzL3Zpc3VhbFN0dWRpb0NvZGVDcmVkZW50aWFsLmpzPzFlMDYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVmlzdWFsU3R1ZGlvQ29kZUNyZWRlbnRpYWwgPSB2b2lkIDA7XG5jb25zdCBsb2dnaW5nX2pzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9sb2dnaW5nLmpzXCIpO1xuY29uc3QgdGVuYW50SWRVdGlsc19qc18xID0gcmVxdWlyZShcIi4uL3V0aWwvdGVuYW50SWRVdGlscy5qc1wiKTtcbmNvbnN0IGVycm9yc19qc18xID0gcmVxdWlyZShcIi4uL2Vycm9ycy5qc1wiKTtcbmNvbnN0IHRlbmFudElkVXRpbHNfanNfMiA9IHJlcXVpcmUoXCIuLi91dGlsL3RlbmFudElkVXRpbHMuanNcIik7XG5jb25zdCBtc2FsQ2xpZW50X2pzXzEgPSByZXF1aXJlKFwiLi4vbXNhbC9ub2RlRmxvd3MvbXNhbENsaWVudC5qc1wiKTtcbmNvbnN0IHNjb3BlVXRpbHNfanNfMSA9IHJlcXVpcmUoXCIuLi91dGlsL3Njb3BlVXRpbHMuanNcIik7XG5jb25zdCBtc2FsUGx1Z2luc19qc18xID0gcmVxdWlyZShcIi4uL21zYWwvbm9kZUZsb3dzL21zYWxQbHVnaW5zLmpzXCIpO1xuY29uc3QgdXRpbHNfanNfMSA9IHJlcXVpcmUoXCIuLi9tc2FsL3V0aWxzLmpzXCIpO1xuY29uc3QgcHJvbWlzZXNfMSA9IHJlcXVpcmUoXCJub2RlOmZzL3Byb21pc2VzXCIpO1xuY29uc3QgQ29tbW9uVGVuYW50SWQgPSBcImNvbW1vblwiO1xuY29uc3QgVlNDb2RlQ2xpZW50SWQgPSBcImFlYmM2NDQzLTk5NmQtNDVjMi05MGYwLTM4OGZmOTZmYWE1NlwiO1xuY29uc3QgbG9nZ2VyID0gKDAsIGxvZ2dpbmdfanNfMS5jcmVkZW50aWFsTG9nZ2VyKShcIlZpc3VhbFN0dWRpb0NvZGVDcmVkZW50aWFsXCIpO1xuLy8gTWFwIG9mIHVuc3VwcG9ydGVkIFRlbmFudCBJRHMgYW5kIHRoZSBlcnJvcnMgd2Ugd2lsbCBiZSB0aHJvd2luZy5cbmNvbnN0IHVuc3VwcG9ydGVkVGVuYW50SWRzID0ge1xuICAgIGFkZnM6IFwiVGhlIFZpc3VhbFN0dWRpb0NvZGVDcmVkZW50aWFsIGRvZXMgbm90IHN1cHBvcnQgYXV0aGVudGljYXRpb24gd2l0aCBBREZTIHRlbmFudHMuXCIsXG59O1xuZnVuY3Rpb24gY2hlY2tVbnN1cHBvcnRlZFRlbmFudCh0ZW5hbnRJZCkge1xuICAgIC8vIElmIHRoZSBUZW5hbnQgSUQgaXNuJ3Qgc3VwcG9ydGVkLCB3ZSB0aHJvdy5cbiAgICBjb25zdCB1bnN1cHBvcnRlZFRlbmFudEVycm9yID0gdW5zdXBwb3J0ZWRUZW5hbnRJZHNbdGVuYW50SWRdO1xuICAgIGlmICh1bnN1cHBvcnRlZFRlbmFudEVycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5DcmVkZW50aWFsVW5hdmFpbGFibGVFcnJvcih1bnN1cHBvcnRlZFRlbmFudEVycm9yKTtcbiAgICB9XG59XG4vKipcbiAqIENvbm5lY3RzIHRvIEF6dXJlIHVzaW5nIHRoZSB1c2VyIGFjY291bnQgc2lnbmVkIGluIHRocm91Z2ggdGhlIEF6dXJlIFJlc291cmNlcyBleHRlbnNpb24gaW4gVmlzdWFsIFN0dWRpbyBDb2RlLlxuICogT25jZSB0aGUgdXNlciBoYXMgbG9nZ2VkIGluIHZpYSB0aGUgZXh0ZW5zaW9uLCB0aGlzIGNyZWRlbnRpYWwgY2FuIHNoYXJlIHRoZSBzYW1lIHJlZnJlc2ggdG9rZW5cbiAqIHRoYXQgaXMgY2FjaGVkIGJ5IHRoZSBleHRlbnNpb24uXG4gKi9cbmNsYXNzIFZpc3VhbFN0dWRpb0NvZGVDcmVkZW50aWFsIHtcbiAgICB0ZW5hbnRJZDtcbiAgICBhZGRpdGlvbmFsbHlBbGxvd2VkVGVuYW50SWRzO1xuICAgIG1zYWxDbGllbnQ7XG4gICAgb3B0aW9ucztcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIFZpc3VhbFN0dWRpb0NvZGVDcmVkZW50aWFsIHRvIHVzZSBmb3IgYXV0b21hdGljYWxseSBhdXRoZW50aWNhdGluZyB2aWEgVlNDb2RlLlxuICAgICAqXG4gICAgICogKipOb3RlKio6IGBWaXN1YWxTdHVkaW9Db2RlQ3JlZGVudGlhbGAgaXMgcHJvdmlkZWQgYnkgYSBwbHVnaW4gcGFja2FnZTpcbiAgICAgKiBgQGF6dXJlL2lkZW50aXR5LXZzY29kZWAuIElmIHRoaXMgcGFja2FnZSBpcyBub3QgaW5zdGFsbGVkLCB0aGVuIGF1dGhlbnRpY2F0aW9uIHVzaW5nXG4gICAgICogYFZpc3VhbFN0dWRpb0NvZGVDcmVkZW50aWFsYCB3aWxsIG5vdCBiZSBhdmFpbGFibGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgZm9yIGNvbmZpZ3VyaW5nIHRoZSBjbGllbnQgd2hpY2ggbWFrZXMgdGhlIGF1dGhlbnRpY2F0aW9uIHJlcXVlc3QuXG4gICAgICovXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnRlbmFudElkKSB7XG4gICAgICAgICAgICAoMCwgdGVuYW50SWRVdGlsc19qc18yLmNoZWNrVGVuYW50SWQpKGxvZ2dlciwgb3B0aW9ucy50ZW5hbnRJZCk7XG4gICAgICAgICAgICB0aGlzLnRlbmFudElkID0gb3B0aW9ucy50ZW5hbnRJZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudGVuYW50SWQgPSBDb21tb25UZW5hbnRJZDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFkZGl0aW9uYWxseUFsbG93ZWRUZW5hbnRJZHMgPSAoMCwgdGVuYW50SWRVdGlsc19qc18xLnJlc29sdmVBZGRpdGlvbmFsbHlBbGxvd2VkVGVuYW50SWRzKShvcHRpb25zPy5hZGRpdGlvbmFsbHlBbGxvd2VkVGVuYW50cyk7XG4gICAgICAgIGNoZWNrVW5zdXBwb3J0ZWRUZW5hbnQodGhpcy50ZW5hbnRJZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJ1bnMgcHJlcGFyYXRpb25zIGZvciBhbnkgZnVydGhlciBnZXRUb2tlbiByZXF1ZXN0OlxuICAgICAqICAgLSBWYWxpZGF0ZXMgdGhhdCB0aGUgcGx1Z2luIGlzIGF2YWlsYWJsZS5cbiAgICAgKiAgIC0gTG9hZHMgdGhlIGF1dGhlbnRpY2F0aW9uIHJlY29yZCBmcm9tIFZTQ29kZSBpZiBhdmFpbGFibGUuXG4gICAgICogICAtIENyZWF0ZXMgdGhlIE1TQUwgY2xpZW50IHdpdGggdGhlIGxvYWRlZCBwbHVnaW4gYW5kIGF1dGhlbnRpY2F0aW9uIHJlY29yZC5cbiAgICAgKi9cbiAgICBhc3luYyBwcmVwYXJlKHNjb3Blcykge1xuICAgICAgICBjb25zdCB0ZW5hbnRJZCA9ICgwLCB0ZW5hbnRJZFV0aWxzX2pzXzEucHJvY2Vzc011bHRpVGVuYW50UmVxdWVzdCkodGhpcy50ZW5hbnRJZCwgdGhpcy5vcHRpb25zLCB0aGlzLmFkZGl0aW9uYWxseUFsbG93ZWRUZW5hbnRJZHMsIGxvZ2dlcikgfHwgdGhpcy50ZW5hbnRJZDtcbiAgICAgICAgaWYgKCEoMCwgbXNhbFBsdWdpbnNfanNfMS5oYXNWU0NvZGVQbHVnaW4pKCkgfHwgIW1zYWxQbHVnaW5zX2pzXzEudnNDb2RlQXV0aFJlY29yZFBhdGgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5DcmVkZW50aWFsVW5hdmFpbGFibGVFcnJvcihcIlZpc3VhbCBTdHVkaW8gQ29kZSBBdXRoZW50aWNhdGlvbiBpcyBub3QgYXZhaWxhYmxlLlwiICtcbiAgICAgICAgICAgICAgICBcIiBFbnN1cmUgeW91IGhhdmUgaGF2ZSBBenVyZSBSZXNvdXJjZXMgRXh0ZW5zaW9uIGluc3RhbGxlZCBpbiBWUyBDb2RlLFwiICtcbiAgICAgICAgICAgICAgICBcIiBzaWduZWQgaW50byBBenVyZSB2aWEgVlMgQ29kZSwgaW5zdGFsbGVkIHRoZSBAYXp1cmUvaWRlbnRpdHktdnNjb2RlIHBhY2thZ2UsXCIgK1xuICAgICAgICAgICAgICAgIFwiIGFuZCBwcm9wZXJseSBjb25maWd1cmVkIHRoZSBleHRlbnNpb24uXCIpO1xuICAgICAgICB9XG4gICAgICAgIC8vIExvYWQgdGhlIGF1dGhlbnRpY2F0aW9uIHJlY29yZCBkaXJlY3RseSBmcm9tIHRoZSBwYXRoXG4gICAgICAgIGNvbnN0IGF1dGhlbnRpY2F0aW9uUmVjb3JkID0gYXdhaXQgdGhpcy5sb2FkQXV0aFJlY29yZChtc2FsUGx1Z2luc19qc18xLnZzQ29kZUF1dGhSZWNvcmRQYXRoLCBzY29wZXMpO1xuICAgICAgICB0aGlzLm1zYWxDbGllbnQgPSAoMCwgbXNhbENsaWVudF9qc18xLmNyZWF0ZU1zYWxDbGllbnQpKFZTQ29kZUNsaWVudElkLCB0ZW5hbnRJZCwge1xuICAgICAgICAgICAgLi4udGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgaXNWU0NvZGVDcmVkZW50aWFsOiB0cnVlLFxuICAgICAgICAgICAgYnJva2VyT3B0aW9uczoge1xuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgcGFyZW50V2luZG93SGFuZGxlOiBuZXcgVWludDhBcnJheSgwKSxcbiAgICAgICAgICAgICAgICB1c2VEZWZhdWx0QnJva2VyQWNjb3VudDogdHJ1ZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhdXRoZW50aWNhdGlvblJlY29yZCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBwcm9taXNlIG9mIHRoZSBzaW5nbGUgcHJlcGFyYXRpb24gdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIGF0IHRoZSBmaXJzdCBnZXRUb2tlbiByZXF1ZXN0IGZvciBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgICAqL1xuICAgIHByZXBhcmVQcm9taXNlO1xuICAgIC8qKlxuICAgICAqIFJ1bnMgcHJlcGFyYXRpb25zIGZvciBhbnkgZnVydGhlciBnZXRUb2tlbiwgYnV0IG9ubHkgb25jZS5cbiAgICAgKi9cbiAgICBwcmVwYXJlT25jZShzY29wZXMpIHtcbiAgICAgICAgaWYgKCF0aGlzLnByZXBhcmVQcm9taXNlKSB7XG4gICAgICAgICAgICB0aGlzLnByZXBhcmVQcm9taXNlID0gdGhpcy5wcmVwYXJlKHNjb3Blcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMucHJlcGFyZVByb21pc2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHRva2VuIGZvdW5kIGJ5IHNlYXJjaGluZyBWU0NvZGUncyBhdXRoZW50aWNhdGlvbiBjYWNoZSBvclxuICAgICAqIHJldHVybnMgbnVsbCBpZiBubyB0b2tlbiBjb3VsZCBiZSBmb3VuZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzY29wZXMgLSBUaGUgbGlzdCBvZiBzY29wZXMgZm9yIHdoaWNoIHRoZSB0b2tlbiB3aWxsIGhhdmUgYWNjZXNzLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgdXNlZCB0byBjb25maWd1cmUgYW55IHJlcXVlc3RzIHRoaXNcbiAgICAgKiAgICAgICAgICAgICAgICBgVG9rZW5DcmVkZW50aWFsYCBpbXBsZW1lbnRhdGlvbiBtaWdodCBtYWtlLlxuICAgICAqL1xuICAgIGFzeW5jIGdldFRva2VuKHNjb3Blcywgb3B0aW9ucykge1xuICAgICAgICAvLyBMb2FkIHRoZSBwbHVnaW4gYW5kIGF1dGhlbnRpY2F0aW9uIHJlY29yZCBvbmx5IG9uY2VcbiAgICAgICAgY29uc3Qgc2NvcGVBcnJheSA9ICgwLCBzY29wZVV0aWxzX2pzXzEuZW5zdXJlU2NvcGVzKShzY29wZXMpO1xuICAgICAgICBhd2FpdCB0aGlzLnByZXBhcmVPbmNlKHNjb3BlQXJyYXkpO1xuICAgICAgICBpZiAoIXRoaXMubXNhbENsaWVudCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkNyZWRlbnRpYWxVbmF2YWlsYWJsZUVycm9yKFwiVmlzdWFsIFN0dWRpbyBDb2RlIEF1dGhlbnRpY2F0aW9uIGZhaWxlZCB0byBpbml0aWFsaXplLlwiICtcbiAgICAgICAgICAgICAgICBcIiBFbnN1cmUgeW91IGhhdmUgaGF2ZSBBenVyZSBSZXNvdXJjZXMgRXh0ZW5zaW9uIGluc3RhbGxlZCBpbiBWUyBDb2RlLFwiICtcbiAgICAgICAgICAgICAgICBcIiBzaWduZWQgaW50byBBenVyZSB2aWEgVlMgQ29kZSwgaW5zdGFsbGVkIHRoZSBAYXp1cmUvaWRlbnRpdHktdnNjb2RlIHBhY2thZ2UsXCIgK1xuICAgICAgICAgICAgICAgIFwiIGFuZCBwcm9wZXJseSBjb25maWd1cmVkIHRoZSBleHRlbnNpb24uXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLm1zYWxDbGllbnQuZ2V0VG9rZW5CeUludGVyYWN0aXZlUmVxdWVzdChzY29wZUFycmF5LCBvcHRpb25zIHx8IHt9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTG9hZHMgdGhlIGF1dGhlbnRpY2F0aW9uIHJlY29yZCBmcm9tIHRoZSBzcGVjaWZpZWQgcGF0aC5cbiAgICAgKiBAcGFyYW0gYXV0aFJlY29yZFBhdGggLSBUaGUgcGF0aCB0byB0aGUgYXV0aGVudGljYXRpb24gcmVjb3JkIGZpbGUuXG4gICAgICogQHBhcmFtIHNjb3BlcyAtIFRoZSBsaXN0IG9mIHNjb3BlcyBmb3Igd2hpY2ggdGhlIHRva2VuIHdpbGwgaGF2ZSBhY2Nlc3MuXG4gICAgICogQHJldHVybnMgVGhlIGF1dGhlbnRpY2F0aW9uIHJlY29yZCBvciB1bmRlZmluZWQgaWYgbG9hZGluZyBmYWlscy5cbiAgICAgKi9cbiAgICBhc3luYyBsb2FkQXV0aFJlY29yZChhdXRoUmVjb3JkUGF0aCwgc2NvcGVzKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBhdXRoUmVjb3JkQ29udGVudCA9IGF3YWl0ICgwLCBwcm9taXNlc18xLnJlYWRGaWxlKShhdXRoUmVjb3JkUGF0aCwgeyBlbmNvZGluZzogXCJ1dGY4XCIgfSk7XG4gICAgICAgICAgICByZXR1cm4gKDAsIHV0aWxzX2pzXzEuZGVzZXJpYWxpemVBdXRoZW50aWNhdGlvblJlY29yZCkoYXV0aFJlY29yZENvbnRlbnQpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgbG9nZ2VyLmdldFRva2VuLmluZm8oKDAsIGxvZ2dpbmdfanNfMS5mb3JtYXRFcnJvcikoc2NvcGVzLCBlcnJvcikpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkNyZWRlbnRpYWxVbmF2YWlsYWJsZUVycm9yKFwiQ2Fubm90IGxvYWQgYXV0aGVudGljYXRpb24gcmVjb3JkIGluIFZpc3VhbCBTdHVkaW8gQ29kZS5cIiArXG4gICAgICAgICAgICAgICAgXCIgRW5zdXJlIHlvdSBoYXZlIGhhdmUgQXp1cmUgUmVzb3VyY2VzIEV4dGVuc2lvbiBpbnN0YWxsZWQgaW4gVlMgQ29kZSxcIiArXG4gICAgICAgICAgICAgICAgXCIgc2lnbmVkIGludG8gQXp1cmUgdmlhIFZTIENvZGUsIGluc3RhbGxlZCB0aGUgQGF6dXJlL2lkZW50aXR5LXZzY29kZSBwYWNrYWdlLFwiICtcbiAgICAgICAgICAgICAgICBcIiBhbmQgcHJvcGVybHkgY29uZmlndXJlZCB0aGUgZXh0ZW5zaW9uLlwiKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuVmlzdWFsU3R1ZGlvQ29kZUNyZWRlbnRpYWwgPSBWaXN1YWxTdHVkaW9Db2RlQ3JlZGVudGlhbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZpc3VhbFN0dWRpb0NvZGVDcmVkZW50aWFsLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/visualStudioCodeCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/workloadIdentityCredential.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist/commonjs/credentials/workloadIdentityCredential.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WorkloadIdentityCredential = exports.SupportedWorkloadEnvironmentVariables = void 0;\nconst logging_js_1 = __webpack_require__(/*! ../util/logging.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/logging.js\");\nconst clientAssertionCredential_js_1 = __webpack_require__(/*! ./clientAssertionCredential.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/clientAssertionCredential.js\");\nconst errors_js_1 = __webpack_require__(/*! ../errors.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/errors.js\");\nconst tenantIdUtils_js_1 = __webpack_require__(/*! ../util/tenantIdUtils.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/tenantIdUtils.js\");\nconst promises_1 = __webpack_require__(/*! node:fs/promises */ \"node:fs/promises\");\nconst credentialName = \"WorkloadIdentityCredential\";\n/**\n * Contains the list of all supported environment variable names so that an\n * appropriate error message can be generated when no credentials can be\n * configured.\n *\n * @internal\n */\nexports.SupportedWorkloadEnvironmentVariables = [\n    \"AZURE_TENANT_ID\",\n    \"AZURE_CLIENT_ID\",\n    \"AZURE_FEDERATED_TOKEN_FILE\",\n];\nconst logger = (0, logging_js_1.credentialLogger)(credentialName);\n/**\n * Workload Identity authentication is a feature in Azure that allows applications running on virtual machines (VMs)\n * to access other Azure resources without the need for a service principal or managed identity. With Workload Identity\n * authentication, applications authenticate themselves using their own identity, rather than using a shared service\n * principal or managed identity. Under the hood, Workload Identity authentication uses the concept of Service Account\n * Credentials (SACs), which are automatically created by Azure and stored securely in the VM. By using Workload\n * Identity authentication, you can avoid the need to manage and rotate service principals or managed identities for\n * each application on each VM. Additionally, because SACs are created automatically and managed by Azure, you don't\n * need to worry about storing and securing sensitive credentials themselves.\n * The WorkloadIdentityCredential supports Microsoft Entra Workload ID authentication on Azure Kubernetes and acquires\n * a token using the SACs available in the Azure Kubernetes environment.\n * Refer to <a href=\"https://learn.microsoft.com/azure/aks/workload-identity-overview\">Microsoft Entra\n * Workload ID</a> for more information.\n */\nclass WorkloadIdentityCredential {\n    client;\n    azureFederatedTokenFileContent = undefined;\n    cacheDate = undefined;\n    federatedTokenFilePath;\n    /**\n     * WorkloadIdentityCredential supports Microsoft Entra Workload ID on Kubernetes.\n     *\n     * @param options - The identity client options to use for authentication.\n     */\n    constructor(options) {\n        // Logging environment variables for error details\n        const assignedEnv = (0, logging_js_1.processEnvVars)(exports.SupportedWorkloadEnvironmentVariables).assigned.join(\", \");\n        logger.info(`Found the following environment variables: ${assignedEnv}`);\n        const workloadIdentityCredentialOptions = options ?? {};\n        const tenantId = workloadIdentityCredentialOptions.tenantId || process.env.AZURE_TENANT_ID;\n        const clientId = workloadIdentityCredentialOptions.clientId || process.env.AZURE_CLIENT_ID;\n        this.federatedTokenFilePath =\n            workloadIdentityCredentialOptions.tokenFilePath || process.env.AZURE_FEDERATED_TOKEN_FILE;\n        if (tenantId) {\n            (0, tenantIdUtils_js_1.checkTenantId)(logger, tenantId);\n        }\n        if (!clientId) {\n            throw new errors_js_1.CredentialUnavailableError(`${credentialName}: is unavailable. clientId is a required parameter. In DefaultAzureCredential and ManagedIdentityCredential, this can be provided as an environment variable - \"AZURE_CLIENT_ID\".\n        See the troubleshooting guide for more information: https://aka.ms/azsdk/js/identity/workloadidentitycredential/troubleshoot`);\n        }\n        if (!tenantId) {\n            throw new errors_js_1.CredentialUnavailableError(`${credentialName}: is unavailable. tenantId is a required parameter. In DefaultAzureCredential and ManagedIdentityCredential, this can be provided as an environment variable - \"AZURE_TENANT_ID\".\n        See the troubleshooting guide for more information: https://aka.ms/azsdk/js/identity/workloadidentitycredential/troubleshoot`);\n        }\n        if (!this.federatedTokenFilePath) {\n            throw new errors_js_1.CredentialUnavailableError(`${credentialName}: is unavailable. federatedTokenFilePath is a required parameter. In DefaultAzureCredential and ManagedIdentityCredential, this can be provided as an environment variable - \"AZURE_FEDERATED_TOKEN_FILE\".\n        See the troubleshooting guide for more information: https://aka.ms/azsdk/js/identity/workloadidentitycredential/troubleshoot`);\n        }\n        logger.info(`Invoking ClientAssertionCredential with tenant ID: ${tenantId}, clientId: ${workloadIdentityCredentialOptions.clientId} and federated token path: [REDACTED]`);\n        this.client = new clientAssertionCredential_js_1.ClientAssertionCredential(tenantId, clientId, this.readFileContents.bind(this), options);\n    }\n    /**\n     * Authenticates with Microsoft Entra ID and returns an access token if successful.\n     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this\n     *                TokenCredential implementation might make.\n     */\n    async getToken(scopes, options) {\n        if (!this.client) {\n            const errorMessage = `${credentialName}: is unavailable. tenantId, clientId, and federatedTokenFilePath are required parameters. \n      In DefaultAzureCredential and ManagedIdentityCredential, these can be provided as environment variables - \n      \"AZURE_TENANT_ID\",\n      \"AZURE_CLIENT_ID\",\n      \"AZURE_FEDERATED_TOKEN_FILE\". See the troubleshooting guide for more information: https://aka.ms/azsdk/js/identity/workloadidentitycredential/troubleshoot`;\n            logger.info(errorMessage);\n            throw new errors_js_1.CredentialUnavailableError(errorMessage);\n        }\n        logger.info(\"Invoking getToken() of Client Assertion Credential\");\n        return this.client.getToken(scopes, options);\n    }\n    async readFileContents() {\n        // Cached assertions expire after 5 minutes\n        if (this.cacheDate !== undefined && Date.now() - this.cacheDate >= 1000 * 60 * 5) {\n            this.azureFederatedTokenFileContent = undefined;\n        }\n        if (!this.federatedTokenFilePath) {\n            throw new errors_js_1.CredentialUnavailableError(`${credentialName}: is unavailable. Invalid file path provided ${this.federatedTokenFilePath}.`);\n        }\n        if (!this.azureFederatedTokenFileContent) {\n            const file = await (0, promises_1.readFile)(this.federatedTokenFilePath, \"utf8\");\n            const value = file.trim();\n            if (!value) {\n                throw new errors_js_1.CredentialUnavailableError(`${credentialName}: is unavailable. No content on the file ${this.federatedTokenFilePath}.`);\n            }\n            else {\n                this.azureFederatedTokenFileContent = value;\n                this.cacheDate = Date.now();\n            }\n        }\n        return this.azureFederatedTokenFileContent;\n    }\n}\nexports.WorkloadIdentityCredential = WorkloadIdentityCredential;\n//# sourceMappingURL=workloadIdentityCredential.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/workloadIdentityCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist/commonjs/errors.js":
/*!**************************************************************!*\
  !*** ./node_modules/@azure/identity/dist/commonjs/errors.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AuthenticationRequiredError = exports.AggregateAuthenticationError = exports.AggregateAuthenticationErrorName = exports.AuthenticationError = exports.AuthenticationErrorName = exports.CredentialUnavailableError = exports.CredentialUnavailableErrorName = void 0;\nfunction isErrorResponse(errorResponse) {\n    return (errorResponse &&\n        typeof errorResponse.error === \"string\" &&\n        typeof errorResponse.error_description === \"string\");\n}\n/**\n * The Error.name value of an CredentialUnavailable\n */\nexports.CredentialUnavailableErrorName = \"CredentialUnavailableError\";\n/**\n * This signifies that the credential that was tried in a chained credential\n * was not available to be used as the credential. Rather than treating this as\n * an error that should halt the chain, it's caught and the chain continues\n */\nclass CredentialUnavailableError extends Error {\n    constructor(message, options) {\n        super(message, options);\n        this.name = exports.CredentialUnavailableErrorName;\n    }\n}\nexports.CredentialUnavailableError = CredentialUnavailableError;\n/**\n * The Error.name value of an AuthenticationError\n */\nexports.AuthenticationErrorName = \"AuthenticationError\";\n/**\n * Provides details about a failure to authenticate with Azure Active\n * Directory.  The `errorResponse` field contains more details about\n * the specific failure.\n */\nclass AuthenticationError extends Error {\n    /**\n     * The HTTP status code returned from the authentication request.\n     */\n    statusCode;\n    /**\n     * The error response details.\n     */\n    errorResponse;\n    constructor(statusCode, errorBody, options) {\n        let errorResponse = {\n            error: \"unknown\",\n            errorDescription: \"An unknown error occurred and no additional details are available.\",\n        };\n        if (isErrorResponse(errorBody)) {\n            errorResponse = convertOAuthErrorResponseToErrorResponse(errorBody);\n        }\n        else if (typeof errorBody === \"string\") {\n            try {\n                // Most error responses will contain JSON-formatted error details\n                // in the response body\n                const oauthErrorResponse = JSON.parse(errorBody);\n                errorResponse = convertOAuthErrorResponseToErrorResponse(oauthErrorResponse);\n            }\n            catch (e) {\n                if (statusCode === 400) {\n                    errorResponse = {\n                        error: \"invalid_request\",\n                        errorDescription: `The service indicated that the request was invalid.\\n\\n${errorBody}`,\n                    };\n                }\n                else {\n                    errorResponse = {\n                        error: \"unknown_error\",\n                        errorDescription: `An unknown error has occurred. Response body:\\n\\n${errorBody}`,\n                    };\n                }\n            }\n        }\n        else {\n            errorResponse = {\n                error: \"unknown_error\",\n                errorDescription: \"An unknown error occurred and no additional details are available.\",\n            };\n        }\n        super(`${errorResponse.error} Status code: ${statusCode}\\nMore details:\\n${errorResponse.errorDescription},`, options);\n        this.statusCode = statusCode;\n        this.errorResponse = errorResponse;\n        // Ensure that this type reports the correct name\n        this.name = exports.AuthenticationErrorName;\n    }\n}\nexports.AuthenticationError = AuthenticationError;\n/**\n * The Error.name value of an AggregateAuthenticationError\n */\nexports.AggregateAuthenticationErrorName = \"AggregateAuthenticationError\";\n/**\n * Provides an `errors` array containing {@link AuthenticationError} instance\n * for authentication failures from credentials in a {@link ChainedTokenCredential}.\n */\nclass AggregateAuthenticationError extends Error {\n    /**\n     * The array of error objects that were thrown while trying to authenticate\n     * with the credentials in a {@link ChainedTokenCredential}.\n     */\n    errors;\n    constructor(errors, errorMessage) {\n        const errorDetail = errors.join(\"\\n\");\n        super(`${errorMessage}\\n${errorDetail}`);\n        this.errors = errors;\n        // Ensure that this type reports the correct name\n        this.name = exports.AggregateAuthenticationErrorName;\n    }\n}\nexports.AggregateAuthenticationError = AggregateAuthenticationError;\nfunction convertOAuthErrorResponseToErrorResponse(errorBody) {\n    return {\n        error: errorBody.error,\n        errorDescription: errorBody.error_description,\n        correlationId: errorBody.correlation_id,\n        errorCodes: errorBody.error_codes,\n        timestamp: errorBody.timestamp,\n        traceId: errorBody.trace_id,\n    };\n}\n/**\n * Error used to enforce authentication after trying to retrieve a token silently.\n */\nclass AuthenticationRequiredError extends Error {\n    /**\n     * The list of scopes for which the token will have access.\n     */\n    scopes;\n    /**\n     * The options passed to the getToken request.\n     */\n    getTokenOptions;\n    constructor(\n    /**\n     * Optional parameters. A message can be specified. The {@link GetTokenOptions} of the request can also be specified to more easily associate the error with the received parameters.\n     */\n    options) {\n        super(options.message, options.cause ? { cause: options.cause } : undefined);\n        this.scopes = options.scopes;\n        this.getTokenOptions = options.getTokenOptions;\n        this.name = \"AuthenticationRequiredError\";\n    }\n}\nexports.AuthenticationRequiredError = AuthenticationRequiredError;\n//# sourceMappingURL=errors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist/commonjs/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist/commonjs/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@azure/identity/dist/commonjs/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getBearerTokenProvider = exports.AzureAuthorityHosts = exports.logger = exports.WorkloadIdentityCredential = exports.OnBehalfOfCredential = exports.VisualStudioCodeCredential = exports.UsernamePasswordCredential = exports.AzurePowerShellCredential = exports.AuthorizationCodeCredential = exports.AzurePipelinesCredential = exports.DeviceCodeCredential = exports.ManagedIdentityCredential = exports.InteractiveBrowserCredential = exports.AzureDeveloperCliCredential = exports.AzureCliCredential = exports.ClientAssertionCredential = exports.ClientCertificateCredential = exports.EnvironmentCredential = exports.DefaultAzureCredential = exports.ClientSecretCredential = exports.ChainedTokenCredential = exports.deserializeAuthenticationRecord = exports.serializeAuthenticationRecord = exports.AuthenticationRequiredError = exports.CredentialUnavailableErrorName = exports.CredentialUnavailableError = exports.AggregateAuthenticationErrorName = exports.AuthenticationErrorName = exports.AggregateAuthenticationError = exports.AuthenticationError = void 0;\nexports.getDefaultAzureCredential = getDefaultAzureCredential;\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\ntslib_1.__exportStar(__webpack_require__(/*! ./plugins/consumer.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/plugins/consumer.js\"), exports);\nconst defaultAzureCredential_js_1 = __webpack_require__(/*! ./credentials/defaultAzureCredential.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/defaultAzureCredential.js\");\nvar errors_js_1 = __webpack_require__(/*! ./errors.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/errors.js\");\nObject.defineProperty(exports, \"AuthenticationError\", ({ enumerable: true, get: function () { return errors_js_1.AuthenticationError; } }));\nObject.defineProperty(exports, \"AggregateAuthenticationError\", ({ enumerable: true, get: function () { return errors_js_1.AggregateAuthenticationError; } }));\nObject.defineProperty(exports, \"AuthenticationErrorName\", ({ enumerable: true, get: function () { return errors_js_1.AuthenticationErrorName; } }));\nObject.defineProperty(exports, \"AggregateAuthenticationErrorName\", ({ enumerable: true, get: function () { return errors_js_1.AggregateAuthenticationErrorName; } }));\nObject.defineProperty(exports, \"CredentialUnavailableError\", ({ enumerable: true, get: function () { return errors_js_1.CredentialUnavailableError; } }));\nObject.defineProperty(exports, \"CredentialUnavailableErrorName\", ({ enumerable: true, get: function () { return errors_js_1.CredentialUnavailableErrorName; } }));\nObject.defineProperty(exports, \"AuthenticationRequiredError\", ({ enumerable: true, get: function () { return errors_js_1.AuthenticationRequiredError; } }));\nvar utils_js_1 = __webpack_require__(/*! ./msal/utils.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/msal/utils.js\");\nObject.defineProperty(exports, \"serializeAuthenticationRecord\", ({ enumerable: true, get: function () { return utils_js_1.serializeAuthenticationRecord; } }));\nObject.defineProperty(exports, \"deserializeAuthenticationRecord\", ({ enumerable: true, get: function () { return utils_js_1.deserializeAuthenticationRecord; } }));\nvar chainedTokenCredential_js_1 = __webpack_require__(/*! ./credentials/chainedTokenCredential.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/chainedTokenCredential.js\");\nObject.defineProperty(exports, \"ChainedTokenCredential\", ({ enumerable: true, get: function () { return chainedTokenCredential_js_1.ChainedTokenCredential; } }));\nvar clientSecretCredential_js_1 = __webpack_require__(/*! ./credentials/clientSecretCredential.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/clientSecretCredential.js\");\nObject.defineProperty(exports, \"ClientSecretCredential\", ({ enumerable: true, get: function () { return clientSecretCredential_js_1.ClientSecretCredential; } }));\nvar defaultAzureCredential_js_2 = __webpack_require__(/*! ./credentials/defaultAzureCredential.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/defaultAzureCredential.js\");\nObject.defineProperty(exports, \"DefaultAzureCredential\", ({ enumerable: true, get: function () { return defaultAzureCredential_js_2.DefaultAzureCredential; } }));\nvar environmentCredential_js_1 = __webpack_require__(/*! ./credentials/environmentCredential.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/environmentCredential.js\");\nObject.defineProperty(exports, \"EnvironmentCredential\", ({ enumerable: true, get: function () { return environmentCredential_js_1.EnvironmentCredential; } }));\nvar clientCertificateCredential_js_1 = __webpack_require__(/*! ./credentials/clientCertificateCredential.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/clientCertificateCredential.js\");\nObject.defineProperty(exports, \"ClientCertificateCredential\", ({ enumerable: true, get: function () { return clientCertificateCredential_js_1.ClientCertificateCredential; } }));\nvar clientAssertionCredential_js_1 = __webpack_require__(/*! ./credentials/clientAssertionCredential.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/clientAssertionCredential.js\");\nObject.defineProperty(exports, \"ClientAssertionCredential\", ({ enumerable: true, get: function () { return clientAssertionCredential_js_1.ClientAssertionCredential; } }));\nvar azureCliCredential_js_1 = __webpack_require__(/*! ./credentials/azureCliCredential.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/azureCliCredential.js\");\nObject.defineProperty(exports, \"AzureCliCredential\", ({ enumerable: true, get: function () { return azureCliCredential_js_1.AzureCliCredential; } }));\nvar azureDeveloperCliCredential_js_1 = __webpack_require__(/*! ./credentials/azureDeveloperCliCredential.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/azureDeveloperCliCredential.js\");\nObject.defineProperty(exports, \"AzureDeveloperCliCredential\", ({ enumerable: true, get: function () { return azureDeveloperCliCredential_js_1.AzureDeveloperCliCredential; } }));\nvar interactiveBrowserCredential_js_1 = __webpack_require__(/*! ./credentials/interactiveBrowserCredential.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/interactiveBrowserCredential.js\");\nObject.defineProperty(exports, \"InteractiveBrowserCredential\", ({ enumerable: true, get: function () { return interactiveBrowserCredential_js_1.InteractiveBrowserCredential; } }));\nvar index_js_1 = __webpack_require__(/*! ./credentials/managedIdentityCredential/index.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/managedIdentityCredential/index.js\");\nObject.defineProperty(exports, \"ManagedIdentityCredential\", ({ enumerable: true, get: function () { return index_js_1.ManagedIdentityCredential; } }));\nvar deviceCodeCredential_js_1 = __webpack_require__(/*! ./credentials/deviceCodeCredential.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/deviceCodeCredential.js\");\nObject.defineProperty(exports, \"DeviceCodeCredential\", ({ enumerable: true, get: function () { return deviceCodeCredential_js_1.DeviceCodeCredential; } }));\nvar azurePipelinesCredential_js_1 = __webpack_require__(/*! ./credentials/azurePipelinesCredential.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/azurePipelinesCredential.js\");\nObject.defineProperty(exports, \"AzurePipelinesCredential\", ({ enumerable: true, get: function () { return azurePipelinesCredential_js_1.AzurePipelinesCredential; } }));\nvar authorizationCodeCredential_js_1 = __webpack_require__(/*! ./credentials/authorizationCodeCredential.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/authorizationCodeCredential.js\");\nObject.defineProperty(exports, \"AuthorizationCodeCredential\", ({ enumerable: true, get: function () { return authorizationCodeCredential_js_1.AuthorizationCodeCredential; } }));\nvar azurePowerShellCredential_js_1 = __webpack_require__(/*! ./credentials/azurePowerShellCredential.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/azurePowerShellCredential.js\");\nObject.defineProperty(exports, \"AzurePowerShellCredential\", ({ enumerable: true, get: function () { return azurePowerShellCredential_js_1.AzurePowerShellCredential; } }));\nvar usernamePasswordCredential_js_1 = __webpack_require__(/*! ./credentials/usernamePasswordCredential.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/usernamePasswordCredential.js\");\nObject.defineProperty(exports, \"UsernamePasswordCredential\", ({ enumerable: true, get: function () { return usernamePasswordCredential_js_1.UsernamePasswordCredential; } }));\nvar visualStudioCodeCredential_js_1 = __webpack_require__(/*! ./credentials/visualStudioCodeCredential.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/visualStudioCodeCredential.js\");\nObject.defineProperty(exports, \"VisualStudioCodeCredential\", ({ enumerable: true, get: function () { return visualStudioCodeCredential_js_1.VisualStudioCodeCredential; } }));\nvar onBehalfOfCredential_js_1 = __webpack_require__(/*! ./credentials/onBehalfOfCredential.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/onBehalfOfCredential.js\");\nObject.defineProperty(exports, \"OnBehalfOfCredential\", ({ enumerable: true, get: function () { return onBehalfOfCredential_js_1.OnBehalfOfCredential; } }));\nvar workloadIdentityCredential_js_1 = __webpack_require__(/*! ./credentials/workloadIdentityCredential.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/credentials/workloadIdentityCredential.js\");\nObject.defineProperty(exports, \"WorkloadIdentityCredential\", ({ enumerable: true, get: function () { return workloadIdentityCredential_js_1.WorkloadIdentityCredential; } }));\nvar logging_js_1 = __webpack_require__(/*! ./util/logging.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/logging.js\");\nObject.defineProperty(exports, \"logger\", ({ enumerable: true, get: function () { return logging_js_1.logger; } }));\nvar constants_js_1 = __webpack_require__(/*! ./constants.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/constants.js\");\nObject.defineProperty(exports, \"AzureAuthorityHosts\", ({ enumerable: true, get: function () { return constants_js_1.AzureAuthorityHosts; } }));\n/**\n * Returns a new instance of the {@link DefaultAzureCredential}.\n */\nfunction getDefaultAzureCredential() {\n    return new defaultAzureCredential_js_1.DefaultAzureCredential();\n}\nvar tokenProvider_js_1 = __webpack_require__(/*! ./tokenProvider.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/tokenProvider.js\");\nObject.defineProperty(exports, \"getBearerTokenProvider\", ({ enumerable: true, get: function () { return tokenProvider_js_1.getBearerTokenProvider; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QvY29tbW9uanMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDhCQUE4QixHQUFHLDJCQUEyQixHQUFHLGNBQWMsR0FBRyxrQ0FBa0MsR0FBRyw0QkFBNEIsR0FBRyxrQ0FBa0MsR0FBRyxrQ0FBa0MsR0FBRyxpQ0FBaUMsR0FBRyxtQ0FBbUMsR0FBRyxnQ0FBZ0MsR0FBRyw0QkFBNEIsR0FBRyxpQ0FBaUMsR0FBRyxvQ0FBb0MsR0FBRyxtQ0FBbUMsR0FBRywwQkFBMEIsR0FBRyxpQ0FBaUMsR0FBRyxtQ0FBbUMsR0FBRyw2QkFBNkIsR0FBRyw4QkFBOEIsR0FBRyw4QkFBOEIsR0FBRyw4QkFBOEIsR0FBRyx1Q0FBdUMsR0FBRyxxQ0FBcUMsR0FBRyxtQ0FBbUMsR0FBRyxzQ0FBc0MsR0FBRyxrQ0FBa0MsR0FBRyx3Q0FBd0MsR0FBRywrQkFBK0IsR0FBRyxvQ0FBb0MsR0FBRywyQkFBMkI7QUFDMWhDLGlDQUFpQztBQUNqQyxnQkFBZ0IsbUJBQU8sQ0FBQyx1REFBTztBQUMvQixxQkFBcUIsbUJBQU8sQ0FBQyxxR0FBdUI7QUFDcEQsb0NBQW9DLG1CQUFPLENBQUMseUlBQXlDO0FBQ3JGLGtCQUFrQixtQkFBTyxDQUFDLGlGQUFhO0FBQ3ZDLHVEQUFzRCxFQUFFLHFDQUFxQywyQ0FBMkMsRUFBQztBQUN6SSxnRUFBK0QsRUFBRSxxQ0FBcUMsb0RBQW9ELEVBQUM7QUFDM0osMkRBQTBELEVBQUUscUNBQXFDLCtDQUErQyxFQUFDO0FBQ2pKLG9FQUFtRSxFQUFFLHFDQUFxQyx3REFBd0QsRUFBQztBQUNuSyw4REFBNkQsRUFBRSxxQ0FBcUMsa0RBQWtELEVBQUM7QUFDdkosa0VBQWlFLEVBQUUscUNBQXFDLHNEQUFzRCxFQUFDO0FBQy9KLCtEQUE4RCxFQUFFLHFDQUFxQyxtREFBbUQsRUFBQztBQUN6SixpQkFBaUIsbUJBQU8sQ0FBQyx5RkFBaUI7QUFDMUMsaUVBQWdFLEVBQUUscUNBQXFDLG9EQUFvRCxFQUFDO0FBQzVKLG1FQUFrRSxFQUFFLHFDQUFxQyxzREFBc0QsRUFBQztBQUNoSyxrQ0FBa0MsbUJBQU8sQ0FBQyx5SUFBeUM7QUFDbkYsMERBQXlELEVBQUUscUNBQXFDLDhEQUE4RCxFQUFDO0FBQy9KLGtDQUFrQyxtQkFBTyxDQUFDLHlJQUF5QztBQUNuRiwwREFBeUQsRUFBRSxxQ0FBcUMsOERBQThELEVBQUM7QUFDL0osa0NBQWtDLG1CQUFPLENBQUMseUlBQXlDO0FBQ25GLDBEQUF5RCxFQUFFLHFDQUFxQyw4REFBOEQsRUFBQztBQUMvSixpQ0FBaUMsbUJBQU8sQ0FBQyx1SUFBd0M7QUFDakYseURBQXdELEVBQUUscUNBQXFDLDREQUE0RCxFQUFDO0FBQzVKLHVDQUF1QyxtQkFBTyxDQUFDLG1KQUE4QztBQUM3RiwrREFBOEQsRUFBRSxxQ0FBcUMsd0VBQXdFLEVBQUM7QUFDOUsscUNBQXFDLG1CQUFPLENBQUMsK0lBQTRDO0FBQ3pGLDZEQUE0RCxFQUFFLHFDQUFxQyxvRUFBb0UsRUFBQztBQUN4Syw4QkFBOEIsbUJBQU8sQ0FBQyxpSUFBcUM7QUFDM0Usc0RBQXFELEVBQUUscUNBQXFDLHNEQUFzRCxFQUFDO0FBQ25KLHVDQUF1QyxtQkFBTyxDQUFDLG1KQUE4QztBQUM3RiwrREFBOEQsRUFBRSxxQ0FBcUMsd0VBQXdFLEVBQUM7QUFDOUssd0NBQXdDLG1CQUFPLENBQUMscUpBQStDO0FBQy9GLGdFQUErRCxFQUFFLHFDQUFxQywwRUFBMEUsRUFBQztBQUNqTCxpQkFBaUIsbUJBQU8sQ0FBQywySkFBa0Q7QUFDM0UsNkRBQTRELEVBQUUscUNBQXFDLGdEQUFnRCxFQUFDO0FBQ3BKLGdDQUFnQyxtQkFBTyxDQUFDLHFJQUF1QztBQUMvRSx3REFBdUQsRUFBRSxxQ0FBcUMsMERBQTBELEVBQUM7QUFDekosb0NBQW9DLG1CQUFPLENBQUMsNklBQTJDO0FBQ3ZGLDREQUEyRCxFQUFFLHFDQUFxQyxrRUFBa0UsRUFBQztBQUNySyx1Q0FBdUMsbUJBQU8sQ0FBQyxtSkFBOEM7QUFDN0YsK0RBQThELEVBQUUscUNBQXFDLHdFQUF3RSxFQUFDO0FBQzlLLHFDQUFxQyxtQkFBTyxDQUFDLCtJQUE0QztBQUN6Riw2REFBNEQsRUFBRSxxQ0FBcUMsb0VBQW9FLEVBQUM7QUFDeEssc0NBQXNDLG1CQUFPLENBQUMsaUpBQTZDO0FBQzNGLDhEQUE2RCxFQUFFLHFDQUFxQyxzRUFBc0UsRUFBQztBQUMzSyxzQ0FBc0MsbUJBQU8sQ0FBQyxpSkFBNkM7QUFDM0YsOERBQTZELEVBQUUscUNBQXFDLHNFQUFzRSxFQUFDO0FBQzNLLGdDQUFnQyxtQkFBTyxDQUFDLHFJQUF1QztBQUMvRSx3REFBdUQsRUFBRSxxQ0FBcUMsMERBQTBELEVBQUM7QUFDekosc0NBQXNDLG1CQUFPLENBQUMsaUpBQTZDO0FBQzNGLDhEQUE2RCxFQUFFLHFDQUFxQyxzRUFBc0UsRUFBQztBQUMzSyxtQkFBbUIsbUJBQU8sQ0FBQyw2RkFBbUI7QUFDOUMsMENBQXlDLEVBQUUscUNBQXFDLCtCQUErQixFQUFDO0FBQ2hILHFCQUFxQixtQkFBTyxDQUFDLHVGQUFnQjtBQUM3Qyx1REFBc0QsRUFBRSxxQ0FBcUMsOENBQThDLEVBQUM7QUFDNUk7QUFDQSxrQ0FBa0MsNkJBQTZCO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLG1CQUFPLENBQUMsK0ZBQW9CO0FBQ3JELDBEQUF5RCxFQUFFLHFDQUFxQyxxREFBcUQsRUFBQztBQUN0SiIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QvY29tbW9uanMvaW5kZXguanM/MmVmNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRCZWFyZXJUb2tlblByb3ZpZGVyID0gZXhwb3J0cy5BenVyZUF1dGhvcml0eUhvc3RzID0gZXhwb3J0cy5sb2dnZXIgPSBleHBvcnRzLldvcmtsb2FkSWRlbnRpdHlDcmVkZW50aWFsID0gZXhwb3J0cy5PbkJlaGFsZk9mQ3JlZGVudGlhbCA9IGV4cG9ydHMuVmlzdWFsU3R1ZGlvQ29kZUNyZWRlbnRpYWwgPSBleHBvcnRzLlVzZXJuYW1lUGFzc3dvcmRDcmVkZW50aWFsID0gZXhwb3J0cy5BenVyZVBvd2VyU2hlbGxDcmVkZW50aWFsID0gZXhwb3J0cy5BdXRob3JpemF0aW9uQ29kZUNyZWRlbnRpYWwgPSBleHBvcnRzLkF6dXJlUGlwZWxpbmVzQ3JlZGVudGlhbCA9IGV4cG9ydHMuRGV2aWNlQ29kZUNyZWRlbnRpYWwgPSBleHBvcnRzLk1hbmFnZWRJZGVudGl0eUNyZWRlbnRpYWwgPSBleHBvcnRzLkludGVyYWN0aXZlQnJvd3NlckNyZWRlbnRpYWwgPSBleHBvcnRzLkF6dXJlRGV2ZWxvcGVyQ2xpQ3JlZGVudGlhbCA9IGV4cG9ydHMuQXp1cmVDbGlDcmVkZW50aWFsID0gZXhwb3J0cy5DbGllbnRBc3NlcnRpb25DcmVkZW50aWFsID0gZXhwb3J0cy5DbGllbnRDZXJ0aWZpY2F0ZUNyZWRlbnRpYWwgPSBleHBvcnRzLkVudmlyb25tZW50Q3JlZGVudGlhbCA9IGV4cG9ydHMuRGVmYXVsdEF6dXJlQ3JlZGVudGlhbCA9IGV4cG9ydHMuQ2xpZW50U2VjcmV0Q3JlZGVudGlhbCA9IGV4cG9ydHMuQ2hhaW5lZFRva2VuQ3JlZGVudGlhbCA9IGV4cG9ydHMuZGVzZXJpYWxpemVBdXRoZW50aWNhdGlvblJlY29yZCA9IGV4cG9ydHMuc2VyaWFsaXplQXV0aGVudGljYXRpb25SZWNvcmQgPSBleHBvcnRzLkF1dGhlbnRpY2F0aW9uUmVxdWlyZWRFcnJvciA9IGV4cG9ydHMuQ3JlZGVudGlhbFVuYXZhaWxhYmxlRXJyb3JOYW1lID0gZXhwb3J0cy5DcmVkZW50aWFsVW5hdmFpbGFibGVFcnJvciA9IGV4cG9ydHMuQWdncmVnYXRlQXV0aGVudGljYXRpb25FcnJvck5hbWUgPSBleHBvcnRzLkF1dGhlbnRpY2F0aW9uRXJyb3JOYW1lID0gZXhwb3J0cy5BZ2dyZWdhdGVBdXRoZW50aWNhdGlvbkVycm9yID0gZXhwb3J0cy5BdXRoZW50aWNhdGlvbkVycm9yID0gdm9pZCAwO1xuZXhwb3J0cy5nZXREZWZhdWx0QXp1cmVDcmVkZW50aWFsID0gZ2V0RGVmYXVsdEF6dXJlQ3JlZGVudGlhbDtcbmNvbnN0IHRzbGliXzEgPSByZXF1aXJlKFwidHNsaWJcIik7XG50c2xpYl8xLl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9wbHVnaW5zL2NvbnN1bWVyLmpzXCIpLCBleHBvcnRzKTtcbmNvbnN0IGRlZmF1bHRBenVyZUNyZWRlbnRpYWxfanNfMSA9IHJlcXVpcmUoXCIuL2NyZWRlbnRpYWxzL2RlZmF1bHRBenVyZUNyZWRlbnRpYWwuanNcIik7XG52YXIgZXJyb3JzX2pzXzEgPSByZXF1aXJlKFwiLi9lcnJvcnMuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJBdXRoZW50aWNhdGlvbkVycm9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlcnJvcnNfanNfMS5BdXRoZW50aWNhdGlvbkVycm9yOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQWdncmVnYXRlQXV0aGVudGljYXRpb25FcnJvclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZXJyb3JzX2pzXzEuQWdncmVnYXRlQXV0aGVudGljYXRpb25FcnJvcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkF1dGhlbnRpY2F0aW9uRXJyb3JOYW1lXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlcnJvcnNfanNfMS5BdXRoZW50aWNhdGlvbkVycm9yTmFtZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkFnZ3JlZ2F0ZUF1dGhlbnRpY2F0aW9uRXJyb3JOYW1lXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlcnJvcnNfanNfMS5BZ2dyZWdhdGVBdXRoZW50aWNhdGlvbkVycm9yTmFtZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNyZWRlbnRpYWxVbmF2YWlsYWJsZUVycm9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlcnJvcnNfanNfMS5DcmVkZW50aWFsVW5hdmFpbGFibGVFcnJvcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNyZWRlbnRpYWxVbmF2YWlsYWJsZUVycm9yTmFtZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZXJyb3JzX2pzXzEuQ3JlZGVudGlhbFVuYXZhaWxhYmxlRXJyb3JOYW1lOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQXV0aGVudGljYXRpb25SZXF1aXJlZEVycm9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlcnJvcnNfanNfMS5BdXRoZW50aWNhdGlvblJlcXVpcmVkRXJyb3I7IH0gfSk7XG52YXIgdXRpbHNfanNfMSA9IHJlcXVpcmUoXCIuL21zYWwvdXRpbHMuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzZXJpYWxpemVBdXRoZW50aWNhdGlvblJlY29yZFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdXRpbHNfanNfMS5zZXJpYWxpemVBdXRoZW50aWNhdGlvblJlY29yZDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlc2VyaWFsaXplQXV0aGVudGljYXRpb25SZWNvcmRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHV0aWxzX2pzXzEuZGVzZXJpYWxpemVBdXRoZW50aWNhdGlvblJlY29yZDsgfSB9KTtcbnZhciBjaGFpbmVkVG9rZW5DcmVkZW50aWFsX2pzXzEgPSByZXF1aXJlKFwiLi9jcmVkZW50aWFscy9jaGFpbmVkVG9rZW5DcmVkZW50aWFsLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ2hhaW5lZFRva2VuQ3JlZGVudGlhbFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY2hhaW5lZFRva2VuQ3JlZGVudGlhbF9qc18xLkNoYWluZWRUb2tlbkNyZWRlbnRpYWw7IH0gfSk7XG52YXIgY2xpZW50U2VjcmV0Q3JlZGVudGlhbF9qc18xID0gcmVxdWlyZShcIi4vY3JlZGVudGlhbHMvY2xpZW50U2VjcmV0Q3JlZGVudGlhbC5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNsaWVudFNlY3JldENyZWRlbnRpYWxcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNsaWVudFNlY3JldENyZWRlbnRpYWxfanNfMS5DbGllbnRTZWNyZXRDcmVkZW50aWFsOyB9IH0pO1xudmFyIGRlZmF1bHRBenVyZUNyZWRlbnRpYWxfanNfMiA9IHJlcXVpcmUoXCIuL2NyZWRlbnRpYWxzL2RlZmF1bHRBenVyZUNyZWRlbnRpYWwuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEZWZhdWx0QXp1cmVDcmVkZW50aWFsXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkZWZhdWx0QXp1cmVDcmVkZW50aWFsX2pzXzIuRGVmYXVsdEF6dXJlQ3JlZGVudGlhbDsgfSB9KTtcbnZhciBlbnZpcm9ubWVudENyZWRlbnRpYWxfanNfMSA9IHJlcXVpcmUoXCIuL2NyZWRlbnRpYWxzL2Vudmlyb25tZW50Q3JlZGVudGlhbC5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkVudmlyb25tZW50Q3JlZGVudGlhbFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZW52aXJvbm1lbnRDcmVkZW50aWFsX2pzXzEuRW52aXJvbm1lbnRDcmVkZW50aWFsOyB9IH0pO1xudmFyIGNsaWVudENlcnRpZmljYXRlQ3JlZGVudGlhbF9qc18xID0gcmVxdWlyZShcIi4vY3JlZGVudGlhbHMvY2xpZW50Q2VydGlmaWNhdGVDcmVkZW50aWFsLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ2xpZW50Q2VydGlmaWNhdGVDcmVkZW50aWFsXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjbGllbnRDZXJ0aWZpY2F0ZUNyZWRlbnRpYWxfanNfMS5DbGllbnRDZXJ0aWZpY2F0ZUNyZWRlbnRpYWw7IH0gfSk7XG52YXIgY2xpZW50QXNzZXJ0aW9uQ3JlZGVudGlhbF9qc18xID0gcmVxdWlyZShcIi4vY3JlZGVudGlhbHMvY2xpZW50QXNzZXJ0aW9uQ3JlZGVudGlhbC5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNsaWVudEFzc2VydGlvbkNyZWRlbnRpYWxcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNsaWVudEFzc2VydGlvbkNyZWRlbnRpYWxfanNfMS5DbGllbnRBc3NlcnRpb25DcmVkZW50aWFsOyB9IH0pO1xudmFyIGF6dXJlQ2xpQ3JlZGVudGlhbF9qc18xID0gcmVxdWlyZShcIi4vY3JlZGVudGlhbHMvYXp1cmVDbGlDcmVkZW50aWFsLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQXp1cmVDbGlDcmVkZW50aWFsXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBhenVyZUNsaUNyZWRlbnRpYWxfanNfMS5BenVyZUNsaUNyZWRlbnRpYWw7IH0gfSk7XG52YXIgYXp1cmVEZXZlbG9wZXJDbGlDcmVkZW50aWFsX2pzXzEgPSByZXF1aXJlKFwiLi9jcmVkZW50aWFscy9henVyZURldmVsb3BlckNsaUNyZWRlbnRpYWwuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJBenVyZURldmVsb3BlckNsaUNyZWRlbnRpYWxcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGF6dXJlRGV2ZWxvcGVyQ2xpQ3JlZGVudGlhbF9qc18xLkF6dXJlRGV2ZWxvcGVyQ2xpQ3JlZGVudGlhbDsgfSB9KTtcbnZhciBpbnRlcmFjdGl2ZUJyb3dzZXJDcmVkZW50aWFsX2pzXzEgPSByZXF1aXJlKFwiLi9jcmVkZW50aWFscy9pbnRlcmFjdGl2ZUJyb3dzZXJDcmVkZW50aWFsLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSW50ZXJhY3RpdmVCcm93c2VyQ3JlZGVudGlhbFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW50ZXJhY3RpdmVCcm93c2VyQ3JlZGVudGlhbF9qc18xLkludGVyYWN0aXZlQnJvd3NlckNyZWRlbnRpYWw7IH0gfSk7XG52YXIgaW5kZXhfanNfMSA9IHJlcXVpcmUoXCIuL2NyZWRlbnRpYWxzL21hbmFnZWRJZGVudGl0eUNyZWRlbnRpYWwvaW5kZXguanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJNYW5hZ2VkSWRlbnRpdHlDcmVkZW50aWFsXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBpbmRleF9qc18xLk1hbmFnZWRJZGVudGl0eUNyZWRlbnRpYWw7IH0gfSk7XG52YXIgZGV2aWNlQ29kZUNyZWRlbnRpYWxfanNfMSA9IHJlcXVpcmUoXCIuL2NyZWRlbnRpYWxzL2RldmljZUNvZGVDcmVkZW50aWFsLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRGV2aWNlQ29kZUNyZWRlbnRpYWxcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRldmljZUNvZGVDcmVkZW50aWFsX2pzXzEuRGV2aWNlQ29kZUNyZWRlbnRpYWw7IH0gfSk7XG52YXIgYXp1cmVQaXBlbGluZXNDcmVkZW50aWFsX2pzXzEgPSByZXF1aXJlKFwiLi9jcmVkZW50aWFscy9henVyZVBpcGVsaW5lc0NyZWRlbnRpYWwuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJBenVyZVBpcGVsaW5lc0NyZWRlbnRpYWxcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGF6dXJlUGlwZWxpbmVzQ3JlZGVudGlhbF9qc18xLkF6dXJlUGlwZWxpbmVzQ3JlZGVudGlhbDsgfSB9KTtcbnZhciBhdXRob3JpemF0aW9uQ29kZUNyZWRlbnRpYWxfanNfMSA9IHJlcXVpcmUoXCIuL2NyZWRlbnRpYWxzL2F1dGhvcml6YXRpb25Db2RlQ3JlZGVudGlhbC5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkF1dGhvcml6YXRpb25Db2RlQ3JlZGVudGlhbFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYXV0aG9yaXphdGlvbkNvZGVDcmVkZW50aWFsX2pzXzEuQXV0aG9yaXphdGlvbkNvZGVDcmVkZW50aWFsOyB9IH0pO1xudmFyIGF6dXJlUG93ZXJTaGVsbENyZWRlbnRpYWxfanNfMSA9IHJlcXVpcmUoXCIuL2NyZWRlbnRpYWxzL2F6dXJlUG93ZXJTaGVsbENyZWRlbnRpYWwuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJBenVyZVBvd2VyU2hlbGxDcmVkZW50aWFsXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBhenVyZVBvd2VyU2hlbGxDcmVkZW50aWFsX2pzXzEuQXp1cmVQb3dlclNoZWxsQ3JlZGVudGlhbDsgfSB9KTtcbnZhciB1c2VybmFtZVBhc3N3b3JkQ3JlZGVudGlhbF9qc18xID0gcmVxdWlyZShcIi4vY3JlZGVudGlhbHMvdXNlcm5hbWVQYXNzd29yZENyZWRlbnRpYWwuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJVc2VybmFtZVBhc3N3b3JkQ3JlZGVudGlhbFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdXNlcm5hbWVQYXNzd29yZENyZWRlbnRpYWxfanNfMS5Vc2VybmFtZVBhc3N3b3JkQ3JlZGVudGlhbDsgfSB9KTtcbnZhciB2aXN1YWxTdHVkaW9Db2RlQ3JlZGVudGlhbF9qc18xID0gcmVxdWlyZShcIi4vY3JlZGVudGlhbHMvdmlzdWFsU3R1ZGlvQ29kZUNyZWRlbnRpYWwuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJWaXN1YWxTdHVkaW9Db2RlQ3JlZGVudGlhbFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdmlzdWFsU3R1ZGlvQ29kZUNyZWRlbnRpYWxfanNfMS5WaXN1YWxTdHVkaW9Db2RlQ3JlZGVudGlhbDsgfSB9KTtcbnZhciBvbkJlaGFsZk9mQ3JlZGVudGlhbF9qc18xID0gcmVxdWlyZShcIi4vY3JlZGVudGlhbHMvb25CZWhhbGZPZkNyZWRlbnRpYWwuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJPbkJlaGFsZk9mQ3JlZGVudGlhbFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gb25CZWhhbGZPZkNyZWRlbnRpYWxfanNfMS5PbkJlaGFsZk9mQ3JlZGVudGlhbDsgfSB9KTtcbnZhciB3b3JrbG9hZElkZW50aXR5Q3JlZGVudGlhbF9qc18xID0gcmVxdWlyZShcIi4vY3JlZGVudGlhbHMvd29ya2xvYWRJZGVudGl0eUNyZWRlbnRpYWwuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJXb3JrbG9hZElkZW50aXR5Q3JlZGVudGlhbFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gd29ya2xvYWRJZGVudGl0eUNyZWRlbnRpYWxfanNfMS5Xb3JrbG9hZElkZW50aXR5Q3JlZGVudGlhbDsgfSB9KTtcbnZhciBsb2dnaW5nX2pzXzEgPSByZXF1aXJlKFwiLi91dGlsL2xvZ2dpbmcuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJsb2dnZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGxvZ2dpbmdfanNfMS5sb2dnZXI7IH0gfSk7XG52YXIgY29uc3RhbnRzX2pzXzEgPSByZXF1aXJlKFwiLi9jb25zdGFudHMuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJBenVyZUF1dGhvcml0eUhvc3RzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25zdGFudHNfanNfMS5BenVyZUF1dGhvcml0eUhvc3RzOyB9IH0pO1xuLyoqXG4gKiBSZXR1cm5zIGEgbmV3IGluc3RhbmNlIG9mIHRoZSB7QGxpbmsgRGVmYXVsdEF6dXJlQ3JlZGVudGlhbH0uXG4gKi9cbmZ1bmN0aW9uIGdldERlZmF1bHRBenVyZUNyZWRlbnRpYWwoKSB7XG4gICAgcmV0dXJuIG5ldyBkZWZhdWx0QXp1cmVDcmVkZW50aWFsX2pzXzEuRGVmYXVsdEF6dXJlQ3JlZGVudGlhbCgpO1xufVxudmFyIHRva2VuUHJvdmlkZXJfanNfMSA9IHJlcXVpcmUoXCIuL3Rva2VuUHJvdmlkZXIuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJnZXRCZWFyZXJUb2tlblByb3ZpZGVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0b2tlblByb3ZpZGVyX2pzXzEuZ2V0QmVhcmVyVG9rZW5Qcm92aWRlcjsgfSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist/commonjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist/commonjs/msal/msal.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@azure/identity/dist/commonjs/msal/msal.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.msalCommon = void 0;\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\nconst msalCommon = tslib_1.__importStar(__webpack_require__(/*! @azure/msal-node */ \"(rsc)/./node_modules/@azure/msal-node/lib/msal-node.cjs\"));\nexports.msalCommon = msalCommon;\n//# sourceMappingURL=msal.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QvY29tbW9uanMvbXNhbC9tc2FsLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQkFBa0I7QUFDbEIsZ0JBQWdCLG1CQUFPLENBQUMsdURBQU87QUFDL0Isd0NBQXdDLG1CQUFPLENBQUMsaUZBQWtCO0FBQ2xFLGtCQUFrQjtBQUNsQiIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QvY29tbW9uanMvbXNhbC9tc2FsLmpzPzMyZTMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubXNhbENvbW1vbiA9IHZvaWQgMDtcbmNvbnN0IHRzbGliXzEgPSByZXF1aXJlKFwidHNsaWJcIik7XG5jb25zdCBtc2FsQ29tbW9uID0gdHNsaWJfMS5fX2ltcG9ydFN0YXIocmVxdWlyZShcIkBhenVyZS9tc2FsLW5vZGVcIikpO1xuZXhwb3J0cy5tc2FsQ29tbW9uID0gbXNhbENvbW1vbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1zYWwuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist/commonjs/msal/msal.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist/commonjs/msal/nodeFlows/msalClient.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist/commonjs/msal/nodeFlows/msalClient.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.generateMsalConfiguration = generateMsalConfiguration;\nexports.createMsalClient = createMsalClient;\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\nconst msal = tslib_1.__importStar(__webpack_require__(/*! @azure/msal-node */ \"(rsc)/./node_modules/@azure/msal-node/lib/msal-node.cjs\"));\nconst logging_js_1 = __webpack_require__(/*! ../../util/logging.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/logging.js\");\nconst msalPlugins_js_1 = __webpack_require__(/*! ./msalPlugins.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/msal/nodeFlows/msalPlugins.js\");\nconst utils_js_1 = __webpack_require__(/*! ../utils.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/msal/utils.js\");\nconst errors_js_1 = __webpack_require__(/*! ../../errors.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/errors.js\");\nconst identityClient_js_1 = __webpack_require__(/*! ../../client/identityClient.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/client/identityClient.js\");\nconst regionalAuthority_js_1 = __webpack_require__(/*! ../../regionalAuthority.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/regionalAuthority.js\");\nconst logger_1 = __webpack_require__(/*! @azure/logger */ \"(rsc)/./node_modules/@azure/logger/dist/commonjs/index.js\");\nconst tenantIdUtils_js_1 = __webpack_require__(/*! ../../util/tenantIdUtils.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/tenantIdUtils.js\");\n/**\n * The default logger used if no logger was passed in by the credential.\n */\nconst msalLogger = (0, logging_js_1.credentialLogger)(\"MsalClient\");\n/**\n * Generates the configuration for MSAL (Microsoft Authentication Library).\n *\n * @param clientId - The client ID of the application.\n * @param  tenantId - The tenant ID of the Azure Active Directory.\n * @param  msalClientOptions - Optional. Additional options for creating the MSAL client.\n * @returns  The MSAL configuration object.\n */\nfunction generateMsalConfiguration(clientId, tenantId, msalClientOptions = {}) {\n    const resolvedTenant = (0, tenantIdUtils_js_1.resolveTenantId)(msalClientOptions.logger ?? msalLogger, tenantId, clientId);\n    // TODO: move and reuse getIdentityClientAuthorityHost\n    const authority = (0, utils_js_1.getAuthority)(resolvedTenant, (0, utils_js_1.getAuthorityHost)(msalClientOptions));\n    const httpClient = new identityClient_js_1.IdentityClient({\n        ...msalClientOptions.tokenCredentialOptions,\n        authorityHost: authority,\n        loggingOptions: msalClientOptions.loggingOptions,\n    });\n    const msalConfig = {\n        auth: {\n            clientId,\n            authority,\n            knownAuthorities: (0, utils_js_1.getKnownAuthorities)(resolvedTenant, authority, msalClientOptions.disableInstanceDiscovery),\n        },\n        system: {\n            networkClient: httpClient,\n            loggerOptions: {\n                loggerCallback: (0, utils_js_1.defaultLoggerCallback)(msalClientOptions.logger ?? msalLogger),\n                logLevel: (0, utils_js_1.getMSALLogLevel)((0, logger_1.getLogLevel)()),\n                piiLoggingEnabled: msalClientOptions.loggingOptions?.enableUnsafeSupportLogging,\n            },\n        },\n    };\n    return msalConfig;\n}\n/**\n * Creates an instance of the MSAL (Microsoft Authentication Library) client.\n *\n * @param clientId - The client ID of the application.\n * @param tenantId - The tenant ID of the Azure Active Directory.\n * @param createMsalClientOptions - Optional. Additional options for creating the MSAL client.\n * @returns An instance of the MSAL client.\n *\n * @public\n */\nfunction createMsalClient(clientId, tenantId, createMsalClientOptions = {}) {\n    const state = {\n        msalConfig: generateMsalConfiguration(clientId, tenantId, createMsalClientOptions),\n        cachedAccount: createMsalClientOptions.authenticationRecord\n            ? (0, utils_js_1.publicToMsal)(createMsalClientOptions.authenticationRecord)\n            : null,\n        pluginConfiguration: msalPlugins_js_1.msalPlugins.generatePluginConfiguration(createMsalClientOptions),\n        logger: createMsalClientOptions.logger ?? msalLogger,\n    };\n    const publicApps = new Map();\n    async function getPublicApp(options = {}) {\n        const appKey = options.enableCae ? \"CAE\" : \"default\";\n        let publicClientApp = publicApps.get(appKey);\n        if (publicClientApp) {\n            state.logger.getToken.info(\"Existing PublicClientApplication found in cache, returning it.\");\n            return publicClientApp;\n        }\n        // Initialize a new app and cache it\n        state.logger.getToken.info(`Creating new PublicClientApplication with CAE ${options.enableCae ? \"enabled\" : \"disabled\"}.`);\n        const cachePlugin = options.enableCae\n            ? state.pluginConfiguration.cache.cachePluginCae\n            : state.pluginConfiguration.cache.cachePlugin;\n        state.msalConfig.auth.clientCapabilities = options.enableCae ? [\"cp1\"] : undefined;\n        publicClientApp = new msal.PublicClientApplication({\n            ...state.msalConfig,\n            broker: { nativeBrokerPlugin: state.pluginConfiguration.broker.nativeBrokerPlugin },\n            cache: { cachePlugin: await cachePlugin },\n        });\n        publicApps.set(appKey, publicClientApp);\n        return publicClientApp;\n    }\n    const confidentialApps = new Map();\n    async function getConfidentialApp(options = {}) {\n        const appKey = options.enableCae ? \"CAE\" : \"default\";\n        let confidentialClientApp = confidentialApps.get(appKey);\n        if (confidentialClientApp) {\n            state.logger.getToken.info(\"Existing ConfidentialClientApplication found in cache, returning it.\");\n            return confidentialClientApp;\n        }\n        // Initialize a new app and cache it\n        state.logger.getToken.info(`Creating new ConfidentialClientApplication with CAE ${options.enableCae ? \"enabled\" : \"disabled\"}.`);\n        const cachePlugin = options.enableCae\n            ? state.pluginConfiguration.cache.cachePluginCae\n            : state.pluginConfiguration.cache.cachePlugin;\n        state.msalConfig.auth.clientCapabilities = options.enableCae ? [\"cp1\"] : undefined;\n        confidentialClientApp = new msal.ConfidentialClientApplication({\n            ...state.msalConfig,\n            broker: { nativeBrokerPlugin: state.pluginConfiguration.broker.nativeBrokerPlugin },\n            cache: { cachePlugin: await cachePlugin },\n        });\n        confidentialApps.set(appKey, confidentialClientApp);\n        return confidentialClientApp;\n    }\n    async function getTokenSilent(app, scopes, options = {}) {\n        if (state.cachedAccount === null) {\n            state.logger.getToken.info(\"No cached account found in local state.\");\n            throw new errors_js_1.AuthenticationRequiredError({ scopes });\n        }\n        // Keep track and reuse the claims we received across challenges\n        if (options.claims) {\n            state.cachedClaims = options.claims;\n        }\n        const silentRequest = {\n            account: state.cachedAccount,\n            scopes,\n            claims: state.cachedClaims,\n        };\n        if (state.pluginConfiguration.broker.isEnabled) {\n            silentRequest.tokenQueryParameters ||= {};\n            if (state.pluginConfiguration.broker.enableMsaPassthrough) {\n                silentRequest.tokenQueryParameters[\"msal_request_type\"] = \"consumer_passthrough\";\n            }\n        }\n        if (options.proofOfPossessionOptions) {\n            silentRequest.shrNonce = options.proofOfPossessionOptions.nonce;\n            silentRequest.authenticationScheme = \"pop\";\n            silentRequest.resourceRequestMethod = options.proofOfPossessionOptions.resourceRequestMethod;\n            silentRequest.resourceRequestUri = options.proofOfPossessionOptions.resourceRequestUrl;\n        }\n        state.logger.getToken.info(\"Attempting to acquire token silently\");\n        try {\n            return await app.acquireTokenSilent(silentRequest);\n        }\n        catch (err) {\n            throw (0, utils_js_1.handleMsalError)(scopes, err, options);\n        }\n    }\n    /**\n     * Builds an authority URL for the given request. The authority may be different than the one used when creating the MSAL client\n     * if the user is creating cross-tenant requests\n     */\n    function calculateRequestAuthority(options) {\n        if (options?.tenantId) {\n            return (0, utils_js_1.getAuthority)(options.tenantId, (0, utils_js_1.getAuthorityHost)(createMsalClientOptions));\n        }\n        return state.msalConfig.auth.authority;\n    }\n    /**\n     * Performs silent authentication using MSAL to acquire an access token.\n     * If silent authentication fails, falls back to interactive authentication.\n     *\n     * @param msalApp - The MSAL application instance.\n     * @param scopes - The scopes for which to acquire the access token.\n     * @param options - The options for acquiring the access token.\n     * @param onAuthenticationRequired - A callback function to handle interactive authentication when silent authentication fails.\n     * @returns A promise that resolves to an AccessToken object containing the access token and its expiration timestamp.\n     */\n    async function withSilentAuthentication(msalApp, scopes, options, onAuthenticationRequired) {\n        let response = null;\n        try {\n            response = await getTokenSilent(msalApp, scopes, options);\n        }\n        catch (e) {\n            if (e.name !== \"AuthenticationRequiredError\") {\n                throw e;\n            }\n            if (options.disableAutomaticAuthentication) {\n                throw new errors_js_1.AuthenticationRequiredError({\n                    scopes,\n                    getTokenOptions: options,\n                    message: \"Automatic authentication has been disabled. You may call the authentication() method.\",\n                });\n            }\n        }\n        // Silent authentication failed\n        if (response === null) {\n            try {\n                response = await onAuthenticationRequired();\n            }\n            catch (err) {\n                throw (0, utils_js_1.handleMsalError)(scopes, err, options);\n            }\n        }\n        // At this point we should have a token, process it\n        (0, utils_js_1.ensureValidMsalToken)(scopes, response, options);\n        state.cachedAccount = response?.account ?? null;\n        state.logger.getToken.info((0, logging_js_1.formatSuccess)(scopes));\n        return {\n            token: response.accessToken,\n            expiresOnTimestamp: response.expiresOn.getTime(),\n            refreshAfterTimestamp: response.refreshOn?.getTime(),\n            tokenType: response.tokenType,\n        };\n    }\n    async function getTokenByClientSecret(scopes, clientSecret, options = {}) {\n        state.logger.getToken.info(`Attempting to acquire token using client secret`);\n        state.msalConfig.auth.clientSecret = clientSecret;\n        const msalApp = await getConfidentialApp(options);\n        try {\n            const response = await msalApp.acquireTokenByClientCredential({\n                scopes,\n                authority: calculateRequestAuthority(options),\n                azureRegion: (0, regionalAuthority_js_1.calculateRegionalAuthority)(),\n                claims: options?.claims,\n            });\n            (0, utils_js_1.ensureValidMsalToken)(scopes, response, options);\n            state.logger.getToken.info((0, logging_js_1.formatSuccess)(scopes));\n            return {\n                token: response.accessToken,\n                expiresOnTimestamp: response.expiresOn.getTime(),\n                refreshAfterTimestamp: response.refreshOn?.getTime(),\n                tokenType: response.tokenType,\n            };\n        }\n        catch (err) {\n            throw (0, utils_js_1.handleMsalError)(scopes, err, options);\n        }\n    }\n    async function getTokenByClientAssertion(scopes, clientAssertion, options = {}) {\n        state.logger.getToken.info(`Attempting to acquire token using client assertion`);\n        state.msalConfig.auth.clientAssertion = clientAssertion;\n        const msalApp = await getConfidentialApp(options);\n        try {\n            const response = await msalApp.acquireTokenByClientCredential({\n                scopes,\n                authority: calculateRequestAuthority(options),\n                azureRegion: (0, regionalAuthority_js_1.calculateRegionalAuthority)(),\n                claims: options?.claims,\n                clientAssertion,\n            });\n            (0, utils_js_1.ensureValidMsalToken)(scopes, response, options);\n            state.logger.getToken.info((0, logging_js_1.formatSuccess)(scopes));\n            return {\n                token: response.accessToken,\n                expiresOnTimestamp: response.expiresOn.getTime(),\n                refreshAfterTimestamp: response.refreshOn?.getTime(),\n                tokenType: response.tokenType,\n            };\n        }\n        catch (err) {\n            throw (0, utils_js_1.handleMsalError)(scopes, err, options);\n        }\n    }\n    async function getTokenByClientCertificate(scopes, certificate, options = {}) {\n        state.logger.getToken.info(`Attempting to acquire token using client certificate`);\n        state.msalConfig.auth.clientCertificate = certificate;\n        const msalApp = await getConfidentialApp(options);\n        try {\n            const response = await msalApp.acquireTokenByClientCredential({\n                scopes,\n                authority: calculateRequestAuthority(options),\n                azureRegion: (0, regionalAuthority_js_1.calculateRegionalAuthority)(),\n                claims: options?.claims,\n            });\n            (0, utils_js_1.ensureValidMsalToken)(scopes, response, options);\n            state.logger.getToken.info((0, logging_js_1.formatSuccess)(scopes));\n            return {\n                token: response.accessToken,\n                expiresOnTimestamp: response.expiresOn.getTime(),\n                refreshAfterTimestamp: response.refreshOn?.getTime(),\n                tokenType: response.tokenType,\n            };\n        }\n        catch (err) {\n            throw (0, utils_js_1.handleMsalError)(scopes, err, options);\n        }\n    }\n    async function getTokenByDeviceCode(scopes, deviceCodeCallback, options = {}) {\n        state.logger.getToken.info(`Attempting to acquire token using device code`);\n        const msalApp = await getPublicApp(options);\n        return withSilentAuthentication(msalApp, scopes, options, () => {\n            const requestOptions = {\n                scopes,\n                cancel: options?.abortSignal?.aborted ?? false,\n                deviceCodeCallback,\n                authority: calculateRequestAuthority(options),\n                claims: options?.claims,\n            };\n            const deviceCodeRequest = msalApp.acquireTokenByDeviceCode(requestOptions);\n            if (options.abortSignal) {\n                options.abortSignal.addEventListener(\"abort\", () => {\n                    requestOptions.cancel = true;\n                });\n            }\n            return deviceCodeRequest;\n        });\n    }\n    async function getTokenByUsernamePassword(scopes, username, password, options = {}) {\n        state.logger.getToken.info(`Attempting to acquire token using username and password`);\n        const msalApp = await getPublicApp(options);\n        return withSilentAuthentication(msalApp, scopes, options, () => {\n            const requestOptions = {\n                scopes,\n                username,\n                password,\n                authority: calculateRequestAuthority(options),\n                claims: options?.claims,\n            };\n            return msalApp.acquireTokenByUsernamePassword(requestOptions);\n        });\n    }\n    function getActiveAccount() {\n        if (!state.cachedAccount) {\n            return undefined;\n        }\n        return (0, utils_js_1.msalToPublic)(clientId, state.cachedAccount);\n    }\n    async function getTokenByAuthorizationCode(scopes, redirectUri, authorizationCode, clientSecret, options = {}) {\n        state.logger.getToken.info(`Attempting to acquire token using authorization code`);\n        let msalApp;\n        if (clientSecret) {\n            // If a client secret is provided, we need to use a confidential client application\n            // See https://learn.microsoft.com/entra/identity-platform/v2-oauth2-auth-code-flow#request-an-access-token-with-a-client_secret\n            state.msalConfig.auth.clientSecret = clientSecret;\n            msalApp = await getConfidentialApp(options);\n        }\n        else {\n            msalApp = await getPublicApp(options);\n        }\n        return withSilentAuthentication(msalApp, scopes, options, () => {\n            return msalApp.acquireTokenByCode({\n                scopes,\n                redirectUri,\n                code: authorizationCode,\n                authority: calculateRequestAuthority(options),\n                claims: options?.claims,\n            });\n        });\n    }\n    async function getTokenOnBehalfOf(scopes, userAssertionToken, clientCredentials, options = {}) {\n        msalLogger.getToken.info(`Attempting to acquire token on behalf of another user`);\n        if (typeof clientCredentials === \"string\") {\n            // Client secret\n            msalLogger.getToken.info(`Using client secret for on behalf of flow`);\n            state.msalConfig.auth.clientSecret = clientCredentials;\n        }\n        else if (typeof clientCredentials === \"function\") {\n            // Client Assertion\n            msalLogger.getToken.info(`Using client assertion callback for on behalf of flow`);\n            state.msalConfig.auth.clientAssertion = clientCredentials;\n        }\n        else {\n            // Client certificate\n            msalLogger.getToken.info(`Using client certificate for on behalf of flow`);\n            state.msalConfig.auth.clientCertificate = clientCredentials;\n        }\n        const msalApp = await getConfidentialApp(options);\n        try {\n            const response = await msalApp.acquireTokenOnBehalfOf({\n                scopes,\n                authority: calculateRequestAuthority(options),\n                claims: options.claims,\n                oboAssertion: userAssertionToken,\n            });\n            (0, utils_js_1.ensureValidMsalToken)(scopes, response, options);\n            msalLogger.getToken.info((0, logging_js_1.formatSuccess)(scopes));\n            return {\n                token: response.accessToken,\n                expiresOnTimestamp: response.expiresOn.getTime(),\n                refreshAfterTimestamp: response.refreshOn?.getTime(),\n                tokenType: response.tokenType,\n            };\n        }\n        catch (err) {\n            throw (0, utils_js_1.handleMsalError)(scopes, err, options);\n        }\n    }\n    /**\n     * Creates a base interactive request configuration for MSAL interactive authentication.\n     * This is shared between interactive and brokered authentication flows.\n     *\n     * @internal\n     */\n    function createBaseInteractiveRequest(scopes, options) {\n        return {\n            openBrowser: async (url) => {\n                const open = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/default-browser\"), __webpack_require__.e(\"vendor-chunks/wsl-utils\"), __webpack_require__.e(\"vendor-chunks/run-applescript\"), __webpack_require__.e(\"vendor-chunks/open\"), __webpack_require__.e(\"vendor-chunks/is-wsl\"), __webpack_require__.e(\"vendor-chunks/is-inside-container\"), __webpack_require__.e(\"vendor-chunks/is-docker\"), __webpack_require__.e(\"vendor-chunks/define-lazy-prop\"), __webpack_require__.e(\"vendor-chunks/default-browser-id\"), __webpack_require__.e(\"vendor-chunks/bundle-name\")]).then(__webpack_require__.bind(__webpack_require__, /*! open */ \"(rsc)/./node_modules/open/index.js\"));\n                await open.default(url, { newInstance: true });\n            },\n            scopes,\n            authority: calculateRequestAuthority(options),\n            claims: options?.claims,\n            loginHint: options?.loginHint,\n            errorTemplate: options?.browserCustomizationOptions?.errorMessage,\n            successTemplate: options?.browserCustomizationOptions?.successMessage,\n            prompt: options?.loginHint ? \"login\" : \"select_account\",\n        };\n    }\n    /**\n     * @internal\n     */\n    async function getBrokeredTokenInternal(scopes, useDefaultBrokerAccount, options = {}) {\n        msalLogger.verbose(\"Authentication will resume through the broker\");\n        const app = await getPublicApp(options);\n        const interactiveRequest = createBaseInteractiveRequest(scopes, options);\n        if (state.pluginConfiguration.broker.parentWindowHandle) {\n            interactiveRequest.windowHandle = Buffer.from(state.pluginConfiguration.broker.parentWindowHandle);\n        }\n        else {\n            // this is a bug, as the pluginConfiguration handler should validate this case.\n            msalLogger.warning(\"Parent window handle is not specified for the broker. This may cause unexpected behavior. Please provide the parentWindowHandle.\");\n        }\n        if (state.pluginConfiguration.broker.enableMsaPassthrough) {\n            (interactiveRequest.tokenQueryParameters ??= {})[\"msal_request_type\"] =\n                \"consumer_passthrough\";\n        }\n        if (useDefaultBrokerAccount) {\n            interactiveRequest.prompt = \"none\";\n            msalLogger.verbose(\"Attempting broker authentication using the default broker account\");\n        }\n        else {\n            msalLogger.verbose(\"Attempting broker authentication without the default broker account\");\n        }\n        if (options.proofOfPossessionOptions) {\n            interactiveRequest.shrNonce = options.proofOfPossessionOptions.nonce;\n            interactiveRequest.authenticationScheme = \"pop\";\n            interactiveRequest.resourceRequestMethod =\n                options.proofOfPossessionOptions.resourceRequestMethod;\n            interactiveRequest.resourceRequestUri = options.proofOfPossessionOptions.resourceRequestUrl;\n        }\n        try {\n            return await app.acquireTokenInteractive(interactiveRequest);\n        }\n        catch (e) {\n            msalLogger.verbose(`Failed to authenticate through the broker: ${e.message}`);\n            if (options.disableAutomaticAuthentication) {\n                throw new errors_js_1.AuthenticationRequiredError({\n                    scopes,\n                    getTokenOptions: options,\n                    message: \"Cannot silently authenticate with default broker account.\",\n                });\n            }\n            // If we tried to use the default broker account and failed, fall back to interactive authentication\n            if (useDefaultBrokerAccount) {\n                return getBrokeredTokenInternal(scopes, false, options);\n            }\n            else {\n                throw e;\n            }\n        }\n    }\n    /**\n     * A helper function that supports brokered authentication through the MSAL's public application.\n     *\n     * When useDefaultBrokerAccount is true, the method will attempt to authenticate using the default broker account.\n     * If the default broker account is not available, the method will fall back to interactive authentication.\n     */\n    async function getBrokeredToken(scopes, useDefaultBrokerAccount, options = {}) {\n        msalLogger.getToken.info(`Attempting to acquire token using brokered authentication with useDefaultBrokerAccount: ${useDefaultBrokerAccount}`);\n        const response = await getBrokeredTokenInternal(scopes, useDefaultBrokerAccount, options);\n        (0, utils_js_1.ensureValidMsalToken)(scopes, response, options);\n        state.cachedAccount = response?.account ?? null;\n        state.logger.getToken.info((0, logging_js_1.formatSuccess)(scopes));\n        return {\n            token: response.accessToken,\n            expiresOnTimestamp: response.expiresOn.getTime(),\n            refreshAfterTimestamp: response.refreshOn?.getTime(),\n            tokenType: response.tokenType,\n        };\n    }\n    async function getTokenByInteractiveRequest(scopes, options = {}) {\n        msalLogger.getToken.info(`Attempting to acquire token interactively`);\n        const app = await getPublicApp(options);\n        return withSilentAuthentication(app, scopes, options, async () => {\n            const interactiveRequest = createBaseInteractiveRequest(scopes, options);\n            if (state.pluginConfiguration.broker.isEnabled) {\n                return getBrokeredTokenInternal(scopes, state.pluginConfiguration.broker.useDefaultBrokerAccount ?? false, options);\n            }\n            if (options.proofOfPossessionOptions) {\n                interactiveRequest.shrNonce = options.proofOfPossessionOptions.nonce;\n                interactiveRequest.authenticationScheme = \"pop\";\n                interactiveRequest.resourceRequestMethod =\n                    options.proofOfPossessionOptions.resourceRequestMethod;\n                interactiveRequest.resourceRequestUri = options.proofOfPossessionOptions.resourceRequestUrl;\n            }\n            return app.acquireTokenInteractive(interactiveRequest);\n        });\n    }\n    return {\n        getActiveAccount,\n        getBrokeredToken,\n        getTokenByClientSecret,\n        getTokenByClientAssertion,\n        getTokenByClientCertificate,\n        getTokenByDeviceCode,\n        getTokenByUsernamePassword,\n        getTokenByAuthorizationCode,\n        getTokenOnBehalfOf,\n        getTokenByInteractiveRequest,\n    };\n}\n//# sourceMappingURL=msalClient.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist/commonjs/msal/nodeFlows/msalClient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist/commonjs/msal/nodeFlows/msalPlugins.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist/commonjs/msal/nodeFlows/msalPlugins.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.msalPlugins = exports.msalNodeFlowVSCodeCredentialControl = exports.msalNodeFlowNativeBrokerControl = exports.vsCodeBrokerInfo = exports.vsCodeAuthRecordPath = exports.nativeBrokerInfo = exports.msalNodeFlowCacheControl = exports.persistenceProvider = void 0;\nexports.hasNativeBroker = hasNativeBroker;\nexports.hasVSCodePlugin = hasVSCodePlugin;\nconst constants_js_1 = __webpack_require__(/*! ../../constants.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/constants.js\");\n/**\n * The current persistence provider, undefined by default.\n * @internal\n */\nexports.persistenceProvider = undefined;\n/**\n * An object that allows setting the persistence provider.\n * @internal\n */\nexports.msalNodeFlowCacheControl = {\n    setPersistence(pluginProvider) {\n        exports.persistenceProvider = pluginProvider;\n    },\n};\n/**\n * The current native broker provider, undefined by default.\n * @internal\n */\nexports.nativeBrokerInfo = undefined;\n/**\n * The current VSCode auth record path, undefined by default.\n * @internal\n */\nexports.vsCodeAuthRecordPath = undefined;\n/**\n * The current VSCode broker, undefined by default.\n * @internal\n */\nexports.vsCodeBrokerInfo = undefined;\nfunction hasNativeBroker() {\n    return exports.nativeBrokerInfo !== undefined;\n}\nfunction hasVSCodePlugin() {\n    return exports.vsCodeAuthRecordPath !== undefined && exports.vsCodeBrokerInfo !== undefined;\n}\n/**\n * An object that allows setting the native broker provider.\n * @internal\n */\nexports.msalNodeFlowNativeBrokerControl = {\n    setNativeBroker(broker) {\n        exports.nativeBrokerInfo = {\n            broker,\n        };\n    },\n};\n/**\n * An object that allows setting the VSCode credential auth record path and broker.\n * @internal\n */\nexports.msalNodeFlowVSCodeCredentialControl = {\n    setVSCodeAuthRecordPath(path) {\n        exports.vsCodeAuthRecordPath = path;\n    },\n    setVSCodeBroker(broker) {\n        exports.vsCodeBrokerInfo = {\n            broker,\n        };\n    },\n};\n/**\n * Configures plugins, validating that required plugins are available and enabled.\n *\n * Does not create the plugins themselves, but rather returns the configuration that will be used to create them.\n *\n * @param options - options for creating the MSAL client\n * @returns plugin configuration\n */\nfunction generatePluginConfiguration(options) {\n    const config = {\n        cache: {},\n        broker: {\n            ...options.brokerOptions,\n            isEnabled: options.brokerOptions?.enabled ?? false,\n            enableMsaPassthrough: options.brokerOptions?.legacyEnableMsaPassthrough ?? false,\n        },\n    };\n    if (options.tokenCachePersistenceOptions?.enabled) {\n        if (exports.persistenceProvider === undefined) {\n            throw new Error([\n                \"Persistent token caching was requested, but no persistence provider was configured.\",\n                \"You must install the identity-cache-persistence plugin package (`npm install --save @azure/identity-cache-persistence`)\",\n                \"and enable it by importing `useIdentityPlugin` from `@azure/identity` and calling\",\n                \"`useIdentityPlugin(cachePersistencePlugin)` before using `tokenCachePersistenceOptions`.\",\n            ].join(\" \"));\n        }\n        const cacheBaseName = options.tokenCachePersistenceOptions.name || constants_js_1.DEFAULT_TOKEN_CACHE_NAME;\n        config.cache.cachePlugin = (0, exports.persistenceProvider)({\n            name: `${cacheBaseName}.${constants_js_1.CACHE_NON_CAE_SUFFIX}`,\n            ...options.tokenCachePersistenceOptions,\n        });\n        config.cache.cachePluginCae = (0, exports.persistenceProvider)({\n            name: `${cacheBaseName}.${constants_js_1.CACHE_CAE_SUFFIX}`,\n            ...options.tokenCachePersistenceOptions,\n        });\n    }\n    if (options.brokerOptions?.enabled) {\n        if (options.isVSCodeCredential) {\n            if (exports.vsCodeBrokerInfo === undefined) {\n                throw new Error([\n                    \"Visual Studio Code Credential was requested, but no plugin was configured or no authentication record was found.\",\n                    \"You must install the identity-vscode plugin package (`npm install --save @azure/identity-vscode`)\",\n                    \"and enable it by importing `useIdentityPlugin` from `@azure/identity` and calling\",\n                    \"`useIdentityPlugin(vsCodePlugin)` before using `enableBroker`.\",\n                ].join(\" \"));\n            }\n            config.broker.nativeBrokerPlugin = exports.vsCodeBrokerInfo.broker;\n        }\n        else {\n            if (exports.nativeBrokerInfo === undefined) {\n                throw new Error([\n                    \"Broker for WAM was requested to be enabled, but no native broker was configured.\",\n                    \"You must install the identity-broker plugin package (`npm install --save @azure/identity-broker`)\",\n                    \"and enable it by importing `useIdentityPlugin` from `@azure/identity` and calling\",\n                    \"`useIdentityPlugin(brokerPlugin)` before using `enableBroker`.\",\n                ].join(\" \"));\n            }\n            config.broker.nativeBrokerPlugin = exports.nativeBrokerInfo.broker;\n        }\n    }\n    return config;\n}\n/**\n * Wraps generatePluginConfiguration as a writeable property for test stubbing purposes.\n */\nexports.msalPlugins = {\n    generatePluginConfiguration,\n};\n//# sourceMappingURL=msalPlugins.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist/commonjs/msal/nodeFlows/msalPlugins.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist/commonjs/msal/utils.js":
/*!******************************************************************!*\
  !*** ./node_modules/@azure/identity/dist/commonjs/msal/utils.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.defaultLoggerCallback = void 0;\nexports.ensureValidMsalToken = ensureValidMsalToken;\nexports.getAuthorityHost = getAuthorityHost;\nexports.getAuthority = getAuthority;\nexports.getKnownAuthorities = getKnownAuthorities;\nexports.getMSALLogLevel = getMSALLogLevel;\nexports.randomUUID = randomUUID;\nexports.handleMsalError = handleMsalError;\nexports.publicToMsal = publicToMsal;\nexports.msalToPublic = msalToPublic;\nexports.serializeAuthenticationRecord = serializeAuthenticationRecord;\nexports.deserializeAuthenticationRecord = deserializeAuthenticationRecord;\nconst errors_js_1 = __webpack_require__(/*! ../errors.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/errors.js\");\nconst logging_js_1 = __webpack_require__(/*! ../util/logging.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/logging.js\");\nconst constants_js_1 = __webpack_require__(/*! ../constants.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/constants.js\");\nconst core_util_1 = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/commonjs/index.js\");\nconst abort_controller_1 = __webpack_require__(/*! @azure/abort-controller */ \"(rsc)/./node_modules/@azure/abort-controller/dist/commonjs/index.js\");\nconst msal_js_1 = __webpack_require__(/*! ./msal.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/msal/msal.js\");\n/**\n * @internal\n */\nconst logger = (0, logging_js_1.credentialLogger)(\"IdentityUtils\");\n/**\n * Latest AuthenticationRecord version\n * @internal\n */\nconst LatestAuthenticationRecordVersion = \"1.0\";\n/**\n * Ensures the validity of the MSAL token\n * @internal\n */\nfunction ensureValidMsalToken(scopes, msalToken, getTokenOptions) {\n    const error = (message) => {\n        logger.getToken.info(message);\n        return new errors_js_1.AuthenticationRequiredError({\n            scopes: Array.isArray(scopes) ? scopes : [scopes],\n            getTokenOptions,\n            message,\n        });\n    };\n    if (!msalToken) {\n        throw error(\"No response\");\n    }\n    if (!msalToken.expiresOn) {\n        throw error(`Response had no \"expiresOn\" property.`);\n    }\n    if (!msalToken.accessToken) {\n        throw error(`Response had no \"accessToken\" property.`);\n    }\n}\n/**\n * Returns the authority host from either the options bag or the AZURE_AUTHORITY_HOST environment variable.\n *\n * Defaults to {@link DefaultAuthorityHost}.\n * @internal\n */\nfunction getAuthorityHost(options) {\n    let authorityHost = options?.authorityHost;\n    if (!authorityHost && core_util_1.isNodeLike) {\n        authorityHost = process.env.AZURE_AUTHORITY_HOST;\n    }\n    return authorityHost ?? constants_js_1.DefaultAuthorityHost;\n}\n/**\n * Generates a valid authority by combining a host with a tenantId.\n * @internal\n */\nfunction getAuthority(tenantId, host) {\n    if (!host) {\n        host = constants_js_1.DefaultAuthorityHost;\n    }\n    if (new RegExp(`${tenantId}/?$`).test(host)) {\n        return host;\n    }\n    if (host.endsWith(\"/\")) {\n        return host + tenantId;\n    }\n    else {\n        return `${host}/${tenantId}`;\n    }\n}\n/**\n * Generates the known authorities.\n * If the Tenant Id is `adfs`, the authority can't be validated since the format won't match the expected one.\n * For that reason, we have to force MSAL to disable validating the authority\n * by sending it within the known authorities in the MSAL configuration.\n * @internal\n */\nfunction getKnownAuthorities(tenantId, authorityHost, disableInstanceDiscovery) {\n    if ((tenantId === \"adfs\" && authorityHost) || disableInstanceDiscovery) {\n        return [authorityHost];\n    }\n    return [];\n}\n/**\n * Generates a logger that can be passed to the MSAL clients.\n * @param credLogger - The logger of the credential.\n * @internal\n */\nconst defaultLoggerCallback = (credLogger, platform = core_util_1.isNode ? \"Node\" : \"Browser\") => (level, message, containsPii) => {\n    if (containsPii) {\n        return;\n    }\n    switch (level) {\n        case msal_js_1.msalCommon.LogLevel.Error:\n            credLogger.info(`MSAL ${platform} V2 error: ${message}`);\n            return;\n        case msal_js_1.msalCommon.LogLevel.Info:\n            credLogger.info(`MSAL ${platform} V2 info message: ${message}`);\n            return;\n        case msal_js_1.msalCommon.LogLevel.Verbose:\n            credLogger.info(`MSAL ${platform} V2 verbose message: ${message}`);\n            return;\n        case msal_js_1.msalCommon.LogLevel.Warning:\n            credLogger.info(`MSAL ${platform} V2 warning: ${message}`);\n            return;\n    }\n};\nexports.defaultLoggerCallback = defaultLoggerCallback;\n/**\n * @internal\n */\nfunction getMSALLogLevel(logLevel) {\n    switch (logLevel) {\n        case \"error\":\n            return msal_js_1.msalCommon.LogLevel.Error;\n        case \"info\":\n            return msal_js_1.msalCommon.LogLevel.Info;\n        case \"verbose\":\n            return msal_js_1.msalCommon.LogLevel.Verbose;\n        case \"warning\":\n            return msal_js_1.msalCommon.LogLevel.Warning;\n        default:\n            // default msal logging level should be Info\n            return msal_js_1.msalCommon.LogLevel.Info;\n    }\n}\n/**\n * Wraps core-util's randomUUID in order to allow for mocking in tests.\n * This prepares the library for the upcoming core-util update to ESM.\n *\n * @internal\n * @returns A string containing a random UUID\n */\nfunction randomUUID() {\n    return (0, core_util_1.randomUUID)();\n}\n/**\n * Handles MSAL errors.\n */\nfunction handleMsalError(scopes, error, getTokenOptions) {\n    if (error.name === \"AuthError\" ||\n        error.name === \"ClientAuthError\" ||\n        error.name === \"BrowserAuthError\") {\n        const msalError = error;\n        switch (msalError.errorCode) {\n            case \"endpoints_resolution_error\":\n                logger.info((0, logging_js_1.formatError)(scopes, error.message));\n                return new errors_js_1.CredentialUnavailableError(error.message);\n            case \"device_code_polling_cancelled\":\n                return new abort_controller_1.AbortError(\"The authentication has been aborted by the caller.\");\n            case \"consent_required\":\n            case \"interaction_required\":\n            case \"login_required\":\n                logger.info((0, logging_js_1.formatError)(scopes, `Authentication returned errorCode ${msalError.errorCode}`));\n                break;\n            default:\n                logger.info((0, logging_js_1.formatError)(scopes, `Failed to acquire token: ${error.message}`));\n                break;\n        }\n    }\n    if (error.name === \"ClientConfigurationError\" ||\n        error.name === \"BrowserConfigurationAuthError\" ||\n        error.name === \"AbortError\" ||\n        error.name === \"AuthenticationError\") {\n        return error;\n    }\n    if (error.name === \"NativeAuthError\") {\n        logger.info((0, logging_js_1.formatError)(scopes, `Error from the native broker: ${error.message} with status code: ${error.statusCode}`));\n        return error;\n    }\n    return new errors_js_1.AuthenticationRequiredError({ scopes, getTokenOptions, message: error.message });\n}\n// transformations\nfunction publicToMsal(account) {\n    return {\n        localAccountId: account.homeAccountId,\n        environment: account.authority,\n        username: account.username,\n        homeAccountId: account.homeAccountId,\n        tenantId: account.tenantId,\n    };\n}\nfunction msalToPublic(clientId, account) {\n    const record = {\n        authority: account.environment ?? constants_js_1.DefaultAuthority,\n        homeAccountId: account.homeAccountId,\n        tenantId: account.tenantId || constants_js_1.DefaultTenantId,\n        username: account.username,\n        clientId,\n        version: LatestAuthenticationRecordVersion,\n    };\n    return record;\n}\n/**\n * Serializes an `AuthenticationRecord` into a string.\n *\n * The output of a serialized authentication record will contain the following properties:\n *\n * - \"authority\"\n * - \"homeAccountId\"\n * - \"clientId\"\n * - \"tenantId\"\n * - \"username\"\n * - \"version\"\n *\n * To later convert this string to a serialized `AuthenticationRecord`, please use the exported function `deserializeAuthenticationRecord()`.\n */\nfunction serializeAuthenticationRecord(record) {\n    return JSON.stringify(record);\n}\n/**\n * Deserializes a previously serialized authentication record from a string into an object.\n *\n * The input string must contain the following properties:\n *\n * - \"authority\"\n * - \"homeAccountId\"\n * - \"clientId\"\n * - \"tenantId\"\n * - \"username\"\n * - \"version\"\n *\n * If the version we receive is unsupported, an error will be thrown.\n *\n * At the moment, the only available version is: \"1.0\", which is always set when the authentication record is serialized.\n *\n * @param serializedRecord - Authentication record previously serialized into string.\n * @returns AuthenticationRecord.\n */\nfunction deserializeAuthenticationRecord(serializedRecord) {\n    const parsed = JSON.parse(serializedRecord);\n    if (parsed.version && parsed.version !== LatestAuthenticationRecordVersion) {\n        throw Error(\"Unsupported AuthenticationRecord version\");\n    }\n    return parsed;\n}\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist/commonjs/msal/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist/commonjs/plugins/consumer.js":
/*!************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist/commonjs/plugins/consumer.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.useIdentityPlugin = useIdentityPlugin;\nconst msalPlugins_js_1 = __webpack_require__(/*! ../msal/nodeFlows/msalPlugins.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/msal/nodeFlows/msalPlugins.js\");\n/**\n * The context passed to an Identity plugin. This contains objects that\n * plugins can use to set backend implementations.\n * @internal\n */\nconst pluginContext = {\n    cachePluginControl: msalPlugins_js_1.msalNodeFlowCacheControl,\n    nativeBrokerPluginControl: msalPlugins_js_1.msalNodeFlowNativeBrokerControl,\n    vsCodeCredentialControl: msalPlugins_js_1.msalNodeFlowVSCodeCredentialControl,\n};\n/**\n * Extend Azure Identity with additional functionality. Pass a plugin from\n * a plugin package, such as:\n *\n * - `@azure/identity-cache-persistence`: provides persistent token caching\n * - `@azure/identity-vscode`: provides the dependencies of\n *   `VisualStudioCodeCredential` and enables it\n *\n * Example:\n *\n * ```ts snippet:consumer_example\n * import { useIdentityPlugin, DeviceCodeCredential } from \"@azure/identity\";\n *\n * useIdentityPlugin(cachePersistencePlugin);\n * // The plugin has the capability to extend `DeviceCodeCredential` and to\n * // add middleware to the underlying credentials, such as persistence.\n * const credential = new DeviceCodeCredential({\n *   tokenCachePersistenceOptions: {\n *     enabled: true,\n *   },\n * });\n * ```\n *\n * @param plugin - the plugin to register\n */\nfunction useIdentityPlugin(plugin) {\n    plugin(pluginContext);\n}\n//# sourceMappingURL=consumer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QvY29tbW9uanMvcGx1Z2lucy9jb25zdW1lci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QseUJBQXlCO0FBQ3pCLHlCQUF5QixtQkFBTyxDQUFDLDBIQUFrQztBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDBDQUEwQztBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTixJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QvY29tbW9uanMvcGx1Z2lucy9jb25zdW1lci5qcz81Mjc2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnVzZUlkZW50aXR5UGx1Z2luID0gdXNlSWRlbnRpdHlQbHVnaW47XG5jb25zdCBtc2FsUGx1Z2luc19qc18xID0gcmVxdWlyZShcIi4uL21zYWwvbm9kZUZsb3dzL21zYWxQbHVnaW5zLmpzXCIpO1xuLyoqXG4gKiBUaGUgY29udGV4dCBwYXNzZWQgdG8gYW4gSWRlbnRpdHkgcGx1Z2luLiBUaGlzIGNvbnRhaW5zIG9iamVjdHMgdGhhdFxuICogcGx1Z2lucyBjYW4gdXNlIHRvIHNldCBiYWNrZW5kIGltcGxlbWVudGF0aW9ucy5cbiAqIEBpbnRlcm5hbFxuICovXG5jb25zdCBwbHVnaW5Db250ZXh0ID0ge1xuICAgIGNhY2hlUGx1Z2luQ29udHJvbDogbXNhbFBsdWdpbnNfanNfMS5tc2FsTm9kZUZsb3dDYWNoZUNvbnRyb2wsXG4gICAgbmF0aXZlQnJva2VyUGx1Z2luQ29udHJvbDogbXNhbFBsdWdpbnNfanNfMS5tc2FsTm9kZUZsb3dOYXRpdmVCcm9rZXJDb250cm9sLFxuICAgIHZzQ29kZUNyZWRlbnRpYWxDb250cm9sOiBtc2FsUGx1Z2luc19qc18xLm1zYWxOb2RlRmxvd1ZTQ29kZUNyZWRlbnRpYWxDb250cm9sLFxufTtcbi8qKlxuICogRXh0ZW5kIEF6dXJlIElkZW50aXR5IHdpdGggYWRkaXRpb25hbCBmdW5jdGlvbmFsaXR5LiBQYXNzIGEgcGx1Z2luIGZyb21cbiAqIGEgcGx1Z2luIHBhY2thZ2UsIHN1Y2ggYXM6XG4gKlxuICogLSBgQGF6dXJlL2lkZW50aXR5LWNhY2hlLXBlcnNpc3RlbmNlYDogcHJvdmlkZXMgcGVyc2lzdGVudCB0b2tlbiBjYWNoaW5nXG4gKiAtIGBAYXp1cmUvaWRlbnRpdHktdnNjb2RlYDogcHJvdmlkZXMgdGhlIGRlcGVuZGVuY2llcyBvZlxuICogICBgVmlzdWFsU3R1ZGlvQ29kZUNyZWRlbnRpYWxgIGFuZCBlbmFibGVzIGl0XG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGB0cyBzbmlwcGV0OmNvbnN1bWVyX2V4YW1wbGVcbiAqIGltcG9ydCB7IHVzZUlkZW50aXR5UGx1Z2luLCBEZXZpY2VDb2RlQ3JlZGVudGlhbCB9IGZyb20gXCJAYXp1cmUvaWRlbnRpdHlcIjtcbiAqXG4gKiB1c2VJZGVudGl0eVBsdWdpbihjYWNoZVBlcnNpc3RlbmNlUGx1Z2luKTtcbiAqIC8vIFRoZSBwbHVnaW4gaGFzIHRoZSBjYXBhYmlsaXR5IHRvIGV4dGVuZCBgRGV2aWNlQ29kZUNyZWRlbnRpYWxgIGFuZCB0b1xuICogLy8gYWRkIG1pZGRsZXdhcmUgdG8gdGhlIHVuZGVybHlpbmcgY3JlZGVudGlhbHMsIHN1Y2ggYXMgcGVyc2lzdGVuY2UuXG4gKiBjb25zdCBjcmVkZW50aWFsID0gbmV3IERldmljZUNvZGVDcmVkZW50aWFsKHtcbiAqICAgdG9rZW5DYWNoZVBlcnNpc3RlbmNlT3B0aW9uczoge1xuICogICAgIGVuYWJsZWQ6IHRydWUsXG4gKiAgIH0sXG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBwbHVnaW4gLSB0aGUgcGx1Z2luIHRvIHJlZ2lzdGVyXG4gKi9cbmZ1bmN0aW9uIHVzZUlkZW50aXR5UGx1Z2luKHBsdWdpbikge1xuICAgIHBsdWdpbihwbHVnaW5Db250ZXh0KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN1bWVyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist/commonjs/plugins/consumer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist/commonjs/regionalAuthority.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist/commonjs/regionalAuthority.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RegionalAuthority = void 0;\nexports.calculateRegionalAuthority = calculateRegionalAuthority;\n/**\n * Helps specify a regional authority, or \"AutoDiscoverRegion\" to auto-detect the region.\n */\nvar RegionalAuthority;\n(function (RegionalAuthority) {\n    /** Instructs MSAL to attempt to discover the region */\n    RegionalAuthority[\"AutoDiscoverRegion\"] = \"AutoDiscoverRegion\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'westus' region. */\n    RegionalAuthority[\"USWest\"] = \"westus\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'westus2' region. */\n    RegionalAuthority[\"USWest2\"] = \"westus2\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'centralus' region. */\n    RegionalAuthority[\"USCentral\"] = \"centralus\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'eastus' region. */\n    RegionalAuthority[\"USEast\"] = \"eastus\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'eastus2' region. */\n    RegionalAuthority[\"USEast2\"] = \"eastus2\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'northcentralus' region. */\n    RegionalAuthority[\"USNorthCentral\"] = \"northcentralus\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'southcentralus' region. */\n    RegionalAuthority[\"USSouthCentral\"] = \"southcentralus\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'westcentralus' region. */\n    RegionalAuthority[\"USWestCentral\"] = \"westcentralus\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'canadacentral' region. */\n    RegionalAuthority[\"CanadaCentral\"] = \"canadacentral\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'canadaeast' region. */\n    RegionalAuthority[\"CanadaEast\"] = \"canadaeast\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'brazilsouth' region. */\n    RegionalAuthority[\"BrazilSouth\"] = \"brazilsouth\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'northeurope' region. */\n    RegionalAuthority[\"EuropeNorth\"] = \"northeurope\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'westeurope' region. */\n    RegionalAuthority[\"EuropeWest\"] = \"westeurope\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'uksouth' region. */\n    RegionalAuthority[\"UKSouth\"] = \"uksouth\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'ukwest' region. */\n    RegionalAuthority[\"UKWest\"] = \"ukwest\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'francecentral' region. */\n    RegionalAuthority[\"FranceCentral\"] = \"francecentral\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'francesouth' region. */\n    RegionalAuthority[\"FranceSouth\"] = \"francesouth\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'switzerlandnorth' region. */\n    RegionalAuthority[\"SwitzerlandNorth\"] = \"switzerlandnorth\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'switzerlandwest' region. */\n    RegionalAuthority[\"SwitzerlandWest\"] = \"switzerlandwest\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'germanynorth' region. */\n    RegionalAuthority[\"GermanyNorth\"] = \"germanynorth\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'germanywestcentral' region. */\n    RegionalAuthority[\"GermanyWestCentral\"] = \"germanywestcentral\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'norwaywest' region. */\n    RegionalAuthority[\"NorwayWest\"] = \"norwaywest\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'norwayeast' region. */\n    RegionalAuthority[\"NorwayEast\"] = \"norwayeast\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'eastasia' region. */\n    RegionalAuthority[\"AsiaEast\"] = \"eastasia\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'southeastasia' region. */\n    RegionalAuthority[\"AsiaSouthEast\"] = \"southeastasia\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'japaneast' region. */\n    RegionalAuthority[\"JapanEast\"] = \"japaneast\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'japanwest' region. */\n    RegionalAuthority[\"JapanWest\"] = \"japanwest\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'australiaeast' region. */\n    RegionalAuthority[\"AustraliaEast\"] = \"australiaeast\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'australiasoutheast' region. */\n    RegionalAuthority[\"AustraliaSouthEast\"] = \"australiasoutheast\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'australiacentral' region. */\n    RegionalAuthority[\"AustraliaCentral\"] = \"australiacentral\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'australiacentral2' region. */\n    RegionalAuthority[\"AustraliaCentral2\"] = \"australiacentral2\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'centralindia' region. */\n    RegionalAuthority[\"IndiaCentral\"] = \"centralindia\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'southindia' region. */\n    RegionalAuthority[\"IndiaSouth\"] = \"southindia\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'westindia' region. */\n    RegionalAuthority[\"IndiaWest\"] = \"westindia\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'koreasouth' region. */\n    RegionalAuthority[\"KoreaSouth\"] = \"koreasouth\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'koreacentral' region. */\n    RegionalAuthority[\"KoreaCentral\"] = \"koreacentral\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'uaecentral' region. */\n    RegionalAuthority[\"UAECentral\"] = \"uaecentral\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'uaenorth' region. */\n    RegionalAuthority[\"UAENorth\"] = \"uaenorth\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'southafricanorth' region. */\n    RegionalAuthority[\"SouthAfricaNorth\"] = \"southafricanorth\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'southafricawest' region. */\n    RegionalAuthority[\"SouthAfricaWest\"] = \"southafricawest\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'chinanorth' region. */\n    RegionalAuthority[\"ChinaNorth\"] = \"chinanorth\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'chinaeast' region. */\n    RegionalAuthority[\"ChinaEast\"] = \"chinaeast\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'chinanorth2' region. */\n    RegionalAuthority[\"ChinaNorth2\"] = \"chinanorth2\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'chinaeast2' region. */\n    RegionalAuthority[\"ChinaEast2\"] = \"chinaeast2\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'germanycentral' region. */\n    RegionalAuthority[\"GermanyCentral\"] = \"germanycentral\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'germanynortheast' region. */\n    RegionalAuthority[\"GermanyNorthEast\"] = \"germanynortheast\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'usgovvirginia' region. */\n    RegionalAuthority[\"GovernmentUSVirginia\"] = \"usgovvirginia\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'usgoviowa' region. */\n    RegionalAuthority[\"GovernmentUSIowa\"] = \"usgoviowa\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'usgovarizona' region. */\n    RegionalAuthority[\"GovernmentUSArizona\"] = \"usgovarizona\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'usgovtexas' region. */\n    RegionalAuthority[\"GovernmentUSTexas\"] = \"usgovtexas\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'usdodeast' region. */\n    RegionalAuthority[\"GovernmentUSDodEast\"] = \"usdodeast\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'usdodcentral' region. */\n    RegionalAuthority[\"GovernmentUSDodCentral\"] = \"usdodcentral\";\n})(RegionalAuthority || (exports.RegionalAuthority = RegionalAuthority = {}));\n/**\n * Calculates the correct regional authority based on the supplied value\n * and the AZURE_REGIONAL_AUTHORITY_NAME environment variable.\n *\n * Values will be returned verbatim, except for {@link RegionalAuthority.AutoDiscoverRegion}\n * which is mapped to a value MSAL can understand.\n *\n * @internal\n */\nfunction calculateRegionalAuthority(regionalAuthority) {\n    // Note: as of today only 3 credentials support regional authority, and the parameter\n    // is not exposed via the public API. Regional Authority is _only_ supported\n    // via the AZURE_REGIONAL_AUTHORITY_NAME env var and _only_ for: ClientSecretCredential, ClientCertificateCredential, and ClientAssertionCredential.\n    // Accepting the regionalAuthority parameter will allow us to support it in the future.\n    let azureRegion = regionalAuthority;\n    if (azureRegion === undefined &&\n        globalThis.process?.env?.AZURE_REGIONAL_AUTHORITY_NAME !== undefined) {\n        azureRegion = process.env.AZURE_REGIONAL_AUTHORITY_NAME;\n    }\n    if (azureRegion === RegionalAuthority.AutoDiscoverRegion) {\n        return \"AUTO_DISCOVER\";\n    }\n    return azureRegion;\n}\n//# sourceMappingURL=regionalAuthority.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist/commonjs/regionalAuthority.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist/commonjs/tokenProvider.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@azure/identity/dist/commonjs/tokenProvider.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getBearerTokenProvider = getBearerTokenProvider;\nconst core_rest_pipeline_1 = __webpack_require__(/*! @azure/core-rest-pipeline */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/commonjs/index.js\");\n/**\n * Returns a callback that provides a bearer token.\n * For example, the bearer token can be used to authenticate a request as follows:\n * ```ts snippet:token_provider_example\n * import { DefaultAzureCredential, getBearerTokenProvider } from \"@azure/identity\";\n * import { createPipelineRequest } from \"@azure/core-rest-pipeline\";\n *\n * const credential = new DefaultAzureCredential();\n * const scope = \"https://cognitiveservices.azure.com/.default\";\n * const getAccessToken = getBearerTokenProvider(credential, scope);\n * const token = await getAccessToken();\n *\n * // usage\n * const request = createPipelineRequest({ url: \"https://example.com\" });\n * request.headers.set(\"Authorization\", `Bearer ${token}`);\n * ```\n *\n * @param credential - The credential used to authenticate the request.\n * @param scopes - The scopes required for the bearer token.\n * @param options - Options to configure the token provider.\n * @returns a callback that provides a bearer token.\n */\nfunction getBearerTokenProvider(credential, scopes, options) {\n    const { abortSignal, tracingOptions } = options || {};\n    const pipeline = (0, core_rest_pipeline_1.createEmptyPipeline)();\n    pipeline.addPolicy((0, core_rest_pipeline_1.bearerTokenAuthenticationPolicy)({ credential, scopes }));\n    async function getRefreshedToken() {\n        // Create a pipeline with just the bearer token policy\n        // and run a dummy request through it to get the token\n        const res = await pipeline.sendRequest({\n            sendRequest: (request) => Promise.resolve({\n                request,\n                status: 200,\n                headers: request.headers,\n            }),\n        }, (0, core_rest_pipeline_1.createPipelineRequest)({\n            url: \"https://example.com\",\n            abortSignal,\n            tracingOptions,\n        }));\n        const accessToken = res.headers.get(\"authorization\")?.split(\" \")[1];\n        if (!accessToken) {\n            throw new Error(\"Failed to get access token\");\n        }\n        return accessToken;\n    }\n    return getRefreshedToken;\n}\n//# sourceMappingURL=tokenProvider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QvY29tbW9uanMvdG9rZW5Qcm92aWRlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsOEJBQThCO0FBQzlCLDZCQUE2QixtQkFBTyxDQUFDLHdHQUEyQjtBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksaURBQWlEO0FBQzdELFlBQVksd0JBQXdCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLDRCQUE0QjtBQUN2RSxrREFBa0QsTUFBTTtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSw4QkFBOEI7QUFDMUM7QUFDQSxtRkFBbUYsb0JBQW9CO0FBQ3ZHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9pZGVudGl0eS9kaXN0L2NvbW1vbmpzL3Rva2VuUHJvdmlkZXIuanM/OTNjNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRCZWFyZXJUb2tlblByb3ZpZGVyID0gZ2V0QmVhcmVyVG9rZW5Qcm92aWRlcjtcbmNvbnN0IGNvcmVfcmVzdF9waXBlbGluZV8xID0gcmVxdWlyZShcIkBhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmVcIik7XG4vKipcbiAqIFJldHVybnMgYSBjYWxsYmFjayB0aGF0IHByb3ZpZGVzIGEgYmVhcmVyIHRva2VuLlxuICogRm9yIGV4YW1wbGUsIHRoZSBiZWFyZXIgdG9rZW4gY2FuIGJlIHVzZWQgdG8gYXV0aGVudGljYXRlIGEgcmVxdWVzdCBhcyBmb2xsb3dzOlxuICogYGBgdHMgc25pcHBldDp0b2tlbl9wcm92aWRlcl9leGFtcGxlXG4gKiBpbXBvcnQgeyBEZWZhdWx0QXp1cmVDcmVkZW50aWFsLCBnZXRCZWFyZXJUb2tlblByb3ZpZGVyIH0gZnJvbSBcIkBhenVyZS9pZGVudGl0eVwiO1xuICogaW1wb3J0IHsgY3JlYXRlUGlwZWxpbmVSZXF1ZXN0IH0gZnJvbSBcIkBhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmVcIjtcbiAqXG4gKiBjb25zdCBjcmVkZW50aWFsID0gbmV3IERlZmF1bHRBenVyZUNyZWRlbnRpYWwoKTtcbiAqIGNvbnN0IHNjb3BlID0gXCJodHRwczovL2NvZ25pdGl2ZXNlcnZpY2VzLmF6dXJlLmNvbS8uZGVmYXVsdFwiO1xuICogY29uc3QgZ2V0QWNjZXNzVG9rZW4gPSBnZXRCZWFyZXJUb2tlblByb3ZpZGVyKGNyZWRlbnRpYWwsIHNjb3BlKTtcbiAqIGNvbnN0IHRva2VuID0gYXdhaXQgZ2V0QWNjZXNzVG9rZW4oKTtcbiAqXG4gKiAvLyB1c2FnZVxuICogY29uc3QgcmVxdWVzdCA9IGNyZWF0ZVBpcGVsaW5lUmVxdWVzdCh7IHVybDogXCJodHRwczovL2V4YW1wbGUuY29tXCIgfSk7XG4gKiByZXF1ZXN0LmhlYWRlcnMuc2V0KFwiQXV0aG9yaXphdGlvblwiLCBgQmVhcmVyICR7dG9rZW59YCk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gY3JlZGVudGlhbCAtIFRoZSBjcmVkZW50aWFsIHVzZWQgdG8gYXV0aGVudGljYXRlIHRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHNjb3BlcyAtIFRoZSBzY29wZXMgcmVxdWlyZWQgZm9yIHRoZSBiZWFyZXIgdG9rZW4uXG4gKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgdG8gY29uZmlndXJlIHRoZSB0b2tlbiBwcm92aWRlci5cbiAqIEByZXR1cm5zIGEgY2FsbGJhY2sgdGhhdCBwcm92aWRlcyBhIGJlYXJlciB0b2tlbi5cbiAqL1xuZnVuY3Rpb24gZ2V0QmVhcmVyVG9rZW5Qcm92aWRlcihjcmVkZW50aWFsLCBzY29wZXMsIG9wdGlvbnMpIHtcbiAgICBjb25zdCB7IGFib3J0U2lnbmFsLCB0cmFjaW5nT3B0aW9ucyB9ID0gb3B0aW9ucyB8fCB7fTtcbiAgICBjb25zdCBwaXBlbGluZSA9ICgwLCBjb3JlX3Jlc3RfcGlwZWxpbmVfMS5jcmVhdGVFbXB0eVBpcGVsaW5lKSgpO1xuICAgIHBpcGVsaW5lLmFkZFBvbGljeSgoMCwgY29yZV9yZXN0X3BpcGVsaW5lXzEuYmVhcmVyVG9rZW5BdXRoZW50aWNhdGlvblBvbGljeSkoeyBjcmVkZW50aWFsLCBzY29wZXMgfSkpO1xuICAgIGFzeW5jIGZ1bmN0aW9uIGdldFJlZnJlc2hlZFRva2VuKCkge1xuICAgICAgICAvLyBDcmVhdGUgYSBwaXBlbGluZSB3aXRoIGp1c3QgdGhlIGJlYXJlciB0b2tlbiBwb2xpY3lcbiAgICAgICAgLy8gYW5kIHJ1biBhIGR1bW15IHJlcXVlc3QgdGhyb3VnaCBpdCB0byBnZXQgdGhlIHRva2VuXG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHBpcGVsaW5lLnNlbmRSZXF1ZXN0KHtcbiAgICAgICAgICAgIHNlbmRSZXF1ZXN0OiAocmVxdWVzdCkgPT4gUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0LFxuICAgICAgICAgICAgICAgIHN0YXR1czogMjAwLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHJlcXVlc3QuaGVhZGVycyxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICB9LCAoMCwgY29yZV9yZXN0X3BpcGVsaW5lXzEuY3JlYXRlUGlwZWxpbmVSZXF1ZXN0KSh7XG4gICAgICAgICAgICB1cmw6IFwiaHR0cHM6Ly9leGFtcGxlLmNvbVwiLFxuICAgICAgICAgICAgYWJvcnRTaWduYWwsXG4gICAgICAgICAgICB0cmFjaW5nT3B0aW9ucyxcbiAgICAgICAgfSkpO1xuICAgICAgICBjb25zdCBhY2Nlc3NUb2tlbiA9IHJlcy5oZWFkZXJzLmdldChcImF1dGhvcml6YXRpb25cIik/LnNwbGl0KFwiIFwiKVsxXTtcbiAgICAgICAgaWYgKCFhY2Nlc3NUb2tlbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGdldCBhY2Nlc3MgdG9rZW5cIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjY2Vzc1Rva2VuO1xuICAgIH1cbiAgICByZXR1cm4gZ2V0UmVmcmVzaGVkVG9rZW47XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10b2tlblByb3ZpZGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist/commonjs/tokenProvider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist/commonjs/util/identityTokenEndpoint.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist/commonjs/util/identityTokenEndpoint.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getIdentityTokenEndpointSuffix = getIdentityTokenEndpointSuffix;\nfunction getIdentityTokenEndpointSuffix(tenantId) {\n    if (tenantId === \"adfs\") {\n        return \"oauth2/token\";\n    }\n    else {\n        return \"oauth2/v2.0/token\";\n    }\n}\n//# sourceMappingURL=identityTokenEndpoint.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QvY29tbW9uanMvdXRpbC9pZGVudGl0eVRva2VuRW5kcG9pbnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9pZGVudGl0eS9kaXN0L2NvbW1vbmpzL3V0aWwvaWRlbnRpdHlUb2tlbkVuZHBvaW50LmpzPzhhM2MiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0SWRlbnRpdHlUb2tlbkVuZHBvaW50U3VmZml4ID0gZ2V0SWRlbnRpdHlUb2tlbkVuZHBvaW50U3VmZml4O1xuZnVuY3Rpb24gZ2V0SWRlbnRpdHlUb2tlbkVuZHBvaW50U3VmZml4KHRlbmFudElkKSB7XG4gICAgaWYgKHRlbmFudElkID09PSBcImFkZnNcIikge1xuICAgICAgICByZXR1cm4gXCJvYXV0aDIvdG9rZW5cIjtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBcIm9hdXRoMi92Mi4wL3Rva2VuXCI7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aWRlbnRpdHlUb2tlbkVuZHBvaW50LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist/commonjs/util/identityTokenEndpoint.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist/commonjs/util/logging.js":
/*!********************************************************************!*\
  !*** ./node_modules/@azure/identity/dist/commonjs/util/logging.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.logger = void 0;\nexports.processEnvVars = processEnvVars;\nexports.logEnvVars = logEnvVars;\nexports.formatSuccess = formatSuccess;\nexports.formatError = formatError;\nexports.credentialLoggerInstance = credentialLoggerInstance;\nexports.credentialLogger = credentialLogger;\nconst logger_1 = __webpack_require__(/*! @azure/logger */ \"(rsc)/./node_modules/@azure/logger/dist/commonjs/index.js\");\n/**\n * The AzureLogger used for all clients within the identity package\n */\nexports.logger = (0, logger_1.createClientLogger)(\"identity\");\n/**\n * Separates a list of environment variable names into a plain object with two arrays: an array of missing environment variables and another array with assigned environment variables.\n * @param supportedEnvVars - List of environment variable names\n */\nfunction processEnvVars(supportedEnvVars) {\n    return supportedEnvVars.reduce((acc, envVariable) => {\n        if (process.env[envVariable]) {\n            acc.assigned.push(envVariable);\n        }\n        else {\n            acc.missing.push(envVariable);\n        }\n        return acc;\n    }, { missing: [], assigned: [] });\n}\n/**\n * Based on a given list of environment variable names,\n * logs the environment variables currently assigned during the usage of a credential that goes by the given name.\n * @param credentialName - Name of the credential in use\n * @param supportedEnvVars - List of environment variables supported by that credential\n */\nfunction logEnvVars(credentialName, supportedEnvVars) {\n    const { assigned } = processEnvVars(supportedEnvVars);\n    exports.logger.info(`${credentialName} => Found the following environment variables: ${assigned.join(\", \")}`);\n}\n/**\n * Formatting the success event on the credentials\n */\nfunction formatSuccess(scope) {\n    return `SUCCESS. Scopes: ${Array.isArray(scope) ? scope.join(\", \") : scope}.`;\n}\n/**\n * Formatting the success event on the credentials\n */\nfunction formatError(scope, error) {\n    let message = \"ERROR.\";\n    if (scope?.length) {\n        message += ` Scopes: ${Array.isArray(scope) ? scope.join(\", \") : scope}.`;\n    }\n    return `${message} Error message: ${typeof error === \"string\" ? error : error.message}.`;\n}\n/**\n * Generates a CredentialLoggerInstance.\n *\n * It logs with the format:\n *\n *   `[title] => [message]`\n *\n */\nfunction credentialLoggerInstance(title, parent, log = exports.logger) {\n    const fullTitle = parent ? `${parent.fullTitle} ${title}` : title;\n    function info(message) {\n        log.info(`${fullTitle} =>`, message);\n    }\n    function warning(message) {\n        log.warning(`${fullTitle} =>`, message);\n    }\n    function verbose(message) {\n        log.verbose(`${fullTitle} =>`, message);\n    }\n    function error(message) {\n        log.error(`${fullTitle} =>`, message);\n    }\n    return {\n        title,\n        fullTitle,\n        info,\n        warning,\n        verbose,\n        error,\n    };\n}\n/**\n * Generates a CredentialLogger, which is a logger declared at the credential's constructor, and used at any point in the credential.\n * It has all the properties of a CredentialLoggerInstance, plus other logger instances, one per method.\n *\n * It logs with the format:\n *\n *   `[title] => [message]`\n *   `[title] => getToken() => [message]`\n *\n */\nfunction credentialLogger(title, log = exports.logger) {\n    const credLogger = credentialLoggerInstance(title, undefined, log);\n    return {\n        ...credLogger,\n        parent: log,\n        getToken: credentialLoggerInstance(\"=> getToken()\", credLogger, log),\n    };\n}\n//# sourceMappingURL=logging.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QvY29tbW9uanMvdXRpbC9sb2dnaW5nLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxjQUFjO0FBQ2Qsc0JBQXNCO0FBQ3RCLGtCQUFrQjtBQUNsQixxQkFBcUI7QUFDckIsbUJBQW1CO0FBQ25CLGdDQUFnQztBQUNoQyx3QkFBd0I7QUFDeEIsaUJBQWlCLG1CQUFPLENBQUMsZ0ZBQWU7QUFDeEM7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSyxJQUFJLDJCQUEyQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxXQUFXO0FBQ3ZCLDJCQUEyQixnQkFBZ0IsZ0RBQWdELG9CQUFvQjtBQUMvRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLGdEQUFnRDtBQUMvRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixnREFBZ0Q7QUFDL0U7QUFDQSxjQUFjLFNBQVMsaUJBQWlCLGtEQUFrRDtBQUMxRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxrQkFBa0IsRUFBRSxNQUFNO0FBQzVEO0FBQ0Esb0JBQW9CLFdBQVc7QUFDL0I7QUFDQTtBQUNBLHVCQUF1QixXQUFXO0FBQ2xDO0FBQ0E7QUFDQSx1QkFBdUIsV0FBVztBQUNsQztBQUNBO0FBQ0EscUJBQXFCLFdBQVc7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QvY29tbW9uanMvdXRpbC9sb2dnaW5nLmpzPzI1NDIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubG9nZ2VyID0gdm9pZCAwO1xuZXhwb3J0cy5wcm9jZXNzRW52VmFycyA9IHByb2Nlc3NFbnZWYXJzO1xuZXhwb3J0cy5sb2dFbnZWYXJzID0gbG9nRW52VmFycztcbmV4cG9ydHMuZm9ybWF0U3VjY2VzcyA9IGZvcm1hdFN1Y2Nlc3M7XG5leHBvcnRzLmZvcm1hdEVycm9yID0gZm9ybWF0RXJyb3I7XG5leHBvcnRzLmNyZWRlbnRpYWxMb2dnZXJJbnN0YW5jZSA9IGNyZWRlbnRpYWxMb2dnZXJJbnN0YW5jZTtcbmV4cG9ydHMuY3JlZGVudGlhbExvZ2dlciA9IGNyZWRlbnRpYWxMb2dnZXI7XG5jb25zdCBsb2dnZXJfMSA9IHJlcXVpcmUoXCJAYXp1cmUvbG9nZ2VyXCIpO1xuLyoqXG4gKiBUaGUgQXp1cmVMb2dnZXIgdXNlZCBmb3IgYWxsIGNsaWVudHMgd2l0aGluIHRoZSBpZGVudGl0eSBwYWNrYWdlXG4gKi9cbmV4cG9ydHMubG9nZ2VyID0gKDAsIGxvZ2dlcl8xLmNyZWF0ZUNsaWVudExvZ2dlcikoXCJpZGVudGl0eVwiKTtcbi8qKlxuICogU2VwYXJhdGVzIGEgbGlzdCBvZiBlbnZpcm9ubWVudCB2YXJpYWJsZSBuYW1lcyBpbnRvIGEgcGxhaW4gb2JqZWN0IHdpdGggdHdvIGFycmF5czogYW4gYXJyYXkgb2YgbWlzc2luZyBlbnZpcm9ubWVudCB2YXJpYWJsZXMgYW5kIGFub3RoZXIgYXJyYXkgd2l0aCBhc3NpZ25lZCBlbnZpcm9ubWVudCB2YXJpYWJsZXMuXG4gKiBAcGFyYW0gc3VwcG9ydGVkRW52VmFycyAtIExpc3Qgb2YgZW52aXJvbm1lbnQgdmFyaWFibGUgbmFtZXNcbiAqL1xuZnVuY3Rpb24gcHJvY2Vzc0VudlZhcnMoc3VwcG9ydGVkRW52VmFycykge1xuICAgIHJldHVybiBzdXBwb3J0ZWRFbnZWYXJzLnJlZHVjZSgoYWNjLCBlbnZWYXJpYWJsZSkgPT4ge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnZbZW52VmFyaWFibGVdKSB7XG4gICAgICAgICAgICBhY2MuYXNzaWduZWQucHVzaChlbnZWYXJpYWJsZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBhY2MubWlzc2luZy5wdXNoKGVudlZhcmlhYmxlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHsgbWlzc2luZzogW10sIGFzc2lnbmVkOiBbXSB9KTtcbn1cbi8qKlxuICogQmFzZWQgb24gYSBnaXZlbiBsaXN0IG9mIGVudmlyb25tZW50IHZhcmlhYmxlIG5hbWVzLFxuICogbG9ncyB0aGUgZW52aXJvbm1lbnQgdmFyaWFibGVzIGN1cnJlbnRseSBhc3NpZ25lZCBkdXJpbmcgdGhlIHVzYWdlIG9mIGEgY3JlZGVudGlhbCB0aGF0IGdvZXMgYnkgdGhlIGdpdmVuIG5hbWUuXG4gKiBAcGFyYW0gY3JlZGVudGlhbE5hbWUgLSBOYW1lIG9mIHRoZSBjcmVkZW50aWFsIGluIHVzZVxuICogQHBhcmFtIHN1cHBvcnRlZEVudlZhcnMgLSBMaXN0IG9mIGVudmlyb25tZW50IHZhcmlhYmxlcyBzdXBwb3J0ZWQgYnkgdGhhdCBjcmVkZW50aWFsXG4gKi9cbmZ1bmN0aW9uIGxvZ0VudlZhcnMoY3JlZGVudGlhbE5hbWUsIHN1cHBvcnRlZEVudlZhcnMpIHtcbiAgICBjb25zdCB7IGFzc2lnbmVkIH0gPSBwcm9jZXNzRW52VmFycyhzdXBwb3J0ZWRFbnZWYXJzKTtcbiAgICBleHBvcnRzLmxvZ2dlci5pbmZvKGAke2NyZWRlbnRpYWxOYW1lfSA9PiBGb3VuZCB0aGUgZm9sbG93aW5nIGVudmlyb25tZW50IHZhcmlhYmxlczogJHthc3NpZ25lZC5qb2luKFwiLCBcIil9YCk7XG59XG4vKipcbiAqIEZvcm1hdHRpbmcgdGhlIHN1Y2Nlc3MgZXZlbnQgb24gdGhlIGNyZWRlbnRpYWxzXG4gKi9cbmZ1bmN0aW9uIGZvcm1hdFN1Y2Nlc3Moc2NvcGUpIHtcbiAgICByZXR1cm4gYFNVQ0NFU1MuIFNjb3BlczogJHtBcnJheS5pc0FycmF5KHNjb3BlKSA/IHNjb3BlLmpvaW4oXCIsIFwiKSA6IHNjb3BlfS5gO1xufVxuLyoqXG4gKiBGb3JtYXR0aW5nIHRoZSBzdWNjZXNzIGV2ZW50IG9uIHRoZSBjcmVkZW50aWFsc1xuICovXG5mdW5jdGlvbiBmb3JtYXRFcnJvcihzY29wZSwgZXJyb3IpIHtcbiAgICBsZXQgbWVzc2FnZSA9IFwiRVJST1IuXCI7XG4gICAgaWYgKHNjb3BlPy5sZW5ndGgpIHtcbiAgICAgICAgbWVzc2FnZSArPSBgIFNjb3BlczogJHtBcnJheS5pc0FycmF5KHNjb3BlKSA/IHNjb3BlLmpvaW4oXCIsIFwiKSA6IHNjb3BlfS5gO1xuICAgIH1cbiAgICByZXR1cm4gYCR7bWVzc2FnZX0gRXJyb3IgbWVzc2FnZTogJHt0eXBlb2YgZXJyb3IgPT09IFwic3RyaW5nXCIgPyBlcnJvciA6IGVycm9yLm1lc3NhZ2V9LmA7XG59XG4vKipcbiAqIEdlbmVyYXRlcyBhIENyZWRlbnRpYWxMb2dnZXJJbnN0YW5jZS5cbiAqXG4gKiBJdCBsb2dzIHdpdGggdGhlIGZvcm1hdDpcbiAqXG4gKiAgIGBbdGl0bGVdID0+IFttZXNzYWdlXWBcbiAqXG4gKi9cbmZ1bmN0aW9uIGNyZWRlbnRpYWxMb2dnZXJJbnN0YW5jZSh0aXRsZSwgcGFyZW50LCBsb2cgPSBleHBvcnRzLmxvZ2dlcikge1xuICAgIGNvbnN0IGZ1bGxUaXRsZSA9IHBhcmVudCA/IGAke3BhcmVudC5mdWxsVGl0bGV9ICR7dGl0bGV9YCA6IHRpdGxlO1xuICAgIGZ1bmN0aW9uIGluZm8obWVzc2FnZSkge1xuICAgICAgICBsb2cuaW5mbyhgJHtmdWxsVGl0bGV9ID0+YCwgbWVzc2FnZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHdhcm5pbmcobWVzc2FnZSkge1xuICAgICAgICBsb2cud2FybmluZyhgJHtmdWxsVGl0bGV9ID0+YCwgbWVzc2FnZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHZlcmJvc2UobWVzc2FnZSkge1xuICAgICAgICBsb2cudmVyYm9zZShgJHtmdWxsVGl0bGV9ID0+YCwgbWVzc2FnZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGVycm9yKG1lc3NhZ2UpIHtcbiAgICAgICAgbG9nLmVycm9yKGAke2Z1bGxUaXRsZX0gPT5gLCBtZXNzYWdlKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdGl0bGUsXG4gICAgICAgIGZ1bGxUaXRsZSxcbiAgICAgICAgaW5mbyxcbiAgICAgICAgd2FybmluZyxcbiAgICAgICAgdmVyYm9zZSxcbiAgICAgICAgZXJyb3IsXG4gICAgfTtcbn1cbi8qKlxuICogR2VuZXJhdGVzIGEgQ3JlZGVudGlhbExvZ2dlciwgd2hpY2ggaXMgYSBsb2dnZXIgZGVjbGFyZWQgYXQgdGhlIGNyZWRlbnRpYWwncyBjb25zdHJ1Y3RvciwgYW5kIHVzZWQgYXQgYW55IHBvaW50IGluIHRoZSBjcmVkZW50aWFsLlxuICogSXQgaGFzIGFsbCB0aGUgcHJvcGVydGllcyBvZiBhIENyZWRlbnRpYWxMb2dnZXJJbnN0YW5jZSwgcGx1cyBvdGhlciBsb2dnZXIgaW5zdGFuY2VzLCBvbmUgcGVyIG1ldGhvZC5cbiAqXG4gKiBJdCBsb2dzIHdpdGggdGhlIGZvcm1hdDpcbiAqXG4gKiAgIGBbdGl0bGVdID0+IFttZXNzYWdlXWBcbiAqICAgYFt0aXRsZV0gPT4gZ2V0VG9rZW4oKSA9PiBbbWVzc2FnZV1gXG4gKlxuICovXG5mdW5jdGlvbiBjcmVkZW50aWFsTG9nZ2VyKHRpdGxlLCBsb2cgPSBleHBvcnRzLmxvZ2dlcikge1xuICAgIGNvbnN0IGNyZWRMb2dnZXIgPSBjcmVkZW50aWFsTG9nZ2VySW5zdGFuY2UodGl0bGUsIHVuZGVmaW5lZCwgbG9nKTtcbiAgICByZXR1cm4ge1xuICAgICAgICAuLi5jcmVkTG9nZ2VyLFxuICAgICAgICBwYXJlbnQ6IGxvZyxcbiAgICAgICAgZ2V0VG9rZW46IGNyZWRlbnRpYWxMb2dnZXJJbnN0YW5jZShcIj0+IGdldFRva2VuKClcIiwgY3JlZExvZ2dlciwgbG9nKSxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9nZ2luZy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist/commonjs/util/logging.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist/commonjs/util/processMultiTenantRequest.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist/commonjs/util/processMultiTenantRequest.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.processMultiTenantRequest = processMultiTenantRequest;\nconst errors_js_1 = __webpack_require__(/*! ../errors.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/errors.js\");\nfunction createConfigurationErrorMessage(tenantId) {\n    return `The current credential is not configured to acquire tokens for tenant ${tenantId}. To enable acquiring tokens for this tenant add it to the AdditionallyAllowedTenants on the credential options, or add \"*\" to AdditionallyAllowedTenants to allow acquiring tokens for any tenant.`;\n}\n/**\n * Of getToken contains a tenantId, this functions allows picking this tenantId as the appropriate for authentication,\n * unless multitenant authentication has been disabled through the AZURE_IDENTITY_DISABLE_MULTITENANTAUTH (on Node.js),\n * or unless the original tenant Id is `adfs`.\n * @internal\n */\nfunction processMultiTenantRequest(tenantId, getTokenOptions, additionallyAllowedTenantIds = [], logger) {\n    let resolvedTenantId;\n    if (process.env.AZURE_IDENTITY_DISABLE_MULTITENANTAUTH) {\n        resolvedTenantId = tenantId;\n    }\n    else if (tenantId === \"adfs\") {\n        resolvedTenantId = tenantId;\n    }\n    else {\n        resolvedTenantId = getTokenOptions?.tenantId ?? tenantId;\n    }\n    if (tenantId &&\n        resolvedTenantId !== tenantId &&\n        !additionallyAllowedTenantIds.includes(\"*\") &&\n        !additionallyAllowedTenantIds.some((t) => t.localeCompare(resolvedTenantId) === 0)) {\n        const message = createConfigurationErrorMessage(resolvedTenantId);\n        logger?.info(message);\n        throw new errors_js_1.CredentialUnavailableError(message);\n    }\n    return resolvedTenantId;\n}\n//# sourceMappingURL=processMultiTenantRequest.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QvY29tbW9uanMvdXRpbC9wcm9jZXNzTXVsdGlUZW5hbnRSZXF1ZXN0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxpQ0FBaUM7QUFDakMsb0JBQW9CLG1CQUFPLENBQUMsa0ZBQWM7QUFDMUM7QUFDQSxvRkFBb0YsU0FBUztBQUM3RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvaWRlbnRpdHkvZGlzdC9jb21tb25qcy91dGlsL3Byb2Nlc3NNdWx0aVRlbmFudFJlcXVlc3QuanM/MGNhZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5wcm9jZXNzTXVsdGlUZW5hbnRSZXF1ZXN0ID0gcHJvY2Vzc011bHRpVGVuYW50UmVxdWVzdDtcbmNvbnN0IGVycm9yc19qc18xID0gcmVxdWlyZShcIi4uL2Vycm9ycy5qc1wiKTtcbmZ1bmN0aW9uIGNyZWF0ZUNvbmZpZ3VyYXRpb25FcnJvck1lc3NhZ2UodGVuYW50SWQpIHtcbiAgICByZXR1cm4gYFRoZSBjdXJyZW50IGNyZWRlbnRpYWwgaXMgbm90IGNvbmZpZ3VyZWQgdG8gYWNxdWlyZSB0b2tlbnMgZm9yIHRlbmFudCAke3RlbmFudElkfS4gVG8gZW5hYmxlIGFjcXVpcmluZyB0b2tlbnMgZm9yIHRoaXMgdGVuYW50IGFkZCBpdCB0byB0aGUgQWRkaXRpb25hbGx5QWxsb3dlZFRlbmFudHMgb24gdGhlIGNyZWRlbnRpYWwgb3B0aW9ucywgb3IgYWRkIFwiKlwiIHRvIEFkZGl0aW9uYWxseUFsbG93ZWRUZW5hbnRzIHRvIGFsbG93IGFjcXVpcmluZyB0b2tlbnMgZm9yIGFueSB0ZW5hbnQuYDtcbn1cbi8qKlxuICogT2YgZ2V0VG9rZW4gY29udGFpbnMgYSB0ZW5hbnRJZCwgdGhpcyBmdW5jdGlvbnMgYWxsb3dzIHBpY2tpbmcgdGhpcyB0ZW5hbnRJZCBhcyB0aGUgYXBwcm9wcmlhdGUgZm9yIGF1dGhlbnRpY2F0aW9uLFxuICogdW5sZXNzIG11bHRpdGVuYW50IGF1dGhlbnRpY2F0aW9uIGhhcyBiZWVuIGRpc2FibGVkIHRocm91Z2ggdGhlIEFaVVJFX0lERU5USVRZX0RJU0FCTEVfTVVMVElURU5BTlRBVVRIIChvbiBOb2RlLmpzKSxcbiAqIG9yIHVubGVzcyB0aGUgb3JpZ2luYWwgdGVuYW50IElkIGlzIGBhZGZzYC5cbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBwcm9jZXNzTXVsdGlUZW5hbnRSZXF1ZXN0KHRlbmFudElkLCBnZXRUb2tlbk9wdGlvbnMsIGFkZGl0aW9uYWxseUFsbG93ZWRUZW5hbnRJZHMgPSBbXSwgbG9nZ2VyKSB7XG4gICAgbGV0IHJlc29sdmVkVGVuYW50SWQ7XG4gICAgaWYgKHByb2Nlc3MuZW52LkFaVVJFX0lERU5USVRZX0RJU0FCTEVfTVVMVElURU5BTlRBVVRIKSB7XG4gICAgICAgIHJlc29sdmVkVGVuYW50SWQgPSB0ZW5hbnRJZDtcbiAgICB9XG4gICAgZWxzZSBpZiAodGVuYW50SWQgPT09IFwiYWRmc1wiKSB7XG4gICAgICAgIHJlc29sdmVkVGVuYW50SWQgPSB0ZW5hbnRJZDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJlc29sdmVkVGVuYW50SWQgPSBnZXRUb2tlbk9wdGlvbnM/LnRlbmFudElkID8/IHRlbmFudElkO1xuICAgIH1cbiAgICBpZiAodGVuYW50SWQgJiZcbiAgICAgICAgcmVzb2x2ZWRUZW5hbnRJZCAhPT0gdGVuYW50SWQgJiZcbiAgICAgICAgIWFkZGl0aW9uYWxseUFsbG93ZWRUZW5hbnRJZHMuaW5jbHVkZXMoXCIqXCIpICYmXG4gICAgICAgICFhZGRpdGlvbmFsbHlBbGxvd2VkVGVuYW50SWRzLnNvbWUoKHQpID0+IHQubG9jYWxlQ29tcGFyZShyZXNvbHZlZFRlbmFudElkKSA9PT0gMCkpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUNvbmZpZ3VyYXRpb25FcnJvck1lc3NhZ2UocmVzb2x2ZWRUZW5hbnRJZCk7XG4gICAgICAgIGxvZ2dlcj8uaW5mbyhtZXNzYWdlKTtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkNyZWRlbnRpYWxVbmF2YWlsYWJsZUVycm9yKG1lc3NhZ2UpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzb2x2ZWRUZW5hbnRJZDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb2Nlc3NNdWx0aVRlbmFudFJlcXVlc3QuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist/commonjs/util/processMultiTenantRequest.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist/commonjs/util/processUtils.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist/commonjs/util/processUtils.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.processUtils = void 0;\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\nconst node_child_process_1 = tslib_1.__importDefault(__webpack_require__(/*! node:child_process */ \"node:child_process\"));\n/**\n * Easy to mock childProcess utils.\n * @internal\n */\nexports.processUtils = {\n    /**\n     * Promisifying childProcess.execFile\n     * @internal\n     */\n    execFile(file, params, options) {\n        return new Promise((resolve, reject) => {\n            node_child_process_1.default.execFile(file, params, options, (error, stdout, stderr) => {\n                if (Buffer.isBuffer(stdout)) {\n                    stdout = stdout.toString(\"utf8\");\n                }\n                if (Buffer.isBuffer(stderr)) {\n                    stderr = stderr.toString(\"utf8\");\n                }\n                if (stderr || error) {\n                    reject(stderr ? new Error(stderr) : error);\n                }\n                else {\n                    resolve(stdout);\n                }\n            });\n        });\n    },\n};\n//# sourceMappingURL=processUtils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QvY29tbW9uanMvdXRpbC9wcm9jZXNzVXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9CQUFvQjtBQUNwQixnQkFBZ0IsbUJBQU8sQ0FBQyx1REFBTztBQUMvQixxREFBcUQsbUJBQU8sQ0FBQyw4Q0FBb0I7QUFDakY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvaWRlbnRpdHkvZGlzdC9jb21tb25qcy91dGlsL3Byb2Nlc3NVdGlscy5qcz9mOTE3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnByb2Nlc3NVdGlscyA9IHZvaWQgMDtcbmNvbnN0IHRzbGliXzEgPSByZXF1aXJlKFwidHNsaWJcIik7XG5jb25zdCBub2RlX2NoaWxkX3Byb2Nlc3NfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJub2RlOmNoaWxkX3Byb2Nlc3NcIikpO1xuLyoqXG4gKiBFYXN5IHRvIG1vY2sgY2hpbGRQcm9jZXNzIHV0aWxzLlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydHMucHJvY2Vzc1V0aWxzID0ge1xuICAgIC8qKlxuICAgICAqIFByb21pc2lmeWluZyBjaGlsZFByb2Nlc3MuZXhlY0ZpbGVcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBleGVjRmlsZShmaWxlLCBwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIG5vZGVfY2hpbGRfcHJvY2Vzc18xLmRlZmF1bHQuZXhlY0ZpbGUoZmlsZSwgcGFyYW1zLCBvcHRpb25zLCAoZXJyb3IsIHN0ZG91dCwgc3RkZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihzdGRvdXQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0ZG91dCA9IHN0ZG91dC50b1N0cmluZyhcInV0ZjhcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChCdWZmZXIuaXNCdWZmZXIoc3RkZXJyKSkge1xuICAgICAgICAgICAgICAgICAgICBzdGRlcnIgPSBzdGRlcnIudG9TdHJpbmcoXCJ1dGY4XCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoc3RkZXJyIHx8IGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChzdGRlcnIgPyBuZXcgRXJyb3Ioc3RkZXJyKSA6IGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoc3Rkb3V0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm9jZXNzVXRpbHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist/commonjs/util/processUtils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist/commonjs/util/scopeUtils.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@azure/identity/dist/commonjs/util/scopeUtils.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ensureScopes = ensureScopes;\nexports.ensureValidScopeForDevTimeCreds = ensureValidScopeForDevTimeCreds;\nexports.getScopeResource = getScopeResource;\nconst logging_js_1 = __webpack_require__(/*! ./logging.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/logging.js\");\n/**\n * Ensures the scopes value is an array.\n * @internal\n */\nfunction ensureScopes(scopes) {\n    return Array.isArray(scopes) ? scopes : [scopes];\n}\n/**\n * Throws if the received scope is not valid.\n * @internal\n */\nfunction ensureValidScopeForDevTimeCreds(scope, logger) {\n    if (!scope.match(/^[0-9a-zA-Z-_.:/]+$/)) {\n        const error = new Error(\"Invalid scope was specified by the user or calling client\");\n        logger.getToken.info((0, logging_js_1.formatError)(scope, error));\n        throw error;\n    }\n}\n/**\n * Returns the resource out of a scope.\n * @internal\n */\nfunction getScopeResource(scope) {\n    return scope.replace(/\\/.default$/, \"\");\n}\n//# sourceMappingURL=scopeUtils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QvY29tbW9uanMvdXRpbC9zY29wZVV0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0I7QUFDcEIsdUNBQXVDO0FBQ3ZDLHdCQUF3QjtBQUN4QixxQkFBcUIsbUJBQU8sQ0FBQyx3RkFBYztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvaWRlbnRpdHkvZGlzdC9jb21tb25qcy91dGlsL3Njb3BlVXRpbHMuanM/MjIxNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5lbnN1cmVTY29wZXMgPSBlbnN1cmVTY29wZXM7XG5leHBvcnRzLmVuc3VyZVZhbGlkU2NvcGVGb3JEZXZUaW1lQ3JlZHMgPSBlbnN1cmVWYWxpZFNjb3BlRm9yRGV2VGltZUNyZWRzO1xuZXhwb3J0cy5nZXRTY29wZVJlc291cmNlID0gZ2V0U2NvcGVSZXNvdXJjZTtcbmNvbnN0IGxvZ2dpbmdfanNfMSA9IHJlcXVpcmUoXCIuL2xvZ2dpbmcuanNcIik7XG4vKipcbiAqIEVuc3VyZXMgdGhlIHNjb3BlcyB2YWx1ZSBpcyBhbiBhcnJheS5cbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBlbnN1cmVTY29wZXMoc2NvcGVzKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoc2NvcGVzKSA/IHNjb3BlcyA6IFtzY29wZXNdO1xufVxuLyoqXG4gKiBUaHJvd3MgaWYgdGhlIHJlY2VpdmVkIHNjb3BlIGlzIG5vdCB2YWxpZC5cbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBlbnN1cmVWYWxpZFNjb3BlRm9yRGV2VGltZUNyZWRzKHNjb3BlLCBsb2dnZXIpIHtcbiAgICBpZiAoIXNjb3BlLm1hdGNoKC9eWzAtOWEtekEtWi1fLjovXSskLykpIHtcbiAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoXCJJbnZhbGlkIHNjb3BlIHdhcyBzcGVjaWZpZWQgYnkgdGhlIHVzZXIgb3IgY2FsbGluZyBjbGllbnRcIik7XG4gICAgICAgIGxvZ2dlci5nZXRUb2tlbi5pbmZvKCgwLCBsb2dnaW5nX2pzXzEuZm9ybWF0RXJyb3IpKHNjb3BlLCBlcnJvcikpO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG59XG4vKipcbiAqIFJldHVybnMgdGhlIHJlc291cmNlIG91dCBvZiBhIHNjb3BlLlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGdldFNjb3BlUmVzb3VyY2Uoc2NvcGUpIHtcbiAgICByZXR1cm4gc2NvcGUucmVwbGFjZSgvXFwvLmRlZmF1bHQkLywgXCJcIik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY29wZVV0aWxzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist/commonjs/util/scopeUtils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist/commonjs/util/subscriptionUtils.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist/commonjs/util/subscriptionUtils.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.checkSubscription = checkSubscription;\nconst logging_js_1 = __webpack_require__(/*! ./logging.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/logging.js\");\n/**\n * @internal\n */\nfunction checkSubscription(logger, subscription) {\n    if (!subscription.match(/^[0-9a-zA-Z-._ ]+$/)) {\n        const error = new Error(`Subscription '${subscription}' contains invalid characters. If this is the name of a subscription, use ` +\n            `its ID instead. You can locate your subscription by following the instructions listed here: ` +\n            `https://learn.microsoft.com/azure/azure-portal/get-subscription-tenant-id`);\n        logger.info((0, logging_js_1.formatError)(\"\", error));\n        throw error;\n    }\n}\n//# sourceMappingURL=subscriptionUtils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QvY29tbW9uanMvdXRpbC9zdWJzY3JpcHRpb25VdGlscy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QseUJBQXlCO0FBQ3pCLHFCQUFxQixtQkFBTyxDQUFDLHdGQUFjO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsYUFBYTtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QvY29tbW9uanMvdXRpbC9zdWJzY3JpcHRpb25VdGlscy5qcz9kZmM1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNoZWNrU3Vic2NyaXB0aW9uID0gY2hlY2tTdWJzY3JpcHRpb247XG5jb25zdCBsb2dnaW5nX2pzXzEgPSByZXF1aXJlKFwiLi9sb2dnaW5nLmpzXCIpO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gY2hlY2tTdWJzY3JpcHRpb24obG9nZ2VyLCBzdWJzY3JpcHRpb24pIHtcbiAgICBpZiAoIXN1YnNjcmlwdGlvbi5tYXRjaCgvXlswLTlhLXpBLVotLl8gXSskLykpIHtcbiAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoYFN1YnNjcmlwdGlvbiAnJHtzdWJzY3JpcHRpb259JyBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMuIElmIHRoaXMgaXMgdGhlIG5hbWUgb2YgYSBzdWJzY3JpcHRpb24sIHVzZSBgICtcbiAgICAgICAgICAgIGBpdHMgSUQgaW5zdGVhZC4gWW91IGNhbiBsb2NhdGUgeW91ciBzdWJzY3JpcHRpb24gYnkgZm9sbG93aW5nIHRoZSBpbnN0cnVjdGlvbnMgbGlzdGVkIGhlcmU6IGAgK1xuICAgICAgICAgICAgYGh0dHBzOi8vbGVhcm4ubWljcm9zb2Z0LmNvbS9henVyZS9henVyZS1wb3J0YWwvZ2V0LXN1YnNjcmlwdGlvbi10ZW5hbnQtaWRgKTtcbiAgICAgICAgbG9nZ2VyLmluZm8oKDAsIGxvZ2dpbmdfanNfMS5mb3JtYXRFcnJvcikoXCJcIiwgZXJyb3IpKTtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3Vic2NyaXB0aW9uVXRpbHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist/commonjs/util/subscriptionUtils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist/commonjs/util/tenantIdUtils.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist/commonjs/util/tenantIdUtils.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.processMultiTenantRequest = void 0;\nexports.checkTenantId = checkTenantId;\nexports.resolveTenantId = resolveTenantId;\nexports.resolveAdditionallyAllowedTenantIds = resolveAdditionallyAllowedTenantIds;\nconst constants_js_1 = __webpack_require__(/*! ../constants.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/constants.js\");\nconst logging_js_1 = __webpack_require__(/*! ./logging.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/logging.js\");\nvar processMultiTenantRequest_js_1 = __webpack_require__(/*! ./processMultiTenantRequest.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/util/processMultiTenantRequest.js\");\nObject.defineProperty(exports, \"processMultiTenantRequest\", ({ enumerable: true, get: function () { return processMultiTenantRequest_js_1.processMultiTenantRequest; } }));\n/**\n * @internal\n */\nfunction checkTenantId(logger, tenantId) {\n    if (!tenantId.match(/^[0-9a-zA-Z-.]+$/)) {\n        const error = new Error(\"Invalid tenant id provided. You can locate your tenant id by following the instructions listed here: https://learn.microsoft.com/partner-center/find-ids-and-domain-names.\");\n        logger.info((0, logging_js_1.formatError)(\"\", error));\n        throw error;\n    }\n}\n/**\n * @internal\n */\nfunction resolveTenantId(logger, tenantId, clientId) {\n    if (tenantId) {\n        checkTenantId(logger, tenantId);\n        return tenantId;\n    }\n    if (!clientId) {\n        clientId = constants_js_1.DeveloperSignOnClientId;\n    }\n    if (clientId !== constants_js_1.DeveloperSignOnClientId) {\n        return \"common\";\n    }\n    return \"organizations\";\n}\n/**\n * @internal\n */\nfunction resolveAdditionallyAllowedTenantIds(additionallyAllowedTenants) {\n    if (!additionallyAllowedTenants || additionallyAllowedTenants.length === 0) {\n        return [];\n    }\n    if (additionallyAllowedTenants.includes(\"*\")) {\n        return constants_js_1.ALL_TENANTS;\n    }\n    return additionallyAllowedTenants;\n}\n//# sourceMappingURL=tenantIdUtils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QvY29tbW9uanMvdXRpbC90ZW5hbnRJZFV0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxpQ0FBaUM7QUFDakMscUJBQXFCO0FBQ3JCLHVCQUF1QjtBQUN2QiwyQ0FBMkM7QUFDM0MsdUJBQXVCLG1CQUFPLENBQUMsd0ZBQWlCO0FBQ2hELHFCQUFxQixtQkFBTyxDQUFDLHdGQUFjO0FBQzNDLHFDQUFxQyxtQkFBTyxDQUFDLDRIQUFnQztBQUM3RSw2REFBNEQsRUFBRSxxQ0FBcUMsb0VBQW9FLEVBQUM7QUFDeEs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvaWRlbnRpdHkvZGlzdC9jb21tb25qcy91dGlsL3RlbmFudElkVXRpbHMuanM/OTBmMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5wcm9jZXNzTXVsdGlUZW5hbnRSZXF1ZXN0ID0gdm9pZCAwO1xuZXhwb3J0cy5jaGVja1RlbmFudElkID0gY2hlY2tUZW5hbnRJZDtcbmV4cG9ydHMucmVzb2x2ZVRlbmFudElkID0gcmVzb2x2ZVRlbmFudElkO1xuZXhwb3J0cy5yZXNvbHZlQWRkaXRpb25hbGx5QWxsb3dlZFRlbmFudElkcyA9IHJlc29sdmVBZGRpdGlvbmFsbHlBbGxvd2VkVGVuYW50SWRzO1xuY29uc3QgY29uc3RhbnRzX2pzXzEgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzLmpzXCIpO1xuY29uc3QgbG9nZ2luZ19qc18xID0gcmVxdWlyZShcIi4vbG9nZ2luZy5qc1wiKTtcbnZhciBwcm9jZXNzTXVsdGlUZW5hbnRSZXF1ZXN0X2pzXzEgPSByZXF1aXJlKFwiLi9wcm9jZXNzTXVsdGlUZW5hbnRSZXF1ZXN0LmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicHJvY2Vzc011bHRpVGVuYW50UmVxdWVzdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvY2Vzc011bHRpVGVuYW50UmVxdWVzdF9qc18xLnByb2Nlc3NNdWx0aVRlbmFudFJlcXVlc3Q7IH0gfSk7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBjaGVja1RlbmFudElkKGxvZ2dlciwgdGVuYW50SWQpIHtcbiAgICBpZiAoIXRlbmFudElkLm1hdGNoKC9eWzAtOWEtekEtWi0uXSskLykpIHtcbiAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoXCJJbnZhbGlkIHRlbmFudCBpZCBwcm92aWRlZC4gWW91IGNhbiBsb2NhdGUgeW91ciB0ZW5hbnQgaWQgYnkgZm9sbG93aW5nIHRoZSBpbnN0cnVjdGlvbnMgbGlzdGVkIGhlcmU6IGh0dHBzOi8vbGVhcm4ubWljcm9zb2Z0LmNvbS9wYXJ0bmVyLWNlbnRlci9maW5kLWlkcy1hbmQtZG9tYWluLW5hbWVzLlwiKTtcbiAgICAgICAgbG9nZ2VyLmluZm8oKDAsIGxvZ2dpbmdfanNfMS5mb3JtYXRFcnJvcikoXCJcIiwgZXJyb3IpKTtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZVRlbmFudElkKGxvZ2dlciwgdGVuYW50SWQsIGNsaWVudElkKSB7XG4gICAgaWYgKHRlbmFudElkKSB7XG4gICAgICAgIGNoZWNrVGVuYW50SWQobG9nZ2VyLCB0ZW5hbnRJZCk7XG4gICAgICAgIHJldHVybiB0ZW5hbnRJZDtcbiAgICB9XG4gICAgaWYgKCFjbGllbnRJZCkge1xuICAgICAgICBjbGllbnRJZCA9IGNvbnN0YW50c19qc18xLkRldmVsb3BlclNpZ25PbkNsaWVudElkO1xuICAgIH1cbiAgICBpZiAoY2xpZW50SWQgIT09IGNvbnN0YW50c19qc18xLkRldmVsb3BlclNpZ25PbkNsaWVudElkKSB7XG4gICAgICAgIHJldHVybiBcImNvbW1vblwiO1xuICAgIH1cbiAgICByZXR1cm4gXCJvcmdhbml6YXRpb25zXCI7XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiByZXNvbHZlQWRkaXRpb25hbGx5QWxsb3dlZFRlbmFudElkcyhhZGRpdGlvbmFsbHlBbGxvd2VkVGVuYW50cykge1xuICAgIGlmICghYWRkaXRpb25hbGx5QWxsb3dlZFRlbmFudHMgfHwgYWRkaXRpb25hbGx5QWxsb3dlZFRlbmFudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgaWYgKGFkZGl0aW9uYWxseUFsbG93ZWRUZW5hbnRzLmluY2x1ZGVzKFwiKlwiKSkge1xuICAgICAgICByZXR1cm4gY29uc3RhbnRzX2pzXzEuQUxMX1RFTkFOVFM7XG4gICAgfVxuICAgIHJldHVybiBhZGRpdGlvbmFsbHlBbGxvd2VkVGVuYW50cztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRlbmFudElkVXRpbHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist/commonjs/util/tenantIdUtils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist/commonjs/util/tracing.js":
/*!********************************************************************!*\
  !*** ./node_modules/@azure/identity/dist/commonjs/util/tracing.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.tracingClient = void 0;\nconst constants_js_1 = __webpack_require__(/*! ../constants.js */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/constants.js\");\nconst core_tracing_1 = __webpack_require__(/*! @azure/core-tracing */ \"(rsc)/./node_modules/@azure/core-tracing/dist/commonjs/index.js\");\n/**\n * Creates a span using the global tracer.\n * @internal\n */\nexports.tracingClient = (0, core_tracing_1.createTracingClient)({\n    namespace: \"Microsoft.AAD\",\n    packageName: \"@azure/identity\",\n    packageVersion: constants_js_1.SDK_VERSION,\n});\n//# sourceMappingURL=tracing.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QvY29tbW9uanMvdXRpbC90cmFjaW5nLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUI7QUFDckIsdUJBQXVCLG1CQUFPLENBQUMsd0ZBQWlCO0FBQ2hELHVCQUF1QixtQkFBTyxDQUFDLDRGQUFxQjtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9pZGVudGl0eS9kaXN0L2NvbW1vbmpzL3V0aWwvdHJhY2luZy5qcz8wNjA5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnRyYWNpbmdDbGllbnQgPSB2b2lkIDA7XG5jb25zdCBjb25zdGFudHNfanNfMSA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHMuanNcIik7XG5jb25zdCBjb3JlX3RyYWNpbmdfMSA9IHJlcXVpcmUoXCJAYXp1cmUvY29yZS10cmFjaW5nXCIpO1xuLyoqXG4gKiBDcmVhdGVzIGEgc3BhbiB1c2luZyB0aGUgZ2xvYmFsIHRyYWNlci5cbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnRzLnRyYWNpbmdDbGllbnQgPSAoMCwgY29yZV90cmFjaW5nXzEuY3JlYXRlVHJhY2luZ0NsaWVudCkoe1xuICAgIG5hbWVzcGFjZTogXCJNaWNyb3NvZnQuQUFEXCIsXG4gICAgcGFja2FnZU5hbWU6IFwiQGF6dXJlL2lkZW50aXR5XCIsXG4gICAgcGFja2FnZVZlcnNpb246IGNvbnN0YW50c19qc18xLlNES19WRVJTSU9OLFxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10cmFjaW5nLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist/commonjs/util/tracing.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/logger/dist/commonjs/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@azure/logger/dist/commonjs/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AzureLogger = void 0;\nexports.setLogLevel = setLogLevel;\nexports.getLogLevel = getLogLevel;\nexports.createClientLogger = createClientLogger;\nconst logger_1 = __webpack_require__(/*! @typespec/ts-http-runtime/internal/logger */ \"(rsc)/./node_modules/@typespec/ts-http-runtime/dist/commonjs/logger/internal.js\");\nconst context = (0, logger_1.createLoggerContext)({\n    logLevelEnvVarName: \"AZURE_LOG_LEVEL\",\n    namespace: \"azure\",\n});\n/**\n * The AzureLogger provides a mechanism for overriding where logs are output to.\n * By default, logs are sent to stderr.\n * Override the `log` method to redirect logs to another location.\n */\nexports.AzureLogger = context.logger;\n/**\n * Immediately enables logging at the specified log level. If no level is specified, logging is disabled.\n * @param level - The log level to enable for logging.\n * Options from most verbose to least verbose are:\n * - verbose\n * - info\n * - warning\n * - error\n */\nfunction setLogLevel(level) {\n    context.setLogLevel(level);\n}\n/**\n * Retrieves the currently specified log level.\n */\nfunction getLogLevel() {\n    return context.getLogLevel();\n}\n/**\n * Creates a logger for use by the Azure SDKs that inherits from `AzureLogger`.\n * @param namespace - The name of the SDK package.\n * @hidden\n */\nfunction createClientLogger(namespace) {\n    return context.createClientLogger(namespace);\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2xvZ2dlci9kaXN0L2NvbW1vbmpzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxtQkFBbUI7QUFDbkIsbUJBQW1CO0FBQ25CLG1CQUFtQjtBQUNuQiwwQkFBMEI7QUFDMUIsaUJBQWlCLG1CQUFPLENBQUMsa0lBQTJDO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2xvZ2dlci9kaXN0L2NvbW1vbmpzL2luZGV4LmpzPzhlOTciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQXp1cmVMb2dnZXIgPSB2b2lkIDA7XG5leHBvcnRzLnNldExvZ0xldmVsID0gc2V0TG9nTGV2ZWw7XG5leHBvcnRzLmdldExvZ0xldmVsID0gZ2V0TG9nTGV2ZWw7XG5leHBvcnRzLmNyZWF0ZUNsaWVudExvZ2dlciA9IGNyZWF0ZUNsaWVudExvZ2dlcjtcbmNvbnN0IGxvZ2dlcl8xID0gcmVxdWlyZShcIkB0eXBlc3BlYy90cy1odHRwLXJ1bnRpbWUvaW50ZXJuYWwvbG9nZ2VyXCIpO1xuY29uc3QgY29udGV4dCA9ICgwLCBsb2dnZXJfMS5jcmVhdGVMb2dnZXJDb250ZXh0KSh7XG4gICAgbG9nTGV2ZWxFbnZWYXJOYW1lOiBcIkFaVVJFX0xPR19MRVZFTFwiLFxuICAgIG5hbWVzcGFjZTogXCJhenVyZVwiLFxufSk7XG4vKipcbiAqIFRoZSBBenVyZUxvZ2dlciBwcm92aWRlcyBhIG1lY2hhbmlzbSBmb3Igb3ZlcnJpZGluZyB3aGVyZSBsb2dzIGFyZSBvdXRwdXQgdG8uXG4gKiBCeSBkZWZhdWx0LCBsb2dzIGFyZSBzZW50IHRvIHN0ZGVyci5cbiAqIE92ZXJyaWRlIHRoZSBgbG9nYCBtZXRob2QgdG8gcmVkaXJlY3QgbG9ncyB0byBhbm90aGVyIGxvY2F0aW9uLlxuICovXG5leHBvcnRzLkF6dXJlTG9nZ2VyID0gY29udGV4dC5sb2dnZXI7XG4vKipcbiAqIEltbWVkaWF0ZWx5IGVuYWJsZXMgbG9nZ2luZyBhdCB0aGUgc3BlY2lmaWVkIGxvZyBsZXZlbC4gSWYgbm8gbGV2ZWwgaXMgc3BlY2lmaWVkLCBsb2dnaW5nIGlzIGRpc2FibGVkLlxuICogQHBhcmFtIGxldmVsIC0gVGhlIGxvZyBsZXZlbCB0byBlbmFibGUgZm9yIGxvZ2dpbmcuXG4gKiBPcHRpb25zIGZyb20gbW9zdCB2ZXJib3NlIHRvIGxlYXN0IHZlcmJvc2UgYXJlOlxuICogLSB2ZXJib3NlXG4gKiAtIGluZm9cbiAqIC0gd2FybmluZ1xuICogLSBlcnJvclxuICovXG5mdW5jdGlvbiBzZXRMb2dMZXZlbChsZXZlbCkge1xuICAgIGNvbnRleHQuc2V0TG9nTGV2ZWwobGV2ZWwpO1xufVxuLyoqXG4gKiBSZXRyaWV2ZXMgdGhlIGN1cnJlbnRseSBzcGVjaWZpZWQgbG9nIGxldmVsLlxuICovXG5mdW5jdGlvbiBnZXRMb2dMZXZlbCgpIHtcbiAgICByZXR1cm4gY29udGV4dC5nZXRMb2dMZXZlbCgpO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgbG9nZ2VyIGZvciB1c2UgYnkgdGhlIEF6dXJlIFNES3MgdGhhdCBpbmhlcml0cyBmcm9tIGBBenVyZUxvZ2dlcmAuXG4gKiBAcGFyYW0gbmFtZXNwYWNlIC0gVGhlIG5hbWUgb2YgdGhlIFNESyBwYWNrYWdlLlxuICogQGhpZGRlblxuICovXG5mdW5jdGlvbiBjcmVhdGVDbGllbnRMb2dnZXIobmFtZXNwYWNlKSB7XG4gICAgcmV0dXJuIGNvbnRleHQuY3JlYXRlQ2xpZW50TG9nZ2VyKG5hbWVzcGFjZSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/logger/dist/commonjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/lib/index-browser.cjs":
/*!***************************************************************!*\
  !*** ./node_modules/@azure/msal-common/lib/index-browser.cjs ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/*! @azure/msal-common v15.12.0 2025-08-19 */\n\n'use strict';\n\nvar indexNode = __webpack_require__(/*! ./index-node-C8h2xZEM.js */ \"(rsc)/./node_modules/@azure/msal-common/lib/index-node-C8h2xZEM.js\");\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst missingKidError = \"missing_kid_error\";\r\nconst missingAlgError = \"missing_alg_error\";\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst JoseHeaderErrorMessages = {\r\n    [missingKidError]: \"The JOSE Header for the requested JWT, JWS or JWK object requires a keyId to be configured as the 'kid' header claim. No 'kid' value was provided.\",\r\n    [missingAlgError]: \"The JOSE Header for the requested JWT, JWS or JWK object requires an algorithm to be specified as the 'alg' header claim. No 'alg' value was provided.\",\r\n};\r\n/**\r\n * Error thrown when there is an error in the client code running on the browser.\r\n */\r\nclass JoseHeaderError extends indexNode.AuthError {\r\n    constructor(errorCode, errorMessage) {\r\n        super(errorCode, errorMessage);\r\n        this.name = \"JoseHeaderError\";\r\n        Object.setPrototypeOf(this, JoseHeaderError.prototype);\r\n    }\r\n}\r\n/** Returns JoseHeaderError object */\r\nfunction createJoseHeaderError(code) {\r\n    return new JoseHeaderError(code, JoseHeaderErrorMessages[code]);\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/** @internal */\r\nclass JoseHeader {\r\n    constructor(options) {\r\n        this.typ = options.typ;\r\n        this.alg = options.alg;\r\n        this.kid = options.kid;\r\n    }\r\n    /**\r\n     * Builds SignedHttpRequest formatted JOSE Header from the\r\n     * JOSE Header options provided or previously set on the object and returns\r\n     * the stringified header object.\r\n     * Throws if keyId or algorithm aren't provided since they are required for Access Token Binding.\r\n     * @param shrHeaderOptions\r\n     * @returns\r\n     */\r\n    static getShrHeaderString(shrHeaderOptions) {\r\n        // KeyID is required on the SHR header\r\n        if (!shrHeaderOptions.kid) {\r\n            throw createJoseHeaderError(missingKidError);\r\n        }\r\n        // Alg is required on the SHR header\r\n        if (!shrHeaderOptions.alg) {\r\n            throw createJoseHeaderError(missingAlgError);\r\n        }\r\n        const shrHeader = new JoseHeader({\r\n            // Access Token PoP headers must have type pop, but the type header can be overriden for special cases\r\n            typ: shrHeaderOptions.typ || indexNode.JsonWebTokenTypes.Pop,\r\n            kid: shrHeaderOptions.kid,\r\n            alg: shrHeaderOptions.alg,\r\n        });\r\n        return JSON.stringify(shrHeader);\r\n    }\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Starts context by adding payload to the stack\r\n * @param event {PerformanceEvent}\r\n * @param abbreviations {Map<string, string>} event name abbreviations\r\n * @param stack {?PerformanceEventStackedContext[]} stack\r\n */\r\nfunction startContext(event, abbreviations, stack) {\r\n    if (!stack) {\r\n        return;\r\n    }\r\n    stack.push({\r\n        name: abbreviations.get(event.name) || event.name,\r\n    });\r\n}\r\n/**\r\n * Ends context by removing payload from the stack and returning parent or self, if stack is empty, payload\r\n *\r\n * @param event {PerformanceEvent}\r\n * @param abbreviations {Map<string, string>} event name abbreviations\r\n * @param stack {?PerformanceEventStackedContext[]} stack\r\n * @param error {?unknown} error\r\n */\r\nfunction endContext(event, abbreviations, stack, error) {\r\n    if (!stack?.length) {\r\n        return;\r\n    }\r\n    const peek = (stack) => {\r\n        return stack.length ? stack[stack.length - 1] : undefined;\r\n    };\r\n    const abbrEventName = abbreviations.get(event.name) || event.name;\r\n    const top = peek(stack);\r\n    if (top?.name !== abbrEventName) {\r\n        return;\r\n    }\r\n    const current = stack?.pop();\r\n    if (!current) {\r\n        return;\r\n    }\r\n    const errorCode = error instanceof indexNode.AuthError\r\n        ? error.errorCode\r\n        : error instanceof Error\r\n            ? error.name\r\n            : undefined;\r\n    const subErr = error instanceof indexNode.AuthError ? error.subError : undefined;\r\n    if (errorCode && current.childErr !== errorCode) {\r\n        current.err = errorCode;\r\n        if (subErr) {\r\n            current.subErr = subErr;\r\n        }\r\n    }\r\n    delete current.name;\r\n    delete current.childErr;\r\n    const context = {\r\n        ...current,\r\n        dur: event.durationMs,\r\n    };\r\n    if (!event.success) {\r\n        context.fail = 1;\r\n    }\r\n    const parent = peek(stack);\r\n    if (!parent) {\r\n        return { [abbrEventName]: context };\r\n    }\r\n    if (errorCode) {\r\n        parent.childErr = errorCode;\r\n    }\r\n    let childName;\r\n    if (!parent[abbrEventName]) {\r\n        childName = abbrEventName;\r\n    }\r\n    else {\r\n        const siblings = Object.keys(parent).filter((key) => key.startsWith(abbrEventName)).length;\r\n        childName = `${abbrEventName}_${siblings + 1}`;\r\n    }\r\n    parent[childName] = context;\r\n    return parent;\r\n}\r\n/**\r\n * Adds error name and stack trace to the telemetry event\r\n * @param error {Error}\r\n * @param logger {Logger}\r\n * @param event {PerformanceEvent}\r\n * @param stackMaxSize {number} max error stack size to capture\r\n */\r\nfunction addError(error, logger, event, stackMaxSize = 5) {\r\n    if (!(error instanceof Error)) {\r\n        logger.trace(\"PerformanceClient.addErrorStack: Input error is not instance of Error\", event.correlationId);\r\n        return;\r\n    }\r\n    else if (error instanceof indexNode.AuthError) {\r\n        event.errorCode = error.errorCode;\r\n        event.subErrorCode = error.subError;\r\n        if (error instanceof indexNode.ServerError ||\r\n            error instanceof indexNode.InteractionRequiredAuthError) {\r\n            event.serverErrorNo = error.errorNo;\r\n        }\r\n        return;\r\n    }\r\n    else if (error instanceof indexNode.CacheError) {\r\n        event.errorCode = error.errorCode;\r\n        return;\r\n    }\r\n    else if (event.errorStack?.length) {\r\n        logger.trace(\"PerformanceClient.addErrorStack: Stack already exist\", event.correlationId);\r\n        return;\r\n    }\r\n    else if (!error.stack?.length) {\r\n        logger.trace(\"PerformanceClient.addErrorStack: Input stack is empty\", event.correlationId);\r\n        return;\r\n    }\r\n    if (error.stack) {\r\n        event.errorStack = compactStack(error.stack, stackMaxSize);\r\n    }\r\n    event.errorName = error.name;\r\n}\r\n/**\r\n * Compacts error stack into array by fetching N first entries\r\n * @param stack {string} error stack\r\n * @param stackMaxSize {number} max error stack size to capture\r\n * @returns {string[]}\r\n */\r\nfunction compactStack(stack, stackMaxSize) {\r\n    if (stackMaxSize < 0) {\r\n        return [];\r\n    }\r\n    const stackArr = stack.split(\"\\n\") || [];\r\n    const res = [];\r\n    // Check for a handful of known, common runtime errors and log them (with redaction where applicable).\r\n    const firstLine = stackArr[0];\r\n    if (firstLine.startsWith(\"TypeError: Cannot read property\") ||\r\n        firstLine.startsWith(\"TypeError: Cannot read properties of\") ||\r\n        firstLine.startsWith(\"TypeError: Cannot set property\") ||\r\n        firstLine.startsWith(\"TypeError: Cannot set properties of\") ||\r\n        firstLine.endsWith(\"is not a function\")) {\r\n        // These types of errors are not at risk of leaking PII. They will indicate unavailable APIs\r\n        res.push(compactStackLine(firstLine));\r\n    }\r\n    else if (firstLine.startsWith(\"SyntaxError\") ||\r\n        firstLine.startsWith(\"TypeError\")) {\r\n        // Prevent unintentional leaking of arbitrary info by redacting contents between both single and double quotes\r\n        res.push(compactStackLine(\r\n        // Example: SyntaxError: Unexpected token 'e', \"test\" is not valid JSON -> SyntaxError: Unexpected token <redacted>, <redacted> is not valid JSON\r\n        firstLine.replace(/['].*[']|[\"].*[\"]/g, \"<redacted>\")));\r\n    }\r\n    // Get top N stack lines\r\n    for (let ix = 1; ix < stackArr.length; ix++) {\r\n        if (res.length >= stackMaxSize) {\r\n            break;\r\n        }\r\n        const line = stackArr[ix];\r\n        res.push(compactStackLine(line));\r\n    }\r\n    return res;\r\n}\r\n/**\r\n * Compacts error stack line by shortening file path\r\n * Example: https://localhost/msal-common/src/authority/Authority.js:100:1 -> Authority.js:100:1\r\n * @param line {string} stack line\r\n * @returns {string}\r\n */\r\nfunction compactStackLine(line) {\r\n    const filePathIx = line.lastIndexOf(\" \") + 1;\r\n    if (filePathIx < 1) {\r\n        return line;\r\n    }\r\n    const filePath = line.substring(filePathIx);\r\n    let fileNameIx = filePath.lastIndexOf(\"/\");\r\n    fileNameIx = fileNameIx < 0 ? filePath.lastIndexOf(\"\\\\\") : fileNameIx;\r\n    if (fileNameIx >= 0) {\r\n        return (line.substring(0, filePathIx) +\r\n            \"(\" +\r\n            filePath.substring(fileNameIx + 1) +\r\n            (filePath.charAt(filePath.length - 1) === \")\" ? \"\" : \")\")).trimStart();\r\n    }\r\n    return line.trimStart();\r\n}\r\nclass PerformanceClient {\r\n    /**\r\n     * Creates an instance of PerformanceClient,\r\n     * an abstract class containing core performance telemetry logic.\r\n     *\r\n     * @constructor\r\n     * @param {string} clientId Client ID of the application\r\n     * @param {string} authority Authority used by the application\r\n     * @param {Logger} logger Logger used by the application\r\n     * @param {string} libraryName Name of the library\r\n     * @param {string} libraryVersion Version of the library\r\n     * @param {ApplicationTelemetry} applicationTelemetry application name and version\r\n     * @param {Set<String>} intFields integer fields to be truncated\r\n     * @param {Map<string, string>} abbreviations event name abbreviations\r\n     */\r\n    constructor(clientId, authority, logger, libraryName, libraryVersion, applicationTelemetry, intFields, abbreviations) {\r\n        this.authority = authority;\r\n        this.libraryName = libraryName;\r\n        this.libraryVersion = libraryVersion;\r\n        this.applicationTelemetry = applicationTelemetry;\r\n        this.clientId = clientId;\r\n        this.logger = logger;\r\n        this.callbacks = new Map();\r\n        this.eventsByCorrelationId = new Map();\r\n        this.eventStack = new Map();\r\n        this.queueMeasurements = new Map();\r\n        this.preQueueTimeByCorrelationId = new Map();\r\n        this.intFields = intFields || new Set();\r\n        for (const item of indexNode.IntFields) {\r\n            this.intFields.add(item);\r\n        }\r\n        this.abbreviations = abbreviations || new Map();\r\n        for (const [key, value] of indexNode.PerformanceEventAbbreviations) {\r\n            this.abbreviations.set(key, value);\r\n        }\r\n    }\r\n    /**\r\n     * Starts and returns an platform-specific implementation of IPerformanceMeasurement.\r\n     * Note: this function can be changed to abstract at the next major version bump.\r\n     *\r\n     * @param {string} measureName\r\n     * @param {string} correlationId\r\n     * @returns {IPerformanceMeasurement}\r\n     * @deprecated This method will be removed in the next major version\r\n     */\r\n    startPerformanceMeasurement(measureName, // eslint-disable-line @typescript-eslint/no-unused-vars\r\n    correlationId // eslint-disable-line @typescript-eslint/no-unused-vars\r\n    ) {\r\n        return {};\r\n    }\r\n    /**\r\n     * Gets map of pre-queue times by correlation Id\r\n     *\r\n     * @param {PerformanceEvents} eventName\r\n     * @param {string} correlationId\r\n     * @returns {number}\r\n     */\r\n    getPreQueueTime(eventName, correlationId) {\r\n        const preQueueEvent = this.preQueueTimeByCorrelationId.get(correlationId);\r\n        if (!preQueueEvent) {\r\n            this.logger.trace(`PerformanceClient.getPreQueueTime: no pre-queue times found for correlationId: ${correlationId}, unable to add queue measurement`);\r\n            return;\r\n        }\r\n        else if (preQueueEvent.name !== eventName) {\r\n            this.logger.trace(`PerformanceClient.getPreQueueTime: no pre-queue time found for ${eventName}, unable to add queue measurement`);\r\n            return;\r\n        }\r\n        return preQueueEvent.time;\r\n    }\r\n    /**\r\n     * Calculates the difference between current time and time when function was queued.\r\n     * Note: It is possible to have 0 as the queue time if the current time and the queued time was the same.\r\n     *\r\n     * @param {number} preQueueTime\r\n     * @param {number} currentTime\r\n     * @returns {number}\r\n     */\r\n    calculateQueuedTime(preQueueTime, currentTime) {\r\n        if (preQueueTime < 1) {\r\n            this.logger.trace(`PerformanceClient: preQueueTime should be a positive integer and not ${preQueueTime}`);\r\n            return 0;\r\n        }\r\n        if (currentTime < 1) {\r\n            this.logger.trace(`PerformanceClient: currentTime should be a positive integer and not ${currentTime}`);\r\n            return 0;\r\n        }\r\n        if (currentTime < preQueueTime) {\r\n            this.logger.trace(\"PerformanceClient: currentTime is less than preQueueTime, check how time is being retrieved\");\r\n            return 0;\r\n        }\r\n        return currentTime - preQueueTime;\r\n    }\r\n    /**\r\n     * Adds queue measurement time to QueueMeasurements array for given correlation ID.\r\n     *\r\n     * @param {PerformanceEvents} eventName\r\n     * @param {?string} correlationId\r\n     * @param {?number} queueTime\r\n     * @param {?boolean} manuallyCompleted - indicator for manually completed queue measurements\r\n     * @returns\r\n     */\r\n    addQueueMeasurement(eventName, correlationId, queueTime, manuallyCompleted) {\r\n        if (!correlationId) {\r\n            this.logger.trace(`PerformanceClient.addQueueMeasurement: correlationId not provided for ${eventName}, cannot add queue measurement`);\r\n            return;\r\n        }\r\n        if (queueTime === 0) {\r\n            // Possible for there to be no queue time after calculation\r\n            this.logger.trace(`PerformanceClient.addQueueMeasurement: queue time provided for ${eventName} is ${queueTime}`);\r\n        }\r\n        else if (!queueTime) {\r\n            this.logger.trace(`PerformanceClient.addQueueMeasurement: no queue time provided for ${eventName}`);\r\n            return;\r\n        }\r\n        const queueMeasurement = {\r\n            eventName,\r\n            // Always default queue time to 0 for manually completed (improperly instrumented)\r\n            queueTime: manuallyCompleted ? 0 : queueTime,\r\n            manuallyCompleted,\r\n        };\r\n        // Adds to existing correlation Id if present in queueMeasurements\r\n        const existingMeasurements = this.queueMeasurements.get(correlationId);\r\n        if (existingMeasurements) {\r\n            existingMeasurements.push(queueMeasurement);\r\n            this.queueMeasurements.set(correlationId, existingMeasurements);\r\n        }\r\n        else {\r\n            // Sets new correlation Id if not present in queueMeasurements\r\n            this.logger.trace(`PerformanceClient.addQueueMeasurement: adding correlationId ${correlationId} to queue measurements`);\r\n            const measurementArray = [queueMeasurement];\r\n            this.queueMeasurements.set(correlationId, measurementArray);\r\n        }\r\n        // Delete processed pre-queue event.\r\n        this.preQueueTimeByCorrelationId.delete(correlationId);\r\n    }\r\n    /**\r\n     * Starts measuring performance for a given operation. Returns a function that should be used to end the measurement.\r\n     *\r\n     * @param {PerformanceEvents} measureName\r\n     * @param {?string} [correlationId]\r\n     * @returns {InProgressPerformanceEvent}\r\n     */\r\n    startMeasurement(measureName, correlationId) {\r\n        // Generate a placeholder correlation if the request does not provide one\r\n        const eventCorrelationId = correlationId || this.generateId();\r\n        if (!correlationId) {\r\n            this.logger.info(`PerformanceClient: No correlation id provided for ${measureName}, generating`, eventCorrelationId);\r\n        }\r\n        this.logger.trace(`PerformanceClient: Performance measurement started for ${measureName}`, eventCorrelationId);\r\n        const inProgressEvent = {\r\n            eventId: this.generateId(),\r\n            status: indexNode.PerformanceEventStatus.InProgress,\r\n            authority: this.authority,\r\n            libraryName: this.libraryName,\r\n            libraryVersion: this.libraryVersion,\r\n            clientId: this.clientId,\r\n            name: measureName,\r\n            startTimeMs: Date.now(),\r\n            correlationId: eventCorrelationId,\r\n            appName: this.applicationTelemetry?.appName,\r\n            appVersion: this.applicationTelemetry?.appVersion,\r\n        };\r\n        // Store in progress events so they can be discarded if not ended properly\r\n        this.cacheEventByCorrelationId(inProgressEvent);\r\n        startContext(inProgressEvent, this.abbreviations, this.eventStack.get(eventCorrelationId));\r\n        // Return the event and functions the caller can use to properly end/flush the measurement\r\n        return {\r\n            end: (event, error) => {\r\n                return this.endMeasurement({\r\n                    // Initial set of event properties\r\n                    ...inProgressEvent,\r\n                    // Properties set when event ends\r\n                    ...event,\r\n                }, error);\r\n            },\r\n            discard: () => {\r\n                return this.discardMeasurements(inProgressEvent.correlationId);\r\n            },\r\n            add: (fields) => {\r\n                return this.addFields(fields, inProgressEvent.correlationId);\r\n            },\r\n            increment: (fields) => {\r\n                return this.incrementFields(fields, inProgressEvent.correlationId);\r\n            },\r\n            event: inProgressEvent,\r\n            measurement: new indexNode.StubPerformanceMeasurement(),\r\n        };\r\n    }\r\n    /**\r\n     * Stops measuring the performance for an operation. Should only be called directly by PerformanceClient classes,\r\n     * as consumers should instead use the function returned by startMeasurement.\r\n     * Adds a new field named as \"[event name]DurationMs\" for sub-measurements, completes and emits an event\r\n     * otherwise.\r\n     *\r\n     * @param {PerformanceEvent} event\r\n     * @param {unknown} error\r\n     * @returns {(PerformanceEvent | null)}\r\n     */\r\n    endMeasurement(event, error) {\r\n        const rootEvent = this.eventsByCorrelationId.get(event.correlationId);\r\n        if (!rootEvent) {\r\n            this.logger.trace(`PerformanceClient: Measurement not found for ${event.eventId}`, event.correlationId);\r\n            return null;\r\n        }\r\n        const isRoot = event.eventId === rootEvent.eventId;\r\n        let queueInfo = {\r\n            totalQueueTime: 0,\r\n            totalQueueCount: 0,\r\n            manuallyCompletedCount: 0,\r\n        };\r\n        event.durationMs = Math.round(event.durationMs || this.getDurationMs(event.startTimeMs));\r\n        const context = JSON.stringify(endContext(event, this.abbreviations, this.eventStack.get(rootEvent.correlationId), error));\r\n        if (isRoot) {\r\n            queueInfo = this.getQueueInfo(event.correlationId);\r\n            this.discardMeasurements(rootEvent.correlationId);\r\n        }\r\n        else {\r\n            rootEvent.incompleteSubMeasurements?.delete(event.eventId);\r\n        }\r\n        this.logger.trace(`PerformanceClient: Performance measurement ended for ${event.name}: ${event.durationMs} ms`, event.correlationId);\r\n        if (error) {\r\n            addError(error, this.logger, rootEvent);\r\n        }\r\n        // Add sub-measurement attribute to root event.\r\n        if (!isRoot) {\r\n            rootEvent[event.name + \"DurationMs\"] = Math.floor(event.durationMs);\r\n            return { ...rootEvent };\r\n        }\r\n        if (isRoot &&\r\n            !error &&\r\n            (rootEvent.errorCode || rootEvent.subErrorCode)) {\r\n            this.logger.trace(`PerformanceClient: Remove error and sub-error codes for root event ${event.name} as intermediate error was successfully handled`, event.correlationId);\r\n            rootEvent.errorCode = undefined;\r\n            rootEvent.subErrorCode = undefined;\r\n        }\r\n        let finalEvent = { ...rootEvent, ...event };\r\n        let incompleteSubsCount = 0;\r\n        // Incomplete sub-measurements are discarded. They are likely an instrumentation bug that should be fixed.\r\n        finalEvent.incompleteSubMeasurements?.forEach((subMeasurement) => {\r\n            this.logger.trace(`PerformanceClient: Incomplete submeasurement ${subMeasurement.name} found for ${event.name}`, finalEvent.correlationId);\r\n            incompleteSubsCount++;\r\n        });\r\n        finalEvent.incompleteSubMeasurements = undefined;\r\n        finalEvent = {\r\n            ...finalEvent,\r\n            queuedTimeMs: queueInfo.totalQueueTime,\r\n            queuedCount: queueInfo.totalQueueCount,\r\n            queuedManuallyCompletedCount: queueInfo.manuallyCompletedCount,\r\n            status: indexNode.PerformanceEventStatus.Completed,\r\n            incompleteSubsCount,\r\n            context,\r\n        };\r\n        this.truncateIntegralFields(finalEvent);\r\n        this.emitEvents([finalEvent], event.correlationId);\r\n        return finalEvent;\r\n    }\r\n    /**\r\n     * Saves extra information to be emitted when the measurements are flushed\r\n     * @param fields\r\n     * @param correlationId\r\n     */\r\n    addFields(fields, correlationId) {\r\n        this.logger.trace(\"PerformanceClient: Updating static fields\");\r\n        const event = this.eventsByCorrelationId.get(correlationId);\r\n        if (event) {\r\n            this.eventsByCorrelationId.set(correlationId, {\r\n                ...event,\r\n                ...fields,\r\n            });\r\n        }\r\n        else {\r\n            this.logger.trace(\"PerformanceClient: Event not found for\", correlationId);\r\n        }\r\n    }\r\n    /**\r\n     * Increment counters to be emitted when the measurements are flushed\r\n     * @param fields {string[]}\r\n     * @param correlationId {string} correlation identifier\r\n     */\r\n    incrementFields(fields, correlationId) {\r\n        this.logger.trace(\"PerformanceClient: Updating counters\");\r\n        const event = this.eventsByCorrelationId.get(correlationId);\r\n        if (event) {\r\n            for (const counter in fields) {\r\n                if (!event.hasOwnProperty(counter)) {\r\n                    event[counter] = 0;\r\n                }\r\n                else if (isNaN(Number(event[counter]))) {\r\n                    return;\r\n                }\r\n                event[counter] += fields[counter];\r\n            }\r\n        }\r\n        else {\r\n            this.logger.trace(\"PerformanceClient: Event not found for\", correlationId);\r\n        }\r\n    }\r\n    /**\r\n     * Upserts event into event cache.\r\n     * First key is the correlation id, second key is the event id.\r\n     * Allows for events to be grouped by correlation id,\r\n     * and to easily allow for properties on them to be updated.\r\n     *\r\n     * @private\r\n     * @param {PerformanceEvent} event\r\n     */\r\n    cacheEventByCorrelationId(event) {\r\n        const rootEvent = this.eventsByCorrelationId.get(event.correlationId);\r\n        if (rootEvent) {\r\n            this.logger.trace(`PerformanceClient: Performance measurement for ${event.name} added/updated`, event.correlationId);\r\n            rootEvent.incompleteSubMeasurements =\r\n                rootEvent.incompleteSubMeasurements || new Map();\r\n            rootEvent.incompleteSubMeasurements.set(event.eventId, {\r\n                name: event.name,\r\n                startTimeMs: event.startTimeMs,\r\n            });\r\n        }\r\n        else {\r\n            this.logger.trace(`PerformanceClient: Performance measurement for ${event.name} started`, event.correlationId);\r\n            this.eventsByCorrelationId.set(event.correlationId, { ...event });\r\n            this.eventStack.set(event.correlationId, []);\r\n        }\r\n    }\r\n    getQueueInfo(correlationId) {\r\n        const queueMeasurementForCorrelationId = this.queueMeasurements.get(correlationId);\r\n        if (!queueMeasurementForCorrelationId) {\r\n            this.logger.trace(`PerformanceClient: no queue measurements found for for correlationId: ${correlationId}`);\r\n        }\r\n        let totalQueueTime = 0;\r\n        let totalQueueCount = 0;\r\n        let manuallyCompletedCount = 0;\r\n        queueMeasurementForCorrelationId?.forEach((measurement) => {\r\n            totalQueueTime += measurement.queueTime;\r\n            totalQueueCount++;\r\n            manuallyCompletedCount += measurement.manuallyCompleted ? 1 : 0;\r\n        });\r\n        return {\r\n            totalQueueTime,\r\n            totalQueueCount,\r\n            manuallyCompletedCount,\r\n        };\r\n    }\r\n    /**\r\n     * Removes measurements and aux data for a given correlation id.\r\n     *\r\n     * @param {string} correlationId\r\n     */\r\n    discardMeasurements(correlationId) {\r\n        this.logger.trace(\"PerformanceClient: Performance measurements discarded\", correlationId);\r\n        this.eventsByCorrelationId.delete(correlationId);\r\n        this.logger.trace(\"PerformanceClient: QueueMeasurements discarded\", correlationId);\r\n        this.queueMeasurements.delete(correlationId);\r\n        this.logger.trace(\"PerformanceClient: Pre-queue times discarded\", correlationId);\r\n        this.preQueueTimeByCorrelationId.delete(correlationId);\r\n        this.logger.trace(\"PerformanceClient: Event stack discarded\", correlationId);\r\n        this.eventStack.delete(correlationId);\r\n    }\r\n    /**\r\n     * Registers a callback function to receive performance events.\r\n     *\r\n     * @param {PerformanceCallbackFunction} callback\r\n     * @returns {string}\r\n     */\r\n    addPerformanceCallback(callback) {\r\n        for (const [id, cb] of this.callbacks) {\r\n            if (cb.toString() === callback.toString()) {\r\n                this.logger.warning(`PerformanceClient: Performance callback is already registered with id: ${id}`);\r\n                return id;\r\n            }\r\n        }\r\n        const callbackId = this.generateId();\r\n        this.callbacks.set(callbackId, callback);\r\n        this.logger.verbose(`PerformanceClient: Performance callback registered with id: ${callbackId}`);\r\n        return callbackId;\r\n    }\r\n    /**\r\n     * Removes a callback registered with addPerformanceCallback.\r\n     *\r\n     * @param {string} callbackId\r\n     * @returns {boolean}\r\n     */\r\n    removePerformanceCallback(callbackId) {\r\n        const result = this.callbacks.delete(callbackId);\r\n        if (result) {\r\n            this.logger.verbose(`PerformanceClient: Performance callback ${callbackId} removed.`);\r\n        }\r\n        else {\r\n            this.logger.verbose(`PerformanceClient: Performance callback ${callbackId} not removed.`);\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * Emits events to all registered callbacks.\r\n     *\r\n     * @param {PerformanceEvent[]} events\r\n     * @param {?string} [correlationId]\r\n     */\r\n    emitEvents(events, correlationId) {\r\n        this.logger.verbose(\"PerformanceClient: Emitting performance events\", correlationId);\r\n        this.callbacks.forEach((callback, callbackId) => {\r\n            this.logger.trace(`PerformanceClient: Emitting event to callback ${callbackId}`, correlationId);\r\n            callback.apply(null, [events]);\r\n        });\r\n    }\r\n    /**\r\n     * Enforce truncation of integral fields in performance event.\r\n     * @param {PerformanceEvent} event performance event to update.\r\n     */\r\n    truncateIntegralFields(event) {\r\n        this.intFields.forEach((key) => {\r\n            if (key in event && typeof event[key] === \"number\") {\r\n                event[key] = Math.floor(event[key]);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Returns event duration in milliseconds\r\n     * @param startTimeMs {number}\r\n     * @returns {number}\r\n     */\r\n    getDurationMs(startTimeMs) {\r\n        const durationMs = Date.now() - startTimeMs;\r\n        // Handle clock skew\r\n        return durationMs < 0 ? durationMs : 0;\r\n    }\r\n}\n\nexports.AADAuthorityConstants = indexNode.AADAuthorityConstants;\nexports.AADServerParamKeys = indexNode.AADServerParamKeys;\nexports.AccountEntity = indexNode.AccountEntity;\nexports.AuthError = indexNode.AuthError;\nexports.AuthErrorCodes = indexNode.AuthErrorCodes;\nexports.AuthErrorMessage = indexNode.AuthErrorMessage;\nexports.AuthToken = indexNode.AuthToken;\nexports.AuthenticationHeaderParser = indexNode.AuthenticationHeaderParser;\nexports.AuthenticationScheme = indexNode.AuthenticationScheme;\nexports.Authority = indexNode.Authority;\nexports.AuthorityFactory = indexNode.AuthorityFactory;\nexports.AuthorityType = indexNode.AuthorityType;\nexports.AuthorizationCodeClient = indexNode.AuthorizationCodeClient;\nexports.AuthorizeProtocol = indexNode.Authorize;\nexports.AzureCloudInstance = indexNode.AzureCloudInstance;\nexports.BaseClient = indexNode.BaseClient;\nexports.CacheAccountType = indexNode.CacheAccountType;\nexports.CacheError = indexNode.CacheError;\nexports.CacheErrorCodes = indexNode.CacheErrorCodes;\nexports.CacheHelpers = indexNode.CacheHelpers;\nexports.CacheManager = indexNode.CacheManager;\nexports.CacheOutcome = indexNode.CacheOutcome;\nexports.CacheType = indexNode.CacheType;\nexports.CcsCredentialType = indexNode.CcsCredentialType;\nexports.ClaimsRequestKeys = indexNode.ClaimsRequestKeys;\nexports.ClientAuthError = indexNode.ClientAuthError;\nexports.ClientAuthErrorCodes = indexNode.ClientAuthErrorCodes;\nexports.ClientAuthErrorMessage = indexNode.ClientAuthErrorMessage;\nexports.ClientConfigurationError = indexNode.ClientConfigurationError;\nexports.ClientConfigurationErrorCodes = indexNode.ClientConfigurationErrorCodes;\nexports.ClientConfigurationErrorMessage = indexNode.ClientConfigurationErrorMessage;\nexports.CodeChallengeMethodValues = indexNode.CodeChallengeMethodValues;\nexports.Constants = indexNode.Constants;\nexports.CredentialType = indexNode.CredentialType;\nexports.DEFAULT_CRYPTO_IMPLEMENTATION = indexNode.DEFAULT_CRYPTO_IMPLEMENTATION;\nexports.DEFAULT_SYSTEM_OPTIONS = indexNode.DEFAULT_SYSTEM_OPTIONS;\nexports.DEFAULT_TOKEN_RENEWAL_OFFSET_SEC = indexNode.DEFAULT_TOKEN_RENEWAL_OFFSET_SEC;\nexports.DefaultStorageClass = indexNode.DefaultStorageClass;\nexports.EncodingTypes = indexNode.EncodingTypes;\nexports.Errors = indexNode.Errors;\nexports.GrantType = indexNode.GrantType;\nexports.HeaderNames = indexNode.HeaderNames;\nexports.HttpMethod = indexNode.HttpMethod;\nexports.HttpStatus = indexNode.HttpStatus;\nexports.IntFields = indexNode.IntFields;\nexports.InteractionRequiredAuthError = indexNode.InteractionRequiredAuthError;\nexports.InteractionRequiredAuthErrorCodes = indexNode.InteractionRequiredAuthErrorCodes;\nexports.InteractionRequiredAuthErrorMessage = indexNode.InteractionRequiredAuthErrorMessage;\nexports.JsonWebTokenTypes = indexNode.JsonWebTokenTypes;\nObject.defineProperty(exports, \"LogLevel\", ({\n    enumerable: true,\n    get: function () { return indexNode.LogLevel; }\n}));\nexports.Logger = indexNode.Logger;\nexports.NetworkError = indexNode.NetworkError;\nexports.OAuthResponseType = indexNode.OAuthResponseType;\nexports.OIDC_DEFAULT_SCOPES = indexNode.OIDC_DEFAULT_SCOPES;\nexports.ONE_DAY_IN_MS = indexNode.ONE_DAY_IN_MS;\nexports.PasswordGrantConstants = indexNode.PasswordGrantConstants;\nexports.PerformanceEventStatus = indexNode.PerformanceEventStatus;\nexports.PerformanceEvents = indexNode.PerformanceEvents;\nexports.PersistentCacheKeys = indexNode.PersistentCacheKeys;\nexports.PopTokenGenerator = indexNode.PopTokenGenerator;\nexports.PromptValue = indexNode.PromptValue;\nexports.ProtocolMode = indexNode.ProtocolMode;\nexports.ProtocolUtils = indexNode.ProtocolUtils;\nexports.RefreshTokenClient = indexNode.RefreshTokenClient;\nexports.RequestParameterBuilder = indexNode.RequestParameterBuilder;\nexports.ResponseHandler = indexNode.ResponseHandler;\nexports.ResponseMode = indexNode.ResponseMode;\nexports.ScopeSet = indexNode.ScopeSet;\nexports.ServerError = indexNode.ServerError;\nexports.ServerResponseType = indexNode.ServerResponseType;\nexports.ServerTelemetryManager = indexNode.ServerTelemetryManager;\nexports.SilentFlowClient = indexNode.SilentFlowClient;\nexports.StringUtils = indexNode.StringUtils;\nexports.StubPerformanceClient = indexNode.StubPerformanceClient;\nexports.StubbedNetworkModule = indexNode.StubbedNetworkModule;\nexports.THE_FAMILY_ID = indexNode.THE_FAMILY_ID;\nexports.ThrottlingConstants = indexNode.ThrottlingConstants;\nexports.ThrottlingUtils = indexNode.ThrottlingUtils;\nexports.TimeUtils = indexNode.TimeUtils;\nexports.UrlString = indexNode.UrlString;\nexports.UrlUtils = indexNode.UrlUtils;\nexports.buildAccountToCache = indexNode.buildAccountToCache;\nexports.buildClientInfo = indexNode.buildClientInfo;\nexports.buildClientInfoFromHomeAccountId = indexNode.buildClientInfoFromHomeAccountId;\nexports.buildStaticAuthorityOptions = indexNode.buildStaticAuthorityOptions;\nexports.buildTenantProfile = indexNode.buildTenantProfile;\nexports.createAuthError = indexNode.createAuthError;\nexports.createCacheError = indexNode.createCacheError;\nexports.createClientAuthError = indexNode.createClientAuthError;\nexports.createClientConfigurationError = indexNode.createClientConfigurationError;\nexports.createInteractionRequiredAuthError = indexNode.createInteractionRequiredAuthError;\nexports.createNetworkError = indexNode.createNetworkError;\nexports.formatAuthorityUri = indexNode.formatAuthorityUri;\nexports.getRequestThumbprint = indexNode.getRequestThumbprint;\nexports.getTenantIdFromIdTokenClaims = indexNode.getTenantIdFromIdTokenClaims;\nexports.invoke = indexNode.invoke;\nexports.invokeAsync = indexNode.invokeAsync;\nexports.tenantIdMatchesHomeTenant = indexNode.tenantIdMatchesHomeTenant;\nexports.updateAccountTenantProfileData = indexNode.updateAccountTenantProfileData;\nexports.version = indexNode.version;\nexports.JoseHeader = JoseHeader;\nexports.PerformanceClient = PerformanceClient;\n//# sourceMappingURL=index-browser.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/lib/index-browser.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/lib/index-node-C8h2xZEM.js":
/*!********************************************************************!*\
  !*** ./node_modules/@azure/msal-common/lib/index-node-C8h2xZEM.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/*! @azure/msal-common v15.12.0 2025-08-19 */\n\n'use strict';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst Constants = {\r\n    LIBRARY_NAME: \"MSAL.JS\",\r\n    SKU: \"msal.js.common\",\r\n    // default authority\r\n    DEFAULT_AUTHORITY: \"https://login.microsoftonline.com/common/\",\r\n    DEFAULT_AUTHORITY_HOST: \"login.microsoftonline.com\",\r\n    DEFAULT_COMMON_TENANT: \"common\",\r\n    // ADFS String\r\n    ADFS: \"adfs\",\r\n    DSTS: \"dstsv2\",\r\n    // Default AAD Instance Discovery Endpoint\r\n    AAD_INSTANCE_DISCOVERY_ENDPT: \"https://login.microsoftonline.com/common/discovery/instance?api-version=1.1&authorization_endpoint=\",\r\n    // CIAM URL\r\n    CIAM_AUTH_URL: \".ciamlogin.com\",\r\n    AAD_TENANT_DOMAIN_SUFFIX: \".onmicrosoft.com\",\r\n    // Resource delimiter - used for certain cache entries\r\n    RESOURCE_DELIM: \"|\",\r\n    // Placeholder for non-existent account ids/objects\r\n    NO_ACCOUNT: \"NO_ACCOUNT\",\r\n    // Claims\r\n    CLAIMS: \"claims\",\r\n    // Consumer UTID\r\n    CONSUMER_UTID: \"9188040d-6c67-4c5b-b112-36a304b66dad\",\r\n    // Default scopes\r\n    OPENID_SCOPE: \"openid\",\r\n    PROFILE_SCOPE: \"profile\",\r\n    OFFLINE_ACCESS_SCOPE: \"offline_access\",\r\n    EMAIL_SCOPE: \"email\",\r\n    CODE_GRANT_TYPE: \"authorization_code\",\r\n    RT_GRANT_TYPE: \"refresh_token\",\r\n    S256_CODE_CHALLENGE_METHOD: \"S256\",\r\n    URL_FORM_CONTENT_TYPE: \"application/x-www-form-urlencoded;charset=utf-8\",\r\n    AUTHORIZATION_PENDING: \"authorization_pending\",\r\n    NOT_DEFINED: \"not_defined\",\r\n    EMPTY_STRING: \"\",\r\n    NOT_APPLICABLE: \"N/A\",\r\n    NOT_AVAILABLE: \"Not Available\",\r\n    FORWARD_SLASH: \"/\",\r\n    IMDS_ENDPOINT: \"http://169.254.169.254/metadata/instance/compute/location\",\r\n    IMDS_VERSION: \"2020-06-01\",\r\n    IMDS_TIMEOUT: 2000,\r\n    AZURE_REGION_AUTO_DISCOVER_FLAG: \"TryAutoDetect\",\r\n    REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX: \"login.microsoft.com\",\r\n    KNOWN_PUBLIC_CLOUDS: [\r\n        \"login.microsoftonline.com\",\r\n        \"login.windows.net\",\r\n        \"login.microsoft.com\",\r\n        \"sts.windows.net\",\r\n    ],\r\n    SHR_NONCE_VALIDITY: 240,\r\n    INVALID_INSTANCE: \"invalid_instance\",\r\n};\r\nconst HttpStatus = {\r\n    SUCCESS: 200,\r\n    SUCCESS_RANGE_START: 200,\r\n    SUCCESS_RANGE_END: 299,\r\n    REDIRECT: 302,\r\n    CLIENT_ERROR: 400,\r\n    CLIENT_ERROR_RANGE_START: 400,\r\n    BAD_REQUEST: 400,\r\n    UNAUTHORIZED: 401,\r\n    NOT_FOUND: 404,\r\n    REQUEST_TIMEOUT: 408,\r\n    GONE: 410,\r\n    TOO_MANY_REQUESTS: 429,\r\n    CLIENT_ERROR_RANGE_END: 499,\r\n    SERVER_ERROR: 500,\r\n    SERVER_ERROR_RANGE_START: 500,\r\n    SERVICE_UNAVAILABLE: 503,\r\n    GATEWAY_TIMEOUT: 504,\r\n    SERVER_ERROR_RANGE_END: 599,\r\n    MULTI_SIDED_ERROR: 600,\r\n};\r\nconst HttpMethod = {\r\n    GET: \"GET\",\r\n    POST: \"POST\",\r\n};\r\nconst OIDC_DEFAULT_SCOPES = [\r\n    Constants.OPENID_SCOPE,\r\n    Constants.PROFILE_SCOPE,\r\n    Constants.OFFLINE_ACCESS_SCOPE,\r\n];\r\nconst OIDC_SCOPES = [...OIDC_DEFAULT_SCOPES, Constants.EMAIL_SCOPE];\r\n/**\r\n * Request header names\r\n */\r\nconst HeaderNames = {\r\n    CONTENT_TYPE: \"Content-Type\",\r\n    CONTENT_LENGTH: \"Content-Length\",\r\n    RETRY_AFTER: \"Retry-After\",\r\n    CCS_HEADER: \"X-AnchorMailbox\",\r\n    WWWAuthenticate: \"WWW-Authenticate\",\r\n    AuthenticationInfo: \"Authentication-Info\",\r\n    X_MS_REQUEST_ID: \"x-ms-request-id\",\r\n    X_MS_HTTP_VERSION: \"x-ms-httpver\",\r\n};\r\n/**\r\n * Persistent cache keys MSAL which stay while user is logged in.\r\n */\r\nconst PersistentCacheKeys = {\r\n    ACTIVE_ACCOUNT_FILTERS: \"active-account-filters\", // new cache entry for active_account for a more robust version for browser\r\n};\r\n/**\r\n * String constants related to AAD Authority\r\n */\r\nconst AADAuthorityConstants = {\r\n    COMMON: \"common\",\r\n    ORGANIZATIONS: \"organizations\",\r\n    CONSUMERS: \"consumers\",\r\n};\r\n/**\r\n * Claims request keys\r\n */\r\nconst ClaimsRequestKeys = {\r\n    ACCESS_TOKEN: \"access_token\",\r\n    XMS_CC: \"xms_cc\",\r\n};\r\n/**\r\n * we considered making this \"enum\" in the request instead of string, however it looks like the allowed list of\r\n * prompt values kept changing over past couple of years. There are some undocumented prompt values for some\r\n * internal partners too, hence the choice of generic \"string\" type instead of the \"enum\"\r\n */\r\nconst PromptValue = {\r\n    LOGIN: \"login\",\r\n    SELECT_ACCOUNT: \"select_account\",\r\n    CONSENT: \"consent\",\r\n    NONE: \"none\",\r\n    CREATE: \"create\",\r\n    NO_SESSION: \"no_session\",\r\n};\r\n/**\r\n * allowed values for codeVerifier\r\n */\r\nconst CodeChallengeMethodValues = {\r\n    PLAIN: \"plain\",\r\n    S256: \"S256\",\r\n};\r\n/**\r\n * Allowed values for response_type\r\n */\r\nconst OAuthResponseType = {\r\n    CODE: \"code\",\r\n    IDTOKEN_TOKEN: \"id_token token\",\r\n    IDTOKEN_TOKEN_REFRESHTOKEN: \"id_token token refresh_token\",\r\n};\r\n/**\r\n * allowed values for server response type\r\n * @deprecated Use ResponseMode instead\r\n */\r\nconst ServerResponseType = {\r\n    QUERY: \"query\",\r\n    FRAGMENT: \"fragment\",\r\n};\r\n/**\r\n * allowed values for response_mode\r\n */\r\nconst ResponseMode = {\r\n    QUERY: \"query\",\r\n    FRAGMENT: \"fragment\",\r\n    FORM_POST: \"form_post\",\r\n};\r\n/**\r\n * allowed grant_type\r\n */\r\nconst GrantType = {\r\n    IMPLICIT_GRANT: \"implicit\",\r\n    AUTHORIZATION_CODE_GRANT: \"authorization_code\",\r\n    CLIENT_CREDENTIALS_GRANT: \"client_credentials\",\r\n    RESOURCE_OWNER_PASSWORD_GRANT: \"password\",\r\n    REFRESH_TOKEN_GRANT: \"refresh_token\",\r\n    DEVICE_CODE_GRANT: \"device_code\",\r\n    JWT_BEARER: \"urn:ietf:params:oauth:grant-type:jwt-bearer\",\r\n};\r\n/**\r\n * Account types in Cache\r\n */\r\nconst CacheAccountType = {\r\n    MSSTS_ACCOUNT_TYPE: \"MSSTS\",\r\n    ADFS_ACCOUNT_TYPE: \"ADFS\",\r\n    MSAV1_ACCOUNT_TYPE: \"MSA\",\r\n    GENERIC_ACCOUNT_TYPE: \"Generic\", // NTLM, Kerberos, FBA, Basic etc\r\n};\r\n/**\r\n * Separators used in cache\r\n */\r\nconst Separators = {\r\n    CACHE_KEY_SEPARATOR: \"-\",\r\n    CLIENT_INFO_SEPARATOR: \".\",\r\n};\r\n/**\r\n * Credential Type stored in the cache\r\n */\r\nconst CredentialType = {\r\n    ID_TOKEN: \"IdToken\",\r\n    ACCESS_TOKEN: \"AccessToken\",\r\n    ACCESS_TOKEN_WITH_AUTH_SCHEME: \"AccessToken_With_AuthScheme\",\r\n    REFRESH_TOKEN: \"RefreshToken\",\r\n};\r\n/**\r\n * Combine all cache types\r\n */\r\nconst CacheType = {\r\n    ADFS: 1001,\r\n    MSA: 1002,\r\n    MSSTS: 1003,\r\n    GENERIC: 1004,\r\n    ACCESS_TOKEN: 2001,\r\n    REFRESH_TOKEN: 2002,\r\n    ID_TOKEN: 2003,\r\n    APP_METADATA: 3001,\r\n    UNDEFINED: 9999,\r\n};\r\n/**\r\n * More Cache related constants\r\n */\r\nconst APP_METADATA = \"appmetadata\";\r\nconst CLIENT_INFO$1 = \"client_info\";\r\nconst THE_FAMILY_ID = \"1\";\r\nconst AUTHORITY_METADATA_CONSTANTS = {\r\n    CACHE_KEY: \"authority-metadata\",\r\n    REFRESH_TIME_SECONDS: 3600 * 24, // 24 Hours\r\n};\r\nconst AuthorityMetadataSource = {\r\n    CONFIG: \"config\",\r\n    CACHE: \"cache\",\r\n    NETWORK: \"network\",\r\n    HARDCODED_VALUES: \"hardcoded_values\",\r\n};\r\nconst SERVER_TELEM_CONSTANTS = {\r\n    SCHEMA_VERSION: 5,\r\n    MAX_LAST_HEADER_BYTES: 330,\r\n    MAX_CACHED_ERRORS: 50,\r\n    CACHE_KEY: \"server-telemetry\",\r\n    CATEGORY_SEPARATOR: \"|\",\r\n    VALUE_SEPARATOR: \",\",\r\n    OVERFLOW_TRUE: \"1\",\r\n    OVERFLOW_FALSE: \"0\",\r\n    UNKNOWN_ERROR: \"unknown_error\",\r\n};\r\n/**\r\n * Type of the authentication request\r\n */\r\nconst AuthenticationScheme = {\r\n    BEARER: \"Bearer\",\r\n    POP: \"pop\",\r\n    SSH: \"ssh-cert\",\r\n};\r\n/**\r\n * Constants related to throttling\r\n */\r\nconst ThrottlingConstants = {\r\n    // Default time to throttle RequestThumbprint in seconds\r\n    DEFAULT_THROTTLE_TIME_SECONDS: 60,\r\n    // Default maximum time to throttle in seconds, overrides what the server sends back\r\n    DEFAULT_MAX_THROTTLE_TIME_SECONDS: 3600,\r\n    // Prefix for storing throttling entries\r\n    THROTTLING_PREFIX: \"throttling\",\r\n    // Value assigned to the x-ms-lib-capability header to indicate to the server the library supports throttling\r\n    X_MS_LIB_CAPABILITY_VALUE: \"retry-after, h429\",\r\n};\r\nconst Errors = {\r\n    INVALID_GRANT_ERROR: \"invalid_grant\",\r\n    CLIENT_MISMATCH_ERROR: \"client_mismatch\",\r\n};\r\n/**\r\n * Password grant parameters\r\n */\r\nconst PasswordGrantConstants = {\r\n    username: \"username\",\r\n    password: \"password\",\r\n};\r\n/**\r\n * Region Discovery Sources\r\n */\r\nconst RegionDiscoverySources = {\r\n    FAILED_AUTO_DETECTION: \"1\",\r\n    INTERNAL_CACHE: \"2\",\r\n    ENVIRONMENT_VARIABLE: \"3\",\r\n    IMDS: \"4\",\r\n};\r\n/**\r\n * Region Discovery Outcomes\r\n */\r\nconst RegionDiscoveryOutcomes = {\r\n    CONFIGURED_NO_AUTO_DETECTION: \"2\",\r\n    AUTO_DETECTION_REQUESTED_SUCCESSFUL: \"4\",\r\n    AUTO_DETECTION_REQUESTED_FAILED: \"5\",\r\n};\r\n/**\r\n * Specifies the reason for fetching the access token from the identity provider\r\n */\r\nconst CacheOutcome = {\r\n    // When a token is found in the cache or the cache is not supposed to be hit when making the request\r\n    NOT_APPLICABLE: \"0\",\r\n    // When the token request goes to the identity provider because force_refresh was set to true. Also occurs if claims were requested\r\n    FORCE_REFRESH_OR_CLAIMS: \"1\",\r\n    // When the token request goes to the identity provider because no cached access token exists\r\n    NO_CACHED_ACCESS_TOKEN: \"2\",\r\n    // When the token request goes to the identity provider because cached access token expired\r\n    CACHED_ACCESS_TOKEN_EXPIRED: \"3\",\r\n    // When the token request goes to the identity provider because refresh_in was used and the existing token needs to be refreshed\r\n    PROACTIVELY_REFRESHED: \"4\",\r\n};\r\nconst JsonWebTokenTypes = {\r\n    Jwt: \"JWT\",\r\n    Jwk: \"JWK\",\r\n    Pop: \"pop\",\r\n};\r\nconst ONE_DAY_IN_MS = 86400000;\r\n// Token renewal offset default in seconds\r\nconst DEFAULT_TOKEN_RENEWAL_OFFSET_SEC = 300;\r\nconst EncodingTypes = {\r\n    BASE64: \"base64\",\r\n    HEX: \"hex\",\r\n    UTF8: \"utf-8\",\r\n};\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * AuthErrorMessage class containing string constants used by error codes and messages.\r\n */\r\nconst unexpectedError = \"unexpected_error\";\r\nconst postRequestFailed = \"post_request_failed\";\n\nvar AuthErrorCodes = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    postRequestFailed: postRequestFailed,\n    unexpectedError: unexpectedError\n});\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst AuthErrorMessages = {\r\n    [unexpectedError]: \"Unexpected error in authentication.\",\r\n    [postRequestFailed]: \"Post request failed from the network, could be a 4xx/5xx or a network unavailability. Please check the exact error code for details.\",\r\n};\r\n/**\r\n * AuthErrorMessage class containing string constants used by error codes and messages.\r\n * @deprecated Use AuthErrorCodes instead\r\n */\r\nconst AuthErrorMessage = {\r\n    unexpectedError: {\r\n        code: unexpectedError,\r\n        desc: AuthErrorMessages[unexpectedError],\r\n    },\r\n    postRequestFailed: {\r\n        code: postRequestFailed,\r\n        desc: AuthErrorMessages[postRequestFailed],\r\n    },\r\n};\r\n/**\r\n * General error class thrown by the MSAL.js library.\r\n */\r\nclass AuthError extends Error {\r\n    constructor(errorCode, errorMessage, suberror) {\r\n        const errorString = errorMessage\r\n            ? `${errorCode}: ${errorMessage}`\r\n            : errorCode;\r\n        super(errorString);\r\n        Object.setPrototypeOf(this, AuthError.prototype);\r\n        this.errorCode = errorCode || Constants.EMPTY_STRING;\r\n        this.errorMessage = errorMessage || Constants.EMPTY_STRING;\r\n        this.subError = suberror || Constants.EMPTY_STRING;\r\n        this.name = \"AuthError\";\r\n    }\r\n    setCorrelationId(correlationId) {\r\n        this.correlationId = correlationId;\r\n    }\r\n}\r\nfunction createAuthError(code, additionalMessage) {\r\n    return new AuthError(code, additionalMessage\r\n        ? `${AuthErrorMessages[code]} ${additionalMessage}`\r\n        : AuthErrorMessages[code]);\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst clientInfoDecodingError = \"client_info_decoding_error\";\r\nconst clientInfoEmptyError = \"client_info_empty_error\";\r\nconst tokenParsingError = \"token_parsing_error\";\r\nconst nullOrEmptyToken = \"null_or_empty_token\";\r\nconst endpointResolutionError = \"endpoints_resolution_error\";\r\nconst networkError = \"network_error\";\r\nconst openIdConfigError = \"openid_config_error\";\r\nconst hashNotDeserialized = \"hash_not_deserialized\";\r\nconst invalidState = \"invalid_state\";\r\nconst stateMismatch = \"state_mismatch\";\r\nconst stateNotFound = \"state_not_found\";\r\nconst nonceMismatch = \"nonce_mismatch\";\r\nconst authTimeNotFound = \"auth_time_not_found\";\r\nconst maxAgeTranspired = \"max_age_transpired\";\r\nconst multipleMatchingTokens = \"multiple_matching_tokens\";\r\nconst multipleMatchingAccounts = \"multiple_matching_accounts\";\r\nconst multipleMatchingAppMetadata = \"multiple_matching_appMetadata\";\r\nconst requestCannotBeMade = \"request_cannot_be_made\";\r\nconst cannotRemoveEmptyScope = \"cannot_remove_empty_scope\";\r\nconst cannotAppendScopeSet = \"cannot_append_scopeset\";\r\nconst emptyInputScopeSet = \"empty_input_scopeset\";\r\nconst deviceCodePollingCancelled = \"device_code_polling_cancelled\";\r\nconst deviceCodeExpired = \"device_code_expired\";\r\nconst deviceCodeUnknownError = \"device_code_unknown_error\";\r\nconst noAccountInSilentRequest = \"no_account_in_silent_request\";\r\nconst invalidCacheRecord = \"invalid_cache_record\";\r\nconst invalidCacheEnvironment = \"invalid_cache_environment\";\r\nconst noAccountFound = \"no_account_found\";\r\nconst noCryptoObject = \"no_crypto_object\";\r\nconst unexpectedCredentialType = \"unexpected_credential_type\";\r\nconst invalidAssertion = \"invalid_assertion\";\r\nconst invalidClientCredential = \"invalid_client_credential\";\r\nconst tokenRefreshRequired = \"token_refresh_required\";\r\nconst userTimeoutReached = \"user_timeout_reached\";\r\nconst tokenClaimsCnfRequiredForSignedJwt = \"token_claims_cnf_required_for_signedjwt\";\r\nconst authorizationCodeMissingFromServerResponse = \"authorization_code_missing_from_server_response\";\r\nconst bindingKeyNotRemoved = \"binding_key_not_removed\";\r\nconst endSessionEndpointNotSupported = \"end_session_endpoint_not_supported\";\r\nconst keyIdMissing = \"key_id_missing\";\r\nconst noNetworkConnectivity = \"no_network_connectivity\";\r\nconst userCanceled = \"user_canceled\";\r\nconst missingTenantIdError = \"missing_tenant_id_error\";\r\nconst methodNotImplemented = \"method_not_implemented\";\r\nconst nestedAppAuthBridgeDisabled = \"nested_app_auth_bridge_disabled\";\n\nvar ClientAuthErrorCodes = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    authTimeNotFound: authTimeNotFound,\n    authorizationCodeMissingFromServerResponse: authorizationCodeMissingFromServerResponse,\n    bindingKeyNotRemoved: bindingKeyNotRemoved,\n    cannotAppendScopeSet: cannotAppendScopeSet,\n    cannotRemoveEmptyScope: cannotRemoveEmptyScope,\n    clientInfoDecodingError: clientInfoDecodingError,\n    clientInfoEmptyError: clientInfoEmptyError,\n    deviceCodeExpired: deviceCodeExpired,\n    deviceCodePollingCancelled: deviceCodePollingCancelled,\n    deviceCodeUnknownError: deviceCodeUnknownError,\n    emptyInputScopeSet: emptyInputScopeSet,\n    endSessionEndpointNotSupported: endSessionEndpointNotSupported,\n    endpointResolutionError: endpointResolutionError,\n    hashNotDeserialized: hashNotDeserialized,\n    invalidAssertion: invalidAssertion,\n    invalidCacheEnvironment: invalidCacheEnvironment,\n    invalidCacheRecord: invalidCacheRecord,\n    invalidClientCredential: invalidClientCredential,\n    invalidState: invalidState,\n    keyIdMissing: keyIdMissing,\n    maxAgeTranspired: maxAgeTranspired,\n    methodNotImplemented: methodNotImplemented,\n    missingTenantIdError: missingTenantIdError,\n    multipleMatchingAccounts: multipleMatchingAccounts,\n    multipleMatchingAppMetadata: multipleMatchingAppMetadata,\n    multipleMatchingTokens: multipleMatchingTokens,\n    nestedAppAuthBridgeDisabled: nestedAppAuthBridgeDisabled,\n    networkError: networkError,\n    noAccountFound: noAccountFound,\n    noAccountInSilentRequest: noAccountInSilentRequest,\n    noCryptoObject: noCryptoObject,\n    noNetworkConnectivity: noNetworkConnectivity,\n    nonceMismatch: nonceMismatch,\n    nullOrEmptyToken: nullOrEmptyToken,\n    openIdConfigError: openIdConfigError,\n    requestCannotBeMade: requestCannotBeMade,\n    stateMismatch: stateMismatch,\n    stateNotFound: stateNotFound,\n    tokenClaimsCnfRequiredForSignedJwt: tokenClaimsCnfRequiredForSignedJwt,\n    tokenParsingError: tokenParsingError,\n    tokenRefreshRequired: tokenRefreshRequired,\n    unexpectedCredentialType: unexpectedCredentialType,\n    userCanceled: userCanceled,\n    userTimeoutReached: userTimeoutReached\n});\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * ClientAuthErrorMessage class containing string constants used by error codes and messages.\r\n */\r\nconst ClientAuthErrorMessages = {\r\n    [clientInfoDecodingError]: \"The client info could not be parsed/decoded correctly\",\r\n    [clientInfoEmptyError]: \"The client info was empty\",\r\n    [tokenParsingError]: \"Token cannot be parsed\",\r\n    [nullOrEmptyToken]: \"The token is null or empty\",\r\n    [endpointResolutionError]: \"Endpoints cannot be resolved\",\r\n    [networkError]: \"Network request failed\",\r\n    [openIdConfigError]: \"Could not retrieve endpoints. Check your authority and verify the .well-known/openid-configuration endpoint returns the required endpoints.\",\r\n    [hashNotDeserialized]: \"The hash parameters could not be deserialized\",\r\n    [invalidState]: \"State was not the expected format\",\r\n    [stateMismatch]: \"State mismatch error\",\r\n    [stateNotFound]: \"State not found\",\r\n    [nonceMismatch]: \"Nonce mismatch error\",\r\n    [authTimeNotFound]: \"Max Age was requested and the ID token is missing the auth_time variable.\" +\r\n        \" auth_time is an optional claim and is not enabled by default - it must be enabled.\" +\r\n        \" See https://aka.ms/msaljs/optional-claims for more information.\",\r\n    [maxAgeTranspired]: \"Max Age is set to 0, or too much time has elapsed since the last end-user authentication.\",\r\n    [multipleMatchingTokens]: \"The cache contains multiple tokens satisfying the requirements. \" +\r\n        \"Call AcquireToken again providing more requirements such as authority or account.\",\r\n    [multipleMatchingAccounts]: \"The cache contains multiple accounts satisfying the given parameters. Please pass more info to obtain the correct account\",\r\n    [multipleMatchingAppMetadata]: \"The cache contains multiple appMetadata satisfying the given parameters. Please pass more info to obtain the correct appMetadata\",\r\n    [requestCannotBeMade]: \"Token request cannot be made without authorization code or refresh token.\",\r\n    [cannotRemoveEmptyScope]: \"Cannot remove null or empty scope from ScopeSet\",\r\n    [cannotAppendScopeSet]: \"Cannot append ScopeSet\",\r\n    [emptyInputScopeSet]: \"Empty input ScopeSet cannot be processed\",\r\n    [deviceCodePollingCancelled]: \"Caller has cancelled token endpoint polling during device code flow by setting DeviceCodeRequest.cancel = true.\",\r\n    [deviceCodeExpired]: \"Device code is expired.\",\r\n    [deviceCodeUnknownError]: \"Device code stopped polling for unknown reasons.\",\r\n    [noAccountInSilentRequest]: \"Please pass an account object, silent flow is not supported without account information\",\r\n    [invalidCacheRecord]: \"Cache record object was null or undefined.\",\r\n    [invalidCacheEnvironment]: \"Invalid environment when attempting to create cache entry\",\r\n    [noAccountFound]: \"No account found in cache for given key.\",\r\n    [noCryptoObject]: \"No crypto object detected.\",\r\n    [unexpectedCredentialType]: \"Unexpected credential type.\",\r\n    [invalidAssertion]: \"Client assertion must meet requirements described in https://tools.ietf.org/html/rfc7515\",\r\n    [invalidClientCredential]: \"Client credential (secret, certificate, or assertion) must not be empty when creating a confidential client. An application should at most have one credential\",\r\n    [tokenRefreshRequired]: \"Cannot return token from cache because it must be refreshed. This may be due to one of the following reasons: forceRefresh parameter is set to true, claims have been requested, there is no cached access token or it is expired.\",\r\n    [userTimeoutReached]: \"User defined timeout for device code polling reached\",\r\n    [tokenClaimsCnfRequiredForSignedJwt]: \"Cannot generate a POP jwt if the token_claims are not populated\",\r\n    [authorizationCodeMissingFromServerResponse]: \"Server response does not contain an authorization code to proceed\",\r\n    [bindingKeyNotRemoved]: \"Could not remove the credential's binding key from storage.\",\r\n    [endSessionEndpointNotSupported]: \"The provided authority does not support logout\",\r\n    [keyIdMissing]: \"A keyId value is missing from the requested bound token's cache record and is required to match the token to it's stored binding key.\",\r\n    [noNetworkConnectivity]: \"No network connectivity. Check your internet connection.\",\r\n    [userCanceled]: \"User cancelled the flow.\",\r\n    [missingTenantIdError]: \"A tenant id - not common, organizations, or consumers - must be specified when using the client_credentials flow.\",\r\n    [methodNotImplemented]: \"This method has not been implemented\",\r\n    [nestedAppAuthBridgeDisabled]: \"The nested app auth bridge is disabled\",\r\n};\r\n/**\r\n * String constants used by error codes and messages.\r\n * @deprecated Use ClientAuthErrorCodes instead\r\n */\r\nconst ClientAuthErrorMessage = {\r\n    clientInfoDecodingError: {\r\n        code: clientInfoDecodingError,\r\n        desc: ClientAuthErrorMessages[clientInfoDecodingError],\r\n    },\r\n    clientInfoEmptyError: {\r\n        code: clientInfoEmptyError,\r\n        desc: ClientAuthErrorMessages[clientInfoEmptyError],\r\n    },\r\n    tokenParsingError: {\r\n        code: tokenParsingError,\r\n        desc: ClientAuthErrorMessages[tokenParsingError],\r\n    },\r\n    nullOrEmptyToken: {\r\n        code: nullOrEmptyToken,\r\n        desc: ClientAuthErrorMessages[nullOrEmptyToken],\r\n    },\r\n    endpointResolutionError: {\r\n        code: endpointResolutionError,\r\n        desc: ClientAuthErrorMessages[endpointResolutionError],\r\n    },\r\n    networkError: {\r\n        code: networkError,\r\n        desc: ClientAuthErrorMessages[networkError],\r\n    },\r\n    unableToGetOpenidConfigError: {\r\n        code: openIdConfigError,\r\n        desc: ClientAuthErrorMessages[openIdConfigError],\r\n    },\r\n    hashNotDeserialized: {\r\n        code: hashNotDeserialized,\r\n        desc: ClientAuthErrorMessages[hashNotDeserialized],\r\n    },\r\n    invalidStateError: {\r\n        code: invalidState,\r\n        desc: ClientAuthErrorMessages[invalidState],\r\n    },\r\n    stateMismatchError: {\r\n        code: stateMismatch,\r\n        desc: ClientAuthErrorMessages[stateMismatch],\r\n    },\r\n    stateNotFoundError: {\r\n        code: stateNotFound,\r\n        desc: ClientAuthErrorMessages[stateNotFound],\r\n    },\r\n    nonceMismatchError: {\r\n        code: nonceMismatch,\r\n        desc: ClientAuthErrorMessages[nonceMismatch],\r\n    },\r\n    authTimeNotFoundError: {\r\n        code: authTimeNotFound,\r\n        desc: ClientAuthErrorMessages[authTimeNotFound],\r\n    },\r\n    maxAgeTranspired: {\r\n        code: maxAgeTranspired,\r\n        desc: ClientAuthErrorMessages[maxAgeTranspired],\r\n    },\r\n    multipleMatchingTokens: {\r\n        code: multipleMatchingTokens,\r\n        desc: ClientAuthErrorMessages[multipleMatchingTokens],\r\n    },\r\n    multipleMatchingAccounts: {\r\n        code: multipleMatchingAccounts,\r\n        desc: ClientAuthErrorMessages[multipleMatchingAccounts],\r\n    },\r\n    multipleMatchingAppMetadata: {\r\n        code: multipleMatchingAppMetadata,\r\n        desc: ClientAuthErrorMessages[multipleMatchingAppMetadata],\r\n    },\r\n    tokenRequestCannotBeMade: {\r\n        code: requestCannotBeMade,\r\n        desc: ClientAuthErrorMessages[requestCannotBeMade],\r\n    },\r\n    removeEmptyScopeError: {\r\n        code: cannotRemoveEmptyScope,\r\n        desc: ClientAuthErrorMessages[cannotRemoveEmptyScope],\r\n    },\r\n    appendScopeSetError: {\r\n        code: cannotAppendScopeSet,\r\n        desc: ClientAuthErrorMessages[cannotAppendScopeSet],\r\n    },\r\n    emptyInputScopeSetError: {\r\n        code: emptyInputScopeSet,\r\n        desc: ClientAuthErrorMessages[emptyInputScopeSet],\r\n    },\r\n    DeviceCodePollingCancelled: {\r\n        code: deviceCodePollingCancelled,\r\n        desc: ClientAuthErrorMessages[deviceCodePollingCancelled],\r\n    },\r\n    DeviceCodeExpired: {\r\n        code: deviceCodeExpired,\r\n        desc: ClientAuthErrorMessages[deviceCodeExpired],\r\n    },\r\n    DeviceCodeUnknownError: {\r\n        code: deviceCodeUnknownError,\r\n        desc: ClientAuthErrorMessages[deviceCodeUnknownError],\r\n    },\r\n    NoAccountInSilentRequest: {\r\n        code: noAccountInSilentRequest,\r\n        desc: ClientAuthErrorMessages[noAccountInSilentRequest],\r\n    },\r\n    invalidCacheRecord: {\r\n        code: invalidCacheRecord,\r\n        desc: ClientAuthErrorMessages[invalidCacheRecord],\r\n    },\r\n    invalidCacheEnvironment: {\r\n        code: invalidCacheEnvironment,\r\n        desc: ClientAuthErrorMessages[invalidCacheEnvironment],\r\n    },\r\n    noAccountFound: {\r\n        code: noAccountFound,\r\n        desc: ClientAuthErrorMessages[noAccountFound],\r\n    },\r\n    noCryptoObj: {\r\n        code: noCryptoObject,\r\n        desc: ClientAuthErrorMessages[noCryptoObject],\r\n    },\r\n    unexpectedCredentialType: {\r\n        code: unexpectedCredentialType,\r\n        desc: ClientAuthErrorMessages[unexpectedCredentialType],\r\n    },\r\n    invalidAssertion: {\r\n        code: invalidAssertion,\r\n        desc: ClientAuthErrorMessages[invalidAssertion],\r\n    },\r\n    invalidClientCredential: {\r\n        code: invalidClientCredential,\r\n        desc: ClientAuthErrorMessages[invalidClientCredential],\r\n    },\r\n    tokenRefreshRequired: {\r\n        code: tokenRefreshRequired,\r\n        desc: ClientAuthErrorMessages[tokenRefreshRequired],\r\n    },\r\n    userTimeoutReached: {\r\n        code: userTimeoutReached,\r\n        desc: ClientAuthErrorMessages[userTimeoutReached],\r\n    },\r\n    tokenClaimsRequired: {\r\n        code: tokenClaimsCnfRequiredForSignedJwt,\r\n        desc: ClientAuthErrorMessages[tokenClaimsCnfRequiredForSignedJwt],\r\n    },\r\n    noAuthorizationCodeFromServer: {\r\n        code: authorizationCodeMissingFromServerResponse,\r\n        desc: ClientAuthErrorMessages[authorizationCodeMissingFromServerResponse],\r\n    },\r\n    bindingKeyNotRemovedError: {\r\n        code: bindingKeyNotRemoved,\r\n        desc: ClientAuthErrorMessages[bindingKeyNotRemoved],\r\n    },\r\n    logoutNotSupported: {\r\n        code: endSessionEndpointNotSupported,\r\n        desc: ClientAuthErrorMessages[endSessionEndpointNotSupported],\r\n    },\r\n    keyIdMissing: {\r\n        code: keyIdMissing,\r\n        desc: ClientAuthErrorMessages[keyIdMissing],\r\n    },\r\n    noNetworkConnectivity: {\r\n        code: noNetworkConnectivity,\r\n        desc: ClientAuthErrorMessages[noNetworkConnectivity],\r\n    },\r\n    userCanceledError: {\r\n        code: userCanceled,\r\n        desc: ClientAuthErrorMessages[userCanceled],\r\n    },\r\n    missingTenantIdError: {\r\n        code: missingTenantIdError,\r\n        desc: ClientAuthErrorMessages[missingTenantIdError],\r\n    },\r\n    nestedAppAuthBridgeDisabled: {\r\n        code: nestedAppAuthBridgeDisabled,\r\n        desc: ClientAuthErrorMessages[nestedAppAuthBridgeDisabled],\r\n    },\r\n};\r\n/**\r\n * Error thrown when there is an error in the client code running on the browser.\r\n */\r\nclass ClientAuthError extends AuthError {\r\n    constructor(errorCode, additionalMessage) {\r\n        super(errorCode, additionalMessage\r\n            ? `${ClientAuthErrorMessages[errorCode]}: ${additionalMessage}`\r\n            : ClientAuthErrorMessages[errorCode]);\r\n        this.name = \"ClientAuthError\";\r\n        Object.setPrototypeOf(this, ClientAuthError.prototype);\r\n    }\r\n}\r\nfunction createClientAuthError(errorCode, additionalMessage) {\r\n    return new ClientAuthError(errorCode, additionalMessage);\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Extract token by decoding the rawToken\r\n *\r\n * @param encodedToken\r\n */\r\nfunction extractTokenClaims(encodedToken, base64Decode) {\r\n    const jswPayload = getJWSPayload(encodedToken);\r\n    // token will be decoded to get the username\r\n    try {\r\n        // base64Decode() should throw an error if there is an issue\r\n        const base64Decoded = base64Decode(jswPayload);\r\n        return JSON.parse(base64Decoded);\r\n    }\r\n    catch (err) {\r\n        throw createClientAuthError(tokenParsingError);\r\n    }\r\n}\r\n/**\r\n * decode a JWT\r\n *\r\n * @param authToken\r\n */\r\nfunction getJWSPayload(authToken) {\r\n    if (!authToken) {\r\n        throw createClientAuthError(nullOrEmptyToken);\r\n    }\r\n    const tokenPartsRegex = /^([^\\.\\s]*)\\.([^\\.\\s]+)\\.([^\\.\\s]*)$/;\r\n    const matches = tokenPartsRegex.exec(authToken);\r\n    if (!matches || matches.length < 4) {\r\n        throw createClientAuthError(tokenParsingError);\r\n    }\r\n    /**\r\n     * const crackedToken = {\r\n     *  header: matches[1],\r\n     *  JWSPayload: matches[2],\r\n     *  JWSSig: matches[3],\r\n     * };\r\n     */\r\n    return matches[2];\r\n}\r\n/**\r\n * Determine if the token's max_age has transpired\r\n */\r\nfunction checkMaxAge(authTime, maxAge) {\r\n    /*\r\n     * per https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest\r\n     * To force an immediate re-authentication: If an app requires that a user re-authenticate prior to access,\r\n     * provide a value of 0 for the max_age parameter and the AS will force a fresh login.\r\n     */\r\n    const fiveMinuteSkew = 300000; // five minutes in milliseconds\r\n    if (maxAge === 0 || Date.now() - fiveMinuteSkew > authTime + maxAge) {\r\n        throw createClientAuthError(maxAgeTranspired);\r\n    }\r\n}\n\nvar AuthToken = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    checkMaxAge: checkMaxAge,\n    extractTokenClaims: extractTokenClaims,\n    getJWSPayload: getJWSPayload\n});\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Authority types supported by MSAL.\r\n */\r\nconst AuthorityType = {\r\n    Default: 0,\r\n    Adfs: 1,\r\n    Dsts: 2,\r\n    Ciam: 3,\r\n};\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nfunction isOpenIdConfigResponse(response) {\r\n    return (response.hasOwnProperty(\"authorization_endpoint\") &&\r\n        response.hasOwnProperty(\"token_endpoint\") &&\r\n        response.hasOwnProperty(\"issuer\") &&\r\n        response.hasOwnProperty(\"jwks_uri\"));\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst redirectUriEmpty = \"redirect_uri_empty\";\r\nconst claimsRequestParsingError = \"claims_request_parsing_error\";\r\nconst authorityUriInsecure = \"authority_uri_insecure\";\r\nconst urlParseError = \"url_parse_error\";\r\nconst urlEmptyError = \"empty_url_error\";\r\nconst emptyInputScopesError = \"empty_input_scopes_error\";\r\nconst invalidClaims = \"invalid_claims\";\r\nconst tokenRequestEmpty = \"token_request_empty\";\r\nconst logoutRequestEmpty = \"logout_request_empty\";\r\nconst invalidCodeChallengeMethod = \"invalid_code_challenge_method\";\r\nconst pkceParamsMissing = \"pkce_params_missing\";\r\nconst invalidCloudDiscoveryMetadata = \"invalid_cloud_discovery_metadata\";\r\nconst invalidAuthorityMetadata = \"invalid_authority_metadata\";\r\nconst untrustedAuthority = \"untrusted_authority\";\r\nconst missingSshJwk = \"missing_ssh_jwk\";\r\nconst missingSshKid = \"missing_ssh_kid\";\r\nconst missingNonceAuthenticationHeader = \"missing_nonce_authentication_header\";\r\nconst invalidAuthenticationHeader = \"invalid_authentication_header\";\r\nconst cannotSetOIDCOptions = \"cannot_set_OIDCOptions\";\r\nconst cannotAllowPlatformBroker = \"cannot_allow_platform_broker\";\r\nconst authorityMismatch = \"authority_mismatch\";\r\nconst invalidRequestMethodForEAR = \"invalid_request_method_for_EAR\";\r\nconst invalidAuthorizePostBodyParameters = \"invalid_authorize_post_body_parameters\";\n\nvar ClientConfigurationErrorCodes = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    authorityMismatch: authorityMismatch,\n    authorityUriInsecure: authorityUriInsecure,\n    cannotAllowPlatformBroker: cannotAllowPlatformBroker,\n    cannotSetOIDCOptions: cannotSetOIDCOptions,\n    claimsRequestParsingError: claimsRequestParsingError,\n    emptyInputScopesError: emptyInputScopesError,\n    invalidAuthenticationHeader: invalidAuthenticationHeader,\n    invalidAuthorityMetadata: invalidAuthorityMetadata,\n    invalidAuthorizePostBodyParameters: invalidAuthorizePostBodyParameters,\n    invalidClaims: invalidClaims,\n    invalidCloudDiscoveryMetadata: invalidCloudDiscoveryMetadata,\n    invalidCodeChallengeMethod: invalidCodeChallengeMethod,\n    invalidRequestMethodForEAR: invalidRequestMethodForEAR,\n    logoutRequestEmpty: logoutRequestEmpty,\n    missingNonceAuthenticationHeader: missingNonceAuthenticationHeader,\n    missingSshJwk: missingSshJwk,\n    missingSshKid: missingSshKid,\n    pkceParamsMissing: pkceParamsMissing,\n    redirectUriEmpty: redirectUriEmpty,\n    tokenRequestEmpty: tokenRequestEmpty,\n    untrustedAuthority: untrustedAuthority,\n    urlEmptyError: urlEmptyError,\n    urlParseError: urlParseError\n});\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst ClientConfigurationErrorMessages = {\r\n    [redirectUriEmpty]: \"A redirect URI is required for all calls, and none has been set.\",\r\n    [claimsRequestParsingError]: \"Could not parse the given claims request object.\",\r\n    [authorityUriInsecure]: \"Authority URIs must use https.  Please see here for valid authority configuration options: https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-js-initializing-client-applications#configuration-options\",\r\n    [urlParseError]: \"URL could not be parsed into appropriate segments.\",\r\n    [urlEmptyError]: \"URL was empty or null.\",\r\n    [emptyInputScopesError]: \"Scopes cannot be passed as null, undefined or empty array because they are required to obtain an access token.\",\r\n    [invalidClaims]: \"Given claims parameter must be a stringified JSON object.\",\r\n    [tokenRequestEmpty]: \"Token request was empty and not found in cache.\",\r\n    [logoutRequestEmpty]: \"The logout request was null or undefined.\",\r\n    [invalidCodeChallengeMethod]: 'code_challenge_method passed is invalid. Valid values are \"plain\" and \"S256\".',\r\n    [pkceParamsMissing]: \"Both params: code_challenge and code_challenge_method are to be passed if to be sent in the request\",\r\n    [invalidCloudDiscoveryMetadata]: \"Invalid cloudDiscoveryMetadata provided. Must be a stringified JSON object containing tenant_discovery_endpoint and metadata fields\",\r\n    [invalidAuthorityMetadata]: \"Invalid authorityMetadata provided. Must by a stringified JSON object containing authorization_endpoint, token_endpoint, issuer fields.\",\r\n    [untrustedAuthority]: \"The provided authority is not a trusted authority. Please include this authority in the knownAuthorities config parameter.\",\r\n    [missingSshJwk]: \"Missing sshJwk in SSH certificate request. A stringified JSON Web Key is required when using the SSH authentication scheme.\",\r\n    [missingSshKid]: \"Missing sshKid in SSH certificate request. A string that uniquely identifies the public SSH key is required when using the SSH authentication scheme.\",\r\n    [missingNonceAuthenticationHeader]: \"Unable to find an authentication header containing server nonce. Either the Authentication-Info or WWW-Authenticate headers must be present in order to obtain a server nonce.\",\r\n    [invalidAuthenticationHeader]: \"Invalid authentication header provided\",\r\n    [cannotSetOIDCOptions]: \"Cannot set OIDCOptions parameter. Please change the protocol mode to OIDC or use a non-Microsoft authority.\",\r\n    [cannotAllowPlatformBroker]: \"Cannot set allowPlatformBroker parameter to true when not in AAD protocol mode.\",\r\n    [authorityMismatch]: \"Authority mismatch error. Authority provided in login request or PublicClientApplication config does not match the environment of the provided account. Please use a matching account or make an interactive request to login to this authority.\",\r\n    [invalidAuthorizePostBodyParameters]: \"Invalid authorize post body parameters provided. If you are using authorizePostBodyParameters, the request method must be POST. Please check the request method and parameters.\",\r\n    [invalidRequestMethodForEAR]: \"Invalid request method for EAR protocol mode. The request method cannot be GET when using EAR protocol mode. Please change the request method to POST.\",\r\n};\r\n/**\r\n * ClientConfigurationErrorMessage class containing string constants used by error codes and messages.\r\n * @deprecated Use ClientConfigurationErrorCodes instead\r\n */\r\nconst ClientConfigurationErrorMessage = {\r\n    redirectUriNotSet: {\r\n        code: redirectUriEmpty,\r\n        desc: ClientConfigurationErrorMessages[redirectUriEmpty],\r\n    },\r\n    claimsRequestParsingError: {\r\n        code: claimsRequestParsingError,\r\n        desc: ClientConfigurationErrorMessages[claimsRequestParsingError],\r\n    },\r\n    authorityUriInsecure: {\r\n        code: authorityUriInsecure,\r\n        desc: ClientConfigurationErrorMessages[authorityUriInsecure],\r\n    },\r\n    urlParseError: {\r\n        code: urlParseError,\r\n        desc: ClientConfigurationErrorMessages[urlParseError],\r\n    },\r\n    urlEmptyError: {\r\n        code: urlEmptyError,\r\n        desc: ClientConfigurationErrorMessages[urlEmptyError],\r\n    },\r\n    emptyScopesError: {\r\n        code: emptyInputScopesError,\r\n        desc: ClientConfigurationErrorMessages[emptyInputScopesError],\r\n    },\r\n    invalidClaimsRequest: {\r\n        code: invalidClaims,\r\n        desc: ClientConfigurationErrorMessages[invalidClaims],\r\n    },\r\n    tokenRequestEmptyError: {\r\n        code: tokenRequestEmpty,\r\n        desc: ClientConfigurationErrorMessages[tokenRequestEmpty],\r\n    },\r\n    logoutRequestEmptyError: {\r\n        code: logoutRequestEmpty,\r\n        desc: ClientConfigurationErrorMessages[logoutRequestEmpty],\r\n    },\r\n    invalidCodeChallengeMethod: {\r\n        code: invalidCodeChallengeMethod,\r\n        desc: ClientConfigurationErrorMessages[invalidCodeChallengeMethod],\r\n    },\r\n    invalidCodeChallengeParams: {\r\n        code: pkceParamsMissing,\r\n        desc: ClientConfigurationErrorMessages[pkceParamsMissing],\r\n    },\r\n    invalidCloudDiscoveryMetadata: {\r\n        code: invalidCloudDiscoveryMetadata,\r\n        desc: ClientConfigurationErrorMessages[invalidCloudDiscoveryMetadata],\r\n    },\r\n    invalidAuthorityMetadata: {\r\n        code: invalidAuthorityMetadata,\r\n        desc: ClientConfigurationErrorMessages[invalidAuthorityMetadata],\r\n    },\r\n    untrustedAuthority: {\r\n        code: untrustedAuthority,\r\n        desc: ClientConfigurationErrorMessages[untrustedAuthority],\r\n    },\r\n    missingSshJwk: {\r\n        code: missingSshJwk,\r\n        desc: ClientConfigurationErrorMessages[missingSshJwk],\r\n    },\r\n    missingSshKid: {\r\n        code: missingSshKid,\r\n        desc: ClientConfigurationErrorMessages[missingSshKid],\r\n    },\r\n    missingNonceAuthenticationHeader: {\r\n        code: missingNonceAuthenticationHeader,\r\n        desc: ClientConfigurationErrorMessages[missingNonceAuthenticationHeader],\r\n    },\r\n    invalidAuthenticationHeader: {\r\n        code: invalidAuthenticationHeader,\r\n        desc: ClientConfigurationErrorMessages[invalidAuthenticationHeader],\r\n    },\r\n    cannotSetOIDCOptions: {\r\n        code: cannotSetOIDCOptions,\r\n        desc: ClientConfigurationErrorMessages[cannotSetOIDCOptions],\r\n    },\r\n    cannotAllowPlatformBroker: {\r\n        code: cannotAllowPlatformBroker,\r\n        desc: ClientConfigurationErrorMessages[cannotAllowPlatformBroker],\r\n    },\r\n    authorityMismatch: {\r\n        code: authorityMismatch,\r\n        desc: ClientConfigurationErrorMessages[authorityMismatch],\r\n    },\r\n    invalidAuthorizePostBodyParameters: {\r\n        code: invalidAuthorizePostBodyParameters,\r\n        desc: ClientConfigurationErrorMessages[invalidAuthorizePostBodyParameters],\r\n    },\r\n    invalidRequestMethodForEAR: {\r\n        code: invalidRequestMethodForEAR,\r\n        desc: ClientConfigurationErrorMessages[invalidRequestMethodForEAR],\r\n    },\r\n};\r\n/**\r\n * Error thrown when there is an error in configuration of the MSAL.js library.\r\n */\r\nclass ClientConfigurationError extends AuthError {\r\n    constructor(errorCode) {\r\n        super(errorCode, ClientConfigurationErrorMessages[errorCode]);\r\n        this.name = \"ClientConfigurationError\";\r\n        Object.setPrototypeOf(this, ClientConfigurationError.prototype);\r\n    }\r\n}\r\nfunction createClientConfigurationError(errorCode) {\r\n    return new ClientConfigurationError(errorCode);\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * @hidden\r\n */\r\nclass StringUtils {\r\n    /**\r\n     * Check if stringified object is empty\r\n     * @param strObj\r\n     */\r\n    static isEmptyObj(strObj) {\r\n        if (strObj) {\r\n            try {\r\n                const obj = JSON.parse(strObj);\r\n                return Object.keys(obj).length === 0;\r\n            }\r\n            catch (e) { }\r\n        }\r\n        return true;\r\n    }\r\n    static startsWith(str, search) {\r\n        return str.indexOf(search) === 0;\r\n    }\r\n    static endsWith(str, search) {\r\n        return (str.length >= search.length &&\r\n            str.lastIndexOf(search) === str.length - search.length);\r\n    }\r\n    /**\r\n     * Parses string into an object.\r\n     *\r\n     * @param query\r\n     */\r\n    static queryStringToObject(query) {\r\n        const obj = {};\r\n        const params = query.split(\"&\");\r\n        const decode = (s) => decodeURIComponent(s.replace(/\\+/g, \" \"));\r\n        params.forEach((pair) => {\r\n            if (pair.trim()) {\r\n                const [key, value] = pair.split(/=(.+)/g, 2); // Split on the first occurence of the '=' character\r\n                if (key && value) {\r\n                    obj[decode(key)] = decode(value);\r\n                }\r\n            }\r\n        });\r\n        return obj;\r\n    }\r\n    /**\r\n     * Trims entries in an array.\r\n     *\r\n     * @param arr\r\n     */\r\n    static trimArrayEntries(arr) {\r\n        return arr.map((entry) => entry.trim());\r\n    }\r\n    /**\r\n     * Removes empty strings from array\r\n     * @param arr\r\n     */\r\n    static removeEmptyStringsFromArray(arr) {\r\n        return arr.filter((entry) => {\r\n            return !!entry;\r\n        });\r\n    }\r\n    /**\r\n     * Attempts to parse a string into JSON\r\n     * @param str\r\n     */\r\n    static jsonParseHelper(str) {\r\n        try {\r\n            return JSON.parse(str);\r\n        }\r\n        catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Tests if a given string matches a given pattern, with support for wildcards and queries.\r\n     * @param pattern Wildcard pattern to string match. Supports \"*\" for wildcards and \"?\" for queries\r\n     * @param input String to match against\r\n     */\r\n    static matchPattern(pattern, input) {\r\n        /**\r\n         * Wildcard support: https://stackoverflow.com/a/3117248/4888559\r\n         * Queries: replaces \"?\" in string with escaped \"\\?\" for regex test\r\n         */\r\n        // eslint-disable-next-line security/detect-non-literal-regexp\r\n        const regex = new RegExp(pattern\r\n            .replace(/\\\\/g, \"\\\\\\\\\")\r\n            .replace(/\\*/g, \"[^ ]*\")\r\n            .replace(/\\?/g, \"\\\\?\"));\r\n        return regex.test(input);\r\n    }\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Canonicalizes a URL by making it lowercase and ensuring it ends with /\r\n * Inlined version of UrlString.canonicalizeUri to avoid circular dependency\r\n * @param url - URL to canonicalize\r\n * @returns Canonicalized URL\r\n */\r\nfunction canonicalizeUrl(url) {\r\n    if (!url) {\r\n        return url;\r\n    }\r\n    let lowerCaseUrl = url.toLowerCase();\r\n    if (StringUtils.endsWith(lowerCaseUrl, \"?\")) {\r\n        lowerCaseUrl = lowerCaseUrl.slice(0, -1);\r\n    }\r\n    else if (StringUtils.endsWith(lowerCaseUrl, \"?/\")) {\r\n        lowerCaseUrl = lowerCaseUrl.slice(0, -2);\r\n    }\r\n    if (!StringUtils.endsWith(lowerCaseUrl, \"/\")) {\r\n        lowerCaseUrl += \"/\";\r\n    }\r\n    return lowerCaseUrl;\r\n}\r\n/**\r\n * Parses hash string from given string. Returns empty string if no hash symbol is found.\r\n * @param hashString\r\n */\r\nfunction stripLeadingHashOrQuery(responseString) {\r\n    if (responseString.startsWith(\"#/\")) {\r\n        return responseString.substring(2);\r\n    }\r\n    else if (responseString.startsWith(\"#\") ||\r\n        responseString.startsWith(\"?\")) {\r\n        return responseString.substring(1);\r\n    }\r\n    return responseString;\r\n}\r\n/**\r\n * Returns URL hash as server auth code response object.\r\n */\r\nfunction getDeserializedResponse(responseString) {\r\n    // Check if given hash is empty\r\n    if (!responseString || responseString.indexOf(\"=\") < 0) {\r\n        return null;\r\n    }\r\n    try {\r\n        // Strip the # or ? symbol if present\r\n        const normalizedResponse = stripLeadingHashOrQuery(responseString);\r\n        // If # symbol was not present, above will return empty string, so give original hash value\r\n        const deserializedHash = Object.fromEntries(new URLSearchParams(normalizedResponse));\r\n        // Check for known response properties\r\n        if (deserializedHash.code ||\r\n            deserializedHash.ear_jwe ||\r\n            deserializedHash.error ||\r\n            deserializedHash.error_description ||\r\n            deserializedHash.state) {\r\n            return deserializedHash;\r\n        }\r\n    }\r\n    catch (e) {\r\n        throw createClientAuthError(hashNotDeserialized);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Utility to create a URL from the params map\r\n */\r\nfunction mapToQueryString(parameters, encodeExtraParams = true, extraQueryParameters) {\r\n    const queryParameterArray = new Array();\r\n    parameters.forEach((value, key) => {\r\n        if (!encodeExtraParams &&\r\n            extraQueryParameters &&\r\n            key in extraQueryParameters) {\r\n            queryParameterArray.push(`${key}=${value}`);\r\n        }\r\n        else {\r\n            queryParameterArray.push(`${key}=${encodeURIComponent(value)}`);\r\n        }\r\n    });\r\n    return queryParameterArray.join(\"&\");\r\n}\r\n/**\r\n * Normalizes URLs for comparison by removing hash, canonicalizing,\r\n * and ensuring consistent URL encoding in query parameters.\r\n * This fixes redirect loops when URLs contain encoded characters like apostrophes (%27).\r\n * @param url - URL to normalize\r\n * @returns Normalized URL string for comparison\r\n */\r\nfunction normalizeUrlForComparison(url) {\r\n    if (!url) {\r\n        return url;\r\n    }\r\n    // Remove hash first\r\n    const urlWithoutHash = url.split(\"#\")[0];\r\n    try {\r\n        // Parse the URL to handle encoding consistently\r\n        const urlObj = new URL(urlWithoutHash);\r\n        /*\r\n         * Reconstruct the URL with properly decoded query parameters\r\n         * This ensures that %27 and ' are treated as equivalent\r\n         */\r\n        const normalizedUrl = urlObj.origin + urlObj.pathname + urlObj.search;\r\n        // Apply canonicalization logic inline to avoid circular dependency\r\n        return canonicalizeUrl(normalizedUrl);\r\n    }\r\n    catch (e) {\r\n        // Fallback to original logic if URL parsing fails\r\n        return canonicalizeUrl(urlWithoutHash);\r\n    }\r\n}\n\nvar UrlUtils = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    getDeserializedResponse: getDeserializedResponse,\n    mapToQueryString: mapToQueryString,\n    normalizeUrlForComparison: normalizeUrlForComparison,\n    stripLeadingHashOrQuery: stripLeadingHashOrQuery\n});\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Url object class which can perform various transformations on url strings.\r\n */\r\nclass UrlString {\r\n    get urlString() {\r\n        return this._urlString;\r\n    }\r\n    constructor(url) {\r\n        this._urlString = url;\r\n        if (!this._urlString) {\r\n            // Throws error if url is empty\r\n            throw createClientConfigurationError(urlEmptyError);\r\n        }\r\n        if (!url.includes(\"#\")) {\r\n            this._urlString = UrlString.canonicalizeUri(url);\r\n        }\r\n    }\r\n    /**\r\n     * Ensure urls are lower case and end with a / character.\r\n     * @param url\r\n     */\r\n    static canonicalizeUri(url) {\r\n        if (url) {\r\n            let lowerCaseUrl = url.toLowerCase();\r\n            if (StringUtils.endsWith(lowerCaseUrl, \"?\")) {\r\n                lowerCaseUrl = lowerCaseUrl.slice(0, -1);\r\n            }\r\n            else if (StringUtils.endsWith(lowerCaseUrl, \"?/\")) {\r\n                lowerCaseUrl = lowerCaseUrl.slice(0, -2);\r\n            }\r\n            if (!StringUtils.endsWith(lowerCaseUrl, \"/\")) {\r\n                lowerCaseUrl += \"/\";\r\n            }\r\n            return lowerCaseUrl;\r\n        }\r\n        return url;\r\n    }\r\n    /**\r\n     * Throws if urlString passed is not a valid authority URI string.\r\n     */\r\n    validateAsUri() {\r\n        // Attempts to parse url for uri components\r\n        let components;\r\n        try {\r\n            components = this.getUrlComponents();\r\n        }\r\n        catch (e) {\r\n            throw createClientConfigurationError(urlParseError);\r\n        }\r\n        // Throw error if URI or path segments are not parseable.\r\n        if (!components.HostNameAndPort || !components.PathSegments) {\r\n            throw createClientConfigurationError(urlParseError);\r\n        }\r\n        // Throw error if uri is insecure.\r\n        if (!components.Protocol ||\r\n            components.Protocol.toLowerCase() !== \"https:\") {\r\n            throw createClientConfigurationError(authorityUriInsecure);\r\n        }\r\n    }\r\n    /**\r\n     * Given a url and a query string return the url with provided query string appended\r\n     * @param url\r\n     * @param queryString\r\n     */\r\n    static appendQueryString(url, queryString) {\r\n        if (!queryString) {\r\n            return url;\r\n        }\r\n        return url.indexOf(\"?\") < 0\r\n            ? `${url}?${queryString}`\r\n            : `${url}&${queryString}`;\r\n    }\r\n    /**\r\n     * Returns a url with the hash removed\r\n     * @param url\r\n     */\r\n    static removeHashFromUrl(url) {\r\n        return UrlString.canonicalizeUri(url.split(\"#\")[0]);\r\n    }\r\n    /**\r\n     * Given a url like https://a:b/common/d?e=f#g, and a tenantId, returns https://a:b/tenantId/d\r\n     * @param href The url\r\n     * @param tenantId The tenant id to replace\r\n     */\r\n    replaceTenantPath(tenantId) {\r\n        const urlObject = this.getUrlComponents();\r\n        const pathArray = urlObject.PathSegments;\r\n        if (tenantId &&\r\n            pathArray.length !== 0 &&\r\n            (pathArray[0] === AADAuthorityConstants.COMMON ||\r\n                pathArray[0] === AADAuthorityConstants.ORGANIZATIONS)) {\r\n            pathArray[0] = tenantId;\r\n        }\r\n        return UrlString.constructAuthorityUriFromObject(urlObject);\r\n    }\r\n    /**\r\n     * Parses out the components from a url string.\r\n     * @returns An object with the various components. Please cache this value insted of calling this multiple times on the same url.\r\n     */\r\n    getUrlComponents() {\r\n        // https://gist.github.com/curtisz/11139b2cfcaef4a261e0\r\n        const regEx = RegExp(\"^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?(#(.*))?\");\r\n        // If url string does not match regEx, we throw an error\r\n        const match = this.urlString.match(regEx);\r\n        if (!match) {\r\n            throw createClientConfigurationError(urlParseError);\r\n        }\r\n        // Url component object\r\n        const urlComponents = {\r\n            Protocol: match[1],\r\n            HostNameAndPort: match[4],\r\n            AbsolutePath: match[5],\r\n            QueryString: match[7],\r\n        };\r\n        let pathSegments = urlComponents.AbsolutePath.split(\"/\");\r\n        pathSegments = pathSegments.filter((val) => val && val.length > 0); // remove empty elements\r\n        urlComponents.PathSegments = pathSegments;\r\n        if (urlComponents.QueryString &&\r\n            urlComponents.QueryString.endsWith(\"/\")) {\r\n            urlComponents.QueryString = urlComponents.QueryString.substring(0, urlComponents.QueryString.length - 1);\r\n        }\r\n        return urlComponents;\r\n    }\r\n    static getDomainFromUrl(url) {\r\n        const regEx = RegExp(\"^([^:/?#]+://)?([^/?#]*)\");\r\n        const match = url.match(regEx);\r\n        if (!match) {\r\n            throw createClientConfigurationError(urlParseError);\r\n        }\r\n        return match[2];\r\n    }\r\n    static getAbsoluteUrl(relativeUrl, baseUrl) {\r\n        if (relativeUrl[0] === Constants.FORWARD_SLASH) {\r\n            const url = new UrlString(baseUrl);\r\n            const baseComponents = url.getUrlComponents();\r\n            return (baseComponents.Protocol +\r\n                \"//\" +\r\n                baseComponents.HostNameAndPort +\r\n                relativeUrl);\r\n        }\r\n        return relativeUrl;\r\n    }\r\n    static constructAuthorityUriFromObject(urlObject) {\r\n        return new UrlString(urlObject.Protocol +\r\n            \"//\" +\r\n            urlObject.HostNameAndPort +\r\n            \"/\" +\r\n            urlObject.PathSegments.join(\"/\"));\r\n    }\r\n    /**\r\n     * Check if the hash of the URL string contains known properties\r\n     * @deprecated This API will be removed in a future version\r\n     */\r\n    static hashContainsKnownProperties(response) {\r\n        return !!getDeserializedResponse(response);\r\n    }\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst rawMetdataJSON = {\r\n    endpointMetadata: {\r\n        \"login.microsoftonline.com\": {\r\n            token_endpoint: \"https://login.microsoftonline.com/{tenantid}/oauth2/v2.0/token\",\r\n            jwks_uri: \"https://login.microsoftonline.com/{tenantid}/discovery/v2.0/keys\",\r\n            issuer: \"https://login.microsoftonline.com/{tenantid}/v2.0\",\r\n            authorization_endpoint: \"https://login.microsoftonline.com/{tenantid}/oauth2/v2.0/authorize\",\r\n            end_session_endpoint: \"https://login.microsoftonline.com/{tenantid}/oauth2/v2.0/logout\",\r\n        },\r\n        \"login.chinacloudapi.cn\": {\r\n            token_endpoint: \"https://login.chinacloudapi.cn/{tenantid}/oauth2/v2.0/token\",\r\n            jwks_uri: \"https://login.chinacloudapi.cn/{tenantid}/discovery/v2.0/keys\",\r\n            issuer: \"https://login.partner.microsoftonline.cn/{tenantid}/v2.0\",\r\n            authorization_endpoint: \"https://login.chinacloudapi.cn/{tenantid}/oauth2/v2.0/authorize\",\r\n            end_session_endpoint: \"https://login.chinacloudapi.cn/{tenantid}/oauth2/v2.0/logout\",\r\n        },\r\n        \"login.microsoftonline.us\": {\r\n            token_endpoint: \"https://login.microsoftonline.us/{tenantid}/oauth2/v2.0/token\",\r\n            jwks_uri: \"https://login.microsoftonline.us/{tenantid}/discovery/v2.0/keys\",\r\n            issuer: \"https://login.microsoftonline.us/{tenantid}/v2.0\",\r\n            authorization_endpoint: \"https://login.microsoftonline.us/{tenantid}/oauth2/v2.0/authorize\",\r\n            end_session_endpoint: \"https://login.microsoftonline.us/{tenantid}/oauth2/v2.0/logout\",\r\n        },\r\n    },\r\n    instanceDiscoveryMetadata: {\r\n        metadata: [\r\n            {\r\n                preferred_network: \"login.microsoftonline.com\",\r\n                preferred_cache: \"login.windows.net\",\r\n                aliases: [\r\n                    \"login.microsoftonline.com\",\r\n                    \"login.windows.net\",\r\n                    \"login.microsoft.com\",\r\n                    \"sts.windows.net\",\r\n                ],\r\n            },\r\n            {\r\n                preferred_network: \"login.partner.microsoftonline.cn\",\r\n                preferred_cache: \"login.partner.microsoftonline.cn\",\r\n                aliases: [\r\n                    \"login.partner.microsoftonline.cn\",\r\n                    \"login.chinacloudapi.cn\",\r\n                ],\r\n            },\r\n            {\r\n                preferred_network: \"login.microsoftonline.de\",\r\n                preferred_cache: \"login.microsoftonline.de\",\r\n                aliases: [\"login.microsoftonline.de\"],\r\n            },\r\n            {\r\n                preferred_network: \"login.microsoftonline.us\",\r\n                preferred_cache: \"login.microsoftonline.us\",\r\n                aliases: [\r\n                    \"login.microsoftonline.us\",\r\n                    \"login.usgovcloudapi.net\",\r\n                ],\r\n            },\r\n            {\r\n                preferred_network: \"login-us.microsoftonline.com\",\r\n                preferred_cache: \"login-us.microsoftonline.com\",\r\n                aliases: [\"login-us.microsoftonline.com\"],\r\n            },\r\n        ],\r\n    },\r\n};\r\nconst EndpointMetadata = rawMetdataJSON.endpointMetadata;\r\nconst InstanceDiscoveryMetadata = rawMetdataJSON.instanceDiscoveryMetadata;\r\nconst InstanceDiscoveryMetadataAliases = new Set();\r\nInstanceDiscoveryMetadata.metadata.forEach((metadataEntry) => {\r\n    metadataEntry.aliases.forEach((alias) => {\r\n        InstanceDiscoveryMetadataAliases.add(alias);\r\n    });\r\n});\r\n/**\r\n * Attempts to get an aliases array from the static authority metadata sources based on the canonical authority host\r\n * @param staticAuthorityOptions\r\n * @param logger\r\n * @returns\r\n */\r\nfunction getAliasesFromStaticSources(staticAuthorityOptions, logger) {\r\n    let staticAliases;\r\n    const canonicalAuthority = staticAuthorityOptions.canonicalAuthority;\r\n    if (canonicalAuthority) {\r\n        const authorityHost = new UrlString(canonicalAuthority).getUrlComponents().HostNameAndPort;\r\n        staticAliases =\r\n            getAliasesFromMetadata(authorityHost, staticAuthorityOptions.cloudDiscoveryMetadata?.metadata, AuthorityMetadataSource.CONFIG, logger) ||\r\n                getAliasesFromMetadata(authorityHost, InstanceDiscoveryMetadata.metadata, AuthorityMetadataSource.HARDCODED_VALUES, logger) ||\r\n                staticAuthorityOptions.knownAuthorities;\r\n    }\r\n    return staticAliases || [];\r\n}\r\n/**\r\n * Returns aliases for from the raw cloud discovery metadata passed in\r\n * @param authorityHost\r\n * @param rawCloudDiscoveryMetadata\r\n * @returns\r\n */\r\nfunction getAliasesFromMetadata(authorityHost, cloudDiscoveryMetadata, source, logger) {\r\n    logger?.trace(`getAliasesFromMetadata called with source: ${source}`);\r\n    if (authorityHost && cloudDiscoveryMetadata) {\r\n        const metadata = getCloudDiscoveryMetadataFromNetworkResponse(cloudDiscoveryMetadata, authorityHost);\r\n        if (metadata) {\r\n            logger?.trace(`getAliasesFromMetadata: found cloud discovery metadata in ${source}, returning aliases`);\r\n            return metadata.aliases;\r\n        }\r\n        else {\r\n            logger?.trace(`getAliasesFromMetadata: did not find cloud discovery metadata in ${source}`);\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Get cloud discovery metadata for common authorities\r\n */\r\nfunction getCloudDiscoveryMetadataFromHardcodedValues(authorityHost) {\r\n    const metadata = getCloudDiscoveryMetadataFromNetworkResponse(InstanceDiscoveryMetadata.metadata, authorityHost);\r\n    return metadata;\r\n}\r\n/**\r\n * Searches instance discovery network response for the entry that contains the host in the aliases list\r\n * @param response\r\n * @param authority\r\n */\r\nfunction getCloudDiscoveryMetadataFromNetworkResponse(response, authorityHost) {\r\n    for (let i = 0; i < response.length; i++) {\r\n        const metadata = response[i];\r\n        if (metadata.aliases.includes(authorityHost)) {\r\n            return metadata;\r\n        }\r\n    }\r\n    return null;\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Protocol modes supported by MSAL.\r\n */\r\nconst ProtocolMode = {\r\n    /**\r\n     * Auth Code + PKCE with Entra ID (formerly AAD) specific optimizations and features\r\n     */\r\n    AAD: \"AAD\",\r\n    /**\r\n     * Auth Code + PKCE without Entra ID specific optimizations and features. For use only with non-Microsoft owned authorities.\r\n     * Support is limited for this mode.\r\n     */\r\n    OIDC: \"OIDC\",\r\n    /**\r\n     * Encrypted Authorize Response (EAR) with Entra ID specific optimizations and features\r\n     */\r\n    EAR: \"EAR\",\r\n};\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst AzureCloudInstance = {\r\n    // AzureCloudInstance is not specified.\r\n    None: \"none\",\r\n    // Microsoft Azure public cloud\r\n    AzurePublic: \"https://login.microsoftonline.com\",\r\n    // Microsoft PPE\r\n    AzurePpe: \"https://login.windows-ppe.net\",\r\n    // Microsoft Chinese national/regional cloud\r\n    AzureChina: \"https://login.chinacloudapi.cn\",\r\n    // Microsoft German national/regional cloud (\"Black Forest\")\r\n    AzureGermany: \"https://login.microsoftonline.de\",\r\n    // US Government cloud\r\n    AzureUsGovernment: \"https://login.microsoftonline.us\",\r\n};\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nfunction isCloudInstanceDiscoveryResponse(response) {\r\n    return (response.hasOwnProperty(\"tenant_discovery_endpoint\") &&\r\n        response.hasOwnProperty(\"metadata\"));\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nfunction isCloudInstanceDiscoveryErrorResponse(response) {\r\n    return (response.hasOwnProperty(\"error\") &&\r\n        response.hasOwnProperty(\"error_description\"));\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Enumeration of operations that are instrumented by have their performance measured by the PerformanceClient.\r\n *\r\n * @export\r\n * @enum {number}\r\n */\r\nconst PerformanceEvents = {\r\n    /**\r\n     * acquireTokenByCode API (msal-browser and msal-node).\r\n     * Used to acquire tokens by trading an authorization code against the token endpoint.\r\n     */\r\n    AcquireTokenByCode: \"acquireTokenByCode\",\r\n    /**\r\n     * acquireTokenByRefreshToken API (msal-browser and msal-node).\r\n     * Used to renew an access token using a refresh token against the token endpoint.\r\n     */\r\n    AcquireTokenByRefreshToken: \"acquireTokenByRefreshToken\",\r\n    /**\r\n     * acquireTokenSilent API (msal-browser and msal-node).\r\n     * Used to silently acquire a new access token (from the cache or the network).\r\n     */\r\n    AcquireTokenSilent: \"acquireTokenSilent\",\r\n    /**\r\n     * acquireTokenSilentAsync (msal-browser).\r\n     * Internal API for acquireTokenSilent.\r\n     */\r\n    AcquireTokenSilentAsync: \"acquireTokenSilentAsync\",\r\n    /**\r\n     * acquireTokenPopup (msal-browser).\r\n     * Used to acquire a new access token interactively through pop ups\r\n     */\r\n    AcquireTokenPopup: \"acquireTokenPopup\",\r\n    /**\r\n     * acquireTokenPreRedirect (msal-browser).\r\n     * First part of the redirect flow.\r\n     * Used to acquire a new access token interactively through redirects.\r\n     */\r\n    AcquireTokenPreRedirect: \"acquireTokenPreRedirect\",\r\n    /**\r\n     * acquireTokenRedirect (msal-browser).\r\n     * Second part of the redirect flow.\r\n     * Used to acquire a new access token interactively through redirects.\r\n     */\r\n    AcquireTokenRedirect: \"acquireTokenRedirect\",\r\n    /**\r\n     * getPublicKeyThumbprint API in CryptoOpts class (msal-browser).\r\n     * Used to generate a public/private keypair and generate a public key thumbprint for pop requests.\r\n     */\r\n    CryptoOptsGetPublicKeyThumbprint: \"cryptoOptsGetPublicKeyThumbprint\",\r\n    /**\r\n     * signJwt API in CryptoOpts class (msal-browser).\r\n     * Used to signed a pop token.\r\n     */\r\n    CryptoOptsSignJwt: \"cryptoOptsSignJwt\",\r\n    /**\r\n     * acquireToken API in the SilentCacheClient class (msal-browser).\r\n     * Used to read access tokens from the cache.\r\n     */\r\n    SilentCacheClientAcquireToken: \"silentCacheClientAcquireToken\",\r\n    /**\r\n     * acquireToken API in the SilentIframeClient class (msal-browser).\r\n     * Used to acquire a new set of tokens from the authorize endpoint in a hidden iframe.\r\n     */\r\n    SilentIframeClientAcquireToken: \"silentIframeClientAcquireToken\",\r\n    AwaitConcurrentIframe: \"awaitConcurrentIframe\",\r\n    /**\r\n     * acquireToken API in SilentRereshClient (msal-browser).\r\n     * Used to acquire a new set of tokens from the token endpoint using a refresh token.\r\n     */\r\n    SilentRefreshClientAcquireToken: \"silentRefreshClientAcquireToken\",\r\n    /**\r\n     * ssoSilent API (msal-browser).\r\n     * Used to silently acquire an authorization code and set of tokens using a hidden iframe.\r\n     */\r\n    SsoSilent: \"ssoSilent\",\r\n    /**\r\n     * getDiscoveredAuthority API in StandardInteractionClient class (msal-browser).\r\n     * Used to load authority metadata for a request.\r\n     */\r\n    StandardInteractionClientGetDiscoveredAuthority: \"standardInteractionClientGetDiscoveredAuthority\",\r\n    /**\r\n     * acquireToken APIs in msal-browser.\r\n     * Used to make an /authorize endpoint call with native brokering enabled.\r\n     */\r\n    FetchAccountIdWithNativeBroker: \"fetchAccountIdWithNativeBroker\",\r\n    /**\r\n     * acquireToken API in NativeInteractionClient class (msal-browser).\r\n     * Used to acquire a token from Native component when native brokering is enabled.\r\n     */\r\n    NativeInteractionClientAcquireToken: \"nativeInteractionClientAcquireToken\",\r\n    /**\r\n     * Time spent creating default headers for requests to token endpoint\r\n     */\r\n    BaseClientCreateTokenRequestHeaders: \"baseClientCreateTokenRequestHeaders\",\r\n    /**\r\n     * Time spent sending/waiting for the response of a request to the token endpoint\r\n     */\r\n    NetworkClientSendPostRequestAsync: \"networkClientSendPostRequestAsync\",\r\n    RefreshTokenClientExecutePostToTokenEndpoint: \"refreshTokenClientExecutePostToTokenEndpoint\",\r\n    AuthorizationCodeClientExecutePostToTokenEndpoint: \"authorizationCodeClientExecutePostToTokenEndpoint\",\r\n    /**\r\n     * Used to measure the time taken for completing embedded-broker handshake (PW-Broker).\r\n     */\r\n    BrokerHandhshake: \"brokerHandshake\",\r\n    /**\r\n     * acquireTokenByRefreshToken API in BrokerClientApplication (PW-Broker) .\r\n     */\r\n    AcquireTokenByRefreshTokenInBroker: \"acquireTokenByRefreshTokenInBroker\",\r\n    /**\r\n     * Time taken for token acquisition by broker\r\n     */\r\n    AcquireTokenByBroker: \"acquireTokenByBroker\",\r\n    /**\r\n     * Time spent on the network for refresh token acquisition\r\n     */\r\n    RefreshTokenClientExecuteTokenRequest: \"refreshTokenClientExecuteTokenRequest\",\r\n    /**\r\n     * Time taken for acquiring refresh token , records RT size\r\n     */\r\n    RefreshTokenClientAcquireToken: \"refreshTokenClientAcquireToken\",\r\n    /**\r\n     * Time taken for acquiring cached refresh token\r\n     */\r\n    RefreshTokenClientAcquireTokenWithCachedRefreshToken: \"refreshTokenClientAcquireTokenWithCachedRefreshToken\",\r\n    /**\r\n     * acquireTokenByRefreshToken API in RefreshTokenClient (msal-common).\r\n     */\r\n    RefreshTokenClientAcquireTokenByRefreshToken: \"refreshTokenClientAcquireTokenByRefreshToken\",\r\n    /**\r\n     * Helper function to create token request body in RefreshTokenClient (msal-common).\r\n     */\r\n    RefreshTokenClientCreateTokenRequestBody: \"refreshTokenClientCreateTokenRequestBody\",\r\n    /**\r\n     * acquireTokenFromCache (msal-browser).\r\n     * Internal API for acquiring token from cache\r\n     */\r\n    AcquireTokenFromCache: \"acquireTokenFromCache\",\r\n    SilentFlowClientAcquireCachedToken: \"silentFlowClientAcquireCachedToken\",\r\n    SilentFlowClientGenerateResultFromCacheRecord: \"silentFlowClientGenerateResultFromCacheRecord\",\r\n    /**\r\n     * acquireTokenBySilentIframe (msal-browser).\r\n     * Internal API for acquiring token by silent Iframe\r\n     */\r\n    AcquireTokenBySilentIframe: \"acquireTokenBySilentIframe\",\r\n    /**\r\n     * Internal API for initializing base request in BaseInteractionClient (msal-browser)\r\n     */\r\n    InitializeBaseRequest: \"initializeBaseRequest\",\r\n    /**\r\n     * Internal API for initializing silent request in SilentCacheClient (msal-browser)\r\n     */\r\n    InitializeSilentRequest: \"initializeSilentRequest\",\r\n    InitializeClientApplication: \"initializeClientApplication\",\r\n    InitializeCache: \"initializeCache\",\r\n    /**\r\n     * Helper function in SilentIframeClient class (msal-browser).\r\n     */\r\n    SilentIframeClientTokenHelper: \"silentIframeClientTokenHelper\",\r\n    /**\r\n     * SilentHandler\r\n     */\r\n    SilentHandlerInitiateAuthRequest: \"silentHandlerInitiateAuthRequest\",\r\n    SilentHandlerMonitorIframeForHash: \"silentHandlerMonitorIframeForHash\",\r\n    SilentHandlerLoadFrame: \"silentHandlerLoadFrame\",\r\n    SilentHandlerLoadFrameSync: \"silentHandlerLoadFrameSync\",\r\n    /**\r\n     * Helper functions in StandardInteractionClient class (msal-browser)\r\n     */\r\n    StandardInteractionClientCreateAuthCodeClient: \"standardInteractionClientCreateAuthCodeClient\",\r\n    StandardInteractionClientGetClientConfiguration: \"standardInteractionClientGetClientConfiguration\",\r\n    StandardInteractionClientInitializeAuthorizationRequest: \"standardInteractionClientInitializeAuthorizationRequest\",\r\n    /**\r\n     * getAuthCodeUrl API (msal-browser and msal-node).\r\n     */\r\n    GetAuthCodeUrl: \"getAuthCodeUrl\",\r\n    GetStandardParams: \"getStandardParams\",\r\n    /**\r\n     * Functions from InteractionHandler (msal-browser)\r\n     */\r\n    HandleCodeResponseFromServer: \"handleCodeResponseFromServer\",\r\n    HandleCodeResponse: \"handleCodeResponse\",\r\n    HandleResponseEar: \"handleResponseEar\",\r\n    HandleResponsePlatformBroker: \"handleResponsePlatformBroker\",\r\n    HandleResponseCode: \"handleResponseCode\",\r\n    UpdateTokenEndpointAuthority: \"updateTokenEndpointAuthority\",\r\n    /**\r\n     * APIs in Authorization Code Client (msal-common)\r\n     */\r\n    AuthClientAcquireToken: \"authClientAcquireToken\",\r\n    AuthClientExecuteTokenRequest: \"authClientExecuteTokenRequest\",\r\n    AuthClientCreateTokenRequestBody: \"authClientCreateTokenRequestBody\",\r\n    /**\r\n     * Generate functions in PopTokenGenerator (msal-common)\r\n     */\r\n    PopTokenGenerateCnf: \"popTokenGenerateCnf\",\r\n    PopTokenGenerateKid: \"popTokenGenerateKid\",\r\n    /**\r\n     * handleServerTokenResponse API in ResponseHandler (msal-common)\r\n     */\r\n    HandleServerTokenResponse: \"handleServerTokenResponse\",\r\n    DeserializeResponse: \"deserializeResponse\",\r\n    /**\r\n     * Authority functions\r\n     */\r\n    AuthorityFactoryCreateDiscoveredInstance: \"authorityFactoryCreateDiscoveredInstance\",\r\n    AuthorityResolveEndpointsAsync: \"authorityResolveEndpointsAsync\",\r\n    AuthorityResolveEndpointsFromLocalSources: \"authorityResolveEndpointsFromLocalSources\",\r\n    AuthorityGetCloudDiscoveryMetadataFromNetwork: \"authorityGetCloudDiscoveryMetadataFromNetwork\",\r\n    AuthorityUpdateCloudDiscoveryMetadata: \"authorityUpdateCloudDiscoveryMetadata\",\r\n    AuthorityGetEndpointMetadataFromNetwork: \"authorityGetEndpointMetadataFromNetwork\",\r\n    AuthorityUpdateEndpointMetadata: \"authorityUpdateEndpointMetadata\",\r\n    AuthorityUpdateMetadataWithRegionalInformation: \"authorityUpdateMetadataWithRegionalInformation\",\r\n    /**\r\n     * Region Discovery functions\r\n     */\r\n    RegionDiscoveryDetectRegion: \"regionDiscoveryDetectRegion\",\r\n    RegionDiscoveryGetRegionFromIMDS: \"regionDiscoveryGetRegionFromIMDS\",\r\n    RegionDiscoveryGetCurrentVersion: \"regionDiscoveryGetCurrentVersion\",\r\n    AcquireTokenByCodeAsync: \"acquireTokenByCodeAsync\",\r\n    GetEndpointMetadataFromNetwork: \"getEndpointMetadataFromNetwork\",\r\n    GetCloudDiscoveryMetadataFromNetworkMeasurement: \"getCloudDiscoveryMetadataFromNetworkMeasurement\",\r\n    HandleRedirectPromiseMeasurement: \"handleRedirectPromise\",\r\n    HandleNativeRedirectPromiseMeasurement: \"handleNativeRedirectPromise\",\r\n    UpdateCloudDiscoveryMetadataMeasurement: \"updateCloudDiscoveryMetadataMeasurement\",\r\n    UsernamePasswordClientAcquireToken: \"usernamePasswordClientAcquireToken\",\r\n    NativeMessageHandlerHandshake: \"nativeMessageHandlerHandshake\",\r\n    NativeGenerateAuthResult: \"nativeGenerateAuthResult\",\r\n    RemoveHiddenIframe: \"removeHiddenIframe\",\r\n    /**\r\n     * Cache operations\r\n     */\r\n    ClearTokensAndKeysWithClaims: \"clearTokensAndKeysWithClaims\",\r\n    CacheManagerGetRefreshToken: \"cacheManagerGetRefreshToken\",\r\n    ImportExistingCache: \"importExistingCache\",\r\n    SetUserData: \"setUserData\",\r\n    LocalStorageUpdated: \"localStorageUpdated\",\r\n    /**\r\n     * Crypto Operations\r\n     */\r\n    GeneratePkceCodes: \"generatePkceCodes\",\r\n    GenerateCodeVerifier: \"generateCodeVerifier\",\r\n    GenerateCodeChallengeFromVerifier: \"generateCodeChallengeFromVerifier\",\r\n    Sha256Digest: \"sha256Digest\",\r\n    GetRandomValues: \"getRandomValues\",\r\n    GenerateHKDF: \"generateHKDF\",\r\n    GenerateBaseKey: \"generateBaseKey\",\r\n    Base64Decode: \"base64Decode\",\r\n    UrlEncodeArr: \"urlEncodeArr\",\r\n    Encrypt: \"encrypt\",\r\n    Decrypt: \"decrypt\",\r\n    GenerateEarKey: \"generateEarKey\",\r\n    DecryptEarResponse: \"decryptEarResponse\",\r\n};\r\nconst PerformanceEventAbbreviations = new Map([\r\n    [PerformanceEvents.AcquireTokenByCode, \"ATByCode\"],\r\n    [PerformanceEvents.AcquireTokenByRefreshToken, \"ATByRT\"],\r\n    [PerformanceEvents.AcquireTokenSilent, \"ATS\"],\r\n    [PerformanceEvents.AcquireTokenSilentAsync, \"ATSAsync\"],\r\n    [PerformanceEvents.AcquireTokenPopup, \"ATPopup\"],\r\n    [PerformanceEvents.AcquireTokenRedirect, \"ATRedirect\"],\r\n    [\r\n        PerformanceEvents.CryptoOptsGetPublicKeyThumbprint,\r\n        \"CryptoGetPKThumb\",\r\n    ],\r\n    [PerformanceEvents.CryptoOptsSignJwt, \"CryptoSignJwt\"],\r\n    [PerformanceEvents.SilentCacheClientAcquireToken, \"SltCacheClientAT\"],\r\n    [PerformanceEvents.SilentIframeClientAcquireToken, \"SltIframeClientAT\"],\r\n    [PerformanceEvents.SilentRefreshClientAcquireToken, \"SltRClientAT\"],\r\n    [PerformanceEvents.SsoSilent, \"SsoSlt\"],\r\n    [\r\n        PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority,\r\n        \"StdIntClientGetDiscAuth\",\r\n    ],\r\n    [\r\n        PerformanceEvents.FetchAccountIdWithNativeBroker,\r\n        \"FetchAccIdWithNtvBroker\",\r\n    ],\r\n    [\r\n        PerformanceEvents.NativeInteractionClientAcquireToken,\r\n        \"NtvIntClientAT\",\r\n    ],\r\n    [\r\n        PerformanceEvents.BaseClientCreateTokenRequestHeaders,\r\n        \"BaseClientCreateTReqHead\",\r\n    ],\r\n    [\r\n        PerformanceEvents.NetworkClientSendPostRequestAsync,\r\n        \"NetClientSendPost\",\r\n    ],\r\n    [\r\n        PerformanceEvents.RefreshTokenClientExecutePostToTokenEndpoint,\r\n        \"RTClientExecPost\",\r\n    ],\r\n    [\r\n        PerformanceEvents.AuthorizationCodeClientExecutePostToTokenEndpoint,\r\n        \"AuthCodeClientExecPost\",\r\n    ],\r\n    [PerformanceEvents.BrokerHandhshake, \"BrokerHandshake\"],\r\n    [\r\n        PerformanceEvents.AcquireTokenByRefreshTokenInBroker,\r\n        \"ATByRTInBroker\",\r\n    ],\r\n    [PerformanceEvents.AcquireTokenByBroker, \"ATByBroker\"],\r\n    [\r\n        PerformanceEvents.RefreshTokenClientExecuteTokenRequest,\r\n        \"RTClientExecTReq\",\r\n    ],\r\n    [PerformanceEvents.RefreshTokenClientAcquireToken, \"RTClientAT\"],\r\n    [\r\n        PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken,\r\n        \"RTClientATWithCachedRT\",\r\n    ],\r\n    [\r\n        PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken,\r\n        \"RTClientATByRT\",\r\n    ],\r\n    [\r\n        PerformanceEvents.RefreshTokenClientCreateTokenRequestBody,\r\n        \"RTClientCreateTReqBody\",\r\n    ],\r\n    [PerformanceEvents.AcquireTokenFromCache, \"ATFromCache\"],\r\n    [\r\n        PerformanceEvents.SilentFlowClientAcquireCachedToken,\r\n        \"SltFlowClientATCached\",\r\n    ],\r\n    [\r\n        PerformanceEvents.SilentFlowClientGenerateResultFromCacheRecord,\r\n        \"SltFlowClientGenResFromCache\",\r\n    ],\r\n    [PerformanceEvents.AcquireTokenBySilentIframe, \"ATBySltIframe\"],\r\n    [PerformanceEvents.InitializeBaseRequest, \"InitBaseReq\"],\r\n    [PerformanceEvents.InitializeSilentRequest, \"InitSltReq\"],\r\n    [\r\n        PerformanceEvents.InitializeClientApplication,\r\n        \"InitClientApplication\",\r\n    ],\r\n    [PerformanceEvents.InitializeCache, \"InitCache\"],\r\n    [PerformanceEvents.ImportExistingCache, \"importCache\"],\r\n    [PerformanceEvents.SetUserData, \"setUserData\"],\r\n    [PerformanceEvents.LocalStorageUpdated, \"localStorageUpdated\"],\r\n    [PerformanceEvents.SilentIframeClientTokenHelper, \"SIClientTHelper\"],\r\n    [\r\n        PerformanceEvents.SilentHandlerInitiateAuthRequest,\r\n        \"SHandlerInitAuthReq\",\r\n    ],\r\n    [\r\n        PerformanceEvents.SilentHandlerMonitorIframeForHash,\r\n        \"SltHandlerMonitorIframeForHash\",\r\n    ],\r\n    [PerformanceEvents.SilentHandlerLoadFrame, \"SHandlerLoadFrame\"],\r\n    [PerformanceEvents.SilentHandlerLoadFrameSync, \"SHandlerLoadFrameSync\"],\r\n    [\r\n        PerformanceEvents.StandardInteractionClientCreateAuthCodeClient,\r\n        \"StdIntClientCreateAuthCodeClient\",\r\n    ],\r\n    [\r\n        PerformanceEvents.StandardInteractionClientGetClientConfiguration,\r\n        \"StdIntClientGetClientConf\",\r\n    ],\r\n    [\r\n        PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest,\r\n        \"StdIntClientInitAuthReq\",\r\n    ],\r\n    [PerformanceEvents.GetAuthCodeUrl, \"GetAuthCodeUrl\"],\r\n    [\r\n        PerformanceEvents.HandleCodeResponseFromServer,\r\n        \"HandleCodeResFromServer\",\r\n    ],\r\n    [PerformanceEvents.HandleCodeResponse, \"HandleCodeResp\"],\r\n    [PerformanceEvents.HandleResponseEar, \"HandleRespEar\"],\r\n    [PerformanceEvents.HandleResponseCode, \"HandleRespCode\"],\r\n    [\r\n        PerformanceEvents.HandleResponsePlatformBroker,\r\n        \"HandleRespPlatBroker\",\r\n    ],\r\n    [PerformanceEvents.UpdateTokenEndpointAuthority, \"UpdTEndpointAuth\"],\r\n    [PerformanceEvents.AuthClientAcquireToken, \"AuthClientAT\"],\r\n    [PerformanceEvents.AuthClientExecuteTokenRequest, \"AuthClientExecTReq\"],\r\n    [\r\n        PerformanceEvents.AuthClientCreateTokenRequestBody,\r\n        \"AuthClientCreateTReqBody\",\r\n    ],\r\n    [PerformanceEvents.PopTokenGenerateCnf, \"PopTGenCnf\"],\r\n    [PerformanceEvents.PopTokenGenerateKid, \"PopTGenKid\"],\r\n    [PerformanceEvents.HandleServerTokenResponse, \"HandleServerTRes\"],\r\n    [PerformanceEvents.DeserializeResponse, \"DeserializeRes\"],\r\n    [\r\n        PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance,\r\n        \"AuthFactCreateDiscInst\",\r\n    ],\r\n    [\r\n        PerformanceEvents.AuthorityResolveEndpointsAsync,\r\n        \"AuthResolveEndpointsAsync\",\r\n    ],\r\n    [\r\n        PerformanceEvents.AuthorityResolveEndpointsFromLocalSources,\r\n        \"AuthResolveEndpointsFromLocal\",\r\n    ],\r\n    [\r\n        PerformanceEvents.AuthorityGetCloudDiscoveryMetadataFromNetwork,\r\n        \"AuthGetCDMetaFromNet\",\r\n    ],\r\n    [\r\n        PerformanceEvents.AuthorityUpdateCloudDiscoveryMetadata,\r\n        \"AuthUpdCDMeta\",\r\n    ],\r\n    [\r\n        PerformanceEvents.AuthorityGetEndpointMetadataFromNetwork,\r\n        \"AuthUpdCDMetaFromNet\",\r\n    ],\r\n    [\r\n        PerformanceEvents.AuthorityUpdateEndpointMetadata,\r\n        \"AuthUpdEndpointMeta\",\r\n    ],\r\n    [\r\n        PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation,\r\n        \"AuthUpdMetaWithRegInfo\",\r\n    ],\r\n    [PerformanceEvents.RegionDiscoveryDetectRegion, \"RegDiscDetectReg\"],\r\n    [\r\n        PerformanceEvents.RegionDiscoveryGetRegionFromIMDS,\r\n        \"RegDiscGetRegFromIMDS\",\r\n    ],\r\n    [\r\n        PerformanceEvents.RegionDiscoveryGetCurrentVersion,\r\n        \"RegDiscGetCurrentVer\",\r\n    ],\r\n    [PerformanceEvents.AcquireTokenByCodeAsync, \"ATByCodeAsync\"],\r\n    [\r\n        PerformanceEvents.GetEndpointMetadataFromNetwork,\r\n        \"GetEndpointMetaFromNet\",\r\n    ],\r\n    [\r\n        PerformanceEvents.GetCloudDiscoveryMetadataFromNetworkMeasurement,\r\n        \"GetCDMetaFromNet\",\r\n    ],\r\n    [\r\n        PerformanceEvents.HandleRedirectPromiseMeasurement,\r\n        \"HandleRedirectPromise\",\r\n    ],\r\n    [\r\n        PerformanceEvents.HandleNativeRedirectPromiseMeasurement,\r\n        \"HandleNtvRedirectPromise\",\r\n    ],\r\n    [\r\n        PerformanceEvents.UpdateCloudDiscoveryMetadataMeasurement,\r\n        \"UpdateCDMeta\",\r\n    ],\r\n    [\r\n        PerformanceEvents.UsernamePasswordClientAcquireToken,\r\n        \"UserPassClientAT\",\r\n    ],\r\n    [\r\n        PerformanceEvents.NativeMessageHandlerHandshake,\r\n        \"NtvMsgHandlerHandshake\",\r\n    ],\r\n    [PerformanceEvents.NativeGenerateAuthResult, \"NtvGenAuthRes\"],\r\n    [PerformanceEvents.RemoveHiddenIframe, \"RemoveHiddenIframe\"],\r\n    [\r\n        PerformanceEvents.ClearTokensAndKeysWithClaims,\r\n        \"ClearTAndKeysWithClaims\",\r\n    ],\r\n    [PerformanceEvents.CacheManagerGetRefreshToken, \"CacheManagerGetRT\"],\r\n    [PerformanceEvents.GeneratePkceCodes, \"GenPkceCodes\"],\r\n    [PerformanceEvents.GenerateCodeVerifier, \"GenCodeVerifier\"],\r\n    [\r\n        PerformanceEvents.GenerateCodeChallengeFromVerifier,\r\n        \"GenCodeChallengeFromVerifier\",\r\n    ],\r\n    [PerformanceEvents.Sha256Digest, \"Sha256Digest\"],\r\n    [PerformanceEvents.GetRandomValues, \"GetRandomValues\"],\r\n    [PerformanceEvents.GenerateHKDF, \"genHKDF\"],\r\n    [PerformanceEvents.GenerateBaseKey, \"genBaseKey\"],\r\n    [PerformanceEvents.Base64Decode, \"b64Decode\"],\r\n    [PerformanceEvents.UrlEncodeArr, \"urlEncArr\"],\r\n    [PerformanceEvents.Encrypt, \"encrypt\"],\r\n    [PerformanceEvents.Decrypt, \"decrypt\"],\r\n    [PerformanceEvents.GenerateEarKey, \"genEarKey\"],\r\n    [PerformanceEvents.DecryptEarResponse, \"decryptEarResp\"],\r\n]);\r\n/**\r\n * State of the performance event.\r\n *\r\n * @export\r\n * @enum {number}\r\n */\r\nconst PerformanceEventStatus = {\r\n    NotStarted: 0,\r\n    InProgress: 1,\r\n    Completed: 2,\r\n};\r\nconst IntFields = new Set([\r\n    \"accessTokenSize\",\r\n    \"durationMs\",\r\n    \"idTokenSize\",\r\n    \"matsSilentStatus\",\r\n    \"matsHttpStatus\",\r\n    \"refreshTokenSize\",\r\n    \"queuedTimeMs\",\r\n    \"startTimeMs\",\r\n    \"status\",\r\n    \"multiMatchedAT\",\r\n    \"multiMatchedID\",\r\n    \"multiMatchedRT\",\r\n    \"unencryptedCacheCount\",\r\n    \"encryptedCacheExpiredCount\",\r\n    \"oldAccountCount\",\r\n    \"oldAccessCount\",\r\n    \"oldIdCount\",\r\n    \"oldRefreshCount\",\r\n    \"currAccountCount\",\r\n    \"currAccessCount\",\r\n    \"currIdCount\",\r\n    \"currRefreshCount\",\r\n    \"expiredCacheRemovedCount\",\r\n    \"upgradedCacheCount\",\r\n]);\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Wraps a function with a performance measurement.\r\n * Usage: invoke(functionToCall, performanceClient, \"EventName\", \"correlationId\")(...argsToPassToFunction)\r\n * @param callback\r\n * @param eventName\r\n * @param logger\r\n * @param telemetryClient\r\n * @param correlationId\r\n * @returns\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst invoke = (callback, eventName, logger, telemetryClient, correlationId) => {\r\n    return (...args) => {\r\n        logger.trace(`Executing function ${eventName}`);\r\n        const inProgressEvent = telemetryClient?.startMeasurement(eventName, correlationId);\r\n        if (correlationId) {\r\n            // Track number of times this API is called in a single request\r\n            const eventCount = eventName + \"CallCount\";\r\n            telemetryClient?.incrementFields({ [eventCount]: 1 }, correlationId);\r\n        }\r\n        try {\r\n            const result = callback(...args);\r\n            inProgressEvent?.end({\r\n                success: true,\r\n            });\r\n            logger.trace(`Returning result from ${eventName}`);\r\n            return result;\r\n        }\r\n        catch (e) {\r\n            logger.trace(`Error occurred in ${eventName}`);\r\n            try {\r\n                logger.trace(JSON.stringify(e));\r\n            }\r\n            catch (e) {\r\n                logger.trace(\"Unable to print error message.\");\r\n            }\r\n            inProgressEvent?.end({\r\n                success: false,\r\n            }, e);\r\n            throw e;\r\n        }\r\n    };\r\n};\r\n/**\r\n * Wraps an async function with a performance measurement.\r\n * Usage: invokeAsync(functionToCall, performanceClient, \"EventName\", \"correlationId\")(...argsToPassToFunction)\r\n * @param callback\r\n * @param eventName\r\n * @param logger\r\n * @param telemetryClient\r\n * @param correlationId\r\n * @returns\r\n * @internal\r\n *\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst invokeAsync = (callback, eventName, logger, telemetryClient, correlationId) => {\r\n    return (...args) => {\r\n        logger.trace(`Executing function ${eventName}`);\r\n        const inProgressEvent = telemetryClient?.startMeasurement(eventName, correlationId);\r\n        if (correlationId) {\r\n            // Track number of times this API is called in a single request\r\n            const eventCount = eventName + \"CallCount\";\r\n            telemetryClient?.incrementFields({ [eventCount]: 1 }, correlationId);\r\n        }\r\n        telemetryClient?.setPreQueueTime(eventName, correlationId);\r\n        return callback(...args)\r\n            .then((response) => {\r\n            logger.trace(`Returning result from ${eventName}`);\r\n            inProgressEvent?.end({\r\n                success: true,\r\n            });\r\n            return response;\r\n        })\r\n            .catch((e) => {\r\n            logger.trace(`Error occurred in ${eventName}`);\r\n            try {\r\n                logger.trace(JSON.stringify(e));\r\n            }\r\n            catch (e) {\r\n                logger.trace(\"Unable to print error message.\");\r\n            }\r\n            inProgressEvent?.end({\r\n                success: false,\r\n            }, e);\r\n            throw e;\r\n        });\r\n    };\r\n};\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nclass RegionDiscovery {\r\n    constructor(networkInterface, logger, performanceClient, correlationId) {\r\n        this.networkInterface = networkInterface;\r\n        this.logger = logger;\r\n        this.performanceClient = performanceClient;\r\n        this.correlationId = correlationId;\r\n    }\r\n    /**\r\n     * Detect the region from the application's environment.\r\n     *\r\n     * @returns Promise<string | null>\r\n     */\r\n    async detectRegion(environmentRegion, regionDiscoveryMetadata) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RegionDiscoveryDetectRegion, this.correlationId);\r\n        // Initialize auto detected region with the region from the envrionment\r\n        let autodetectedRegionName = environmentRegion;\r\n        // Check if a region was detected from the environment, if not, attempt to get the region from IMDS\r\n        if (!autodetectedRegionName) {\r\n            const options = RegionDiscovery.IMDS_OPTIONS;\r\n            try {\r\n                const localIMDSVersionResponse = await invokeAsync(this.getRegionFromIMDS.bind(this), PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.logger, this.performanceClient, this.correlationId)(Constants.IMDS_VERSION, options);\r\n                if (localIMDSVersionResponse.status === HttpStatus.SUCCESS) {\r\n                    autodetectedRegionName = localIMDSVersionResponse.body;\r\n                    regionDiscoveryMetadata.region_source =\r\n                        RegionDiscoverySources.IMDS;\r\n                }\r\n                // If the response using the local IMDS version failed, try to fetch the current version of IMDS and retry.\r\n                if (localIMDSVersionResponse.status === HttpStatus.BAD_REQUEST) {\r\n                    const currentIMDSVersion = await invokeAsync(this.getCurrentVersion.bind(this), PerformanceEvents.RegionDiscoveryGetCurrentVersion, this.logger, this.performanceClient, this.correlationId)(options);\r\n                    if (!currentIMDSVersion) {\r\n                        regionDiscoveryMetadata.region_source =\r\n                            RegionDiscoverySources.FAILED_AUTO_DETECTION;\r\n                        return null;\r\n                    }\r\n                    const currentIMDSVersionResponse = await invokeAsync(this.getRegionFromIMDS.bind(this), PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.logger, this.performanceClient, this.correlationId)(currentIMDSVersion, options);\r\n                    if (currentIMDSVersionResponse.status === HttpStatus.SUCCESS) {\r\n                        autodetectedRegionName =\r\n                            currentIMDSVersionResponse.body;\r\n                        regionDiscoveryMetadata.region_source =\r\n                            RegionDiscoverySources.IMDS;\r\n                    }\r\n                }\r\n            }\r\n            catch (e) {\r\n                regionDiscoveryMetadata.region_source =\r\n                    RegionDiscoverySources.FAILED_AUTO_DETECTION;\r\n                return null;\r\n            }\r\n        }\r\n        else {\r\n            regionDiscoveryMetadata.region_source =\r\n                RegionDiscoverySources.ENVIRONMENT_VARIABLE;\r\n        }\r\n        // If no region was auto detected from the environment or from the IMDS endpoint, mark the attempt as a FAILED_AUTO_DETECTION\r\n        if (!autodetectedRegionName) {\r\n            regionDiscoveryMetadata.region_source =\r\n                RegionDiscoverySources.FAILED_AUTO_DETECTION;\r\n        }\r\n        return autodetectedRegionName || null;\r\n    }\r\n    /**\r\n     * Make the call to the IMDS endpoint\r\n     *\r\n     * @param imdsEndpointUrl\r\n     * @returns Promise<NetworkResponse<string>>\r\n     */\r\n    async getRegionFromIMDS(version, options) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.correlationId);\r\n        return this.networkInterface.sendGetRequestAsync(`${Constants.IMDS_ENDPOINT}?api-version=${version}&format=text`, options, Constants.IMDS_TIMEOUT);\r\n    }\r\n    /**\r\n     * Get the most recent version of the IMDS endpoint available\r\n     *\r\n     * @returns Promise<string | null>\r\n     */\r\n    async getCurrentVersion(options) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RegionDiscoveryGetCurrentVersion, this.correlationId);\r\n        try {\r\n            const response = await this.networkInterface.sendGetRequestAsync(`${Constants.IMDS_ENDPOINT}?format=json`, options);\r\n            // When IMDS endpoint is called without the api version query param, bad request response comes back with latest version.\r\n            if (response.status === HttpStatus.BAD_REQUEST &&\r\n                response.body &&\r\n                response.body[\"newest-versions\"] &&\r\n                response.body[\"newest-versions\"].length > 0) {\r\n                return response.body[\"newest-versions\"][0];\r\n            }\r\n            return null;\r\n        }\r\n        catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n// Options for the IMDS endpoint request\r\nRegionDiscovery.IMDS_OPTIONS = {\r\n    headers: {\r\n        Metadata: \"true\",\r\n    },\r\n};\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Utility functions for managing date and time operations.\r\n */\r\n/**\r\n * return the current time in Unix time (seconds).\r\n */\r\nfunction nowSeconds() {\r\n    // Date.getTime() returns in milliseconds.\r\n    return Math.round(new Date().getTime() / 1000.0);\r\n}\r\n/**\r\n * Converts JS Date object to seconds\r\n * @param date Date\r\n */\r\nfunction toSecondsFromDate(date) {\r\n    // Convert date to seconds\r\n    return date.getTime() / 1000;\r\n}\r\n/**\r\n * Convert seconds to JS Date object. Seconds can be in a number or string format or undefined (will still return a date).\r\n * @param seconds\r\n */\r\nfunction toDateFromSeconds(seconds) {\r\n    if (seconds) {\r\n        return new Date(Number(seconds) * 1000);\r\n    }\r\n    return new Date();\r\n}\r\n/**\r\n * check if a token is expired based on given UTC time in seconds.\r\n * @param expiresOn\r\n */\r\nfunction isTokenExpired(expiresOn, offset) {\r\n    // check for access token expiry\r\n    const expirationSec = Number(expiresOn) || 0;\r\n    const offsetCurrentTimeSec = nowSeconds() + offset;\r\n    // If current time + offset is greater than token expiration time, then token is expired.\r\n    return offsetCurrentTimeSec > expirationSec;\r\n}\r\n/**\r\n * Checks if a cache entry is expired based on the last updated time and cache retention days.\r\n * @param lastUpdatedAt\r\n * @param cacheRetentionDays\r\n * @returns\r\n */\r\nfunction isCacheExpired(lastUpdatedAt, cacheRetentionDays) {\r\n    const cacheExpirationTimestamp = Number(lastUpdatedAt) + cacheRetentionDays * 24 * 60 * 60 * 1000;\r\n    return Date.now() > cacheExpirationTimestamp;\r\n}\r\n/**\r\n * If the current time is earlier than the time that a token was cached at, we must discard the token\r\n * i.e. The system clock was turned back after acquiring the cached token\r\n * @param cachedAt\r\n * @param offset\r\n */\r\nfunction wasClockTurnedBack(cachedAt) {\r\n    const cachedAtSec = Number(cachedAt);\r\n    return cachedAtSec > nowSeconds();\r\n}\r\n/**\r\n * Waits for t number of milliseconds\r\n * @param t number\r\n * @param value T\r\n */\r\nfunction delay(t, value) {\r\n    return new Promise((resolve) => setTimeout(() => resolve(value), t));\r\n}\n\nvar TimeUtils = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    delay: delay,\n    isCacheExpired: isCacheExpired,\n    isTokenExpired: isTokenExpired,\n    nowSeconds: nowSeconds,\n    toDateFromSeconds: toDateFromSeconds,\n    toSecondsFromDate: toSecondsFromDate,\n    wasClockTurnedBack: wasClockTurnedBack\n});\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Create IdTokenEntity\r\n * @param homeAccountId\r\n * @param authenticationResult\r\n * @param clientId\r\n * @param authority\r\n */\r\nfunction createIdTokenEntity(homeAccountId, environment, idToken, clientId, tenantId) {\r\n    const idTokenEntity = {\r\n        credentialType: CredentialType.ID_TOKEN,\r\n        homeAccountId: homeAccountId,\r\n        environment: environment,\r\n        clientId: clientId,\r\n        secret: idToken,\r\n        realm: tenantId,\r\n        lastUpdatedAt: Date.now().toString(), // Set the last updated time to now\r\n    };\r\n    return idTokenEntity;\r\n}\r\n/**\r\n * Create AccessTokenEntity\r\n * @param homeAccountId\r\n * @param environment\r\n * @param accessToken\r\n * @param clientId\r\n * @param tenantId\r\n * @param scopes\r\n * @param expiresOn\r\n * @param extExpiresOn\r\n */\r\nfunction createAccessTokenEntity(homeAccountId, environment, accessToken, clientId, tenantId, scopes, expiresOn, extExpiresOn, base64Decode, refreshOn, tokenType, userAssertionHash, keyId, requestedClaims, requestedClaimsHash) {\r\n    const atEntity = {\r\n        homeAccountId: homeAccountId,\r\n        credentialType: CredentialType.ACCESS_TOKEN,\r\n        secret: accessToken,\r\n        cachedAt: nowSeconds().toString(),\r\n        expiresOn: expiresOn.toString(),\r\n        extendedExpiresOn: extExpiresOn.toString(),\r\n        environment: environment,\r\n        clientId: clientId,\r\n        realm: tenantId,\r\n        target: scopes,\r\n        tokenType: tokenType || AuthenticationScheme.BEARER,\r\n        lastUpdatedAt: Date.now().toString(), // Set the last updated time to now\r\n    };\r\n    if (userAssertionHash) {\r\n        atEntity.userAssertionHash = userAssertionHash;\r\n    }\r\n    if (refreshOn) {\r\n        atEntity.refreshOn = refreshOn.toString();\r\n    }\r\n    if (requestedClaims) {\r\n        atEntity.requestedClaims = requestedClaims;\r\n        atEntity.requestedClaimsHash = requestedClaimsHash;\r\n    }\r\n    /*\r\n     * Create Access Token With Auth Scheme instead of regular access token\r\n     * Cast to lower to handle \"bearer\" from ADFS\r\n     */\r\n    if (atEntity.tokenType?.toLowerCase() !==\r\n        AuthenticationScheme.BEARER.toLowerCase()) {\r\n        atEntity.credentialType = CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;\r\n        switch (atEntity.tokenType) {\r\n            case AuthenticationScheme.POP:\r\n                // Make sure keyId is present and add it to credential\r\n                const tokenClaims = extractTokenClaims(accessToken, base64Decode);\r\n                if (!tokenClaims?.cnf?.kid) {\r\n                    throw createClientAuthError(tokenClaimsCnfRequiredForSignedJwt);\r\n                }\r\n                atEntity.keyId = tokenClaims.cnf.kid;\r\n                break;\r\n            case AuthenticationScheme.SSH:\r\n                atEntity.keyId = keyId;\r\n        }\r\n    }\r\n    return atEntity;\r\n}\r\n/**\r\n * Create RefreshTokenEntity\r\n * @param homeAccountId\r\n * @param authenticationResult\r\n * @param clientId\r\n * @param authority\r\n */\r\nfunction createRefreshTokenEntity(homeAccountId, environment, refreshToken, clientId, familyId, userAssertionHash, expiresOn) {\r\n    const rtEntity = {\r\n        credentialType: CredentialType.REFRESH_TOKEN,\r\n        homeAccountId: homeAccountId,\r\n        environment: environment,\r\n        clientId: clientId,\r\n        secret: refreshToken,\r\n        lastUpdatedAt: Date.now().toString(),\r\n    };\r\n    if (userAssertionHash) {\r\n        rtEntity.userAssertionHash = userAssertionHash;\r\n    }\r\n    if (familyId) {\r\n        rtEntity.familyId = familyId;\r\n    }\r\n    if (expiresOn) {\r\n        rtEntity.expiresOn = expiresOn.toString();\r\n    }\r\n    return rtEntity;\r\n}\r\nfunction isCredentialEntity(entity) {\r\n    return (entity.hasOwnProperty(\"homeAccountId\") &&\r\n        entity.hasOwnProperty(\"environment\") &&\r\n        entity.hasOwnProperty(\"credentialType\") &&\r\n        entity.hasOwnProperty(\"clientId\") &&\r\n        entity.hasOwnProperty(\"secret\"));\r\n}\r\n/**\r\n * Validates an entity: checks for all expected params\r\n * @param entity\r\n */\r\nfunction isAccessTokenEntity(entity) {\r\n    if (!entity) {\r\n        return false;\r\n    }\r\n    return (isCredentialEntity(entity) &&\r\n        entity.hasOwnProperty(\"realm\") &&\r\n        entity.hasOwnProperty(\"target\") &&\r\n        (entity[\"credentialType\"] === CredentialType.ACCESS_TOKEN ||\r\n            entity[\"credentialType\"] ===\r\n                CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME));\r\n}\r\n/**\r\n * Validates an entity: checks for all expected params\r\n * @param entity\r\n */\r\nfunction isIdTokenEntity(entity) {\r\n    if (!entity) {\r\n        return false;\r\n    }\r\n    return (isCredentialEntity(entity) &&\r\n        entity.hasOwnProperty(\"realm\") &&\r\n        entity[\"credentialType\"] === CredentialType.ID_TOKEN);\r\n}\r\n/**\r\n * Validates an entity: checks for all expected params\r\n * @param entity\r\n */\r\nfunction isRefreshTokenEntity(entity) {\r\n    if (!entity) {\r\n        return false;\r\n    }\r\n    return (isCredentialEntity(entity) &&\r\n        entity[\"credentialType\"] === CredentialType.REFRESH_TOKEN);\r\n}\r\n/**\r\n * validates if a given cache entry is \"Telemetry\", parses <key,value>\r\n * @param key\r\n * @param entity\r\n */\r\nfunction isServerTelemetryEntity(key, entity) {\r\n    const validateKey = key.indexOf(SERVER_TELEM_CONSTANTS.CACHE_KEY) === 0;\r\n    let validateEntity = true;\r\n    if (entity) {\r\n        validateEntity =\r\n            entity.hasOwnProperty(\"failedRequests\") &&\r\n                entity.hasOwnProperty(\"errors\") &&\r\n                entity.hasOwnProperty(\"cacheHits\");\r\n    }\r\n    return validateKey && validateEntity;\r\n}\r\n/**\r\n * validates if a given cache entry is \"Throttling\", parses <key,value>\r\n * @param key\r\n * @param entity\r\n */\r\nfunction isThrottlingEntity(key, entity) {\r\n    let validateKey = false;\r\n    if (key) {\r\n        validateKey = key.indexOf(ThrottlingConstants.THROTTLING_PREFIX) === 0;\r\n    }\r\n    let validateEntity = true;\r\n    if (entity) {\r\n        validateEntity = entity.hasOwnProperty(\"throttleTime\");\r\n    }\r\n    return validateKey && validateEntity;\r\n}\r\n/**\r\n * Generate AppMetadata Cache Key as per the schema: appmetadata-<environment>-<client_id>\r\n */\r\nfunction generateAppMetadataKey({ environment, clientId, }) {\r\n    const appMetaDataKeyArray = [\r\n        APP_METADATA,\r\n        environment,\r\n        clientId,\r\n    ];\r\n    return appMetaDataKeyArray\r\n        .join(Separators.CACHE_KEY_SEPARATOR)\r\n        .toLowerCase();\r\n}\r\n/*\r\n * Validates an entity: checks for all expected params\r\n * @param entity\r\n */\r\nfunction isAppMetadataEntity(key, entity) {\r\n    if (!entity) {\r\n        return false;\r\n    }\r\n    return (key.indexOf(APP_METADATA) === 0 &&\r\n        entity.hasOwnProperty(\"clientId\") &&\r\n        entity.hasOwnProperty(\"environment\"));\r\n}\r\n/**\r\n * Validates an entity: checks for all expected params\r\n * @param entity\r\n */\r\nfunction isAuthorityMetadataEntity(key, entity) {\r\n    if (!entity) {\r\n        return false;\r\n    }\r\n    return (key.indexOf(AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) === 0 &&\r\n        entity.hasOwnProperty(\"aliases\") &&\r\n        entity.hasOwnProperty(\"preferred_cache\") &&\r\n        entity.hasOwnProperty(\"preferred_network\") &&\r\n        entity.hasOwnProperty(\"canonical_authority\") &&\r\n        entity.hasOwnProperty(\"authorization_endpoint\") &&\r\n        entity.hasOwnProperty(\"token_endpoint\") &&\r\n        entity.hasOwnProperty(\"issuer\") &&\r\n        entity.hasOwnProperty(\"aliasesFromNetwork\") &&\r\n        entity.hasOwnProperty(\"endpointsFromNetwork\") &&\r\n        entity.hasOwnProperty(\"expiresAt\") &&\r\n        entity.hasOwnProperty(\"jwks_uri\"));\r\n}\r\n/**\r\n * Reset the exiresAt value\r\n */\r\nfunction generateAuthorityMetadataExpiresAt() {\r\n    return (nowSeconds() +\r\n        AUTHORITY_METADATA_CONSTANTS.REFRESH_TIME_SECONDS);\r\n}\r\nfunction updateAuthorityEndpointMetadata(authorityMetadata, updatedValues, fromNetwork) {\r\n    authorityMetadata.authorization_endpoint =\r\n        updatedValues.authorization_endpoint;\r\n    authorityMetadata.token_endpoint = updatedValues.token_endpoint;\r\n    authorityMetadata.end_session_endpoint = updatedValues.end_session_endpoint;\r\n    authorityMetadata.issuer = updatedValues.issuer;\r\n    authorityMetadata.endpointsFromNetwork = fromNetwork;\r\n    authorityMetadata.jwks_uri = updatedValues.jwks_uri;\r\n}\r\nfunction updateCloudDiscoveryMetadata(authorityMetadata, updatedValues, fromNetwork) {\r\n    authorityMetadata.aliases = updatedValues.aliases;\r\n    authorityMetadata.preferred_cache = updatedValues.preferred_cache;\r\n    authorityMetadata.preferred_network = updatedValues.preferred_network;\r\n    authorityMetadata.aliasesFromNetwork = fromNetwork;\r\n}\r\n/**\r\n * Returns whether or not the data needs to be refreshed\r\n */\r\nfunction isAuthorityMetadataExpired(metadata) {\r\n    return metadata.expiresAt <= nowSeconds();\r\n}\n\nvar CacheHelpers = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    createAccessTokenEntity: createAccessTokenEntity,\n    createIdTokenEntity: createIdTokenEntity,\n    createRefreshTokenEntity: createRefreshTokenEntity,\n    generateAppMetadataKey: generateAppMetadataKey,\n    generateAuthorityMetadataExpiresAt: generateAuthorityMetadataExpiresAt,\n    isAccessTokenEntity: isAccessTokenEntity,\n    isAppMetadataEntity: isAppMetadataEntity,\n    isAuthorityMetadataEntity: isAuthorityMetadataEntity,\n    isAuthorityMetadataExpired: isAuthorityMetadataExpired,\n    isCredentialEntity: isCredentialEntity,\n    isIdTokenEntity: isIdTokenEntity,\n    isRefreshTokenEntity: isRefreshTokenEntity,\n    isServerTelemetryEntity: isServerTelemetryEntity,\n    isThrottlingEntity: isThrottlingEntity,\n    updateAuthorityEndpointMetadata: updateAuthorityEndpointMetadata,\n    updateCloudDiscoveryMetadata: updateCloudDiscoveryMetadata\n});\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * The authority class validates the authority URIs used by the user, and retrieves the OpenID Configuration Data from the\r\n * endpoint. It will store the pertinent config data in this object for use during token calls.\r\n * @internal\r\n */\r\nclass Authority {\r\n    constructor(authority, networkInterface, cacheManager, authorityOptions, logger, correlationId, performanceClient, managedIdentity) {\r\n        this.canonicalAuthority = authority;\r\n        this._canonicalAuthority.validateAsUri();\r\n        this.networkInterface = networkInterface;\r\n        this.cacheManager = cacheManager;\r\n        this.authorityOptions = authorityOptions;\r\n        this.regionDiscoveryMetadata = {\r\n            region_used: undefined,\r\n            region_source: undefined,\r\n            region_outcome: undefined,\r\n        };\r\n        this.logger = logger;\r\n        this.performanceClient = performanceClient;\r\n        this.correlationId = correlationId;\r\n        this.managedIdentity = managedIdentity || false;\r\n        this.regionDiscovery = new RegionDiscovery(networkInterface, this.logger, this.performanceClient, this.correlationId);\r\n    }\r\n    /**\r\n     * Get {@link AuthorityType}\r\n     * @param authorityUri {@link IUri}\r\n     * @private\r\n     */\r\n    getAuthorityType(authorityUri) {\r\n        // CIAM auth url pattern is being standardized as: <tenant>.ciamlogin.com\r\n        if (authorityUri.HostNameAndPort.endsWith(Constants.CIAM_AUTH_URL)) {\r\n            return AuthorityType.Ciam;\r\n        }\r\n        const pathSegments = authorityUri.PathSegments;\r\n        if (pathSegments.length) {\r\n            switch (pathSegments[0].toLowerCase()) {\r\n                case Constants.ADFS:\r\n                    return AuthorityType.Adfs;\r\n                case Constants.DSTS:\r\n                    return AuthorityType.Dsts;\r\n            }\r\n        }\r\n        return AuthorityType.Default;\r\n    }\r\n    // See above for AuthorityType\r\n    get authorityType() {\r\n        return this.getAuthorityType(this.canonicalAuthorityUrlComponents);\r\n    }\r\n    /**\r\n     * ProtocolMode enum representing the way endpoints are constructed.\r\n     */\r\n    get protocolMode() {\r\n        return this.authorityOptions.protocolMode;\r\n    }\r\n    /**\r\n     * Returns authorityOptions which can be used to reinstantiate a new authority instance\r\n     */\r\n    get options() {\r\n        return this.authorityOptions;\r\n    }\r\n    /**\r\n     * A URL that is the authority set by the developer\r\n     */\r\n    get canonicalAuthority() {\r\n        return this._canonicalAuthority.urlString;\r\n    }\r\n    /**\r\n     * Sets canonical authority.\r\n     */\r\n    set canonicalAuthority(url) {\r\n        this._canonicalAuthority = new UrlString(url);\r\n        this._canonicalAuthority.validateAsUri();\r\n        this._canonicalAuthorityUrlComponents = null;\r\n    }\r\n    /**\r\n     * Get authority components.\r\n     */\r\n    get canonicalAuthorityUrlComponents() {\r\n        if (!this._canonicalAuthorityUrlComponents) {\r\n            this._canonicalAuthorityUrlComponents =\r\n                this._canonicalAuthority.getUrlComponents();\r\n        }\r\n        return this._canonicalAuthorityUrlComponents;\r\n    }\r\n    /**\r\n     * Get hostname and port i.e. login.microsoftonline.com\r\n     */\r\n    get hostnameAndPort() {\r\n        return this.canonicalAuthorityUrlComponents.HostNameAndPort.toLowerCase();\r\n    }\r\n    /**\r\n     * Get tenant for authority.\r\n     */\r\n    get tenant() {\r\n        return this.canonicalAuthorityUrlComponents.PathSegments[0];\r\n    }\r\n    /**\r\n     * OAuth /authorize endpoint for requests\r\n     */\r\n    get authorizationEndpoint() {\r\n        if (this.discoveryComplete()) {\r\n            return this.replacePath(this.metadata.authorization_endpoint);\r\n        }\r\n        else {\r\n            throw createClientAuthError(endpointResolutionError);\r\n        }\r\n    }\r\n    /**\r\n     * OAuth /token endpoint for requests\r\n     */\r\n    get tokenEndpoint() {\r\n        if (this.discoveryComplete()) {\r\n            return this.replacePath(this.metadata.token_endpoint);\r\n        }\r\n        else {\r\n            throw createClientAuthError(endpointResolutionError);\r\n        }\r\n    }\r\n    get deviceCodeEndpoint() {\r\n        if (this.discoveryComplete()) {\r\n            return this.replacePath(this.metadata.token_endpoint.replace(\"/token\", \"/devicecode\"));\r\n        }\r\n        else {\r\n            throw createClientAuthError(endpointResolutionError);\r\n        }\r\n    }\r\n    /**\r\n     * OAuth logout endpoint for requests\r\n     */\r\n    get endSessionEndpoint() {\r\n        if (this.discoveryComplete()) {\r\n            // ROPC policies may not have end_session_endpoint set\r\n            if (!this.metadata.end_session_endpoint) {\r\n                throw createClientAuthError(endSessionEndpointNotSupported);\r\n            }\r\n            return this.replacePath(this.metadata.end_session_endpoint);\r\n        }\r\n        else {\r\n            throw createClientAuthError(endpointResolutionError);\r\n        }\r\n    }\r\n    /**\r\n     * OAuth issuer for requests\r\n     */\r\n    get selfSignedJwtAudience() {\r\n        if (this.discoveryComplete()) {\r\n            return this.replacePath(this.metadata.issuer);\r\n        }\r\n        else {\r\n            throw createClientAuthError(endpointResolutionError);\r\n        }\r\n    }\r\n    /**\r\n     * Jwks_uri for token signing keys\r\n     */\r\n    get jwksUri() {\r\n        if (this.discoveryComplete()) {\r\n            return this.replacePath(this.metadata.jwks_uri);\r\n        }\r\n        else {\r\n            throw createClientAuthError(endpointResolutionError);\r\n        }\r\n    }\r\n    /**\r\n     * Returns a flag indicating that tenant name can be replaced in authority {@link IUri}\r\n     * @param authorityUri {@link IUri}\r\n     * @private\r\n     */\r\n    canReplaceTenant(authorityUri) {\r\n        return (authorityUri.PathSegments.length === 1 &&\r\n            !Authority.reservedTenantDomains.has(authorityUri.PathSegments[0]) &&\r\n            this.getAuthorityType(authorityUri) === AuthorityType.Default &&\r\n            this.protocolMode !== ProtocolMode.OIDC);\r\n    }\r\n    /**\r\n     * Replaces tenant in url path with current tenant. Defaults to common.\r\n     * @param urlString\r\n     */\r\n    replaceTenant(urlString) {\r\n        return urlString.replace(/{tenant}|{tenantid}/g, this.tenant);\r\n    }\r\n    /**\r\n     * Replaces path such as tenant or policy with the current tenant or policy.\r\n     * @param urlString\r\n     */\r\n    replacePath(urlString) {\r\n        let endpoint = urlString;\r\n        const cachedAuthorityUrl = new UrlString(this.metadata.canonical_authority);\r\n        const cachedAuthorityUrlComponents = cachedAuthorityUrl.getUrlComponents();\r\n        const cachedAuthorityParts = cachedAuthorityUrlComponents.PathSegments;\r\n        const currentAuthorityParts = this.canonicalAuthorityUrlComponents.PathSegments;\r\n        currentAuthorityParts.forEach((currentPart, index) => {\r\n            let cachedPart = cachedAuthorityParts[index];\r\n            if (index === 0 &&\r\n                this.canReplaceTenant(cachedAuthorityUrlComponents)) {\r\n                const tenantId = new UrlString(this.metadata.authorization_endpoint).getUrlComponents().PathSegments[0];\r\n                /**\r\n                 * Check if AAD canonical authority contains tenant domain name, for example \"testdomain.onmicrosoft.com\",\r\n                 * by comparing its first path segment to the corresponding authorization endpoint path segment, which is\r\n                 * always resolved with tenant id by OIDC.\r\n                 */\r\n                if (cachedPart !== tenantId) {\r\n                    this.logger.verbose(`Replacing tenant domain name ${cachedPart} with id ${tenantId}`);\r\n                    cachedPart = tenantId;\r\n                }\r\n            }\r\n            if (currentPart !== cachedPart) {\r\n                endpoint = endpoint.replace(`/${cachedPart}/`, `/${currentPart}/`);\r\n            }\r\n        });\r\n        return this.replaceTenant(endpoint);\r\n    }\r\n    /**\r\n     * The default open id configuration endpoint for any canonical authority.\r\n     */\r\n    get defaultOpenIdConfigurationEndpoint() {\r\n        const canonicalAuthorityHost = this.hostnameAndPort;\r\n        if (this.canonicalAuthority.endsWith(\"v2.0/\") ||\r\n            this.authorityType === AuthorityType.Adfs ||\r\n            (this.protocolMode === ProtocolMode.OIDC &&\r\n                !this.isAliasOfKnownMicrosoftAuthority(canonicalAuthorityHost))) {\r\n            return `${this.canonicalAuthority}.well-known/openid-configuration`;\r\n        }\r\n        return `${this.canonicalAuthority}v2.0/.well-known/openid-configuration`;\r\n    }\r\n    /**\r\n     * Boolean that returns whether or not tenant discovery has been completed.\r\n     */\r\n    discoveryComplete() {\r\n        return !!this.metadata;\r\n    }\r\n    /**\r\n     * Perform endpoint discovery to discover aliases, preferred_cache, preferred_network\r\n     * and the /authorize, /token and logout endpoints.\r\n     */\r\n    async resolveEndpointsAsync() {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityResolveEndpointsAsync, this.correlationId);\r\n        const metadataEntity = this.getCurrentMetadataEntity();\r\n        const cloudDiscoverySource = await invokeAsync(this.updateCloudDiscoveryMetadata.bind(this), PerformanceEvents.AuthorityUpdateCloudDiscoveryMetadata, this.logger, this.performanceClient, this.correlationId)(metadataEntity);\r\n        this.canonicalAuthority = this.canonicalAuthority.replace(this.hostnameAndPort, metadataEntity.preferred_network);\r\n        const endpointSource = await invokeAsync(this.updateEndpointMetadata.bind(this), PerformanceEvents.AuthorityUpdateEndpointMetadata, this.logger, this.performanceClient, this.correlationId)(metadataEntity);\r\n        this.updateCachedMetadata(metadataEntity, cloudDiscoverySource, {\r\n            source: endpointSource,\r\n        });\r\n        this.performanceClient?.addFields({\r\n            cloudDiscoverySource: cloudDiscoverySource,\r\n            authorityEndpointSource: endpointSource,\r\n        }, this.correlationId);\r\n    }\r\n    /**\r\n     * Returns metadata entity from cache if it exists, otherwiser returns a new metadata entity built\r\n     * from the configured canonical authority\r\n     * @returns\r\n     */\r\n    getCurrentMetadataEntity() {\r\n        let metadataEntity = this.cacheManager.getAuthorityMetadataByAlias(this.hostnameAndPort);\r\n        if (!metadataEntity) {\r\n            metadataEntity = {\r\n                aliases: [],\r\n                preferred_cache: this.hostnameAndPort,\r\n                preferred_network: this.hostnameAndPort,\r\n                canonical_authority: this.canonicalAuthority,\r\n                authorization_endpoint: \"\",\r\n                token_endpoint: \"\",\r\n                end_session_endpoint: \"\",\r\n                issuer: \"\",\r\n                aliasesFromNetwork: false,\r\n                endpointsFromNetwork: false,\r\n                expiresAt: generateAuthorityMetadataExpiresAt(),\r\n                jwks_uri: \"\",\r\n            };\r\n        }\r\n        return metadataEntity;\r\n    }\r\n    /**\r\n     * Updates cached metadata based on metadata source and sets the instance's metadata\r\n     * property to the same value\r\n     * @param metadataEntity\r\n     * @param cloudDiscoverySource\r\n     * @param endpointMetadataResult\r\n     */\r\n    updateCachedMetadata(metadataEntity, cloudDiscoverySource, endpointMetadataResult) {\r\n        if (cloudDiscoverySource !== AuthorityMetadataSource.CACHE &&\r\n            endpointMetadataResult?.source !== AuthorityMetadataSource.CACHE) {\r\n            // Reset the expiration time unless both values came from a successful cache lookup\r\n            metadataEntity.expiresAt =\r\n                generateAuthorityMetadataExpiresAt();\r\n            metadataEntity.canonical_authority = this.canonicalAuthority;\r\n        }\r\n        const cacheKey = this.cacheManager.generateAuthorityMetadataCacheKey(metadataEntity.preferred_cache);\r\n        this.cacheManager.setAuthorityMetadata(cacheKey, metadataEntity);\r\n        this.metadata = metadataEntity;\r\n    }\r\n    /**\r\n     * Update AuthorityMetadataEntity with new endpoints and return where the information came from\r\n     * @param metadataEntity\r\n     */\r\n    async updateEndpointMetadata(metadataEntity) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityUpdateEndpointMetadata, this.correlationId);\r\n        const localMetadata = this.updateEndpointMetadataFromLocalSources(metadataEntity);\r\n        // Further update may be required for hardcoded metadata if regional metadata is preferred\r\n        if (localMetadata) {\r\n            if (localMetadata.source ===\r\n                AuthorityMetadataSource.HARDCODED_VALUES) {\r\n                // If the user prefers to use an azure region replace the global endpoints with regional information.\r\n                if (this.authorityOptions.azureRegionConfiguration?.azureRegion) {\r\n                    if (localMetadata.metadata) {\r\n                        const hardcodedMetadata = await invokeAsync(this.updateMetadataWithRegionalInformation.bind(this), PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation, this.logger, this.performanceClient, this.correlationId)(localMetadata.metadata);\r\n                        updateAuthorityEndpointMetadata(metadataEntity, hardcodedMetadata, false);\r\n                        metadataEntity.canonical_authority =\r\n                            this.canonicalAuthority;\r\n                    }\r\n                }\r\n            }\r\n            return localMetadata.source;\r\n        }\r\n        // Get metadata from network if local sources aren't available\r\n        let metadata = await invokeAsync(this.getEndpointMetadataFromNetwork.bind(this), PerformanceEvents.AuthorityGetEndpointMetadataFromNetwork, this.logger, this.performanceClient, this.correlationId)();\r\n        if (metadata) {\r\n            // If the user prefers to use an azure region replace the global endpoints with regional information.\r\n            if (this.authorityOptions.azureRegionConfiguration?.azureRegion) {\r\n                metadata = await invokeAsync(this.updateMetadataWithRegionalInformation.bind(this), PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation, this.logger, this.performanceClient, this.correlationId)(metadata);\r\n            }\r\n            updateAuthorityEndpointMetadata(metadataEntity, metadata, true);\r\n            return AuthorityMetadataSource.NETWORK;\r\n        }\r\n        else {\r\n            // Metadata could not be obtained from the config, cache, network or hardcoded values\r\n            throw createClientAuthError(openIdConfigError, this.defaultOpenIdConfigurationEndpoint);\r\n        }\r\n    }\r\n    /**\r\n     * Updates endpoint metadata from local sources and returns where the information was retrieved from and the metadata config\r\n     * response if the source is hardcoded metadata\r\n     * @param metadataEntity\r\n     * @returns\r\n     */\r\n    updateEndpointMetadataFromLocalSources(metadataEntity) {\r\n        this.logger.verbose(\"Attempting to get endpoint metadata from authority configuration\");\r\n        const configMetadata = this.getEndpointMetadataFromConfig();\r\n        if (configMetadata) {\r\n            this.logger.verbose(\"Found endpoint metadata in authority configuration\");\r\n            updateAuthorityEndpointMetadata(metadataEntity, configMetadata, false);\r\n            return {\r\n                source: AuthorityMetadataSource.CONFIG,\r\n            };\r\n        }\r\n        this.logger.verbose(\"Did not find endpoint metadata in the config... Attempting to get endpoint metadata from the hardcoded values.\");\r\n        // skipAuthorityMetadataCache is used to bypass hardcoded authority metadata and force a network metadata cache lookup and network metadata request if no cached response is available.\r\n        if (this.authorityOptions.skipAuthorityMetadataCache) {\r\n            this.logger.verbose(\"Skipping hardcoded metadata cache since skipAuthorityMetadataCache is set to true. Attempting to get endpoint metadata from the network metadata cache.\");\r\n        }\r\n        else {\r\n            const hardcodedMetadata = this.getEndpointMetadataFromHardcodedValues();\r\n            if (hardcodedMetadata) {\r\n                updateAuthorityEndpointMetadata(metadataEntity, hardcodedMetadata, false);\r\n                return {\r\n                    source: AuthorityMetadataSource.HARDCODED_VALUES,\r\n                    metadata: hardcodedMetadata,\r\n                };\r\n            }\r\n            else {\r\n                this.logger.verbose(\"Did not find endpoint metadata in hardcoded values... Attempting to get endpoint metadata from the network metadata cache.\");\r\n            }\r\n        }\r\n        // Check cached metadata entity expiration status\r\n        const metadataEntityExpired = isAuthorityMetadataExpired(metadataEntity);\r\n        if (this.isAuthoritySameType(metadataEntity) &&\r\n            metadataEntity.endpointsFromNetwork &&\r\n            !metadataEntityExpired) {\r\n            // No need to update\r\n            this.logger.verbose(\"Found endpoint metadata in the cache.\");\r\n            return { source: AuthorityMetadataSource.CACHE };\r\n        }\r\n        else if (metadataEntityExpired) {\r\n            this.logger.verbose(\"The metadata entity is expired.\");\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Compares the number of url components after the domain to determine if the cached\r\n     * authority metadata can be used for the requested authority. Protects against same domain different\r\n     * authority such as login.microsoftonline.com/tenant and login.microsoftonline.com/tfp/tenant/policy\r\n     * @param metadataEntity\r\n     */\r\n    isAuthoritySameType(metadataEntity) {\r\n        const cachedAuthorityUrl = new UrlString(metadataEntity.canonical_authority);\r\n        const cachedParts = cachedAuthorityUrl.getUrlComponents().PathSegments;\r\n        return (cachedParts.length ===\r\n            this.canonicalAuthorityUrlComponents.PathSegments.length);\r\n    }\r\n    /**\r\n     * Parse authorityMetadata config option\r\n     */\r\n    getEndpointMetadataFromConfig() {\r\n        if (this.authorityOptions.authorityMetadata) {\r\n            try {\r\n                return JSON.parse(this.authorityOptions.authorityMetadata);\r\n            }\r\n            catch (e) {\r\n                throw createClientConfigurationError(invalidAuthorityMetadata);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Gets OAuth endpoints from the given OpenID configuration endpoint.\r\n     *\r\n     * @param hasHardcodedMetadata boolean\r\n     */\r\n    async getEndpointMetadataFromNetwork() {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityGetEndpointMetadataFromNetwork, this.correlationId);\r\n        const options = {};\r\n        /*\r\n         * TODO: Add a timeout if the authority exists in our library's\r\n         * hardcoded list of metadata\r\n         */\r\n        const openIdConfigurationEndpoint = this.defaultOpenIdConfigurationEndpoint;\r\n        this.logger.verbose(`Authority.getEndpointMetadataFromNetwork: attempting to retrieve OAuth endpoints from ${openIdConfigurationEndpoint}`);\r\n        try {\r\n            const response = await this.networkInterface.sendGetRequestAsync(openIdConfigurationEndpoint, options);\r\n            const isValidResponse = isOpenIdConfigResponse(response.body);\r\n            if (isValidResponse) {\r\n                return response.body;\r\n            }\r\n            else {\r\n                this.logger.verbose(`Authority.getEndpointMetadataFromNetwork: could not parse response as OpenID configuration`);\r\n                return null;\r\n            }\r\n        }\r\n        catch (e) {\r\n            this.logger.verbose(`Authority.getEndpointMetadataFromNetwork: ${e}`);\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Get OAuth endpoints for common authorities.\r\n     */\r\n    getEndpointMetadataFromHardcodedValues() {\r\n        if (this.hostnameAndPort in EndpointMetadata) {\r\n            return EndpointMetadata[this.hostnameAndPort];\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Update the retrieved metadata with regional information.\r\n     * User selected Azure region will be used if configured.\r\n     */\r\n    async updateMetadataWithRegionalInformation(metadata) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation, this.correlationId);\r\n        const userConfiguredAzureRegion = this.authorityOptions.azureRegionConfiguration?.azureRegion;\r\n        if (userConfiguredAzureRegion) {\r\n            if (userConfiguredAzureRegion !==\r\n                Constants.AZURE_REGION_AUTO_DISCOVER_FLAG) {\r\n                this.regionDiscoveryMetadata.region_outcome =\r\n                    RegionDiscoveryOutcomes.CONFIGURED_NO_AUTO_DETECTION;\r\n                this.regionDiscoveryMetadata.region_used =\r\n                    userConfiguredAzureRegion;\r\n                return Authority.replaceWithRegionalInformation(metadata, userConfiguredAzureRegion);\r\n            }\r\n            const autodetectedRegionName = await invokeAsync(this.regionDiscovery.detectRegion.bind(this.regionDiscovery), PerformanceEvents.RegionDiscoveryDetectRegion, this.logger, this.performanceClient, this.correlationId)(this.authorityOptions.azureRegionConfiguration\r\n                ?.environmentRegion, this.regionDiscoveryMetadata);\r\n            if (autodetectedRegionName) {\r\n                this.regionDiscoveryMetadata.region_outcome =\r\n                    RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_SUCCESSFUL;\r\n                this.regionDiscoveryMetadata.region_used =\r\n                    autodetectedRegionName;\r\n                return Authority.replaceWithRegionalInformation(metadata, autodetectedRegionName);\r\n            }\r\n            this.regionDiscoveryMetadata.region_outcome =\r\n                RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_FAILED;\r\n        }\r\n        return metadata;\r\n    }\r\n    /**\r\n     * Updates the AuthorityMetadataEntity with new aliases, preferred_network and preferred_cache\r\n     * and returns where the information was retrieved from\r\n     * @param metadataEntity\r\n     * @returns AuthorityMetadataSource\r\n     */\r\n    async updateCloudDiscoveryMetadata(metadataEntity) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityUpdateCloudDiscoveryMetadata, this.correlationId);\r\n        const localMetadataSource = this.updateCloudDiscoveryMetadataFromLocalSources(metadataEntity);\r\n        if (localMetadataSource) {\r\n            return localMetadataSource;\r\n        }\r\n        // Fallback to network as metadata source\r\n        const metadata = await invokeAsync(this.getCloudDiscoveryMetadataFromNetwork.bind(this), PerformanceEvents.AuthorityGetCloudDiscoveryMetadataFromNetwork, this.logger, this.performanceClient, this.correlationId)();\r\n        if (metadata) {\r\n            updateCloudDiscoveryMetadata(metadataEntity, metadata, true);\r\n            return AuthorityMetadataSource.NETWORK;\r\n        }\r\n        // Metadata could not be obtained from the config, cache, network or hardcoded values\r\n        throw createClientConfigurationError(untrustedAuthority);\r\n    }\r\n    updateCloudDiscoveryMetadataFromLocalSources(metadataEntity) {\r\n        this.logger.verbose(\"Attempting to get cloud discovery metadata  from authority configuration\");\r\n        this.logger.verbosePii(`Known Authorities: ${this.authorityOptions.knownAuthorities ||\r\n            Constants.NOT_APPLICABLE}`);\r\n        this.logger.verbosePii(`Authority Metadata: ${this.authorityOptions.authorityMetadata ||\r\n            Constants.NOT_APPLICABLE}`);\r\n        this.logger.verbosePii(`Canonical Authority: ${metadataEntity.canonical_authority || Constants.NOT_APPLICABLE}`);\r\n        const metadata = this.getCloudDiscoveryMetadataFromConfig();\r\n        if (metadata) {\r\n            this.logger.verbose(\"Found cloud discovery metadata in authority configuration\");\r\n            updateCloudDiscoveryMetadata(metadataEntity, metadata, false);\r\n            return AuthorityMetadataSource.CONFIG;\r\n        }\r\n        // If the cached metadata came from config but that config was not passed to this instance, we must go to hardcoded values\r\n        this.logger.verbose(\"Did not find cloud discovery metadata in the config... Attempting to get cloud discovery metadata from the hardcoded values.\");\r\n        if (this.options.skipAuthorityMetadataCache) {\r\n            this.logger.verbose(\"Skipping hardcoded cloud discovery metadata cache since skipAuthorityMetadataCache is set to true. Attempting to get cloud discovery metadata from the network metadata cache.\");\r\n        }\r\n        else {\r\n            const hardcodedMetadata = getCloudDiscoveryMetadataFromHardcodedValues(this.hostnameAndPort);\r\n            if (hardcodedMetadata) {\r\n                this.logger.verbose(\"Found cloud discovery metadata from hardcoded values.\");\r\n                updateCloudDiscoveryMetadata(metadataEntity, hardcodedMetadata, false);\r\n                return AuthorityMetadataSource.HARDCODED_VALUES;\r\n            }\r\n            this.logger.verbose(\"Did not find cloud discovery metadata in hardcoded values... Attempting to get cloud discovery metadata from the network metadata cache.\");\r\n        }\r\n        const metadataEntityExpired = isAuthorityMetadataExpired(metadataEntity);\r\n        if (this.isAuthoritySameType(metadataEntity) &&\r\n            metadataEntity.aliasesFromNetwork &&\r\n            !metadataEntityExpired) {\r\n            this.logger.verbose(\"Found cloud discovery metadata in the cache.\");\r\n            // No need to update\r\n            return AuthorityMetadataSource.CACHE;\r\n        }\r\n        else if (metadataEntityExpired) {\r\n            this.logger.verbose(\"The metadata entity is expired.\");\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Parse cloudDiscoveryMetadata config or check knownAuthorities\r\n     */\r\n    getCloudDiscoveryMetadataFromConfig() {\r\n        // CIAM does not support cloud discovery metadata\r\n        if (this.authorityType === AuthorityType.Ciam) {\r\n            this.logger.verbose(\"CIAM authorities do not support cloud discovery metadata, generate the aliases from authority host.\");\r\n            return Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\r\n        }\r\n        // Check if network response was provided in config\r\n        if (this.authorityOptions.cloudDiscoveryMetadata) {\r\n            this.logger.verbose(\"The cloud discovery metadata has been provided as a network response, in the config.\");\r\n            try {\r\n                this.logger.verbose(\"Attempting to parse the cloud discovery metadata.\");\r\n                const parsedResponse = JSON.parse(this.authorityOptions.cloudDiscoveryMetadata);\r\n                const metadata = getCloudDiscoveryMetadataFromNetworkResponse(parsedResponse.metadata, this.hostnameAndPort);\r\n                this.logger.verbose(\"Parsed the cloud discovery metadata.\");\r\n                if (metadata) {\r\n                    this.logger.verbose(\"There is returnable metadata attached to the parsed cloud discovery metadata.\");\r\n                    return metadata;\r\n                }\r\n                else {\r\n                    this.logger.verbose(\"There is no metadata attached to the parsed cloud discovery metadata.\");\r\n                }\r\n            }\r\n            catch (e) {\r\n                this.logger.verbose(\"Unable to parse the cloud discovery metadata. Throwing Invalid Cloud Discovery Metadata Error.\");\r\n                throw createClientConfigurationError(invalidCloudDiscoveryMetadata);\r\n            }\r\n        }\r\n        // If cloudDiscoveryMetadata is empty or does not contain the host, check knownAuthorities\r\n        if (this.isInKnownAuthorities()) {\r\n            this.logger.verbose(\"The host is included in knownAuthorities. Creating new cloud discovery metadata from the host.\");\r\n            return Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Called to get metadata from network if CloudDiscoveryMetadata was not populated by config\r\n     *\r\n     * @param hasHardcodedMetadata boolean\r\n     */\r\n    async getCloudDiscoveryMetadataFromNetwork() {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityGetCloudDiscoveryMetadataFromNetwork, this.correlationId);\r\n        const instanceDiscoveryEndpoint = `${Constants.AAD_INSTANCE_DISCOVERY_ENDPT}${this.canonicalAuthority}oauth2/v2.0/authorize`;\r\n        const options = {};\r\n        /*\r\n         * TODO: Add a timeout if the authority exists in our library's\r\n         * hardcoded list of metadata\r\n         */\r\n        let match = null;\r\n        try {\r\n            const response = await this.networkInterface.sendGetRequestAsync(instanceDiscoveryEndpoint, options);\r\n            let typedResponseBody;\r\n            let metadata;\r\n            if (isCloudInstanceDiscoveryResponse(response.body)) {\r\n                typedResponseBody =\r\n                    response.body;\r\n                metadata = typedResponseBody.metadata;\r\n                this.logger.verbosePii(`tenant_discovery_endpoint is: ${typedResponseBody.tenant_discovery_endpoint}`);\r\n            }\r\n            else if (isCloudInstanceDiscoveryErrorResponse(response.body)) {\r\n                this.logger.warning(`A CloudInstanceDiscoveryErrorResponse was returned. The cloud instance discovery network request's status code is: ${response.status}`);\r\n                typedResponseBody =\r\n                    response.body;\r\n                if (typedResponseBody.error === Constants.INVALID_INSTANCE) {\r\n                    this.logger.error(\"The CloudInstanceDiscoveryErrorResponse error is invalid_instance.\");\r\n                    return null;\r\n                }\r\n                this.logger.warning(`The CloudInstanceDiscoveryErrorResponse error is ${typedResponseBody.error}`);\r\n                this.logger.warning(`The CloudInstanceDiscoveryErrorResponse error description is ${typedResponseBody.error_description}`);\r\n                this.logger.warning(\"Setting the value of the CloudInstanceDiscoveryMetadata (returned from the network) to []\");\r\n                metadata = [];\r\n            }\r\n            else {\r\n                this.logger.error(\"AAD did not return a CloudInstanceDiscoveryResponse or CloudInstanceDiscoveryErrorResponse\");\r\n                return null;\r\n            }\r\n            this.logger.verbose(\"Attempting to find a match between the developer's authority and the CloudInstanceDiscoveryMetadata returned from the network request.\");\r\n            match = getCloudDiscoveryMetadataFromNetworkResponse(metadata, this.hostnameAndPort);\r\n        }\r\n        catch (error) {\r\n            if (error instanceof AuthError) {\r\n                this.logger.error(`There was a network error while attempting to get the cloud discovery instance metadata.\\nError: ${error.errorCode}\\nError Description: ${error.errorMessage}`);\r\n            }\r\n            else {\r\n                const typedError = error;\r\n                this.logger.error(`A non-MSALJS error was thrown while attempting to get the cloud instance discovery metadata.\\nError: ${typedError.name}\\nError Description: ${typedError.message}`);\r\n            }\r\n            return null;\r\n        }\r\n        // Custom Domain scenario, host is trusted because Instance Discovery call succeeded\r\n        if (!match) {\r\n            this.logger.warning(\"The developer's authority was not found within the CloudInstanceDiscoveryMetadata returned from the network request.\");\r\n            this.logger.verbose(\"Creating custom Authority for custom domain scenario.\");\r\n            match = Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\r\n        }\r\n        return match;\r\n    }\r\n    /**\r\n     * Helper function to determine if this host is included in the knownAuthorities config option\r\n     */\r\n    isInKnownAuthorities() {\r\n        const matches = this.authorityOptions.knownAuthorities.filter((authority) => {\r\n            return (authority &&\r\n                UrlString.getDomainFromUrl(authority).toLowerCase() ===\r\n                    this.hostnameAndPort);\r\n        });\r\n        return matches.length > 0;\r\n    }\r\n    /**\r\n     * helper function to populate the authority based on azureCloudOptions\r\n     * @param authorityString\r\n     * @param azureCloudOptions\r\n     */\r\n    static generateAuthority(authorityString, azureCloudOptions) {\r\n        let authorityAzureCloudInstance;\r\n        if (azureCloudOptions &&\r\n            azureCloudOptions.azureCloudInstance !== AzureCloudInstance.None) {\r\n            const tenant = azureCloudOptions.tenant\r\n                ? azureCloudOptions.tenant\r\n                : Constants.DEFAULT_COMMON_TENANT;\r\n            authorityAzureCloudInstance = `${azureCloudOptions.azureCloudInstance}/${tenant}/`;\r\n        }\r\n        return authorityAzureCloudInstance\r\n            ? authorityAzureCloudInstance\r\n            : authorityString;\r\n    }\r\n    /**\r\n     * Creates cloud discovery metadata object from a given host\r\n     * @param host\r\n     */\r\n    static createCloudDiscoveryMetadataFromHost(host) {\r\n        return {\r\n            preferred_network: host,\r\n            preferred_cache: host,\r\n            aliases: [host],\r\n        };\r\n    }\r\n    /**\r\n     * helper function to generate environment from authority object\r\n     */\r\n    getPreferredCache() {\r\n        if (this.managedIdentity) {\r\n            return Constants.DEFAULT_AUTHORITY_HOST;\r\n        }\r\n        else if (this.discoveryComplete()) {\r\n            return this.metadata.preferred_cache;\r\n        }\r\n        else {\r\n            throw createClientAuthError(endpointResolutionError);\r\n        }\r\n    }\r\n    /**\r\n     * Returns whether or not the provided host is an alias of this authority instance\r\n     * @param host\r\n     */\r\n    isAlias(host) {\r\n        return this.metadata.aliases.indexOf(host) > -1;\r\n    }\r\n    /**\r\n     * Returns whether or not the provided host is an alias of a known Microsoft authority for purposes of endpoint discovery\r\n     * @param host\r\n     */\r\n    isAliasOfKnownMicrosoftAuthority(host) {\r\n        return InstanceDiscoveryMetadataAliases.has(host);\r\n    }\r\n    /**\r\n     * Checks whether the provided host is that of a public cloud authority\r\n     *\r\n     * @param authority string\r\n     * @returns bool\r\n     */\r\n    static isPublicCloudAuthority(host) {\r\n        return Constants.KNOWN_PUBLIC_CLOUDS.indexOf(host) >= 0;\r\n    }\r\n    /**\r\n     * Rebuild the authority string with the region\r\n     *\r\n     * @param host string\r\n     * @param region string\r\n     */\r\n    static buildRegionalAuthorityString(host, region, queryString) {\r\n        // Create and validate a Url string object with the initial authority string\r\n        const authorityUrlInstance = new UrlString(host);\r\n        authorityUrlInstance.validateAsUri();\r\n        const authorityUrlParts = authorityUrlInstance.getUrlComponents();\r\n        let hostNameAndPort = `${region}.${authorityUrlParts.HostNameAndPort}`;\r\n        if (this.isPublicCloudAuthority(authorityUrlParts.HostNameAndPort)) {\r\n            hostNameAndPort = `${region}.${Constants.REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX}`;\r\n        }\r\n        // Include the query string portion of the url\r\n        const url = UrlString.constructAuthorityUriFromObject({\r\n            ...authorityUrlInstance.getUrlComponents(),\r\n            HostNameAndPort: hostNameAndPort,\r\n        }).urlString;\r\n        // Add the query string if a query string was provided\r\n        if (queryString)\r\n            return `${url}?${queryString}`;\r\n        return url;\r\n    }\r\n    /**\r\n     * Replace the endpoints in the metadata object with their regional equivalents.\r\n     *\r\n     * @param metadata OpenIdConfigResponse\r\n     * @param azureRegion string\r\n     */\r\n    static replaceWithRegionalInformation(metadata, azureRegion) {\r\n        const regionalMetadata = { ...metadata };\r\n        regionalMetadata.authorization_endpoint =\r\n            Authority.buildRegionalAuthorityString(regionalMetadata.authorization_endpoint, azureRegion);\r\n        regionalMetadata.token_endpoint =\r\n            Authority.buildRegionalAuthorityString(regionalMetadata.token_endpoint, azureRegion);\r\n        if (regionalMetadata.end_session_endpoint) {\r\n            regionalMetadata.end_session_endpoint =\r\n                Authority.buildRegionalAuthorityString(regionalMetadata.end_session_endpoint, azureRegion);\r\n        }\r\n        return regionalMetadata;\r\n    }\r\n    /**\r\n     * Transform CIAM_AUTHORIY as per the below rules:\r\n     * If no path segments found and it is a CIAM authority (hostname ends with .ciamlogin.com), then transform it\r\n     *\r\n     * NOTE: The transformation path should go away once STS supports CIAM with the format: `tenantIdorDomain.ciamlogin.com`\r\n     * `ciamlogin.com` can also change in the future and we should accommodate the same\r\n     *\r\n     * @param authority\r\n     */\r\n    static transformCIAMAuthority(authority) {\r\n        let ciamAuthority = authority;\r\n        const authorityUrl = new UrlString(authority);\r\n        const authorityUrlComponents = authorityUrl.getUrlComponents();\r\n        // check if transformation is needed\r\n        if (authorityUrlComponents.PathSegments.length === 0 &&\r\n            authorityUrlComponents.HostNameAndPort.endsWith(Constants.CIAM_AUTH_URL)) {\r\n            const tenantIdOrDomain = authorityUrlComponents.HostNameAndPort.split(\".\")[0];\r\n            ciamAuthority = `${ciamAuthority}${tenantIdOrDomain}${Constants.AAD_TENANT_DOMAIN_SUFFIX}`;\r\n        }\r\n        return ciamAuthority;\r\n    }\r\n}\r\n// Reserved tenant domain names that will not be replaced with tenant id\r\nAuthority.reservedTenantDomains = new Set([\r\n    \"{tenant}\",\r\n    \"{tenantid}\",\r\n    AADAuthorityConstants.COMMON,\r\n    AADAuthorityConstants.CONSUMERS,\r\n    AADAuthorityConstants.ORGANIZATIONS,\r\n]);\r\n/**\r\n * Extract tenantId from authority\r\n */\r\nfunction getTenantFromAuthorityString(authority) {\r\n    const authorityUrl = new UrlString(authority);\r\n    const authorityUrlComponents = authorityUrl.getUrlComponents();\r\n    /**\r\n     * For credential matching purposes, tenantId is the last path segment of the authority URL:\r\n     *  AAD Authority - domain/tenantId -> Credentials are cached with realm = tenantId\r\n     *  B2C Authority - domain/{tenantId}?/.../policy -> Credentials are cached with realm = policy\r\n     *  tenantId is downcased because B2C policies can have mixed case but tfp claim is downcased\r\n     *\r\n     * Note that we may not have any path segments in certain OIDC scenarios.\r\n     */\r\n    const tenantId = authorityUrlComponents.PathSegments.slice(-1)[0]?.toLowerCase();\r\n    switch (tenantId) {\r\n        case AADAuthorityConstants.COMMON:\r\n        case AADAuthorityConstants.ORGANIZATIONS:\r\n        case AADAuthorityConstants.CONSUMERS:\r\n            return undefined;\r\n        default:\r\n            return tenantId;\r\n    }\r\n}\r\nfunction formatAuthorityUri(authorityUri) {\r\n    return authorityUri.endsWith(Constants.FORWARD_SLASH)\r\n        ? authorityUri\r\n        : `${authorityUri}${Constants.FORWARD_SLASH}`;\r\n}\r\nfunction buildStaticAuthorityOptions(authOptions) {\r\n    const rawCloudDiscoveryMetadata = authOptions.cloudDiscoveryMetadata;\r\n    let cloudDiscoveryMetadata = undefined;\r\n    if (rawCloudDiscoveryMetadata) {\r\n        try {\r\n            cloudDiscoveryMetadata = JSON.parse(rawCloudDiscoveryMetadata);\r\n        }\r\n        catch (e) {\r\n            throw createClientConfigurationError(invalidCloudDiscoveryMetadata);\r\n        }\r\n    }\r\n    return {\r\n        canonicalAuthority: authOptions.authority\r\n            ? formatAuthorityUri(authOptions.authority)\r\n            : undefined,\r\n        knownAuthorities: authOptions.knownAuthorities,\r\n        cloudDiscoveryMetadata: cloudDiscoveryMetadata,\r\n    };\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Create an authority object of the correct type based on the url\r\n * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)\r\n *\r\n * Also performs endpoint discovery.\r\n *\r\n * @param authorityUri\r\n * @param networkClient\r\n * @param protocolMode\r\n * @internal\r\n */\r\nasync function createDiscoveredInstance(authorityUri, networkClient, cacheManager, authorityOptions, logger, correlationId, performanceClient) {\r\n    performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance, correlationId);\r\n    const authorityUriFinal = Authority.transformCIAMAuthority(formatAuthorityUri(authorityUri));\r\n    // Initialize authority and perform discovery endpoint check.\r\n    const acquireTokenAuthority = new Authority(authorityUriFinal, networkClient, cacheManager, authorityOptions, logger, correlationId, performanceClient);\r\n    try {\r\n        await invokeAsync(acquireTokenAuthority.resolveEndpointsAsync.bind(acquireTokenAuthority), PerformanceEvents.AuthorityResolveEndpointsAsync, logger, performanceClient, correlationId)();\r\n        return acquireTokenAuthority;\r\n    }\r\n    catch (e) {\r\n        throw createClientAuthError(endpointResolutionError);\r\n    }\r\n}\n\nvar AuthorityFactory = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    createDiscoveredInstance: createDiscoveredInstance\n});\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst CLIENT_ID = \"client_id\";\r\nconst REDIRECT_URI = \"redirect_uri\";\r\nconst RESPONSE_TYPE = \"response_type\";\r\nconst RESPONSE_MODE = \"response_mode\";\r\nconst GRANT_TYPE = \"grant_type\";\r\nconst CLAIMS = \"claims\";\r\nconst SCOPE = \"scope\";\r\nconst ERROR = \"error\";\r\nconst ERROR_DESCRIPTION = \"error_description\";\r\nconst ACCESS_TOKEN = \"access_token\";\r\nconst ID_TOKEN = \"id_token\";\r\nconst REFRESH_TOKEN = \"refresh_token\";\r\nconst EXPIRES_IN = \"expires_in\";\r\nconst REFRESH_TOKEN_EXPIRES_IN = \"refresh_token_expires_in\";\r\nconst STATE = \"state\";\r\nconst NONCE = \"nonce\";\r\nconst PROMPT = \"prompt\";\r\nconst SESSION_STATE = \"session_state\";\r\nconst CLIENT_INFO = \"client_info\";\r\nconst CODE = \"code\";\r\nconst CODE_CHALLENGE = \"code_challenge\";\r\nconst CODE_CHALLENGE_METHOD = \"code_challenge_method\";\r\nconst CODE_VERIFIER = \"code_verifier\";\r\nconst CLIENT_REQUEST_ID = \"client-request-id\";\r\nconst X_CLIENT_SKU = \"x-client-SKU\";\r\nconst X_CLIENT_VER = \"x-client-VER\";\r\nconst X_CLIENT_OS = \"x-client-OS\";\r\nconst X_CLIENT_CPU = \"x-client-CPU\";\r\nconst X_CLIENT_CURR_TELEM = \"x-client-current-telemetry\";\r\nconst X_CLIENT_LAST_TELEM = \"x-client-last-telemetry\";\r\nconst X_MS_LIB_CAPABILITY = \"x-ms-lib-capability\";\r\nconst X_APP_NAME = \"x-app-name\";\r\nconst X_APP_VER = \"x-app-ver\";\r\nconst POST_LOGOUT_URI = \"post_logout_redirect_uri\";\r\nconst ID_TOKEN_HINT = \"id_token_hint\";\r\nconst DEVICE_CODE = \"device_code\";\r\nconst CLIENT_SECRET = \"client_secret\";\r\nconst CLIENT_ASSERTION = \"client_assertion\";\r\nconst CLIENT_ASSERTION_TYPE = \"client_assertion_type\";\r\nconst TOKEN_TYPE = \"token_type\";\r\nconst REQ_CNF = \"req_cnf\";\r\nconst OBO_ASSERTION = \"assertion\";\r\nconst REQUESTED_TOKEN_USE = \"requested_token_use\";\r\nconst ON_BEHALF_OF = \"on_behalf_of\";\r\nconst FOCI = \"foci\";\r\nconst CCS_HEADER = \"X-AnchorMailbox\";\r\nconst RETURN_SPA_CODE = \"return_spa_code\";\r\nconst NATIVE_BROKER = \"nativebroker\";\r\nconst LOGOUT_HINT = \"logout_hint\";\r\nconst SID = \"sid\";\r\nconst LOGIN_HINT = \"login_hint\";\r\nconst DOMAIN_HINT = \"domain_hint\";\r\nconst X_CLIENT_EXTRA_SKU = \"x-client-xtra-sku\";\r\nconst BROKER_CLIENT_ID = \"brk_client_id\";\r\nconst BROKER_REDIRECT_URI = \"brk_redirect_uri\";\r\nconst INSTANCE_AWARE = \"instance_aware\";\r\nconst EAR_JWK = \"ear_jwk\";\r\nconst EAR_JWE_CRYPTO = \"ear_jwe_crypto\";\n\nvar AADServerParamKeys = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ACCESS_TOKEN: ACCESS_TOKEN,\n    BROKER_CLIENT_ID: BROKER_CLIENT_ID,\n    BROKER_REDIRECT_URI: BROKER_REDIRECT_URI,\n    CCS_HEADER: CCS_HEADER,\n    CLAIMS: CLAIMS,\n    CLIENT_ASSERTION: CLIENT_ASSERTION,\n    CLIENT_ASSERTION_TYPE: CLIENT_ASSERTION_TYPE,\n    CLIENT_ID: CLIENT_ID,\n    CLIENT_INFO: CLIENT_INFO,\n    CLIENT_REQUEST_ID: CLIENT_REQUEST_ID,\n    CLIENT_SECRET: CLIENT_SECRET,\n    CODE: CODE,\n    CODE_CHALLENGE: CODE_CHALLENGE,\n    CODE_CHALLENGE_METHOD: CODE_CHALLENGE_METHOD,\n    CODE_VERIFIER: CODE_VERIFIER,\n    DEVICE_CODE: DEVICE_CODE,\n    DOMAIN_HINT: DOMAIN_HINT,\n    EAR_JWE_CRYPTO: EAR_JWE_CRYPTO,\n    EAR_JWK: EAR_JWK,\n    ERROR: ERROR,\n    ERROR_DESCRIPTION: ERROR_DESCRIPTION,\n    EXPIRES_IN: EXPIRES_IN,\n    FOCI: FOCI,\n    GRANT_TYPE: GRANT_TYPE,\n    ID_TOKEN: ID_TOKEN,\n    ID_TOKEN_HINT: ID_TOKEN_HINT,\n    INSTANCE_AWARE: INSTANCE_AWARE,\n    LOGIN_HINT: LOGIN_HINT,\n    LOGOUT_HINT: LOGOUT_HINT,\n    NATIVE_BROKER: NATIVE_BROKER,\n    NONCE: NONCE,\n    OBO_ASSERTION: OBO_ASSERTION,\n    ON_BEHALF_OF: ON_BEHALF_OF,\n    POST_LOGOUT_URI: POST_LOGOUT_URI,\n    PROMPT: PROMPT,\n    REDIRECT_URI: REDIRECT_URI,\n    REFRESH_TOKEN: REFRESH_TOKEN,\n    REFRESH_TOKEN_EXPIRES_IN: REFRESH_TOKEN_EXPIRES_IN,\n    REQUESTED_TOKEN_USE: REQUESTED_TOKEN_USE,\n    REQ_CNF: REQ_CNF,\n    RESPONSE_MODE: RESPONSE_MODE,\n    RESPONSE_TYPE: RESPONSE_TYPE,\n    RETURN_SPA_CODE: RETURN_SPA_CODE,\n    SCOPE: SCOPE,\n    SESSION_STATE: SESSION_STATE,\n    SID: SID,\n    STATE: STATE,\n    TOKEN_TYPE: TOKEN_TYPE,\n    X_APP_NAME: X_APP_NAME,\n    X_APP_VER: X_APP_VER,\n    X_CLIENT_CPU: X_CLIENT_CPU,\n    X_CLIENT_CURR_TELEM: X_CLIENT_CURR_TELEM,\n    X_CLIENT_EXTRA_SKU: X_CLIENT_EXTRA_SKU,\n    X_CLIENT_LAST_TELEM: X_CLIENT_LAST_TELEM,\n    X_CLIENT_OS: X_CLIENT_OS,\n    X_CLIENT_SKU: X_CLIENT_SKU,\n    X_CLIENT_VER: X_CLIENT_VER,\n    X_MS_LIB_CAPABILITY: X_MS_LIB_CAPABILITY\n});\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst DEFAULT_CRYPTO_IMPLEMENTATION = {\r\n    createNewGuid: () => {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    },\r\n    base64Decode: () => {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    },\r\n    base64Encode: () => {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    },\r\n    base64UrlEncode: () => {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    },\r\n    encodeKid: () => {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    },\r\n    async getPublicKeyThumbprint() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    },\r\n    async removeTokenBindingKey() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    },\r\n    async clearKeystore() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    },\r\n    async signJwt() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    },\r\n    async hashString() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    },\r\n};\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Log message level.\r\n */\r\nexports.LogLevel = void 0;\r\n(function (LogLevel) {\r\n    LogLevel[LogLevel[\"Error\"] = 0] = \"Error\";\r\n    LogLevel[LogLevel[\"Warning\"] = 1] = \"Warning\";\r\n    LogLevel[LogLevel[\"Info\"] = 2] = \"Info\";\r\n    LogLevel[LogLevel[\"Verbose\"] = 3] = \"Verbose\";\r\n    LogLevel[LogLevel[\"Trace\"] = 4] = \"Trace\";\r\n})(exports.LogLevel || (exports.LogLevel = {}));\r\n/**\r\n * Class which facilitates logging of messages to a specific place.\r\n */\r\nclass Logger {\r\n    constructor(loggerOptions, packageName, packageVersion) {\r\n        // Current log level, defaults to info.\r\n        this.level = exports.LogLevel.Info;\r\n        const defaultLoggerCallback = () => {\r\n            return;\r\n        };\r\n        const setLoggerOptions = loggerOptions || Logger.createDefaultLoggerOptions();\r\n        this.localCallback =\r\n            setLoggerOptions.loggerCallback || defaultLoggerCallback;\r\n        this.piiLoggingEnabled = setLoggerOptions.piiLoggingEnabled || false;\r\n        this.level =\r\n            typeof setLoggerOptions.logLevel === \"number\"\r\n                ? setLoggerOptions.logLevel\r\n                : exports.LogLevel.Info;\r\n        this.correlationId =\r\n            setLoggerOptions.correlationId || Constants.EMPTY_STRING;\r\n        this.packageName = packageName || Constants.EMPTY_STRING;\r\n        this.packageVersion = packageVersion || Constants.EMPTY_STRING;\r\n    }\r\n    static createDefaultLoggerOptions() {\r\n        return {\r\n            loggerCallback: () => {\r\n                // allow users to not set loggerCallback\r\n            },\r\n            piiLoggingEnabled: false,\r\n            logLevel: exports.LogLevel.Info,\r\n        };\r\n    }\r\n    /**\r\n     * Create new Logger with existing configurations.\r\n     */\r\n    clone(packageName, packageVersion, correlationId) {\r\n        return new Logger({\r\n            loggerCallback: this.localCallback,\r\n            piiLoggingEnabled: this.piiLoggingEnabled,\r\n            logLevel: this.level,\r\n            correlationId: correlationId || this.correlationId,\r\n        }, packageName, packageVersion);\r\n    }\r\n    /**\r\n     * Log message with required options.\r\n     */\r\n    logMessage(logMessage, options) {\r\n        if (options.logLevel > this.level ||\r\n            (!this.piiLoggingEnabled && options.containsPii)) {\r\n            return;\r\n        }\r\n        const timestamp = new Date().toUTCString();\r\n        // Add correlationId to logs if set, correlationId provided on log messages take precedence\r\n        const logHeader = `[${timestamp}] : [${options.correlationId || this.correlationId || \"\"}]`;\r\n        const log = `${logHeader} : ${this.packageName}@${this.packageVersion} : ${exports.LogLevel[options.logLevel]} - ${logMessage}`;\r\n        // debug(`msal:${LogLevel[options.logLevel]}${options.containsPii ? \"-Pii\": Constants.EMPTY_STRING}${options.context ? `:${options.context}` : Constants.EMPTY_STRING}`)(logMessage);\r\n        this.executeCallback(options.logLevel, log, options.containsPii || false);\r\n    }\r\n    /**\r\n     * Execute callback with message.\r\n     */\r\n    executeCallback(level, message, containsPii) {\r\n        if (this.localCallback) {\r\n            this.localCallback(level, message, containsPii);\r\n        }\r\n    }\r\n    /**\r\n     * Logs error messages.\r\n     */\r\n    error(message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: exports.LogLevel.Error,\r\n            containsPii: false,\r\n            correlationId: correlationId || Constants.EMPTY_STRING,\r\n        });\r\n    }\r\n    /**\r\n     * Logs error messages with PII.\r\n     */\r\n    errorPii(message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: exports.LogLevel.Error,\r\n            containsPii: true,\r\n            correlationId: correlationId || Constants.EMPTY_STRING,\r\n        });\r\n    }\r\n    /**\r\n     * Logs warning messages.\r\n     */\r\n    warning(message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: exports.LogLevel.Warning,\r\n            containsPii: false,\r\n            correlationId: correlationId || Constants.EMPTY_STRING,\r\n        });\r\n    }\r\n    /**\r\n     * Logs warning messages with PII.\r\n     */\r\n    warningPii(message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: exports.LogLevel.Warning,\r\n            containsPii: true,\r\n            correlationId: correlationId || Constants.EMPTY_STRING,\r\n        });\r\n    }\r\n    /**\r\n     * Logs info messages.\r\n     */\r\n    info(message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: exports.LogLevel.Info,\r\n            containsPii: false,\r\n            correlationId: correlationId || Constants.EMPTY_STRING,\r\n        });\r\n    }\r\n    /**\r\n     * Logs info messages with PII.\r\n     */\r\n    infoPii(message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: exports.LogLevel.Info,\r\n            containsPii: true,\r\n            correlationId: correlationId || Constants.EMPTY_STRING,\r\n        });\r\n    }\r\n    /**\r\n     * Logs verbose messages.\r\n     */\r\n    verbose(message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: exports.LogLevel.Verbose,\r\n            containsPii: false,\r\n            correlationId: correlationId || Constants.EMPTY_STRING,\r\n        });\r\n    }\r\n    /**\r\n     * Logs verbose messages with PII.\r\n     */\r\n    verbosePii(message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: exports.LogLevel.Verbose,\r\n            containsPii: true,\r\n            correlationId: correlationId || Constants.EMPTY_STRING,\r\n        });\r\n    }\r\n    /**\r\n     * Logs trace messages.\r\n     */\r\n    trace(message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: exports.LogLevel.Trace,\r\n            containsPii: false,\r\n            correlationId: correlationId || Constants.EMPTY_STRING,\r\n        });\r\n    }\r\n    /**\r\n     * Logs trace messages with PII.\r\n     */\r\n    tracePii(message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: exports.LogLevel.Trace,\r\n            containsPii: true,\r\n            correlationId: correlationId || Constants.EMPTY_STRING,\r\n        });\r\n    }\r\n    /**\r\n     * Returns whether PII Logging is enabled or not.\r\n     */\r\n    isPiiLoggingEnabled() {\r\n        return this.piiLoggingEnabled || false;\r\n    }\r\n}\n\n/* eslint-disable header/header */\r\nconst name = \"@azure/msal-common\";\r\nconst version = \"15.12.0\";\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * The ScopeSet class creates a set of scopes. Scopes are case-insensitive, unique values, so the Set object in JS makes\r\n * the most sense to implement for this class. All scopes are trimmed and converted to lower case strings in intersection and union functions\r\n * to ensure uniqueness of strings.\r\n */\r\nclass ScopeSet {\r\n    constructor(inputScopes) {\r\n        // Filter empty string and null/undefined array items\r\n        const scopeArr = inputScopes\r\n            ? StringUtils.trimArrayEntries([...inputScopes])\r\n            : [];\r\n        const filteredInput = scopeArr\r\n            ? StringUtils.removeEmptyStringsFromArray(scopeArr)\r\n            : [];\r\n        // Check if scopes array has at least one member\r\n        if (!filteredInput || !filteredInput.length) {\r\n            throw createClientConfigurationError(emptyInputScopesError);\r\n        }\r\n        this.scopes = new Set(); // Iterator in constructor not supported by IE11\r\n        filteredInput.forEach((scope) => this.scopes.add(scope));\r\n    }\r\n    /**\r\n     * Factory method to create ScopeSet from space-delimited string\r\n     * @param inputScopeString\r\n     * @param appClientId\r\n     * @param scopesRequired\r\n     */\r\n    static fromString(inputScopeString) {\r\n        const scopeString = inputScopeString || Constants.EMPTY_STRING;\r\n        const inputScopes = scopeString.split(\" \");\r\n        return new ScopeSet(inputScopes);\r\n    }\r\n    /**\r\n     * Creates the set of scopes to search for in cache lookups\r\n     * @param inputScopeString\r\n     * @returns\r\n     */\r\n    static createSearchScopes(inputScopeString) {\r\n        // Handle empty scopes by using default OIDC scopes for cache lookup\r\n        const scopesToUse = inputScopeString && inputScopeString.length > 0\r\n            ? inputScopeString\r\n            : [...OIDC_DEFAULT_SCOPES];\r\n        const scopeSet = new ScopeSet(scopesToUse);\r\n        if (!scopeSet.containsOnlyOIDCScopes()) {\r\n            scopeSet.removeOIDCScopes();\r\n        }\r\n        else {\r\n            scopeSet.removeScope(Constants.OFFLINE_ACCESS_SCOPE);\r\n        }\r\n        return scopeSet;\r\n    }\r\n    /**\r\n     * Check if a given scope is present in this set of scopes.\r\n     * @param scope\r\n     */\r\n    containsScope(scope) {\r\n        const lowerCaseScopes = this.printScopesLowerCase().split(\" \");\r\n        const lowerCaseScopesSet = new ScopeSet(lowerCaseScopes);\r\n        // compare lowercase scopes\r\n        return scope\r\n            ? lowerCaseScopesSet.scopes.has(scope.toLowerCase())\r\n            : false;\r\n    }\r\n    /**\r\n     * Check if a set of scopes is present in this set of scopes.\r\n     * @param scopeSet\r\n     */\r\n    containsScopeSet(scopeSet) {\r\n        if (!scopeSet || scopeSet.scopes.size <= 0) {\r\n            return false;\r\n        }\r\n        return (this.scopes.size >= scopeSet.scopes.size &&\r\n            scopeSet.asArray().every((scope) => this.containsScope(scope)));\r\n    }\r\n    /**\r\n     * Check if set of scopes contains only the defaults\r\n     */\r\n    containsOnlyOIDCScopes() {\r\n        let defaultScopeCount = 0;\r\n        OIDC_SCOPES.forEach((defaultScope) => {\r\n            if (this.containsScope(defaultScope)) {\r\n                defaultScopeCount += 1;\r\n            }\r\n        });\r\n        return this.scopes.size === defaultScopeCount;\r\n    }\r\n    /**\r\n     * Appends single scope if passed\r\n     * @param newScope\r\n     */\r\n    appendScope(newScope) {\r\n        if (newScope) {\r\n            this.scopes.add(newScope.trim());\r\n        }\r\n    }\r\n    /**\r\n     * Appends multiple scopes if passed\r\n     * @param newScopes\r\n     */\r\n    appendScopes(newScopes) {\r\n        try {\r\n            newScopes.forEach((newScope) => this.appendScope(newScope));\r\n        }\r\n        catch (e) {\r\n            throw createClientAuthError(cannotAppendScopeSet);\r\n        }\r\n    }\r\n    /**\r\n     * Removes element from set of scopes.\r\n     * @param scope\r\n     */\r\n    removeScope(scope) {\r\n        if (!scope) {\r\n            throw createClientAuthError(cannotRemoveEmptyScope);\r\n        }\r\n        this.scopes.delete(scope.trim());\r\n    }\r\n    /**\r\n     * Removes default scopes from set of scopes\r\n     * Primarily used to prevent cache misses if the default scopes are not returned from the server\r\n     */\r\n    removeOIDCScopes() {\r\n        OIDC_SCOPES.forEach((defaultScope) => {\r\n            this.scopes.delete(defaultScope);\r\n        });\r\n    }\r\n    /**\r\n     * Combines an array of scopes with the current set of scopes.\r\n     * @param otherScopes\r\n     */\r\n    unionScopeSets(otherScopes) {\r\n        if (!otherScopes) {\r\n            throw createClientAuthError(emptyInputScopeSet);\r\n        }\r\n        const unionScopes = new Set(); // Iterator in constructor not supported in IE11\r\n        otherScopes.scopes.forEach((scope) => unionScopes.add(scope.toLowerCase()));\r\n        this.scopes.forEach((scope) => unionScopes.add(scope.toLowerCase()));\r\n        return unionScopes;\r\n    }\r\n    /**\r\n     * Check if scopes intersect between this set and another.\r\n     * @param otherScopes\r\n     */\r\n    intersectingScopeSets(otherScopes) {\r\n        if (!otherScopes) {\r\n            throw createClientAuthError(emptyInputScopeSet);\r\n        }\r\n        // Do not allow OIDC scopes to be the only intersecting scopes\r\n        if (!otherScopes.containsOnlyOIDCScopes()) {\r\n            otherScopes.removeOIDCScopes();\r\n        }\r\n        const unionScopes = this.unionScopeSets(otherScopes);\r\n        const sizeOtherScopes = otherScopes.getScopeCount();\r\n        const sizeThisScopes = this.getScopeCount();\r\n        const sizeUnionScopes = unionScopes.size;\r\n        return sizeUnionScopes < sizeThisScopes + sizeOtherScopes;\r\n    }\r\n    /**\r\n     * Returns size of set of scopes.\r\n     */\r\n    getScopeCount() {\r\n        return this.scopes.size;\r\n    }\r\n    /**\r\n     * Returns the scopes as an array of string values\r\n     */\r\n    asArray() {\r\n        const array = [];\r\n        this.scopes.forEach((val) => array.push(val));\r\n        return array;\r\n    }\r\n    /**\r\n     * Prints scopes into a space-delimited string\r\n     */\r\n    printScopes() {\r\n        if (this.scopes) {\r\n            const scopeArr = this.asArray();\r\n            return scopeArr.join(\" \");\r\n        }\r\n        return Constants.EMPTY_STRING;\r\n    }\r\n    /**\r\n     * Prints scopes into a space-delimited lower-case string (used for caching)\r\n     */\r\n    printScopesLowerCase() {\r\n        return this.printScopes().toLowerCase();\r\n    }\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Returns true if tenantId matches the utid portion of homeAccountId\r\n * @param tenantId\r\n * @param homeAccountId\r\n * @returns\r\n */\r\nfunction tenantIdMatchesHomeTenant(tenantId, homeAccountId) {\r\n    return (!!tenantId &&\r\n        !!homeAccountId &&\r\n        tenantId === homeAccountId.split(\".\")[1]);\r\n}\r\n/**\r\n * Build tenant profile\r\n * @param homeAccountId - Home account identifier for this account object\r\n * @param localAccountId - Local account identifer for this account object\r\n * @param tenantId - Full tenant or organizational id that this account belongs to\r\n * @param idTokenClaims - Claims from the ID token\r\n * @returns\r\n */\r\nfunction buildTenantProfile(homeAccountId, localAccountId, tenantId, idTokenClaims) {\r\n    if (idTokenClaims) {\r\n        const { oid, sub, tid, name, tfp, acr, preferred_username, upn, login_hint, } = idTokenClaims;\r\n        /**\r\n         * Since there is no way to determine if the authority is AAD or B2C, we exhaust all the possible claims that can serve as tenant ID with the following precedence:\r\n         * tid - TenantID claim that identifies the tenant that issued the token in AAD. Expected in all AAD ID tokens, not present in B2C ID Tokens.\r\n         * tfp - Trust Framework Policy claim that identifies the policy that was used to authenticate the user. Functions as tenant for B2C scenarios.\r\n         * acr - Authentication Context Class Reference claim used only with older B2C policies. Fallback in case tfp is not present, but likely won't be present anyway.\r\n         */\r\n        const tenantId = tid || tfp || acr || \"\";\r\n        return {\r\n            tenantId: tenantId,\r\n            localAccountId: oid || sub || \"\",\r\n            name: name,\r\n            username: preferred_username || upn || \"\",\r\n            loginHint: login_hint,\r\n            isHomeTenant: tenantIdMatchesHomeTenant(tenantId, homeAccountId),\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            tenantId,\r\n            localAccountId,\r\n            username: \"\",\r\n            isHomeTenant: tenantIdMatchesHomeTenant(tenantId, homeAccountId),\r\n        };\r\n    }\r\n}\r\n/**\r\n * Replaces account info that varies by tenant profile sourced from the ID token claims passed in with the tenant-specific account info\r\n * @param baseAccountInfo\r\n * @param idTokenClaims\r\n * @returns\r\n */\r\nfunction updateAccountTenantProfileData(baseAccountInfo, tenantProfile, idTokenClaims, idTokenSecret) {\r\n    let updatedAccountInfo = baseAccountInfo;\r\n    // Tenant Profile overrides passed in account info\r\n    if (tenantProfile) {\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        const { isHomeTenant, ...tenantProfileOverride } = tenantProfile;\r\n        updatedAccountInfo = { ...baseAccountInfo, ...tenantProfileOverride };\r\n    }\r\n    // ID token claims override passed in account info and tenant profile\r\n    if (idTokenClaims) {\r\n        // Ignore isHomeTenant, loginHint, and sid which are part of tenant profile but not base account info\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        const { isHomeTenant, ...claimsSourcedTenantProfile } = buildTenantProfile(baseAccountInfo.homeAccountId, baseAccountInfo.localAccountId, baseAccountInfo.tenantId, idTokenClaims);\r\n        updatedAccountInfo = {\r\n            ...updatedAccountInfo,\r\n            ...claimsSourcedTenantProfile,\r\n            idTokenClaims: idTokenClaims,\r\n            idToken: idTokenSecret,\r\n        };\r\n        return updatedAccountInfo;\r\n    }\r\n    return updatedAccountInfo;\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst cacheQuotaExceeded = \"cache_quota_exceeded\";\r\nconst cacheErrorUnknown = \"cache_error_unknown\";\n\nvar CacheErrorCodes = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    cacheErrorUnknown: cacheErrorUnknown,\n    cacheQuotaExceeded: cacheQuotaExceeded\n});\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst CacheErrorMessages = {\r\n    [cacheQuotaExceeded]: \"Exceeded cache storage capacity.\",\r\n    [cacheErrorUnknown]: \"Unexpected error occurred when using cache storage.\",\r\n};\r\n/**\r\n * Error thrown when there is an error with the cache\r\n */\r\nclass CacheError extends AuthError {\r\n    constructor(errorCode, errorMessage) {\r\n        const message = errorMessage ||\r\n            (CacheErrorMessages[errorCode]\r\n                ? CacheErrorMessages[errorCode]\r\n                : CacheErrorMessages[cacheErrorUnknown]);\r\n        super(`${errorCode}: ${message}`);\r\n        Object.setPrototypeOf(this, CacheError.prototype);\r\n        this.name = \"CacheError\";\r\n        this.errorCode = errorCode;\r\n        this.errorMessage = message;\r\n    }\r\n}\r\n/**\r\n * Helper function to wrap browser errors in a CacheError object\r\n * @param e\r\n * @returns\r\n */\r\nfunction createCacheError(e) {\r\n    if (!(e instanceof Error)) {\r\n        return new CacheError(cacheErrorUnknown);\r\n    }\r\n    if (e.name === \"QuotaExceededError\" ||\r\n        e.name === \"NS_ERROR_DOM_QUOTA_REACHED\" ||\r\n        e.message.includes(\"exceeded the quota\")) {\r\n        return new CacheError(cacheQuotaExceeded);\r\n    }\r\n    else {\r\n        return new CacheError(e.name, e.message);\r\n    }\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Interface class which implement cache storage functions used by MSAL to perform validity checks, and store tokens.\r\n * @internal\r\n */\r\nclass CacheManager {\r\n    constructor(clientId, cryptoImpl, logger, performanceClient, staticAuthorityOptions) {\r\n        this.clientId = clientId;\r\n        this.cryptoImpl = cryptoImpl;\r\n        this.commonLogger = logger.clone(name, version);\r\n        this.staticAuthorityOptions = staticAuthorityOptions;\r\n        this.performanceClient = performanceClient;\r\n    }\r\n    /**\r\n     * Returns all the accounts in the cache that match the optional filter. If no filter is provided, all accounts are returned.\r\n     * @param accountFilter - (Optional) filter to narrow down the accounts returned\r\n     * @returns Array of AccountInfo objects in cache\r\n     */\r\n    getAllAccounts(accountFilter, correlationId) {\r\n        return this.buildTenantProfiles(this.getAccountsFilteredBy(accountFilter, correlationId), correlationId, accountFilter);\r\n    }\r\n    /**\r\n     * Gets first tenanted AccountInfo object found based on provided filters\r\n     */\r\n    getAccountInfoFilteredBy(accountFilter, correlationId) {\r\n        if (Object.keys(accountFilter).length === 0 ||\r\n            Object.values(accountFilter).every((value) => !value)) {\r\n            this.commonLogger.warning(\"getAccountInfoFilteredBy: Account filter is empty or invalid, returning null\");\r\n            return null;\r\n        }\r\n        const allAccounts = this.getAllAccounts(accountFilter, correlationId);\r\n        if (allAccounts.length > 1) {\r\n            // If one or more accounts are found, prioritize accounts that have an ID token\r\n            const sortedAccounts = allAccounts.sort((account) => {\r\n                return account.idTokenClaims ? -1 : 1;\r\n            });\r\n            return sortedAccounts[0];\r\n        }\r\n        else if (allAccounts.length === 1) {\r\n            // If only one account is found, return it regardless of whether a matching ID token was found\r\n            return allAccounts[0];\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Returns a single matching\r\n     * @param accountFilter\r\n     * @returns\r\n     */\r\n    getBaseAccountInfo(accountFilter, correlationId) {\r\n        const accountEntities = this.getAccountsFilteredBy(accountFilter, correlationId);\r\n        if (accountEntities.length > 0) {\r\n            return accountEntities[0].getAccountInfo();\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Matches filtered account entities with cached ID tokens that match the tenant profile-specific account filters\r\n     * and builds the account info objects from the matching ID token's claims\r\n     * @param cachedAccounts\r\n     * @param accountFilter\r\n     * @returns Array of AccountInfo objects that match account and tenant profile filters\r\n     */\r\n    buildTenantProfiles(cachedAccounts, correlationId, accountFilter) {\r\n        return cachedAccounts.flatMap((accountEntity) => {\r\n            return this.getTenantProfilesFromAccountEntity(accountEntity, correlationId, accountFilter?.tenantId, accountFilter);\r\n        });\r\n    }\r\n    getTenantedAccountInfoByFilter(accountInfo, tokenKeys, tenantProfile, correlationId, tenantProfileFilter) {\r\n        let tenantedAccountInfo = null;\r\n        let idTokenClaims;\r\n        if (tenantProfileFilter) {\r\n            if (!this.tenantProfileMatchesFilter(tenantProfile, tenantProfileFilter)) {\r\n                return null;\r\n            }\r\n        }\r\n        const idToken = this.getIdToken(accountInfo, correlationId, tokenKeys, tenantProfile.tenantId);\r\n        if (idToken) {\r\n            idTokenClaims = extractTokenClaims(idToken.secret, this.cryptoImpl.base64Decode);\r\n            if (!this.idTokenClaimsMatchTenantProfileFilter(idTokenClaims, tenantProfileFilter)) {\r\n                // ID token sourced claims don't match so this tenant profile is not a match\r\n                return null;\r\n            }\r\n        }\r\n        // Expand tenant profile into account info based on matching tenant profile and if available matching ID token claims\r\n        tenantedAccountInfo = updateAccountTenantProfileData(accountInfo, tenantProfile, idTokenClaims, idToken?.secret);\r\n        return tenantedAccountInfo;\r\n    }\r\n    getTenantProfilesFromAccountEntity(accountEntity, correlationId, targetTenantId, tenantProfileFilter) {\r\n        const accountInfo = accountEntity.getAccountInfo();\r\n        let searchTenantProfiles = accountInfo.tenantProfiles || new Map();\r\n        const tokenKeys = this.getTokenKeys();\r\n        // If a tenant ID was provided, only return the tenant profile for that tenant ID if it exists\r\n        if (targetTenantId) {\r\n            const tenantProfile = searchTenantProfiles.get(targetTenantId);\r\n            if (tenantProfile) {\r\n                // Reduce search field to just this tenant profile\r\n                searchTenantProfiles = new Map([\r\n                    [targetTenantId, tenantProfile],\r\n                ]);\r\n            }\r\n            else {\r\n                // No tenant profile for search tenant ID, return empty array\r\n                return [];\r\n            }\r\n        }\r\n        const matchingTenantProfiles = [];\r\n        searchTenantProfiles.forEach((tenantProfile) => {\r\n            const tenantedAccountInfo = this.getTenantedAccountInfoByFilter(accountInfo, tokenKeys, tenantProfile, correlationId, tenantProfileFilter);\r\n            if (tenantedAccountInfo) {\r\n                matchingTenantProfiles.push(tenantedAccountInfo);\r\n            }\r\n        });\r\n        return matchingTenantProfiles;\r\n    }\r\n    tenantProfileMatchesFilter(tenantProfile, tenantProfileFilter) {\r\n        if (!!tenantProfileFilter.localAccountId &&\r\n            !this.matchLocalAccountIdFromTenantProfile(tenantProfile, tenantProfileFilter.localAccountId)) {\r\n            return false;\r\n        }\r\n        if (!!tenantProfileFilter.name &&\r\n            !(tenantProfile.name === tenantProfileFilter.name)) {\r\n            return false;\r\n        }\r\n        if (tenantProfileFilter.isHomeTenant !== undefined &&\r\n            !(tenantProfile.isHomeTenant === tenantProfileFilter.isHomeTenant)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    idTokenClaimsMatchTenantProfileFilter(idTokenClaims, tenantProfileFilter) {\r\n        // Tenant Profile filtering\r\n        if (tenantProfileFilter) {\r\n            if (!!tenantProfileFilter.localAccountId &&\r\n                !this.matchLocalAccountIdFromTokenClaims(idTokenClaims, tenantProfileFilter.localAccountId)) {\r\n                return false;\r\n            }\r\n            if (!!tenantProfileFilter.loginHint &&\r\n                !this.matchLoginHintFromTokenClaims(idTokenClaims, tenantProfileFilter.loginHint)) {\r\n                return false;\r\n            }\r\n            if (!!tenantProfileFilter.username &&\r\n                !this.matchUsername(idTokenClaims.preferred_username, tenantProfileFilter.username)) {\r\n                return false;\r\n            }\r\n            if (!!tenantProfileFilter.name &&\r\n                !this.matchName(idTokenClaims, tenantProfileFilter.name)) {\r\n                return false;\r\n            }\r\n            if (!!tenantProfileFilter.sid &&\r\n                !this.matchSid(idTokenClaims, tenantProfileFilter.sid)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * saves a cache record\r\n     * @param cacheRecord {CacheRecord}\r\n     * @param storeInCache {?StoreInCache}\r\n     * @param correlationId {?string} correlation id\r\n     */\r\n    async saveCacheRecord(cacheRecord, correlationId, storeInCache) {\r\n        if (!cacheRecord) {\r\n            throw createClientAuthError(invalidCacheRecord);\r\n        }\r\n        try {\r\n            if (!!cacheRecord.account) {\r\n                await this.setAccount(cacheRecord.account, correlationId);\r\n            }\r\n            if (!!cacheRecord.idToken && storeInCache?.idToken !== false) {\r\n                await this.setIdTokenCredential(cacheRecord.idToken, correlationId);\r\n            }\r\n            if (!!cacheRecord.accessToken &&\r\n                storeInCache?.accessToken !== false) {\r\n                await this.saveAccessToken(cacheRecord.accessToken, correlationId);\r\n            }\r\n            if (!!cacheRecord.refreshToken &&\r\n                storeInCache?.refreshToken !== false) {\r\n                await this.setRefreshTokenCredential(cacheRecord.refreshToken, correlationId);\r\n            }\r\n            if (!!cacheRecord.appMetadata) {\r\n                this.setAppMetadata(cacheRecord.appMetadata, correlationId);\r\n            }\r\n        }\r\n        catch (e) {\r\n            this.commonLogger?.error(`CacheManager.saveCacheRecord: failed`);\r\n            if (e instanceof AuthError) {\r\n                throw e;\r\n            }\r\n            else {\r\n                throw createCacheError(e);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * saves access token credential\r\n     * @param credential\r\n     */\r\n    async saveAccessToken(credential, correlationId) {\r\n        const accessTokenFilter = {\r\n            clientId: credential.clientId,\r\n            credentialType: credential.credentialType,\r\n            environment: credential.environment,\r\n            homeAccountId: credential.homeAccountId,\r\n            realm: credential.realm,\r\n            tokenType: credential.tokenType,\r\n            requestedClaimsHash: credential.requestedClaimsHash,\r\n        };\r\n        const tokenKeys = this.getTokenKeys();\r\n        const currentScopes = ScopeSet.fromString(credential.target);\r\n        tokenKeys.accessToken.forEach((key) => {\r\n            if (!this.accessTokenKeyMatchesFilter(key, accessTokenFilter, false)) {\r\n                return;\r\n            }\r\n            const tokenEntity = this.getAccessTokenCredential(key, correlationId);\r\n            if (tokenEntity &&\r\n                this.credentialMatchesFilter(tokenEntity, accessTokenFilter)) {\r\n                const tokenScopeSet = ScopeSet.fromString(tokenEntity.target);\r\n                if (tokenScopeSet.intersectingScopeSets(currentScopes)) {\r\n                    this.removeAccessToken(key, correlationId);\r\n                }\r\n            }\r\n        });\r\n        await this.setAccessTokenCredential(credential, correlationId);\r\n    }\r\n    /**\r\n     * Retrieve account entities matching all provided tenant-agnostic filters; if no filter is set, get all account entities in the cache\r\n     * Not checking for casing as keys are all generated in lower case, remember to convert to lower case if object properties are compared\r\n     * @param accountFilter - An object containing Account properties to filter by\r\n     */\r\n    getAccountsFilteredBy(accountFilter, correlationId) {\r\n        const allAccountKeys = this.getAccountKeys();\r\n        const matchingAccounts = [];\r\n        allAccountKeys.forEach((cacheKey) => {\r\n            const entity = this.getAccount(cacheKey, correlationId);\r\n            // Match base account fields\r\n            if (!entity) {\r\n                return;\r\n            }\r\n            if (!!accountFilter.homeAccountId &&\r\n                !this.matchHomeAccountId(entity, accountFilter.homeAccountId)) {\r\n                return;\r\n            }\r\n            if (!!accountFilter.username &&\r\n                !this.matchUsername(entity.username, accountFilter.username)) {\r\n                return;\r\n            }\r\n            if (!!accountFilter.environment &&\r\n                !this.matchEnvironment(entity, accountFilter.environment)) {\r\n                return;\r\n            }\r\n            if (!!accountFilter.realm &&\r\n                !this.matchRealm(entity, accountFilter.realm)) {\r\n                return;\r\n            }\r\n            if (!!accountFilter.nativeAccountId &&\r\n                !this.matchNativeAccountId(entity, accountFilter.nativeAccountId)) {\r\n                return;\r\n            }\r\n            if (!!accountFilter.authorityType &&\r\n                !this.matchAuthorityType(entity, accountFilter.authorityType)) {\r\n                return;\r\n            }\r\n            // If at least one tenant profile matches the tenant profile filter, add the account to the list of matching accounts\r\n            const tenantProfileFilter = {\r\n                localAccountId: accountFilter?.localAccountId,\r\n                name: accountFilter?.name,\r\n            };\r\n            const matchingTenantProfiles = entity.tenantProfiles?.filter((tenantProfile) => {\r\n                return this.tenantProfileMatchesFilter(tenantProfile, tenantProfileFilter);\r\n            });\r\n            if (matchingTenantProfiles && matchingTenantProfiles.length === 0) {\r\n                // No tenant profile for this account matches filter, don't add to list of matching accounts\r\n                return;\r\n            }\r\n            matchingAccounts.push(entity);\r\n        });\r\n        return matchingAccounts;\r\n    }\r\n    /**\r\n     * Returns whether or not the given credential entity matches the filter\r\n     * @param entity\r\n     * @param filter\r\n     * @returns\r\n     */\r\n    credentialMatchesFilter(entity, filter) {\r\n        if (!!filter.clientId && !this.matchClientId(entity, filter.clientId)) {\r\n            return false;\r\n        }\r\n        if (!!filter.userAssertionHash &&\r\n            !this.matchUserAssertionHash(entity, filter.userAssertionHash)) {\r\n            return false;\r\n        }\r\n        /*\r\n         * homeAccountId can be undefined, and we want to filter out cached items that have a homeAccountId of \"\"\r\n         * because we don't want a client_credential request to return a cached token that has a homeAccountId\r\n         */\r\n        if (typeof filter.homeAccountId === \"string\" &&\r\n            !this.matchHomeAccountId(entity, filter.homeAccountId)) {\r\n            return false;\r\n        }\r\n        if (!!filter.environment &&\r\n            !this.matchEnvironment(entity, filter.environment)) {\r\n            return false;\r\n        }\r\n        if (!!filter.realm && !this.matchRealm(entity, filter.realm)) {\r\n            return false;\r\n        }\r\n        if (!!filter.credentialType &&\r\n            !this.matchCredentialType(entity, filter.credentialType)) {\r\n            return false;\r\n        }\r\n        if (!!filter.familyId && !this.matchFamilyId(entity, filter.familyId)) {\r\n            return false;\r\n        }\r\n        /*\r\n         * idTokens do not have \"target\", target specific refreshTokens do exist for some types of authentication\r\n         * Resource specific refresh tokens case will be added when the support is deemed necessary\r\n         */\r\n        if (!!filter.target && !this.matchTarget(entity, filter.target)) {\r\n            return false;\r\n        }\r\n        // If request OR cached entity has requested Claims Hash, check if they match\r\n        if (filter.requestedClaimsHash || entity.requestedClaimsHash) {\r\n            // Don't match if either is undefined or they are different\r\n            if (entity.requestedClaimsHash !== filter.requestedClaimsHash) {\r\n                return false;\r\n            }\r\n        }\r\n        // Access Token with Auth Scheme specific matching\r\n        if (entity.credentialType ===\r\n            CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME) {\r\n            if (!!filter.tokenType &&\r\n                !this.matchTokenType(entity, filter.tokenType)) {\r\n                return false;\r\n            }\r\n            // KeyId (sshKid) in request must match cached SSH certificate keyId because SSH cert is bound to a specific key\r\n            if (filter.tokenType === AuthenticationScheme.SSH) {\r\n                if (filter.keyId && !this.matchKeyId(entity, filter.keyId)) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * retrieve appMetadata matching all provided filters; if no filter is set, get all appMetadata\r\n     * @param filter\r\n     */\r\n    getAppMetadataFilteredBy(filter) {\r\n        const allCacheKeys = this.getKeys();\r\n        const matchingAppMetadata = {};\r\n        allCacheKeys.forEach((cacheKey) => {\r\n            // don't parse any non-appMetadata type cache entities\r\n            if (!this.isAppMetadata(cacheKey)) {\r\n                return;\r\n            }\r\n            // Attempt retrieval\r\n            const entity = this.getAppMetadata(cacheKey);\r\n            if (!entity) {\r\n                return;\r\n            }\r\n            if (!!filter.environment &&\r\n                !this.matchEnvironment(entity, filter.environment)) {\r\n                return;\r\n            }\r\n            if (!!filter.clientId &&\r\n                !this.matchClientId(entity, filter.clientId)) {\r\n                return;\r\n            }\r\n            matchingAppMetadata[cacheKey] = entity;\r\n        });\r\n        return matchingAppMetadata;\r\n    }\r\n    /**\r\n     * retrieve authorityMetadata that contains a matching alias\r\n     * @param filter\r\n     */\r\n    getAuthorityMetadataByAlias(host) {\r\n        const allCacheKeys = this.getAuthorityMetadataKeys();\r\n        let matchedEntity = null;\r\n        allCacheKeys.forEach((cacheKey) => {\r\n            // don't parse any non-authorityMetadata type cache entities\r\n            if (!this.isAuthorityMetadata(cacheKey) ||\r\n                cacheKey.indexOf(this.clientId) === -1) {\r\n                return;\r\n            }\r\n            // Attempt retrieval\r\n            const entity = this.getAuthorityMetadata(cacheKey);\r\n            if (!entity) {\r\n                return;\r\n            }\r\n            if (entity.aliases.indexOf(host) === -1) {\r\n                return;\r\n            }\r\n            matchedEntity = entity;\r\n        });\r\n        return matchedEntity;\r\n    }\r\n    /**\r\n     * Removes all accounts and related tokens from cache.\r\n     */\r\n    removeAllAccounts(correlationId) {\r\n        const accounts = this.getAllAccounts({}, correlationId);\r\n        accounts.forEach((account) => {\r\n            this.removeAccount(account, correlationId);\r\n        });\r\n    }\r\n    /**\r\n     * Removes the account and related tokens for a given account key\r\n     * @param account\r\n     */\r\n    removeAccount(account, correlationId) {\r\n        this.removeAccountContext(account, correlationId);\r\n        const accountKeys = this.getAccountKeys();\r\n        const keyFilter = (key) => {\r\n            return (key.includes(account.homeAccountId) &&\r\n                key.includes(account.environment));\r\n        };\r\n        accountKeys.filter(keyFilter).forEach((key) => {\r\n            this.removeItem(key, correlationId);\r\n            this.performanceClient.incrementFields({ accountsRemoved: 1 }, correlationId);\r\n        });\r\n    }\r\n    /**\r\n     * Removes credentials associated with the provided account\r\n     * @param account\r\n     */\r\n    removeAccountContext(account, correlationId) {\r\n        const allTokenKeys = this.getTokenKeys();\r\n        const keyFilter = (key) => {\r\n            return (key.includes(account.homeAccountId) &&\r\n                key.includes(account.environment));\r\n        };\r\n        allTokenKeys.idToken.filter(keyFilter).forEach((key) => {\r\n            this.removeIdToken(key, correlationId);\r\n        });\r\n        allTokenKeys.accessToken.filter(keyFilter).forEach((key) => {\r\n            this.removeAccessToken(key, correlationId);\r\n        });\r\n        allTokenKeys.refreshToken.filter(keyFilter).forEach((key) => {\r\n            this.removeRefreshToken(key, correlationId);\r\n        });\r\n    }\r\n    /**\r\n     * Removes accessToken from the cache\r\n     * @param key\r\n     * @param correlationId\r\n     */\r\n    removeAccessToken(key, correlationId) {\r\n        const credential = this.getAccessTokenCredential(key, correlationId);\r\n        this.removeItem(key, correlationId);\r\n        this.performanceClient.incrementFields({ accessTokensRemoved: 1 }, correlationId);\r\n        if (!credential ||\r\n            credential.credentialType.toLowerCase() !==\r\n                CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME.toLowerCase() ||\r\n            credential.tokenType !== AuthenticationScheme.POP) {\r\n            // If the credential is not a PoP token, we can return\r\n            return;\r\n        }\r\n        // Remove Token Binding Key from key store for PoP Tokens Credentials\r\n        const kid = credential.keyId;\r\n        if (kid) {\r\n            void this.cryptoImpl.removeTokenBindingKey(kid).catch(() => {\r\n                this.commonLogger.error(`Failed to remove token binding key ${kid}`, correlationId);\r\n                this.performanceClient?.incrementFields({ removeTokenBindingKeyFailure: 1 }, correlationId);\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Removes all app metadata objects from cache.\r\n     */\r\n    removeAppMetadata(correlationId) {\r\n        const allCacheKeys = this.getKeys();\r\n        allCacheKeys.forEach((cacheKey) => {\r\n            if (this.isAppMetadata(cacheKey)) {\r\n                this.removeItem(cacheKey, correlationId);\r\n            }\r\n        });\r\n        return true;\r\n    }\r\n    /**\r\n     * Retrieve IdTokenEntity from cache\r\n     * @param account {AccountInfo}\r\n     * @param tokenKeys {?TokenKeys}\r\n     * @param targetRealm {?string}\r\n     * @param performanceClient {?IPerformanceClient}\r\n     * @param correlationId {?string}\r\n     */\r\n    getIdToken(account, correlationId, tokenKeys, targetRealm, performanceClient) {\r\n        this.commonLogger.trace(\"CacheManager - getIdToken called\");\r\n        const idTokenFilter = {\r\n            homeAccountId: account.homeAccountId,\r\n            environment: account.environment,\r\n            credentialType: CredentialType.ID_TOKEN,\r\n            clientId: this.clientId,\r\n            realm: targetRealm,\r\n        };\r\n        const idTokenMap = this.getIdTokensByFilter(idTokenFilter, correlationId, tokenKeys);\r\n        const numIdTokens = idTokenMap.size;\r\n        if (numIdTokens < 1) {\r\n            this.commonLogger.info(\"CacheManager:getIdToken - No token found\");\r\n            return null;\r\n        }\r\n        else if (numIdTokens > 1) {\r\n            let tokensToBeRemoved = idTokenMap;\r\n            // Multiple tenant profiles and no tenant specified, pick home account\r\n            if (!targetRealm) {\r\n                const homeIdTokenMap = new Map();\r\n                idTokenMap.forEach((idToken, key) => {\r\n                    if (idToken.realm === account.tenantId) {\r\n                        homeIdTokenMap.set(key, idToken);\r\n                    }\r\n                });\r\n                const numHomeIdTokens = homeIdTokenMap.size;\r\n                if (numHomeIdTokens < 1) {\r\n                    this.commonLogger.info(\"CacheManager:getIdToken - Multiple ID tokens found for account but none match account entity tenant id, returning first result\");\r\n                    return idTokenMap.values().next().value;\r\n                }\r\n                else if (numHomeIdTokens === 1) {\r\n                    this.commonLogger.info(\"CacheManager:getIdToken - Multiple ID tokens found for account, defaulting to home tenant profile\");\r\n                    return homeIdTokenMap.values().next().value;\r\n                }\r\n                else {\r\n                    // Multiple ID tokens for home tenant profile, remove all and return null\r\n                    tokensToBeRemoved = homeIdTokenMap;\r\n                }\r\n            }\r\n            // Multiple tokens for a single tenant profile, remove all and return null\r\n            this.commonLogger.info(\"CacheManager:getIdToken - Multiple matching ID tokens found, clearing them\");\r\n            tokensToBeRemoved.forEach((idToken, key) => {\r\n                this.removeIdToken(key, correlationId);\r\n            });\r\n            if (performanceClient && correlationId) {\r\n                performanceClient.addFields({ multiMatchedID: idTokenMap.size }, correlationId);\r\n            }\r\n            return null;\r\n        }\r\n        this.commonLogger.info(\"CacheManager:getIdToken - Returning ID token\");\r\n        return idTokenMap.values().next().value;\r\n    }\r\n    /**\r\n     * Gets all idTokens matching the given filter\r\n     * @param filter\r\n     * @returns\r\n     */\r\n    getIdTokensByFilter(filter, correlationId, tokenKeys) {\r\n        const idTokenKeys = (tokenKeys && tokenKeys.idToken) || this.getTokenKeys().idToken;\r\n        const idTokens = new Map();\r\n        idTokenKeys.forEach((key) => {\r\n            if (!this.idTokenKeyMatchesFilter(key, {\r\n                clientId: this.clientId,\r\n                ...filter,\r\n            })) {\r\n                return;\r\n            }\r\n            const idToken = this.getIdTokenCredential(key, correlationId);\r\n            if (idToken && this.credentialMatchesFilter(idToken, filter)) {\r\n                idTokens.set(key, idToken);\r\n            }\r\n        });\r\n        return idTokens;\r\n    }\r\n    /**\r\n     * Validate the cache key against filter before retrieving and parsing cache value\r\n     * @param key\r\n     * @param filter\r\n     * @returns\r\n     */\r\n    idTokenKeyMatchesFilter(inputKey, filter) {\r\n        const key = inputKey.toLowerCase();\r\n        if (filter.clientId &&\r\n            key.indexOf(filter.clientId.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n        if (filter.homeAccountId &&\r\n            key.indexOf(filter.homeAccountId.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * Removes idToken from the cache\r\n     * @param key\r\n     */\r\n    removeIdToken(key, correlationId) {\r\n        this.removeItem(key, correlationId);\r\n    }\r\n    /**\r\n     * Removes refresh token from the cache\r\n     * @param key\r\n     */\r\n    removeRefreshToken(key, correlationId) {\r\n        this.removeItem(key, correlationId);\r\n    }\r\n    /**\r\n     * Retrieve AccessTokenEntity from cache\r\n     * @param account {AccountInfo}\r\n     * @param request {BaseAuthRequest}\r\n     * @param correlationId {?string}\r\n     * @param tokenKeys {?TokenKeys}\r\n     * @param performanceClient {?IPerformanceClient}\r\n     */\r\n    getAccessToken(account, request, tokenKeys, targetRealm) {\r\n        const correlationId = request.correlationId;\r\n        this.commonLogger.trace(\"CacheManager - getAccessToken called\", correlationId);\r\n        const scopes = ScopeSet.createSearchScopes(request.scopes);\r\n        const authScheme = request.authenticationScheme || AuthenticationScheme.BEARER;\r\n        /*\r\n         * Distinguish between Bearer and PoP/SSH token cache types\r\n         * Cast to lowercase to handle \"bearer\" from ADFS\r\n         */\r\n        const credentialType = authScheme &&\r\n            authScheme.toLowerCase() !==\r\n                AuthenticationScheme.BEARER.toLowerCase()\r\n            ? CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME\r\n            : CredentialType.ACCESS_TOKEN;\r\n        const accessTokenFilter = {\r\n            homeAccountId: account.homeAccountId,\r\n            environment: account.environment,\r\n            credentialType: credentialType,\r\n            clientId: this.clientId,\r\n            realm: targetRealm || account.tenantId,\r\n            target: scopes,\r\n            tokenType: authScheme,\r\n            keyId: request.sshKid,\r\n            requestedClaimsHash: request.requestedClaimsHash,\r\n        };\r\n        const accessTokenKeys = (tokenKeys && tokenKeys.accessToken) ||\r\n            this.getTokenKeys().accessToken;\r\n        const accessTokens = [];\r\n        accessTokenKeys.forEach((key) => {\r\n            // Validate key\r\n            if (this.accessTokenKeyMatchesFilter(key, accessTokenFilter, true)) {\r\n                const accessToken = this.getAccessTokenCredential(key, correlationId);\r\n                // Validate value\r\n                if (accessToken &&\r\n                    this.credentialMatchesFilter(accessToken, accessTokenFilter)) {\r\n                    accessTokens.push(accessToken);\r\n                }\r\n            }\r\n        });\r\n        const numAccessTokens = accessTokens.length;\r\n        if (numAccessTokens < 1) {\r\n            this.commonLogger.info(\"CacheManager:getAccessToken - No token found\", correlationId);\r\n            return null;\r\n        }\r\n        else if (numAccessTokens > 1) {\r\n            this.commonLogger.info(\"CacheManager:getAccessToken - Multiple access tokens found, clearing them\", correlationId);\r\n            accessTokens.forEach((accessToken) => {\r\n                this.removeAccessToken(this.generateCredentialKey(accessToken), correlationId);\r\n            });\r\n            this.performanceClient.addFields({ multiMatchedAT: accessTokens.length }, correlationId);\r\n            return null;\r\n        }\r\n        this.commonLogger.info(\"CacheManager:getAccessToken - Returning access token\", correlationId);\r\n        return accessTokens[0];\r\n    }\r\n    /**\r\n     * Validate the cache key against filter before retrieving and parsing cache value\r\n     * @param key\r\n     * @param filter\r\n     * @param keyMustContainAllScopes\r\n     * @returns\r\n     */\r\n    accessTokenKeyMatchesFilter(inputKey, filter, keyMustContainAllScopes) {\r\n        const key = inputKey.toLowerCase();\r\n        if (filter.clientId &&\r\n            key.indexOf(filter.clientId.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n        if (filter.homeAccountId &&\r\n            key.indexOf(filter.homeAccountId.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n        if (filter.realm && key.indexOf(filter.realm.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n        if (filter.requestedClaimsHash &&\r\n            key.indexOf(filter.requestedClaimsHash.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n        if (filter.target) {\r\n            const scopes = filter.target.asArray();\r\n            for (let i = 0; i < scopes.length; i++) {\r\n                if (keyMustContainAllScopes &&\r\n                    !key.includes(scopes[i].toLowerCase())) {\r\n                    // When performing a cache lookup a missing scope would be a cache miss\r\n                    return false;\r\n                }\r\n                else if (!keyMustContainAllScopes &&\r\n                    key.includes(scopes[i].toLowerCase())) {\r\n                    // When performing a cache write, any token with a subset of requested scopes should be replaced\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * Gets all access tokens matching the filter\r\n     * @param filter\r\n     * @returns\r\n     */\r\n    getAccessTokensByFilter(filter, correlationId) {\r\n        const tokenKeys = this.getTokenKeys();\r\n        const accessTokens = [];\r\n        tokenKeys.accessToken.forEach((key) => {\r\n            if (!this.accessTokenKeyMatchesFilter(key, filter, true)) {\r\n                return;\r\n            }\r\n            const accessToken = this.getAccessTokenCredential(key, correlationId);\r\n            if (accessToken &&\r\n                this.credentialMatchesFilter(accessToken, filter)) {\r\n                accessTokens.push(accessToken);\r\n            }\r\n        });\r\n        return accessTokens;\r\n    }\r\n    /**\r\n     * Helper to retrieve the appropriate refresh token from cache\r\n     * @param account {AccountInfo}\r\n     * @param familyRT {boolean}\r\n     * @param correlationId {?string}\r\n     * @param tokenKeys {?TokenKeys}\r\n     * @param performanceClient {?IPerformanceClient}\r\n     */\r\n    getRefreshToken(account, familyRT, correlationId, tokenKeys, performanceClient) {\r\n        this.commonLogger.trace(\"CacheManager - getRefreshToken called\");\r\n        const id = familyRT ? THE_FAMILY_ID : undefined;\r\n        const refreshTokenFilter = {\r\n            homeAccountId: account.homeAccountId,\r\n            environment: account.environment,\r\n            credentialType: CredentialType.REFRESH_TOKEN,\r\n            clientId: this.clientId,\r\n            familyId: id,\r\n        };\r\n        const refreshTokenKeys = (tokenKeys && tokenKeys.refreshToken) ||\r\n            this.getTokenKeys().refreshToken;\r\n        const refreshTokens = [];\r\n        refreshTokenKeys.forEach((key) => {\r\n            // Validate key\r\n            if (this.refreshTokenKeyMatchesFilter(key, refreshTokenFilter)) {\r\n                const refreshToken = this.getRefreshTokenCredential(key, correlationId);\r\n                // Validate value\r\n                if (refreshToken &&\r\n                    this.credentialMatchesFilter(refreshToken, refreshTokenFilter)) {\r\n                    refreshTokens.push(refreshToken);\r\n                }\r\n            }\r\n        });\r\n        const numRefreshTokens = refreshTokens.length;\r\n        if (numRefreshTokens < 1) {\r\n            this.commonLogger.info(\"CacheManager:getRefreshToken - No refresh token found.\");\r\n            return null;\r\n        }\r\n        // address the else case after remove functions address environment aliases\r\n        if (numRefreshTokens > 1 && performanceClient && correlationId) {\r\n            performanceClient.addFields({ multiMatchedRT: numRefreshTokens }, correlationId);\r\n        }\r\n        this.commonLogger.info(\"CacheManager:getRefreshToken - returning refresh token\");\r\n        return refreshTokens[0];\r\n    }\r\n    /**\r\n     * Validate the cache key against filter before retrieving and parsing cache value\r\n     * @param key\r\n     * @param filter\r\n     */\r\n    refreshTokenKeyMatchesFilter(inputKey, filter) {\r\n        const key = inputKey.toLowerCase();\r\n        if (filter.familyId &&\r\n            key.indexOf(filter.familyId.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n        // If familyId is used, clientId is not in the key\r\n        if (!filter.familyId &&\r\n            filter.clientId &&\r\n            key.indexOf(filter.clientId.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n        if (filter.homeAccountId &&\r\n            key.indexOf(filter.homeAccountId.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * Retrieve AppMetadataEntity from cache\r\n     */\r\n    readAppMetadataFromCache(environment) {\r\n        const appMetadataFilter = {\r\n            environment,\r\n            clientId: this.clientId,\r\n        };\r\n        const appMetadata = this.getAppMetadataFilteredBy(appMetadataFilter);\r\n        const appMetadataEntries = Object.keys(appMetadata).map((key) => appMetadata[key]);\r\n        const numAppMetadata = appMetadataEntries.length;\r\n        if (numAppMetadata < 1) {\r\n            return null;\r\n        }\r\n        else if (numAppMetadata > 1) {\r\n            throw createClientAuthError(multipleMatchingAppMetadata);\r\n        }\r\n        return appMetadataEntries[0];\r\n    }\r\n    /**\r\n     * Return the family_id value associated  with FOCI\r\n     * @param environment\r\n     * @param clientId\r\n     */\r\n    isAppMetadataFOCI(environment) {\r\n        const appMetadata = this.readAppMetadataFromCache(environment);\r\n        return !!(appMetadata && appMetadata.familyId === THE_FAMILY_ID);\r\n    }\r\n    /**\r\n     * helper to match account ids\r\n     * @param value\r\n     * @param homeAccountId\r\n     */\r\n    matchHomeAccountId(entity, homeAccountId) {\r\n        return !!(typeof entity.homeAccountId === \"string\" &&\r\n            homeAccountId === entity.homeAccountId);\r\n    }\r\n    /**\r\n     * helper to match account ids\r\n     * @param entity\r\n     * @param localAccountId\r\n     * @returns\r\n     */\r\n    matchLocalAccountIdFromTokenClaims(tokenClaims, localAccountId) {\r\n        const idTokenLocalAccountId = tokenClaims.oid || tokenClaims.sub;\r\n        return localAccountId === idTokenLocalAccountId;\r\n    }\r\n    matchLocalAccountIdFromTenantProfile(tenantProfile, localAccountId) {\r\n        return tenantProfile.localAccountId === localAccountId;\r\n    }\r\n    /**\r\n     * helper to match names\r\n     * @param entity\r\n     * @param name\r\n     * @returns true if the downcased name properties are present and match in the filter and the entity\r\n     */\r\n    matchName(claims, name) {\r\n        return !!(name.toLowerCase() === claims.name?.toLowerCase());\r\n    }\r\n    /**\r\n     * helper to match usernames\r\n     * @param entity\r\n     * @param username\r\n     * @returns\r\n     */\r\n    matchUsername(cachedUsername, filterUsername) {\r\n        return !!(cachedUsername &&\r\n            typeof cachedUsername === \"string\" &&\r\n            filterUsername?.toLowerCase() === cachedUsername.toLowerCase());\r\n    }\r\n    /**\r\n     * helper to match assertion\r\n     * @param value\r\n     * @param oboAssertion\r\n     */\r\n    matchUserAssertionHash(entity, userAssertionHash) {\r\n        return !!(entity.userAssertionHash &&\r\n            userAssertionHash === entity.userAssertionHash);\r\n    }\r\n    /**\r\n     * helper to match environment\r\n     * @param value\r\n     * @param environment\r\n     */\r\n    matchEnvironment(entity, environment) {\r\n        // Check static authority options first for cases where authority metadata has not been resolved and cached yet\r\n        if (this.staticAuthorityOptions) {\r\n            const staticAliases = getAliasesFromStaticSources(this.staticAuthorityOptions, this.commonLogger);\r\n            if (staticAliases.includes(environment) &&\r\n                staticAliases.includes(entity.environment)) {\r\n                return true;\r\n            }\r\n        }\r\n        // Query metadata cache if no static authority configuration has aliases that match enviroment\r\n        const cloudMetadata = this.getAuthorityMetadataByAlias(environment);\r\n        if (cloudMetadata &&\r\n            cloudMetadata.aliases.indexOf(entity.environment) > -1) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * helper to match credential type\r\n     * @param entity\r\n     * @param credentialType\r\n     */\r\n    matchCredentialType(entity, credentialType) {\r\n        return (entity.credentialType &&\r\n            credentialType.toLowerCase() === entity.credentialType.toLowerCase());\r\n    }\r\n    /**\r\n     * helper to match client ids\r\n     * @param entity\r\n     * @param clientId\r\n     */\r\n    matchClientId(entity, clientId) {\r\n        return !!(entity.clientId && clientId === entity.clientId);\r\n    }\r\n    /**\r\n     * helper to match family ids\r\n     * @param entity\r\n     * @param familyId\r\n     */\r\n    matchFamilyId(entity, familyId) {\r\n        return !!(entity.familyId && familyId === entity.familyId);\r\n    }\r\n    /**\r\n     * helper to match realm\r\n     * @param entity\r\n     * @param realm\r\n     */\r\n    matchRealm(entity, realm) {\r\n        return !!(entity.realm?.toLowerCase() === realm.toLowerCase());\r\n    }\r\n    /**\r\n     * helper to match nativeAccountId\r\n     * @param entity\r\n     * @param nativeAccountId\r\n     * @returns boolean indicating the match result\r\n     */\r\n    matchNativeAccountId(entity, nativeAccountId) {\r\n        return !!(entity.nativeAccountId && nativeAccountId === entity.nativeAccountId);\r\n    }\r\n    /**\r\n     * helper to match loginHint which can be either:\r\n     * 1. login_hint ID token claim\r\n     * 2. username in cached account object\r\n     * 3. upn in ID token claims\r\n     * @param entity\r\n     * @param loginHint\r\n     * @returns\r\n     */\r\n    matchLoginHintFromTokenClaims(tokenClaims, loginHint) {\r\n        if (tokenClaims.login_hint === loginHint) {\r\n            return true;\r\n        }\r\n        if (tokenClaims.preferred_username === loginHint) {\r\n            return true;\r\n        }\r\n        if (tokenClaims.upn === loginHint) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * Helper to match sid\r\n     * @param entity\r\n     * @param sid\r\n     * @returns true if the sid claim is present and matches the filter\r\n     */\r\n    matchSid(idTokenClaims, sid) {\r\n        return idTokenClaims.sid === sid;\r\n    }\r\n    matchAuthorityType(entity, authorityType) {\r\n        return !!(entity.authorityType &&\r\n            authorityType.toLowerCase() === entity.authorityType.toLowerCase());\r\n    }\r\n    /**\r\n     * Returns true if the target scopes are a subset of the current entity's scopes, false otherwise.\r\n     * @param entity\r\n     * @param target\r\n     */\r\n    matchTarget(entity, target) {\r\n        const isNotAccessTokenCredential = entity.credentialType !== CredentialType.ACCESS_TOKEN &&\r\n            entity.credentialType !==\r\n                CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;\r\n        if (isNotAccessTokenCredential || !entity.target) {\r\n            return false;\r\n        }\r\n        const entityScopeSet = ScopeSet.fromString(entity.target);\r\n        return entityScopeSet.containsScopeSet(target);\r\n    }\r\n    /**\r\n     * Returns true if the credential's tokenType or Authentication Scheme matches the one in the request, false otherwise\r\n     * @param entity\r\n     * @param tokenType\r\n     */\r\n    matchTokenType(entity, tokenType) {\r\n        return !!(entity.tokenType && entity.tokenType === tokenType);\r\n    }\r\n    /**\r\n     * Returns true if the credential's keyId matches the one in the request, false otherwise\r\n     * @param entity\r\n     * @param keyId\r\n     */\r\n    matchKeyId(entity, keyId) {\r\n        return !!(entity.keyId && entity.keyId === keyId);\r\n    }\r\n    /**\r\n     * returns if a given cache entity is of the type appmetadata\r\n     * @param key\r\n     */\r\n    isAppMetadata(key) {\r\n        return key.indexOf(APP_METADATA) !== -1;\r\n    }\r\n    /**\r\n     * returns if a given cache entity is of the type authoritymetadata\r\n     * @param key\r\n     */\r\n    isAuthorityMetadata(key) {\r\n        return key.indexOf(AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) !== -1;\r\n    }\r\n    /**\r\n     * returns cache key used for cloud instance metadata\r\n     */\r\n    generateAuthorityMetadataCacheKey(authority) {\r\n        return `${AUTHORITY_METADATA_CONSTANTS.CACHE_KEY}-${this.clientId}-${authority}`;\r\n    }\r\n    /**\r\n     * Helper to convert serialized data to object\r\n     * @param obj\r\n     * @param json\r\n     */\r\n    static toObject(obj, json) {\r\n        for (const propertyName in json) {\r\n            obj[propertyName] = json[propertyName];\r\n        }\r\n        return obj;\r\n    }\r\n}\r\n/** @internal */\r\nclass DefaultStorageClass extends CacheManager {\r\n    async setAccount() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    getAccount() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    async setIdTokenCredential() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    getIdTokenCredential() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    async setAccessTokenCredential() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    getAccessTokenCredential() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    async setRefreshTokenCredential() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    getRefreshTokenCredential() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    setAppMetadata() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    getAppMetadata() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    setServerTelemetry() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    getServerTelemetry() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    setAuthorityMetadata() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    getAuthorityMetadata() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    getAuthorityMetadataKeys() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    setThrottlingCache() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    getThrottlingCache() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    removeItem() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    getKeys() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    getAccountKeys() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    getTokenKeys() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    generateCredentialKey() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    generateAccountKey() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nclass StubPerformanceMeasurement {\r\n    startMeasurement() {\r\n        return;\r\n    }\r\n    endMeasurement() {\r\n        return;\r\n    }\r\n    flushMeasurement() {\r\n        return null;\r\n    }\r\n}\r\nclass StubPerformanceClient {\r\n    generateId() {\r\n        return \"callback-id\";\r\n    }\r\n    startMeasurement(measureName, correlationId) {\r\n        return {\r\n            end: () => null,\r\n            discard: () => { },\r\n            add: () => { },\r\n            increment: () => { },\r\n            event: {\r\n                eventId: this.generateId(),\r\n                status: PerformanceEventStatus.InProgress,\r\n                authority: \"\",\r\n                libraryName: \"\",\r\n                libraryVersion: \"\",\r\n                clientId: \"\",\r\n                name: measureName,\r\n                startTimeMs: Date.now(),\r\n                correlationId: correlationId || \"\",\r\n            },\r\n            measurement: new StubPerformanceMeasurement(),\r\n        };\r\n    }\r\n    startPerformanceMeasurement() {\r\n        return new StubPerformanceMeasurement();\r\n    }\r\n    calculateQueuedTime() {\r\n        return 0;\r\n    }\r\n    addQueueMeasurement() {\r\n        return;\r\n    }\r\n    setPreQueueTime() {\r\n        return;\r\n    }\r\n    endMeasurement() {\r\n        return null;\r\n    }\r\n    discardMeasurements() {\r\n        return;\r\n    }\r\n    removePerformanceCallback() {\r\n        return true;\r\n    }\r\n    addPerformanceCallback() {\r\n        return \"\";\r\n    }\r\n    emitEvents() {\r\n        return;\r\n    }\r\n    addFields() {\r\n        return;\r\n    }\r\n    incrementFields() {\r\n        return;\r\n    }\r\n    cacheEventByCorrelationId() {\r\n        return;\r\n    }\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst DEFAULT_SYSTEM_OPTIONS = {\r\n    tokenRenewalOffsetSeconds: DEFAULT_TOKEN_RENEWAL_OFFSET_SEC,\r\n    preventCorsPreflight: false,\r\n};\r\nconst DEFAULT_LOGGER_IMPLEMENTATION = {\r\n    loggerCallback: () => {\r\n        // allow users to not set loggerCallback\r\n    },\r\n    piiLoggingEnabled: false,\r\n    logLevel: exports.LogLevel.Info,\r\n    correlationId: Constants.EMPTY_STRING,\r\n};\r\nconst DEFAULT_CACHE_OPTIONS = {\r\n    claimsBasedCachingEnabled: false,\r\n};\r\nconst DEFAULT_NETWORK_IMPLEMENTATION = {\r\n    async sendGetRequestAsync() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    },\r\n    async sendPostRequestAsync() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    },\r\n};\r\nconst DEFAULT_LIBRARY_INFO = {\r\n    sku: Constants.SKU,\r\n    version: version,\r\n    cpu: Constants.EMPTY_STRING,\r\n    os: Constants.EMPTY_STRING,\r\n};\r\nconst DEFAULT_CLIENT_CREDENTIALS = {\r\n    clientSecret: Constants.EMPTY_STRING,\r\n    clientAssertion: undefined,\r\n};\r\nconst DEFAULT_AZURE_CLOUD_OPTIONS = {\r\n    azureCloudInstance: AzureCloudInstance.None,\r\n    tenant: `${Constants.DEFAULT_COMMON_TENANT}`,\r\n};\r\nconst DEFAULT_TELEMETRY_OPTIONS = {\r\n    application: {\r\n        appName: \"\",\r\n        appVersion: \"\",\r\n    },\r\n};\r\n/**\r\n * Function that sets the default options when not explicitly configured from app developer\r\n *\r\n * @param Configuration\r\n *\r\n * @returns Configuration\r\n */\r\nfunction buildClientConfiguration({ authOptions: userAuthOptions, systemOptions: userSystemOptions, loggerOptions: userLoggerOption, cacheOptions: userCacheOptions, storageInterface: storageImplementation, networkInterface: networkImplementation, cryptoInterface: cryptoImplementation, clientCredentials: clientCredentials, libraryInfo: libraryInfo, telemetry: telemetry, serverTelemetryManager: serverTelemetryManager, persistencePlugin: persistencePlugin, serializableCache: serializableCache, }) {\r\n    const loggerOptions = {\r\n        ...DEFAULT_LOGGER_IMPLEMENTATION,\r\n        ...userLoggerOption,\r\n    };\r\n    return {\r\n        authOptions: buildAuthOptions(userAuthOptions),\r\n        systemOptions: { ...DEFAULT_SYSTEM_OPTIONS, ...userSystemOptions },\r\n        loggerOptions: loggerOptions,\r\n        cacheOptions: { ...DEFAULT_CACHE_OPTIONS, ...userCacheOptions },\r\n        storageInterface: storageImplementation ||\r\n            new DefaultStorageClass(userAuthOptions.clientId, DEFAULT_CRYPTO_IMPLEMENTATION, new Logger(loggerOptions), new StubPerformanceClient()),\r\n        networkInterface: networkImplementation || DEFAULT_NETWORK_IMPLEMENTATION,\r\n        cryptoInterface: cryptoImplementation || DEFAULT_CRYPTO_IMPLEMENTATION,\r\n        clientCredentials: clientCredentials || DEFAULT_CLIENT_CREDENTIALS,\r\n        libraryInfo: { ...DEFAULT_LIBRARY_INFO, ...libraryInfo },\r\n        telemetry: { ...DEFAULT_TELEMETRY_OPTIONS, ...telemetry },\r\n        serverTelemetryManager: serverTelemetryManager || null,\r\n        persistencePlugin: persistencePlugin || null,\r\n        serializableCache: serializableCache || null,\r\n    };\r\n}\r\n/**\r\n * Construct authoptions from the client and platform passed values\r\n * @param authOptions\r\n */\r\nfunction buildAuthOptions(authOptions) {\r\n    return {\r\n        clientCapabilities: [],\r\n        azureCloudOptions: DEFAULT_AZURE_CLOUD_OPTIONS,\r\n        skipAuthorityMetadataCache: false,\r\n        instanceAware: false,\r\n        encodeExtraQueryParams: false,\r\n        ...authOptions,\r\n    };\r\n}\r\n/**\r\n * Returns true if config has protocolMode set to ProtocolMode.OIDC, false otherwise\r\n * @param ClientConfiguration\r\n */\r\nfunction isOidcProtocolMode(config) {\r\n    return (config.authOptions.authority.options.protocolMode === ProtocolMode.OIDC);\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst CcsCredentialType = {\r\n    HOME_ACCOUNT_ID: \"home_account_id\",\r\n    UPN: \"UPN\",\r\n};\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Function to build a client info object from server clientInfo string\r\n * @param rawClientInfo\r\n * @param crypto\r\n */\r\nfunction buildClientInfo(rawClientInfo, base64Decode) {\r\n    if (!rawClientInfo) {\r\n        throw createClientAuthError(clientInfoEmptyError);\r\n    }\r\n    try {\r\n        const decodedClientInfo = base64Decode(rawClientInfo);\r\n        return JSON.parse(decodedClientInfo);\r\n    }\r\n    catch (e) {\r\n        throw createClientAuthError(clientInfoDecodingError);\r\n    }\r\n}\r\n/**\r\n * Function to build a client info object from cached homeAccountId string\r\n * @param homeAccountId\r\n */\r\nfunction buildClientInfoFromHomeAccountId(homeAccountId) {\r\n    if (!homeAccountId) {\r\n        throw createClientAuthError(clientInfoDecodingError);\r\n    }\r\n    const clientInfoParts = homeAccountId.split(Separators.CLIENT_INFO_SEPARATOR, 2);\r\n    return {\r\n        uid: clientInfoParts[0],\r\n        utid: clientInfoParts.length < 2\r\n            ? Constants.EMPTY_STRING\r\n            : clientInfoParts[1],\r\n    };\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nfunction instrumentBrokerParams(parameters, correlationId, performanceClient) {\r\n    if (!correlationId) {\r\n        return;\r\n    }\r\n    const clientId = parameters.get(CLIENT_ID);\r\n    if (clientId && parameters.has(BROKER_CLIENT_ID)) {\r\n        performanceClient?.addFields({\r\n            embeddedClientId: clientId,\r\n            embeddedRedirectUri: parameters.get(REDIRECT_URI),\r\n        }, correlationId);\r\n    }\r\n}\r\n/**\r\n * Add the given response_type\r\n * @param parameters\r\n * @param responseType\r\n */\r\nfunction addResponseType(parameters, responseType) {\r\n    parameters.set(RESPONSE_TYPE, responseType);\r\n}\r\n/**\r\n * add response_mode. defaults to query.\r\n * @param responseMode\r\n */\r\nfunction addResponseMode(parameters, responseMode) {\r\n    parameters.set(RESPONSE_MODE, responseMode ? responseMode : ResponseMode.QUERY);\r\n}\r\n/**\r\n * Add flag to indicate STS should attempt to use WAM if available\r\n */\r\nfunction addNativeBroker(parameters) {\r\n    parameters.set(NATIVE_BROKER, \"1\");\r\n}\r\n/**\r\n * add scopes. set addOidcScopes to false to prevent default scopes in non-user scenarios\r\n * @param scopeSet\r\n * @param addOidcScopes\r\n */\r\nfunction addScopes(parameters, scopes, addOidcScopes = true, defaultScopes = OIDC_DEFAULT_SCOPES) {\r\n    // Always add openid to the scopes when adding OIDC scopes\r\n    if (addOidcScopes &&\r\n        !defaultScopes.includes(\"openid\") &&\r\n        !scopes.includes(\"openid\")) {\r\n        defaultScopes.push(\"openid\");\r\n    }\r\n    const requestScopes = addOidcScopes\r\n        ? [...(scopes || []), ...defaultScopes]\r\n        : scopes || [];\r\n    const scopeSet = new ScopeSet(requestScopes);\r\n    parameters.set(SCOPE, scopeSet.printScopes());\r\n}\r\n/**\r\n * add clientId\r\n * @param clientId\r\n */\r\nfunction addClientId(parameters, clientId) {\r\n    parameters.set(CLIENT_ID, clientId);\r\n}\r\n/**\r\n * add redirect_uri\r\n * @param redirectUri\r\n */\r\nfunction addRedirectUri(parameters, redirectUri) {\r\n    parameters.set(REDIRECT_URI, redirectUri);\r\n}\r\n/**\r\n * add post logout redirectUri\r\n * @param redirectUri\r\n */\r\nfunction addPostLogoutRedirectUri(parameters, redirectUri) {\r\n    parameters.set(POST_LOGOUT_URI, redirectUri);\r\n}\r\n/**\r\n * add id_token_hint to logout request\r\n * @param idTokenHint\r\n */\r\nfunction addIdTokenHint(parameters, idTokenHint) {\r\n    parameters.set(ID_TOKEN_HINT, idTokenHint);\r\n}\r\n/**\r\n * add domain_hint\r\n * @param domainHint\r\n */\r\nfunction addDomainHint(parameters, domainHint) {\r\n    parameters.set(DOMAIN_HINT, domainHint);\r\n}\r\n/**\r\n * add login_hint\r\n * @param loginHint\r\n */\r\nfunction addLoginHint(parameters, loginHint) {\r\n    parameters.set(LOGIN_HINT, loginHint);\r\n}\r\n/**\r\n * Adds the CCS (Cache Credential Service) query parameter for login_hint\r\n * @param loginHint\r\n */\r\nfunction addCcsUpn(parameters, loginHint) {\r\n    parameters.set(HeaderNames.CCS_HEADER, `UPN:${loginHint}`);\r\n}\r\n/**\r\n * Adds the CCS (Cache Credential Service) query parameter for account object\r\n * @param loginHint\r\n */\r\nfunction addCcsOid(parameters, clientInfo) {\r\n    parameters.set(HeaderNames.CCS_HEADER, `Oid:${clientInfo.uid}@${clientInfo.utid}`);\r\n}\r\n/**\r\n * add sid\r\n * @param sid\r\n */\r\nfunction addSid(parameters, sid) {\r\n    parameters.set(SID, sid);\r\n}\r\n/**\r\n * add claims\r\n * @param claims\r\n */\r\nfunction addClaims(parameters, claims, clientCapabilities) {\r\n    const mergedClaims = addClientCapabilitiesToClaims(claims, clientCapabilities);\r\n    try {\r\n        JSON.parse(mergedClaims);\r\n    }\r\n    catch (e) {\r\n        throw createClientConfigurationError(invalidClaims);\r\n    }\r\n    parameters.set(CLAIMS, mergedClaims);\r\n}\r\n/**\r\n * add correlationId\r\n * @param correlationId\r\n */\r\nfunction addCorrelationId(parameters, correlationId) {\r\n    parameters.set(CLIENT_REQUEST_ID, correlationId);\r\n}\r\n/**\r\n * add library info query params\r\n * @param libraryInfo\r\n */\r\nfunction addLibraryInfo(parameters, libraryInfo) {\r\n    // Telemetry Info\r\n    parameters.set(X_CLIENT_SKU, libraryInfo.sku);\r\n    parameters.set(X_CLIENT_VER, libraryInfo.version);\r\n    if (libraryInfo.os) {\r\n        parameters.set(X_CLIENT_OS, libraryInfo.os);\r\n    }\r\n    if (libraryInfo.cpu) {\r\n        parameters.set(X_CLIENT_CPU, libraryInfo.cpu);\r\n    }\r\n}\r\n/**\r\n * Add client telemetry parameters\r\n * @param appTelemetry\r\n */\r\nfunction addApplicationTelemetry(parameters, appTelemetry) {\r\n    if (appTelemetry?.appName) {\r\n        parameters.set(X_APP_NAME, appTelemetry.appName);\r\n    }\r\n    if (appTelemetry?.appVersion) {\r\n        parameters.set(X_APP_VER, appTelemetry.appVersion);\r\n    }\r\n}\r\n/**\r\n * add prompt\r\n * @param prompt\r\n */\r\nfunction addPrompt(parameters, prompt) {\r\n    parameters.set(PROMPT, prompt);\r\n}\r\n/**\r\n * add state\r\n * @param state\r\n */\r\nfunction addState(parameters, state) {\r\n    if (state) {\r\n        parameters.set(STATE, state);\r\n    }\r\n}\r\n/**\r\n * add nonce\r\n * @param nonce\r\n */\r\nfunction addNonce(parameters, nonce) {\r\n    parameters.set(NONCE, nonce);\r\n}\r\n/**\r\n * add code_challenge and code_challenge_method\r\n * - throw if either of them are not passed\r\n * @param codeChallenge\r\n * @param codeChallengeMethod\r\n */\r\nfunction addCodeChallengeParams(parameters, codeChallenge, codeChallengeMethod) {\r\n    if (codeChallenge && codeChallengeMethod) {\r\n        parameters.set(CODE_CHALLENGE, codeChallenge);\r\n        parameters.set(CODE_CHALLENGE_METHOD, codeChallengeMethod);\r\n    }\r\n    else {\r\n        throw createClientConfigurationError(pkceParamsMissing);\r\n    }\r\n}\r\n/**\r\n * add the `authorization_code` passed by the user to exchange for a token\r\n * @param code\r\n */\r\nfunction addAuthorizationCode(parameters, code) {\r\n    parameters.set(CODE, code);\r\n}\r\n/**\r\n * add the `authorization_code` passed by the user to exchange for a token\r\n * @param code\r\n */\r\nfunction addDeviceCode(parameters, code) {\r\n    parameters.set(DEVICE_CODE, code);\r\n}\r\n/**\r\n * add the `refreshToken` passed by the user\r\n * @param refreshToken\r\n */\r\nfunction addRefreshToken(parameters, refreshToken) {\r\n    parameters.set(REFRESH_TOKEN, refreshToken);\r\n}\r\n/**\r\n * add the `code_verifier` passed by the user to exchange for a token\r\n * @param codeVerifier\r\n */\r\nfunction addCodeVerifier(parameters, codeVerifier) {\r\n    parameters.set(CODE_VERIFIER, codeVerifier);\r\n}\r\n/**\r\n * add client_secret\r\n * @param clientSecret\r\n */\r\nfunction addClientSecret(parameters, clientSecret) {\r\n    parameters.set(CLIENT_SECRET, clientSecret);\r\n}\r\n/**\r\n * add clientAssertion for confidential client flows\r\n * @param clientAssertion\r\n */\r\nfunction addClientAssertion(parameters, clientAssertion) {\r\n    if (clientAssertion) {\r\n        parameters.set(CLIENT_ASSERTION, clientAssertion);\r\n    }\r\n}\r\n/**\r\n * add clientAssertionType for confidential client flows\r\n * @param clientAssertionType\r\n */\r\nfunction addClientAssertionType(parameters, clientAssertionType) {\r\n    if (clientAssertionType) {\r\n        parameters.set(CLIENT_ASSERTION_TYPE, clientAssertionType);\r\n    }\r\n}\r\n/**\r\n * add OBO assertion for confidential client flows\r\n * @param clientAssertion\r\n */\r\nfunction addOboAssertion(parameters, oboAssertion) {\r\n    parameters.set(OBO_ASSERTION, oboAssertion);\r\n}\r\n/**\r\n * add grant type\r\n * @param grantType\r\n */\r\nfunction addRequestTokenUse(parameters, tokenUse) {\r\n    parameters.set(REQUESTED_TOKEN_USE, tokenUse);\r\n}\r\n/**\r\n * add grant type\r\n * @param grantType\r\n */\r\nfunction addGrantType(parameters, grantType) {\r\n    parameters.set(GRANT_TYPE, grantType);\r\n}\r\n/**\r\n * add client info\r\n *\r\n */\r\nfunction addClientInfo(parameters) {\r\n    parameters.set(CLIENT_INFO$1, \"1\");\r\n}\r\nfunction addInstanceAware(parameters) {\r\n    if (!parameters.has(INSTANCE_AWARE)) {\r\n        parameters.set(INSTANCE_AWARE, \"true\");\r\n    }\r\n}\r\n/**\r\n * add extraQueryParams\r\n * @param eQParams\r\n */\r\nfunction addExtraQueryParameters(parameters, eQParams) {\r\n    Object.entries(eQParams).forEach(([key, value]) => {\r\n        if (!parameters.has(key) && value) {\r\n            parameters.set(key, value);\r\n        }\r\n    });\r\n}\r\nfunction addClientCapabilitiesToClaims(claims, clientCapabilities) {\r\n    let mergedClaims;\r\n    // Parse provided claims into JSON object or initialize empty object\r\n    if (!claims) {\r\n        mergedClaims = {};\r\n    }\r\n    else {\r\n        try {\r\n            mergedClaims = JSON.parse(claims);\r\n        }\r\n        catch (e) {\r\n            throw createClientConfigurationError(invalidClaims);\r\n        }\r\n    }\r\n    if (clientCapabilities && clientCapabilities.length > 0) {\r\n        if (!mergedClaims.hasOwnProperty(ClaimsRequestKeys.ACCESS_TOKEN)) {\r\n            // Add access_token key to claims object\r\n            mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN] = {};\r\n        }\r\n        // Add xms_cc claim with provided clientCapabilities to access_token key\r\n        mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN][ClaimsRequestKeys.XMS_CC] =\r\n            {\r\n                values: clientCapabilities,\r\n            };\r\n    }\r\n    return JSON.stringify(mergedClaims);\r\n}\r\n/**\r\n * adds `username` for Password Grant flow\r\n * @param username\r\n */\r\nfunction addUsername(parameters, username) {\r\n    parameters.set(PasswordGrantConstants.username, username);\r\n}\r\n/**\r\n * adds `password` for Password Grant flow\r\n * @param password\r\n */\r\nfunction addPassword(parameters, password) {\r\n    parameters.set(PasswordGrantConstants.password, password);\r\n}\r\n/**\r\n * add pop_jwk to query params\r\n * @param cnfString\r\n */\r\nfunction addPopToken(parameters, cnfString) {\r\n    if (cnfString) {\r\n        parameters.set(TOKEN_TYPE, AuthenticationScheme.POP);\r\n        parameters.set(REQ_CNF, cnfString);\r\n    }\r\n}\r\n/**\r\n * add SSH JWK and key ID to query params\r\n */\r\nfunction addSshJwk(parameters, sshJwkString) {\r\n    if (sshJwkString) {\r\n        parameters.set(TOKEN_TYPE, AuthenticationScheme.SSH);\r\n        parameters.set(REQ_CNF, sshJwkString);\r\n    }\r\n}\r\n/**\r\n * add server telemetry fields\r\n * @param serverTelemetryManager\r\n */\r\nfunction addServerTelemetry(parameters, serverTelemetryManager) {\r\n    parameters.set(X_CLIENT_CURR_TELEM, serverTelemetryManager.generateCurrentRequestHeaderValue());\r\n    parameters.set(X_CLIENT_LAST_TELEM, serverTelemetryManager.generateLastRequestHeaderValue());\r\n}\r\n/**\r\n * Adds parameter that indicates to the server that throttling is supported\r\n */\r\nfunction addThrottling(parameters) {\r\n    parameters.set(X_MS_LIB_CAPABILITY, ThrottlingConstants.X_MS_LIB_CAPABILITY_VALUE);\r\n}\r\n/**\r\n * Adds logout_hint parameter for \"silent\" logout which prevent server account picker\r\n */\r\nfunction addLogoutHint(parameters, logoutHint) {\r\n    parameters.set(LOGOUT_HINT, logoutHint);\r\n}\r\nfunction addBrokerParameters(parameters, brokerClientId, brokerRedirectUri) {\r\n    if (!parameters.has(BROKER_CLIENT_ID)) {\r\n        parameters.set(BROKER_CLIENT_ID, brokerClientId);\r\n    }\r\n    if (!parameters.has(BROKER_REDIRECT_URI)) {\r\n        parameters.set(BROKER_REDIRECT_URI, brokerRedirectUri);\r\n    }\r\n}\r\n/**\r\n * Add EAR (Encrypted Authorize Response) request parameters\r\n * @param parameters\r\n * @param jwk\r\n */\r\nfunction addEARParameters(parameters, jwk) {\r\n    parameters.set(EAR_JWK, encodeURIComponent(jwk));\r\n    // ear_jwe_crypto will always have value: {\"alg\":\"dir\",\"enc\":\"A256GCM\"} so we can hardcode this\r\n    const jweCryptoB64Encoded = \"eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2R0NNIn0\";\r\n    parameters.set(EAR_JWE_CRYPTO, jweCryptoB64Encoded);\r\n}\r\n/**\r\n * Adds authorize body parameters to the request parameters\r\n * @param parameters\r\n * @param bodyParameters\r\n */\r\nfunction addPostBodyParameters(parameters, bodyParameters) {\r\n    Object.entries(bodyParameters).forEach(([key, value]) => {\r\n        if (value) {\r\n            parameters.set(key, value);\r\n        }\r\n    });\r\n}\n\nvar RequestParameterBuilder = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    addApplicationTelemetry: addApplicationTelemetry,\n    addAuthorizationCode: addAuthorizationCode,\n    addBrokerParameters: addBrokerParameters,\n    addCcsOid: addCcsOid,\n    addCcsUpn: addCcsUpn,\n    addClaims: addClaims,\n    addClientAssertion: addClientAssertion,\n    addClientAssertionType: addClientAssertionType,\n    addClientCapabilitiesToClaims: addClientCapabilitiesToClaims,\n    addClientId: addClientId,\n    addClientInfo: addClientInfo,\n    addClientSecret: addClientSecret,\n    addCodeChallengeParams: addCodeChallengeParams,\n    addCodeVerifier: addCodeVerifier,\n    addCorrelationId: addCorrelationId,\n    addDeviceCode: addDeviceCode,\n    addDomainHint: addDomainHint,\n    addEARParameters: addEARParameters,\n    addExtraQueryParameters: addExtraQueryParameters,\n    addGrantType: addGrantType,\n    addIdTokenHint: addIdTokenHint,\n    addInstanceAware: addInstanceAware,\n    addLibraryInfo: addLibraryInfo,\n    addLoginHint: addLoginHint,\n    addLogoutHint: addLogoutHint,\n    addNativeBroker: addNativeBroker,\n    addNonce: addNonce,\n    addOboAssertion: addOboAssertion,\n    addPassword: addPassword,\n    addPopToken: addPopToken,\n    addPostBodyParameters: addPostBodyParameters,\n    addPostLogoutRedirectUri: addPostLogoutRedirectUri,\n    addPrompt: addPrompt,\n    addRedirectUri: addRedirectUri,\n    addRefreshToken: addRefreshToken,\n    addRequestTokenUse: addRequestTokenUse,\n    addResponseMode: addResponseMode,\n    addResponseType: addResponseType,\n    addScopes: addScopes,\n    addServerTelemetry: addServerTelemetry,\n    addSid: addSid,\n    addSshJwk: addSshJwk,\n    addState: addState,\n    addThrottling: addThrottling,\n    addUsername: addUsername,\n    instrumentBrokerParams: instrumentBrokerParams\n});\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Error thrown when there is an error with the server code, for example, unavailability.\r\n */\r\nclass ServerError extends AuthError {\r\n    constructor(errorCode, errorMessage, subError, errorNo, status) {\r\n        super(errorCode, errorMessage, subError);\r\n        this.name = \"ServerError\";\r\n        this.errorNo = errorNo;\r\n        this.status = status;\r\n        Object.setPrototypeOf(this, ServerError.prototype);\r\n    }\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nfunction getRequestThumbprint(clientId, request, homeAccountId) {\r\n    return {\r\n        clientId: clientId,\r\n        authority: request.authority,\r\n        scopes: request.scopes,\r\n        homeAccountIdentifier: homeAccountId,\r\n        claims: request.claims,\r\n        authenticationScheme: request.authenticationScheme,\r\n        resourceRequestMethod: request.resourceRequestMethod,\r\n        resourceRequestUri: request.resourceRequestUri,\r\n        shrClaims: request.shrClaims,\r\n        sshKid: request.sshKid,\r\n        embeddedClientId: request.embeddedClientId || request.tokenBodyParameters?.clientId,\r\n    };\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/** @internal */\r\nclass ThrottlingUtils {\r\n    /**\r\n     * Prepares a RequestThumbprint to be stored as a key.\r\n     * @param thumbprint\r\n     */\r\n    static generateThrottlingStorageKey(thumbprint) {\r\n        return `${ThrottlingConstants.THROTTLING_PREFIX}.${JSON.stringify(thumbprint)}`;\r\n    }\r\n    /**\r\n     * Performs necessary throttling checks before a network request.\r\n     * @param cacheManager\r\n     * @param thumbprint\r\n     */\r\n    static preProcess(cacheManager, thumbprint, correlationId) {\r\n        const key = ThrottlingUtils.generateThrottlingStorageKey(thumbprint);\r\n        const value = cacheManager.getThrottlingCache(key);\r\n        if (value) {\r\n            if (value.throttleTime < Date.now()) {\r\n                cacheManager.removeItem(key, correlationId);\r\n                return;\r\n            }\r\n            throw new ServerError(value.errorCodes?.join(\" \") || Constants.EMPTY_STRING, value.errorMessage, value.subError);\r\n        }\r\n    }\r\n    /**\r\n     * Performs necessary throttling checks after a network request.\r\n     * @param cacheManager\r\n     * @param thumbprint\r\n     * @param response\r\n     */\r\n    static postProcess(cacheManager, thumbprint, response, correlationId) {\r\n        if (ThrottlingUtils.checkResponseStatus(response) ||\r\n            ThrottlingUtils.checkResponseForRetryAfter(response)) {\r\n            const thumbprintValue = {\r\n                throttleTime: ThrottlingUtils.calculateThrottleTime(parseInt(response.headers[HeaderNames.RETRY_AFTER])),\r\n                error: response.body.error,\r\n                errorCodes: response.body.error_codes,\r\n                errorMessage: response.body.error_description,\r\n                subError: response.body.suberror,\r\n            };\r\n            cacheManager.setThrottlingCache(ThrottlingUtils.generateThrottlingStorageKey(thumbprint), thumbprintValue, correlationId);\r\n        }\r\n    }\r\n    /**\r\n     * Checks a NetworkResponse object's status codes against 429 or 5xx\r\n     * @param response\r\n     */\r\n    static checkResponseStatus(response) {\r\n        return (response.status === 429 ||\r\n            (response.status >= 500 && response.status < 600));\r\n    }\r\n    /**\r\n     * Checks a NetworkResponse object's RetryAfter header\r\n     * @param response\r\n     */\r\n    static checkResponseForRetryAfter(response) {\r\n        if (response.headers) {\r\n            return (response.headers.hasOwnProperty(HeaderNames.RETRY_AFTER) &&\r\n                (response.status < 200 || response.status >= 300));\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * Calculates the Unix-time value for a throttle to expire given throttleTime in seconds.\r\n     * @param throttleTime\r\n     */\r\n    static calculateThrottleTime(throttleTime) {\r\n        const time = throttleTime <= 0 ? 0 : throttleTime;\r\n        const currentSeconds = Date.now() / 1000;\r\n        return Math.floor(Math.min(currentSeconds +\r\n            (time || ThrottlingConstants.DEFAULT_THROTTLE_TIME_SECONDS), currentSeconds +\r\n            ThrottlingConstants.DEFAULT_MAX_THROTTLE_TIME_SECONDS) * 1000);\r\n    }\r\n    static removeThrottle(cacheManager, clientId, request, homeAccountIdentifier) {\r\n        const thumbprint = getRequestThumbprint(clientId, request, homeAccountIdentifier);\r\n        const key = this.generateThrottlingStorageKey(thumbprint);\r\n        cacheManager.removeItem(key, request.correlationId);\r\n    }\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Represents network related errors\r\n */\r\nclass NetworkError extends AuthError {\r\n    constructor(error, httpStatus, responseHeaders) {\r\n        super(error.errorCode, error.errorMessage, error.subError);\r\n        Object.setPrototypeOf(this, NetworkError.prototype);\r\n        this.name = \"NetworkError\";\r\n        this.error = error;\r\n        this.httpStatus = httpStatus;\r\n        this.responseHeaders = responseHeaders;\r\n    }\r\n}\r\n/**\r\n * Creates NetworkError object for a failed network request\r\n * @param error - Error to be thrown back to the caller\r\n * @param httpStatus - Status code of the network request\r\n * @param responseHeaders - Response headers of the network request, when available\r\n * @returns NetworkError object\r\n */\r\nfunction createNetworkError(error, httpStatus, responseHeaders, additionalError) {\r\n    error.errorMessage = `${error.errorMessage}, additionalErrorInfo: error.name:${additionalError?.name}, error.message:${additionalError?.message}`;\r\n    return new NetworkError(error, httpStatus, responseHeaders);\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Base application class which will construct requests to send to and handle responses from the Microsoft STS using the authorization code flow.\r\n * @internal\r\n */\r\nclass BaseClient {\r\n    constructor(configuration, performanceClient) {\r\n        // Set the configuration\r\n        this.config = buildClientConfiguration(configuration);\r\n        // Initialize the logger\r\n        this.logger = new Logger(this.config.loggerOptions, name, version);\r\n        // Initialize crypto\r\n        this.cryptoUtils = this.config.cryptoInterface;\r\n        // Initialize storage interface\r\n        this.cacheManager = this.config.storageInterface;\r\n        // Set the network interface\r\n        this.networkClient = this.config.networkInterface;\r\n        // Set TelemetryManager\r\n        this.serverTelemetryManager = this.config.serverTelemetryManager;\r\n        // set Authority\r\n        this.authority = this.config.authOptions.authority;\r\n        // set performance telemetry client\r\n        this.performanceClient = performanceClient;\r\n    }\r\n    /**\r\n     * Creates default headers for requests to token endpoint\r\n     */\r\n    createTokenRequestHeaders(ccsCred) {\r\n        const headers = {};\r\n        headers[HeaderNames.CONTENT_TYPE] = Constants.URL_FORM_CONTENT_TYPE;\r\n        if (!this.config.systemOptions.preventCorsPreflight && ccsCred) {\r\n            switch (ccsCred.type) {\r\n                case CcsCredentialType.HOME_ACCOUNT_ID:\r\n                    try {\r\n                        const clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\r\n                        headers[HeaderNames.CCS_HEADER] = `Oid:${clientInfo.uid}@${clientInfo.utid}`;\r\n                    }\r\n                    catch (e) {\r\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" +\r\n                            e);\r\n                    }\r\n                    break;\r\n                case CcsCredentialType.UPN:\r\n                    headers[HeaderNames.CCS_HEADER] = `UPN: ${ccsCred.credential}`;\r\n                    break;\r\n            }\r\n        }\r\n        return headers;\r\n    }\r\n    /**\r\n     * Http post to token endpoint\r\n     * @param tokenEndpoint\r\n     * @param queryString\r\n     * @param headers\r\n     * @param thumbprint\r\n     */\r\n    async executePostToTokenEndpoint(tokenEndpoint, queryString, headers, thumbprint, correlationId, queuedEvent) {\r\n        if (queuedEvent) {\r\n            this.performanceClient?.addQueueMeasurement(queuedEvent, correlationId);\r\n        }\r\n        const response = await this.sendPostRequest(thumbprint, tokenEndpoint, { body: queryString, headers: headers }, correlationId);\r\n        if (this.config.serverTelemetryManager &&\r\n            response.status < 500 &&\r\n            response.status !== 429) {\r\n            // Telemetry data successfully logged by server, clear Telemetry cache\r\n            this.config.serverTelemetryManager.clearTelemetryCache();\r\n        }\r\n        return response;\r\n    }\r\n    /**\r\n     * Wraps sendPostRequestAsync with necessary preflight and postflight logic\r\n     * @param thumbprint - Request thumbprint for throttling\r\n     * @param tokenEndpoint - Endpoint to make the POST to\r\n     * @param options - Body and Headers to include on the POST request\r\n     * @param correlationId - CorrelationId for telemetry\r\n     */\r\n    async sendPostRequest(thumbprint, tokenEndpoint, options, correlationId) {\r\n        ThrottlingUtils.preProcess(this.cacheManager, thumbprint, correlationId);\r\n        let response;\r\n        try {\r\n            response = await invokeAsync((this.networkClient.sendPostRequestAsync.bind(this.networkClient)), PerformanceEvents.NetworkClientSendPostRequestAsync, this.logger, this.performanceClient, correlationId)(tokenEndpoint, options);\r\n            const responseHeaders = response.headers || {};\r\n            this.performanceClient?.addFields({\r\n                refreshTokenSize: response.body.refresh_token?.length || 0,\r\n                httpVerToken: responseHeaders[HeaderNames.X_MS_HTTP_VERSION] || \"\",\r\n                requestId: responseHeaders[HeaderNames.X_MS_REQUEST_ID] || \"\",\r\n            }, correlationId);\r\n        }\r\n        catch (e) {\r\n            if (e instanceof NetworkError) {\r\n                const responseHeaders = e.responseHeaders;\r\n                if (responseHeaders) {\r\n                    this.performanceClient?.addFields({\r\n                        httpVerToken: responseHeaders[HeaderNames.X_MS_HTTP_VERSION] || \"\",\r\n                        requestId: responseHeaders[HeaderNames.X_MS_REQUEST_ID] ||\r\n                            \"\",\r\n                        contentTypeHeader: responseHeaders[HeaderNames.CONTENT_TYPE] ||\r\n                            undefined,\r\n                        contentLengthHeader: responseHeaders[HeaderNames.CONTENT_LENGTH] ||\r\n                            undefined,\r\n                        httpStatus: e.httpStatus,\r\n                    }, correlationId);\r\n                }\r\n                throw e.error;\r\n            }\r\n            if (e instanceof AuthError) {\r\n                throw e;\r\n            }\r\n            else {\r\n                throw createClientAuthError(networkError);\r\n            }\r\n        }\r\n        ThrottlingUtils.postProcess(this.cacheManager, thumbprint, response, correlationId);\r\n        return response;\r\n    }\r\n    /**\r\n     * Updates the authority object of the client. Endpoint discovery must be completed.\r\n     * @param updatedAuthority\r\n     */\r\n    async updateAuthority(cloudInstanceHostname, correlationId) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.UpdateTokenEndpointAuthority, correlationId);\r\n        const cloudInstanceAuthorityUri = `https://${cloudInstanceHostname}/${this.authority.tenant}/`;\r\n        const cloudInstanceAuthority = await createDiscoveredInstance(cloudInstanceAuthorityUri, this.networkClient, this.cacheManager, this.authority.options, this.logger, correlationId, this.performanceClient);\r\n        this.authority = cloudInstanceAuthority;\r\n    }\r\n    /**\r\n     * Creates query string for the /token request\r\n     * @param request\r\n     */\r\n    createTokenQueryParameters(request) {\r\n        const parameters = new Map();\r\n        if (request.embeddedClientId) {\r\n            addBrokerParameters(parameters, this.config.authOptions.clientId, this.config.authOptions.redirectUri);\r\n        }\r\n        if (request.tokenQueryParameters) {\r\n            addExtraQueryParameters(parameters, request.tokenQueryParameters);\r\n        }\r\n        addCorrelationId(parameters, request.correlationId);\r\n        instrumentBrokerParams(parameters, request.correlationId, this.performanceClient);\r\n        return mapToQueryString(parameters);\r\n    }\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Gets tenantId from available ID token claims to set as credential realm with the following precedence:\r\n * 1. tid - if the token is acquired from an Azure AD tenant tid will be present\r\n * 2. tfp - if the token is acquired from a modern B2C tenant tfp should be present\r\n * 3. acr - if the token is acquired from a legacy B2C tenant acr should be present\r\n * Downcased to match the realm case-insensitive comparison requirements\r\n * @param idTokenClaims\r\n * @returns\r\n */\r\nfunction getTenantIdFromIdTokenClaims(idTokenClaims) {\r\n    if (idTokenClaims) {\r\n        const tenantId = idTokenClaims.tid || idTokenClaims.tfp || idTokenClaims.acr;\r\n        return tenantId || null;\r\n    }\r\n    return null;\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Type that defines required and optional parameters for an Account field (based on universal cache schema implemented by all MSALs).\r\n *\r\n * Key : Value Schema\r\n *\r\n * Key: <home_account_id>-<environment>-<realm*>\r\n *\r\n * Value Schema:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n *      localAccountId: Original tenant-specific accountID, usually used for legacy cases\r\n *      username: primary username that represents the user, usually corresponds to preferred_username in the v2 endpt\r\n *      authorityType: Accounts authority type as a string\r\n *      name: Full name for the account, including given name and family name,\r\n *      lastModificationTime: last time this entity was modified in the cache\r\n *      lastModificationApp:\r\n *      nativeAccountId: Account identifier on the native device\r\n *      tenantProfiles: Array of tenant profile objects for each tenant that the account has authenticated with in the browser\r\n * }\r\n * @internal\r\n */\r\nclass AccountEntity {\r\n    /**\r\n     * Returns the AccountInfo interface for this account.\r\n     */\r\n    getAccountInfo() {\r\n        return {\r\n            homeAccountId: this.homeAccountId,\r\n            environment: this.environment,\r\n            tenantId: this.realm,\r\n            username: this.username,\r\n            localAccountId: this.localAccountId,\r\n            loginHint: this.loginHint,\r\n            name: this.name,\r\n            nativeAccountId: this.nativeAccountId,\r\n            authorityType: this.authorityType,\r\n            // Deserialize tenant profiles array into a Map\r\n            tenantProfiles: new Map((this.tenantProfiles || []).map((tenantProfile) => {\r\n                return [tenantProfile.tenantId, tenantProfile];\r\n            })),\r\n        };\r\n    }\r\n    /**\r\n     * Returns true if the account entity is in single tenant format (outdated), false otherwise\r\n     */\r\n    isSingleTenant() {\r\n        return !this.tenantProfiles;\r\n    }\r\n    /**\r\n     * Build Account cache from IdToken, clientInfo and authority/policy. Associated with AAD.\r\n     * @param accountDetails\r\n     */\r\n    static createAccount(accountDetails, authority, base64Decode) {\r\n        const account = new AccountEntity();\r\n        if (authority.authorityType === AuthorityType.Adfs) {\r\n            account.authorityType = CacheAccountType.ADFS_ACCOUNT_TYPE;\r\n        }\r\n        else if (authority.protocolMode === ProtocolMode.OIDC) {\r\n            account.authorityType = CacheAccountType.GENERIC_ACCOUNT_TYPE;\r\n        }\r\n        else {\r\n            account.authorityType = CacheAccountType.MSSTS_ACCOUNT_TYPE;\r\n        }\r\n        let clientInfo;\r\n        if (accountDetails.clientInfo && base64Decode) {\r\n            clientInfo = buildClientInfo(accountDetails.clientInfo, base64Decode);\r\n        }\r\n        account.clientInfo = accountDetails.clientInfo;\r\n        account.homeAccountId = accountDetails.homeAccountId;\r\n        account.nativeAccountId = accountDetails.nativeAccountId;\r\n        const env = accountDetails.environment ||\r\n            (authority && authority.getPreferredCache());\r\n        if (!env) {\r\n            throw createClientAuthError(invalidCacheEnvironment);\r\n        }\r\n        account.environment = env;\r\n        // non AAD scenarios can have empty realm\r\n        account.realm =\r\n            clientInfo?.utid ||\r\n                getTenantIdFromIdTokenClaims(accountDetails.idTokenClaims) ||\r\n                \"\";\r\n        // How do you account for MSA CID here?\r\n        account.localAccountId =\r\n            clientInfo?.uid ||\r\n                accountDetails.idTokenClaims?.oid ||\r\n                accountDetails.idTokenClaims?.sub ||\r\n                \"\";\r\n        /*\r\n         * In B2C scenarios the emails claim is used instead of preferred_username and it is an array.\r\n         * In most cases it will contain a single email. This field should not be relied upon if a custom\r\n         * policy is configured to return more than 1 email.\r\n         */\r\n        const preferredUsername = accountDetails.idTokenClaims?.preferred_username ||\r\n            accountDetails.idTokenClaims?.upn;\r\n        const email = accountDetails.idTokenClaims?.emails\r\n            ? accountDetails.idTokenClaims.emails[0]\r\n            : null;\r\n        account.username = preferredUsername || email || \"\";\r\n        account.loginHint = accountDetails.idTokenClaims?.login_hint;\r\n        account.name = accountDetails.idTokenClaims?.name || \"\";\r\n        account.cloudGraphHostName = accountDetails.cloudGraphHostName;\r\n        account.msGraphHost = accountDetails.msGraphHost;\r\n        if (accountDetails.tenantProfiles) {\r\n            account.tenantProfiles = accountDetails.tenantProfiles;\r\n        }\r\n        else {\r\n            const tenantProfile = buildTenantProfile(accountDetails.homeAccountId, account.localAccountId, account.realm, accountDetails.idTokenClaims);\r\n            account.tenantProfiles = [tenantProfile];\r\n        }\r\n        return account;\r\n    }\r\n    /**\r\n     * Creates an AccountEntity object from AccountInfo\r\n     * @param accountInfo\r\n     * @param cloudGraphHostName\r\n     * @param msGraphHost\r\n     * @returns\r\n     */\r\n    static createFromAccountInfo(accountInfo, cloudGraphHostName, msGraphHost) {\r\n        const account = new AccountEntity();\r\n        account.authorityType =\r\n            accountInfo.authorityType || CacheAccountType.GENERIC_ACCOUNT_TYPE;\r\n        account.homeAccountId = accountInfo.homeAccountId;\r\n        account.localAccountId = accountInfo.localAccountId;\r\n        account.nativeAccountId = accountInfo.nativeAccountId;\r\n        account.realm = accountInfo.tenantId;\r\n        account.environment = accountInfo.environment;\r\n        account.username = accountInfo.username;\r\n        account.name = accountInfo.name;\r\n        account.loginHint = accountInfo.loginHint;\r\n        account.cloudGraphHostName = cloudGraphHostName;\r\n        account.msGraphHost = msGraphHost;\r\n        // Serialize tenant profiles map into an array\r\n        account.tenantProfiles = Array.from(accountInfo.tenantProfiles?.values() || []);\r\n        return account;\r\n    }\r\n    /**\r\n     * Generate HomeAccountId from server response\r\n     * @param serverClientInfo\r\n     * @param authType\r\n     */\r\n    static generateHomeAccountId(serverClientInfo, authType, logger, cryptoObj, idTokenClaims) {\r\n        // since ADFS/DSTS do not have tid and does not set client_info\r\n        if (!(authType === AuthorityType.Adfs ||\r\n            authType === AuthorityType.Dsts)) {\r\n            // for cases where there is clientInfo\r\n            if (serverClientInfo) {\r\n                try {\r\n                    const clientInfo = buildClientInfo(serverClientInfo, cryptoObj.base64Decode);\r\n                    if (clientInfo.uid && clientInfo.utid) {\r\n                        return `${clientInfo.uid}.${clientInfo.utid}`;\r\n                    }\r\n                }\r\n                catch (e) { }\r\n            }\r\n            logger.warning(\"No client info in response\");\r\n        }\r\n        // default to \"sub\" claim\r\n        return idTokenClaims?.sub || \"\";\r\n    }\r\n    /**\r\n     * Validates an entity: checks for all expected params\r\n     * @param entity\r\n     */\r\n    static isAccountEntity(entity) {\r\n        if (!entity) {\r\n            return false;\r\n        }\r\n        return (entity.hasOwnProperty(\"homeAccountId\") &&\r\n            entity.hasOwnProperty(\"environment\") &&\r\n            entity.hasOwnProperty(\"realm\") &&\r\n            entity.hasOwnProperty(\"localAccountId\") &&\r\n            entity.hasOwnProperty(\"username\") &&\r\n            entity.hasOwnProperty(\"authorityType\"));\r\n    }\r\n    /**\r\n     * Helper function to determine whether 2 accountInfo objects represent the same account\r\n     * @param accountA\r\n     * @param accountB\r\n     * @param compareClaims - If set to true idTokenClaims will also be compared to determine account equality\r\n     */\r\n    static accountInfoIsEqual(accountA, accountB, compareClaims) {\r\n        if (!accountA || !accountB) {\r\n            return false;\r\n        }\r\n        let claimsMatch = true; // default to true so as to not fail comparison below if compareClaims: false\r\n        if (compareClaims) {\r\n            const accountAClaims = (accountA.idTokenClaims ||\r\n                {});\r\n            const accountBClaims = (accountB.idTokenClaims ||\r\n                {});\r\n            // issued at timestamp and nonce are expected to change each time a new id token is acquired\r\n            claimsMatch =\r\n                accountAClaims.iat === accountBClaims.iat &&\r\n                    accountAClaims.nonce === accountBClaims.nonce;\r\n        }\r\n        return (accountA.homeAccountId === accountB.homeAccountId &&\r\n            accountA.localAccountId === accountB.localAccountId &&\r\n            accountA.username === accountB.username &&\r\n            accountA.tenantId === accountB.tenantId &&\r\n            accountA.loginHint === accountB.loginHint &&\r\n            accountA.environment === accountB.environment &&\r\n            accountA.nativeAccountId === accountB.nativeAccountId &&\r\n            claimsMatch);\r\n    }\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n// Codes defined by MSAL\r\nconst noTokensFound = \"no_tokens_found\";\r\nconst nativeAccountUnavailable = \"native_account_unavailable\";\r\nconst refreshTokenExpired = \"refresh_token_expired\";\r\nconst uxNotAllowed = \"ux_not_allowed\";\r\n// Codes potentially returned by server\r\nconst interactionRequired = \"interaction_required\";\r\nconst consentRequired = \"consent_required\";\r\nconst loginRequired = \"login_required\";\r\nconst badToken = \"bad_token\";\n\nvar InteractionRequiredAuthErrorCodes = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    badToken: badToken,\n    consentRequired: consentRequired,\n    interactionRequired: interactionRequired,\n    loginRequired: loginRequired,\n    nativeAccountUnavailable: nativeAccountUnavailable,\n    noTokensFound: noTokensFound,\n    refreshTokenExpired: refreshTokenExpired,\n    uxNotAllowed: uxNotAllowed\n});\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * InteractionRequiredServerErrorMessage contains string constants used by error codes and messages returned by the server indicating interaction is required\r\n */\r\nconst InteractionRequiredServerErrorMessage = [\r\n    interactionRequired,\r\n    consentRequired,\r\n    loginRequired,\r\n    badToken,\r\n    uxNotAllowed,\r\n];\r\nconst InteractionRequiredAuthSubErrorMessage = [\r\n    \"message_only\",\r\n    \"additional_action\",\r\n    \"basic_action\",\r\n    \"user_password_expired\",\r\n    \"consent_required\",\r\n    \"bad_token\",\r\n];\r\nconst InteractionRequiredAuthErrorMessages = {\r\n    [noTokensFound]: \"No refresh token found in the cache. Please sign-in.\",\r\n    [nativeAccountUnavailable]: \"The requested account is not available in the native broker. It may have been deleted or logged out. Please sign-in again using an interactive API.\",\r\n    [refreshTokenExpired]: \"Refresh token has expired.\",\r\n    [badToken]: \"Identity provider returned bad_token due to an expired or invalid refresh token. Please invoke an interactive API to resolve.\",\r\n    [uxNotAllowed]: \"`canShowUI` flag in Edge was set to false. User interaction required on web page. Please invoke an interactive API to resolve.\",\r\n};\r\n/**\r\n * Interaction required errors defined by the SDK\r\n * @deprecated Use InteractionRequiredAuthErrorCodes instead\r\n */\r\nconst InteractionRequiredAuthErrorMessage = {\r\n    noTokensFoundError: {\r\n        code: noTokensFound,\r\n        desc: InteractionRequiredAuthErrorMessages[noTokensFound],\r\n    },\r\n    native_account_unavailable: {\r\n        code: nativeAccountUnavailable,\r\n        desc: InteractionRequiredAuthErrorMessages[nativeAccountUnavailable],\r\n    },\r\n    bad_token: {\r\n        code: badToken,\r\n        desc: InteractionRequiredAuthErrorMessages[badToken],\r\n    },\r\n};\r\n/**\r\n * Error thrown when user interaction is required.\r\n */\r\nclass InteractionRequiredAuthError extends AuthError {\r\n    constructor(errorCode, errorMessage, subError, timestamp, traceId, correlationId, claims, errorNo) {\r\n        super(errorCode, errorMessage, subError);\r\n        Object.setPrototypeOf(this, InteractionRequiredAuthError.prototype);\r\n        this.timestamp = timestamp || Constants.EMPTY_STRING;\r\n        this.traceId = traceId || Constants.EMPTY_STRING;\r\n        this.correlationId = correlationId || Constants.EMPTY_STRING;\r\n        this.claims = claims || Constants.EMPTY_STRING;\r\n        this.name = \"InteractionRequiredAuthError\";\r\n        this.errorNo = errorNo;\r\n    }\r\n}\r\n/**\r\n * Helper function used to determine if an error thrown by the server requires interaction to resolve\r\n * @param errorCode\r\n * @param errorString\r\n * @param subError\r\n */\r\nfunction isInteractionRequiredError(errorCode, errorString, subError) {\r\n    const isInteractionRequiredErrorCode = !!errorCode &&\r\n        InteractionRequiredServerErrorMessage.indexOf(errorCode) > -1;\r\n    const isInteractionRequiredSubError = !!subError &&\r\n        InteractionRequiredAuthSubErrorMessage.indexOf(subError) > -1;\r\n    const isInteractionRequiredErrorDesc = !!errorString &&\r\n        InteractionRequiredServerErrorMessage.some((irErrorCode) => {\r\n            return errorString.indexOf(irErrorCode) > -1;\r\n        });\r\n    return (isInteractionRequiredErrorCode ||\r\n        isInteractionRequiredErrorDesc ||\r\n        isInteractionRequiredSubError);\r\n}\r\n/**\r\n * Creates an InteractionRequiredAuthError\r\n */\r\nfunction createInteractionRequiredAuthError(errorCode) {\r\n    return new InteractionRequiredAuthError(errorCode, InteractionRequiredAuthErrorMessages[errorCode]);\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Class which provides helpers for OAuth 2.0 protocol specific values\r\n */\r\nclass ProtocolUtils {\r\n    /**\r\n     * Appends user state with random guid, or returns random guid.\r\n     * @param userState\r\n     * @param randomGuid\r\n     */\r\n    static setRequestState(cryptoObj, userState, meta) {\r\n        const libraryState = ProtocolUtils.generateLibraryState(cryptoObj, meta);\r\n        return userState\r\n            ? `${libraryState}${Constants.RESOURCE_DELIM}${userState}`\r\n            : libraryState;\r\n    }\r\n    /**\r\n     * Generates the state value used by the common library.\r\n     * @param randomGuid\r\n     * @param cryptoObj\r\n     */\r\n    static generateLibraryState(cryptoObj, meta) {\r\n        if (!cryptoObj) {\r\n            throw createClientAuthError(noCryptoObject);\r\n        }\r\n        // Create a state object containing a unique id and the timestamp of the request creation\r\n        const stateObj = {\r\n            id: cryptoObj.createNewGuid(),\r\n        };\r\n        if (meta) {\r\n            stateObj.meta = meta;\r\n        }\r\n        const stateString = JSON.stringify(stateObj);\r\n        return cryptoObj.base64Encode(stateString);\r\n    }\r\n    /**\r\n     * Parses the state into the RequestStateObject, which contains the LibraryState info and the state passed by the user.\r\n     * @param state\r\n     * @param cryptoObj\r\n     */\r\n    static parseRequestState(cryptoObj, state) {\r\n        if (!cryptoObj) {\r\n            throw createClientAuthError(noCryptoObject);\r\n        }\r\n        if (!state) {\r\n            throw createClientAuthError(invalidState);\r\n        }\r\n        try {\r\n            // Split the state between library state and user passed state and decode them separately\r\n            const splitState = state.split(Constants.RESOURCE_DELIM);\r\n            const libraryState = splitState[0];\r\n            const userState = splitState.length > 1\r\n                ? splitState.slice(1).join(Constants.RESOURCE_DELIM)\r\n                : Constants.EMPTY_STRING;\r\n            const libraryStateString = cryptoObj.base64Decode(libraryState);\r\n            const libraryStateObj = JSON.parse(libraryStateString);\r\n            return {\r\n                userRequestState: userState || Constants.EMPTY_STRING,\r\n                libraryState: libraryStateObj,\r\n            };\r\n        }\r\n        catch (e) {\r\n            throw createClientAuthError(invalidState);\r\n        }\r\n    }\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst KeyLocation = {\r\n    SW: \"sw\"};\r\n/** @internal */\r\nclass PopTokenGenerator {\r\n    constructor(cryptoUtils, performanceClient) {\r\n        this.cryptoUtils = cryptoUtils;\r\n        this.performanceClient = performanceClient;\r\n    }\r\n    /**\r\n     * Generates the req_cnf validated at the RP in the POP protocol for SHR parameters\r\n     * and returns an object containing the keyid, the full req_cnf string and the req_cnf string hash\r\n     * @param request\r\n     * @returns\r\n     */\r\n    async generateCnf(request, logger) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.PopTokenGenerateCnf, request.correlationId);\r\n        const reqCnf = await invokeAsync(this.generateKid.bind(this), PerformanceEvents.PopTokenGenerateCnf, logger, this.performanceClient, request.correlationId)(request);\r\n        const reqCnfString = this.cryptoUtils.base64UrlEncode(JSON.stringify(reqCnf));\r\n        return {\r\n            kid: reqCnf.kid,\r\n            reqCnfString,\r\n        };\r\n    }\r\n    /**\r\n     * Generates key_id for a SHR token request\r\n     * @param request\r\n     * @returns\r\n     */\r\n    async generateKid(request) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.PopTokenGenerateKid, request.correlationId);\r\n        const kidThumbprint = await this.cryptoUtils.getPublicKeyThumbprint(request);\r\n        return {\r\n            kid: kidThumbprint,\r\n            xms_ksl: KeyLocation.SW,\r\n        };\r\n    }\r\n    /**\r\n     * Signs the POP access_token with the local generated key-pair\r\n     * @param accessToken\r\n     * @param request\r\n     * @returns\r\n     */\r\n    async signPopToken(accessToken, keyId, request) {\r\n        return this.signPayload(accessToken, keyId, request);\r\n    }\r\n    /**\r\n     * Utility function to generate the signed JWT for an access_token\r\n     * @param payload\r\n     * @param kid\r\n     * @param request\r\n     * @param claims\r\n     * @returns\r\n     */\r\n    async signPayload(payload, keyId, request, claims) {\r\n        // Deconstruct request to extract SHR parameters\r\n        const { resourceRequestMethod, resourceRequestUri, shrClaims, shrNonce, shrOptions, } = request;\r\n        const resourceUrlString = resourceRequestUri\r\n            ? new UrlString(resourceRequestUri)\r\n            : undefined;\r\n        const resourceUrlComponents = resourceUrlString?.getUrlComponents();\r\n        return this.cryptoUtils.signJwt({\r\n            at: payload,\r\n            ts: nowSeconds(),\r\n            m: resourceRequestMethod?.toUpperCase(),\r\n            u: resourceUrlComponents?.HostNameAndPort,\r\n            nonce: shrNonce || this.cryptoUtils.createNewGuid(),\r\n            p: resourceUrlComponents?.AbsolutePath,\r\n            q: resourceUrlComponents?.QueryString\r\n                ? [[], resourceUrlComponents.QueryString]\r\n                : undefined,\r\n            client_claims: shrClaims || undefined,\r\n            ...claims,\r\n        }, keyId, shrOptions, request.correlationId);\r\n    }\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * This class instance helps track the memory changes facilitating\r\n * decisions to read from and write to the persistent cache\r\n */ class TokenCacheContext {\r\n    constructor(tokenCache, hasChanged) {\r\n        this.cache = tokenCache;\r\n        this.hasChanged = hasChanged;\r\n    }\r\n    /**\r\n     * boolean which indicates the changes in cache\r\n     */\r\n    get cacheHasChanged() {\r\n        return this.hasChanged;\r\n    }\r\n    /**\r\n     * function to retrieve the token cache\r\n     */\r\n    get tokenCache() {\r\n        return this.cache;\r\n    }\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Class that handles response parsing.\r\n * @internal\r\n */\r\nclass ResponseHandler {\r\n    constructor(clientId, cacheStorage, cryptoObj, logger, serializableCache, persistencePlugin, performanceClient) {\r\n        this.clientId = clientId;\r\n        this.cacheStorage = cacheStorage;\r\n        this.cryptoObj = cryptoObj;\r\n        this.logger = logger;\r\n        this.serializableCache = serializableCache;\r\n        this.persistencePlugin = persistencePlugin;\r\n        this.performanceClient = performanceClient;\r\n    }\r\n    /**\r\n     * Function which validates server authorization token response.\r\n     * @param serverResponse\r\n     * @param refreshAccessToken\r\n     */\r\n    validateTokenResponse(serverResponse, refreshAccessToken) {\r\n        // Check for error\r\n        if (serverResponse.error ||\r\n            serverResponse.error_description ||\r\n            serverResponse.suberror) {\r\n            const errString = `Error(s): ${serverResponse.error_codes || Constants.NOT_AVAILABLE} - Timestamp: ${serverResponse.timestamp || Constants.NOT_AVAILABLE} - Description: ${serverResponse.error_description || Constants.NOT_AVAILABLE} - Correlation ID: ${serverResponse.correlation_id || Constants.NOT_AVAILABLE} - Trace ID: ${serverResponse.trace_id || Constants.NOT_AVAILABLE}`;\r\n            const serverErrorNo = serverResponse.error_codes?.length\r\n                ? serverResponse.error_codes[0]\r\n                : undefined;\r\n            const serverError = new ServerError(serverResponse.error, errString, serverResponse.suberror, serverErrorNo, serverResponse.status);\r\n            // check if 500 error\r\n            if (refreshAccessToken &&\r\n                serverResponse.status &&\r\n                serverResponse.status >= HttpStatus.SERVER_ERROR_RANGE_START &&\r\n                serverResponse.status <= HttpStatus.SERVER_ERROR_RANGE_END) {\r\n                this.logger.warning(`executeTokenRequest:validateTokenResponse - AAD is currently unavailable and the access token is unable to be refreshed.\\n${serverError}`);\r\n                // don't throw an exception, but alert the user via a log that the token was unable to be refreshed\r\n                return;\r\n                // check if 400 error\r\n            }\r\n            else if (refreshAccessToken &&\r\n                serverResponse.status &&\r\n                serverResponse.status >= HttpStatus.CLIENT_ERROR_RANGE_START &&\r\n                serverResponse.status <= HttpStatus.CLIENT_ERROR_RANGE_END) {\r\n                this.logger.warning(`executeTokenRequest:validateTokenResponse - AAD is currently available but is unable to refresh the access token.\\n${serverError}`);\r\n                // don't throw an exception, but alert the user via a log that the token was unable to be refreshed\r\n                return;\r\n            }\r\n            if (isInteractionRequiredError(serverResponse.error, serverResponse.error_description, serverResponse.suberror)) {\r\n                throw new InteractionRequiredAuthError(serverResponse.error, serverResponse.error_description, serverResponse.suberror, serverResponse.timestamp || Constants.EMPTY_STRING, serverResponse.trace_id || Constants.EMPTY_STRING, serverResponse.correlation_id || Constants.EMPTY_STRING, serverResponse.claims || Constants.EMPTY_STRING, serverErrorNo);\r\n            }\r\n            throw serverError;\r\n        }\r\n    }\r\n    /**\r\n     * Returns a constructed token response based on given string. Also manages the cache updates and cleanups.\r\n     * @param serverTokenResponse\r\n     * @param authority\r\n     */\r\n    async handleServerTokenResponse(serverTokenResponse, authority, reqTimestamp, request, authCodePayload, userAssertionHash, handlingRefreshTokenResponse, forceCacheRefreshTokenResponse, serverRequestId) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.HandleServerTokenResponse, serverTokenResponse.correlation_id);\r\n        // create an idToken object (not entity)\r\n        let idTokenClaims;\r\n        if (serverTokenResponse.id_token) {\r\n            idTokenClaims = extractTokenClaims(serverTokenResponse.id_token || Constants.EMPTY_STRING, this.cryptoObj.base64Decode);\r\n            // token nonce check (TODO: Add a warning if no nonce is given?)\r\n            if (authCodePayload && authCodePayload.nonce) {\r\n                if (idTokenClaims.nonce !== authCodePayload.nonce) {\r\n                    throw createClientAuthError(nonceMismatch);\r\n                }\r\n            }\r\n            // token max_age check\r\n            if (request.maxAge || request.maxAge === 0) {\r\n                const authTime = idTokenClaims.auth_time;\r\n                if (!authTime) {\r\n                    throw createClientAuthError(authTimeNotFound);\r\n                }\r\n                checkMaxAge(authTime, request.maxAge);\r\n            }\r\n        }\r\n        // generate homeAccountId\r\n        this.homeAccountIdentifier = AccountEntity.generateHomeAccountId(serverTokenResponse.client_info || Constants.EMPTY_STRING, authority.authorityType, this.logger, this.cryptoObj, idTokenClaims);\r\n        // save the response tokens\r\n        let requestStateObj;\r\n        if (!!authCodePayload && !!authCodePayload.state) {\r\n            requestStateObj = ProtocolUtils.parseRequestState(this.cryptoObj, authCodePayload.state);\r\n        }\r\n        // Add keyId from request to serverTokenResponse if defined\r\n        serverTokenResponse.key_id =\r\n            serverTokenResponse.key_id || request.sshKid || undefined;\r\n        const cacheRecord = this.generateCacheRecord(serverTokenResponse, authority, reqTimestamp, request, idTokenClaims, userAssertionHash, authCodePayload);\r\n        let cacheContext;\r\n        try {\r\n            if (this.persistencePlugin && this.serializableCache) {\r\n                this.logger.verbose(\"Persistence enabled, calling beforeCacheAccess\");\r\n                cacheContext = new TokenCacheContext(this.serializableCache, true);\r\n                await this.persistencePlugin.beforeCacheAccess(cacheContext);\r\n            }\r\n            /*\r\n             * When saving a refreshed tokens to the cache, it is expected that the account that was used is present in the cache.\r\n             * If not present, we should return null, as it's the case that another application called removeAccount in between\r\n             * the calls to getAllAccounts and acquireTokenSilent. We should not overwrite that removal, unless explicitly flagged by\r\n             * the developer, as in the case of refresh token flow used in ADAL Node to MSAL Node migration.\r\n             */\r\n            if (handlingRefreshTokenResponse &&\r\n                !forceCacheRefreshTokenResponse &&\r\n                cacheRecord.account) {\r\n                const key = this.cacheStorage.generateAccountKey(cacheRecord.account.getAccountInfo());\r\n                const account = this.cacheStorage.getAccount(key, request.correlationId);\r\n                if (!account) {\r\n                    this.logger.warning(\"Account used to refresh tokens not in persistence, refreshed tokens will not be stored in the cache\");\r\n                    return await ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenClaims, requestStateObj, undefined, serverRequestId);\r\n                }\r\n            }\r\n            await this.cacheStorage.saveCacheRecord(cacheRecord, request.correlationId, request.storeInCache);\r\n        }\r\n        finally {\r\n            if (this.persistencePlugin &&\r\n                this.serializableCache &&\r\n                cacheContext) {\r\n                this.logger.verbose(\"Persistence enabled, calling afterCacheAccess\");\r\n                await this.persistencePlugin.afterCacheAccess(cacheContext);\r\n            }\r\n        }\r\n        return ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenClaims, requestStateObj, serverTokenResponse, serverRequestId);\r\n    }\r\n    /**\r\n     * Generates CacheRecord\r\n     * @param serverTokenResponse\r\n     * @param idTokenObj\r\n     * @param authority\r\n     */\r\n    generateCacheRecord(serverTokenResponse, authority, reqTimestamp, request, idTokenClaims, userAssertionHash, authCodePayload) {\r\n        const env = authority.getPreferredCache();\r\n        if (!env) {\r\n            throw createClientAuthError(invalidCacheEnvironment);\r\n        }\r\n        const claimsTenantId = getTenantIdFromIdTokenClaims(idTokenClaims);\r\n        // IdToken: non AAD scenarios can have empty realm\r\n        let cachedIdToken;\r\n        let cachedAccount;\r\n        if (serverTokenResponse.id_token && !!idTokenClaims) {\r\n            cachedIdToken = createIdTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.id_token, this.clientId, claimsTenantId || \"\");\r\n            cachedAccount = buildAccountToCache(this.cacheStorage, authority, this.homeAccountIdentifier, this.cryptoObj.base64Decode, request.correlationId, idTokenClaims, serverTokenResponse.client_info, env, claimsTenantId, authCodePayload, undefined, // nativeAccountId\r\n            this.logger);\r\n        }\r\n        // AccessToken\r\n        let cachedAccessToken = null;\r\n        if (serverTokenResponse.access_token) {\r\n            // If scopes not returned in server response, use request scopes\r\n            const responseScopes = serverTokenResponse.scope\r\n                ? ScopeSet.fromString(serverTokenResponse.scope)\r\n                : new ScopeSet(request.scopes || []);\r\n            /*\r\n             * Use timestamp calculated before request\r\n             * Server may return timestamps as strings, parse to numbers if so.\r\n             */\r\n            const expiresIn = (typeof serverTokenResponse.expires_in === \"string\"\r\n                ? parseInt(serverTokenResponse.expires_in, 10)\r\n                : serverTokenResponse.expires_in) || 0;\r\n            const extExpiresIn = (typeof serverTokenResponse.ext_expires_in === \"string\"\r\n                ? parseInt(serverTokenResponse.ext_expires_in, 10)\r\n                : serverTokenResponse.ext_expires_in) || 0;\r\n            const refreshIn = (typeof serverTokenResponse.refresh_in === \"string\"\r\n                ? parseInt(serverTokenResponse.refresh_in, 10)\r\n                : serverTokenResponse.refresh_in) || undefined;\r\n            const tokenExpirationSeconds = reqTimestamp + expiresIn;\r\n            const extendedTokenExpirationSeconds = tokenExpirationSeconds + extExpiresIn;\r\n            const refreshOnSeconds = refreshIn && refreshIn > 0\r\n                ? reqTimestamp + refreshIn\r\n                : undefined;\r\n            // non AAD scenarios can have empty realm\r\n            cachedAccessToken = createAccessTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.access_token, this.clientId, claimsTenantId || authority.tenant || \"\", responseScopes.printScopes(), tokenExpirationSeconds, extendedTokenExpirationSeconds, this.cryptoObj.base64Decode, refreshOnSeconds, serverTokenResponse.token_type, userAssertionHash, serverTokenResponse.key_id, request.claims, request.requestedClaimsHash);\r\n        }\r\n        // refreshToken\r\n        let cachedRefreshToken = null;\r\n        if (serverTokenResponse.refresh_token) {\r\n            let rtExpiresOn;\r\n            if (serverTokenResponse.refresh_token_expires_in) {\r\n                const rtExpiresIn = typeof serverTokenResponse.refresh_token_expires_in ===\r\n                    \"string\"\r\n                    ? parseInt(serverTokenResponse.refresh_token_expires_in, 10)\r\n                    : serverTokenResponse.refresh_token_expires_in;\r\n                rtExpiresOn = reqTimestamp + rtExpiresIn;\r\n            }\r\n            cachedRefreshToken = createRefreshTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.refresh_token, this.clientId, serverTokenResponse.foci, userAssertionHash, rtExpiresOn);\r\n        }\r\n        // appMetadata\r\n        let cachedAppMetadata = null;\r\n        if (serverTokenResponse.foci) {\r\n            cachedAppMetadata = {\r\n                clientId: this.clientId,\r\n                environment: env,\r\n                familyId: serverTokenResponse.foci,\r\n            };\r\n        }\r\n        return {\r\n            account: cachedAccount,\r\n            idToken: cachedIdToken,\r\n            accessToken: cachedAccessToken,\r\n            refreshToken: cachedRefreshToken,\r\n            appMetadata: cachedAppMetadata,\r\n        };\r\n    }\r\n    /**\r\n     * Creates an @AuthenticationResult from @CacheRecord , @IdToken , and a boolean that states whether or not the result is from cache.\r\n     *\r\n     * Optionally takes a state string that is set as-is in the response.\r\n     *\r\n     * @param cacheRecord\r\n     * @param idTokenObj\r\n     * @param fromTokenCache\r\n     * @param stateString\r\n     */\r\n    static async generateAuthenticationResult(cryptoObj, authority, cacheRecord, fromTokenCache, request, idTokenClaims, requestState, serverTokenResponse, requestId) {\r\n        let accessToken = Constants.EMPTY_STRING;\r\n        let responseScopes = [];\r\n        let expiresOn = null;\r\n        let extExpiresOn;\r\n        let refreshOn;\r\n        let familyId = Constants.EMPTY_STRING;\r\n        if (cacheRecord.accessToken) {\r\n            /*\r\n             * if the request object has `popKid` property, `signPopToken` will be set to false and\r\n             * the token will be returned unsigned\r\n             */\r\n            if (cacheRecord.accessToken.tokenType ===\r\n                AuthenticationScheme.POP &&\r\n                !request.popKid) {\r\n                const popTokenGenerator = new PopTokenGenerator(cryptoObj);\r\n                const { secret, keyId } = cacheRecord.accessToken;\r\n                if (!keyId) {\r\n                    throw createClientAuthError(keyIdMissing);\r\n                }\r\n                accessToken = await popTokenGenerator.signPopToken(secret, keyId, request);\r\n            }\r\n            else {\r\n                accessToken = cacheRecord.accessToken.secret;\r\n            }\r\n            responseScopes = ScopeSet.fromString(cacheRecord.accessToken.target).asArray();\r\n            // Access token expiresOn cached in seconds, converting to Date for AuthenticationResult\r\n            expiresOn = toDateFromSeconds(cacheRecord.accessToken.expiresOn);\r\n            extExpiresOn = toDateFromSeconds(cacheRecord.accessToken.extendedExpiresOn);\r\n            if (cacheRecord.accessToken.refreshOn) {\r\n                refreshOn = toDateFromSeconds(cacheRecord.accessToken.refreshOn);\r\n            }\r\n        }\r\n        if (cacheRecord.appMetadata) {\r\n            familyId =\r\n                cacheRecord.appMetadata.familyId === THE_FAMILY_ID\r\n                    ? THE_FAMILY_ID\r\n                    : \"\";\r\n        }\r\n        const uid = idTokenClaims?.oid || idTokenClaims?.sub || \"\";\r\n        const tid = idTokenClaims?.tid || \"\";\r\n        // for hybrid + native bridge enablement, send back the native account Id\r\n        if (serverTokenResponse?.spa_accountid && !!cacheRecord.account) {\r\n            cacheRecord.account.nativeAccountId =\r\n                serverTokenResponse?.spa_accountid;\r\n        }\r\n        const accountInfo = cacheRecord.account\r\n            ? updateAccountTenantProfileData(cacheRecord.account.getAccountInfo(), undefined, // tenantProfile optional\r\n            idTokenClaims, cacheRecord.idToken?.secret)\r\n            : null;\r\n        return {\r\n            authority: authority.canonicalAuthority,\r\n            uniqueId: uid,\r\n            tenantId: tid,\r\n            scopes: responseScopes,\r\n            account: accountInfo,\r\n            idToken: cacheRecord?.idToken?.secret || \"\",\r\n            idTokenClaims: idTokenClaims || {},\r\n            accessToken: accessToken,\r\n            fromCache: fromTokenCache,\r\n            expiresOn: expiresOn,\r\n            extExpiresOn: extExpiresOn,\r\n            refreshOn: refreshOn,\r\n            correlationId: request.correlationId,\r\n            requestId: requestId || Constants.EMPTY_STRING,\r\n            familyId: familyId,\r\n            tokenType: cacheRecord.accessToken?.tokenType || Constants.EMPTY_STRING,\r\n            state: requestState\r\n                ? requestState.userRequestState\r\n                : Constants.EMPTY_STRING,\r\n            cloudGraphHostName: cacheRecord.account?.cloudGraphHostName ||\r\n                Constants.EMPTY_STRING,\r\n            msGraphHost: cacheRecord.account?.msGraphHost || Constants.EMPTY_STRING,\r\n            code: serverTokenResponse?.spa_code,\r\n            fromNativeBroker: false,\r\n        };\r\n    }\r\n}\r\nfunction buildAccountToCache(cacheStorage, authority, homeAccountId, base64Decode, correlationId, idTokenClaims, clientInfo, environment, claimsTenantId, authCodePayload, nativeAccountId, logger) {\r\n    logger?.verbose(\"setCachedAccount called\");\r\n    // Check if base account is already cached\r\n    const accountKeys = cacheStorage.getAccountKeys();\r\n    const baseAccountKey = accountKeys.find((accountKey) => {\r\n        return accountKey.startsWith(homeAccountId);\r\n    });\r\n    let cachedAccount = null;\r\n    if (baseAccountKey) {\r\n        cachedAccount = cacheStorage.getAccount(baseAccountKey, correlationId);\r\n    }\r\n    const baseAccount = cachedAccount ||\r\n        AccountEntity.createAccount({\r\n            homeAccountId,\r\n            idTokenClaims,\r\n            clientInfo,\r\n            environment,\r\n            cloudGraphHostName: authCodePayload?.cloud_graph_host_name,\r\n            msGraphHost: authCodePayload?.msgraph_host,\r\n            nativeAccountId: nativeAccountId,\r\n        }, authority, base64Decode);\r\n    const tenantProfiles = baseAccount.tenantProfiles || [];\r\n    const tenantId = claimsTenantId || baseAccount.realm;\r\n    if (tenantId &&\r\n        !tenantProfiles.find((tenantProfile) => {\r\n            return tenantProfile.tenantId === tenantId;\r\n        })) {\r\n        const newTenantProfile = buildTenantProfile(homeAccountId, baseAccount.localAccountId, tenantId, idTokenClaims);\r\n        tenantProfiles.push(newTenantProfile);\r\n    }\r\n    baseAccount.tenantProfiles = tenantProfiles;\r\n    return baseAccount;\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nasync function getClientAssertion(clientAssertion, clientId, tokenEndpoint) {\r\n    if (typeof clientAssertion === \"string\") {\r\n        return clientAssertion;\r\n    }\r\n    else {\r\n        const config = {\r\n            clientId: clientId,\r\n            tokenEndpoint: tokenEndpoint,\r\n        };\r\n        return clientAssertion(config);\r\n    }\r\n}\n\nvar ClientAssertionUtils = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    getClientAssertion: getClientAssertion\n});\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Oauth2.0 Authorization Code client\r\n * @internal\r\n */\r\nclass AuthorizationCodeClient extends BaseClient {\r\n    constructor(configuration, performanceClient) {\r\n        super(configuration, performanceClient);\r\n        // Flag to indicate if client is for hybrid spa auth code redemption\r\n        this.includeRedirectUri = true;\r\n        this.oidcDefaultScopes =\r\n            this.config.authOptions.authority.options.OIDCOptions?.defaultScopes;\r\n    }\r\n    /**\r\n     * API to acquire a token in exchange of 'authorization_code` acquired by the user in the first leg of the\r\n     * authorization_code_grant\r\n     * @param request\r\n     */\r\n    async acquireToken(request, authCodePayload) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthClientAcquireToken, request.correlationId);\r\n        if (!request.code) {\r\n            throw createClientAuthError(requestCannotBeMade);\r\n        }\r\n        const reqTimestamp = nowSeconds();\r\n        const response = await invokeAsync(this.executeTokenRequest.bind(this), PerformanceEvents.AuthClientExecuteTokenRequest, this.logger, this.performanceClient, request.correlationId)(this.authority, request);\r\n        // Retrieve requestId from response headers\r\n        const requestId = response.headers?.[HeaderNames.X_MS_REQUEST_ID];\r\n        const responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin, this.performanceClient);\r\n        // Validate response. This function throws a server error if an error is returned by the server.\r\n        responseHandler.validateTokenResponse(response.body);\r\n        return invokeAsync(responseHandler.handleServerTokenResponse.bind(responseHandler), PerformanceEvents.HandleServerTokenResponse, this.logger, this.performanceClient, request.correlationId)(response.body, this.authority, reqTimestamp, request, authCodePayload, undefined, undefined, undefined, requestId);\r\n    }\r\n    /**\r\n     * Used to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n     * Default behaviour is to redirect the user to `window.location.href`.\r\n     * @param authorityUri\r\n     */\r\n    getLogoutUri(logoutRequest) {\r\n        // Throw error if logoutRequest is null/undefined\r\n        if (!logoutRequest) {\r\n            throw createClientConfigurationError(logoutRequestEmpty);\r\n        }\r\n        const queryString = this.createLogoutUrlQueryString(logoutRequest);\r\n        // Construct logout URI\r\n        return UrlString.appendQueryString(this.authority.endSessionEndpoint, queryString);\r\n    }\r\n    /**\r\n     * Executes POST request to token endpoint\r\n     * @param authority\r\n     * @param request\r\n     */\r\n    async executeTokenRequest(authority, request) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthClientExecuteTokenRequest, request.correlationId);\r\n        const queryParametersString = this.createTokenQueryParameters(request);\r\n        const endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\r\n        const requestBody = await invokeAsync(this.createTokenRequestBody.bind(this), PerformanceEvents.AuthClientCreateTokenRequestBody, this.logger, this.performanceClient, request.correlationId)(request);\r\n        let ccsCredential = undefined;\r\n        if (request.clientInfo) {\r\n            try {\r\n                const clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils.base64Decode);\r\n                ccsCredential = {\r\n                    credential: `${clientInfo.uid}${Separators.CLIENT_INFO_SEPARATOR}${clientInfo.utid}`,\r\n                    type: CcsCredentialType.HOME_ACCOUNT_ID,\r\n                };\r\n            }\r\n            catch (e) {\r\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\r\n            }\r\n        }\r\n        const headers = this.createTokenRequestHeaders(ccsCredential || request.ccsCredential);\r\n        const thumbprint = getRequestThumbprint(this.config.authOptions.clientId, request);\r\n        return invokeAsync(this.executePostToTokenEndpoint.bind(this), PerformanceEvents.AuthorizationCodeClientExecutePostToTokenEndpoint, this.logger, this.performanceClient, request.correlationId)(endpoint, requestBody, headers, thumbprint, request.correlationId, PerformanceEvents.AuthorizationCodeClientExecutePostToTokenEndpoint);\r\n    }\r\n    /**\r\n     * Generates a map for all the params to be sent to the service\r\n     * @param request\r\n     */\r\n    async createTokenRequestBody(request) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthClientCreateTokenRequestBody, request.correlationId);\r\n        const parameters = new Map();\r\n        addClientId(parameters, request.embeddedClientId ||\r\n            request.tokenBodyParameters?.[CLIENT_ID] ||\r\n            this.config.authOptions.clientId);\r\n        /*\r\n         * For hybrid spa flow, there will be a code but no verifier\r\n         * In this scenario, don't include redirect uri as auth code will not be bound to redirect URI\r\n         */\r\n        if (!this.includeRedirectUri) {\r\n            // Just validate\r\n            if (!request.redirectUri) {\r\n                throw createClientConfigurationError(redirectUriEmpty);\r\n            }\r\n        }\r\n        else {\r\n            // Validate and include redirect uri\r\n            addRedirectUri(parameters, request.redirectUri);\r\n        }\r\n        // Add scope array, parameter builder will add default scopes and dedupe\r\n        addScopes(parameters, request.scopes, true, this.oidcDefaultScopes);\r\n        // add code: user set, not validated\r\n        addAuthorizationCode(parameters, request.code);\r\n        // Add library metadata\r\n        addLibraryInfo(parameters, this.config.libraryInfo);\r\n        addApplicationTelemetry(parameters, this.config.telemetry.application);\r\n        addThrottling(parameters);\r\n        if (this.serverTelemetryManager && !isOidcProtocolMode(this.config)) {\r\n            addServerTelemetry(parameters, this.serverTelemetryManager);\r\n        }\r\n        // add code_verifier if passed\r\n        if (request.codeVerifier) {\r\n            addCodeVerifier(parameters, request.codeVerifier);\r\n        }\r\n        if (this.config.clientCredentials.clientSecret) {\r\n            addClientSecret(parameters, this.config.clientCredentials.clientSecret);\r\n        }\r\n        if (this.config.clientCredentials.clientAssertion) {\r\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\r\n            addClientAssertion(parameters, await getClientAssertion(clientAssertion.assertion, this.config.authOptions.clientId, request.resourceRequestUri));\r\n            addClientAssertionType(parameters, clientAssertion.assertionType);\r\n        }\r\n        addGrantType(parameters, GrantType.AUTHORIZATION_CODE_GRANT);\r\n        addClientInfo(parameters);\r\n        if (request.authenticationScheme === AuthenticationScheme.POP) {\r\n            const popTokenGenerator = new PopTokenGenerator(this.cryptoUtils, this.performanceClient);\r\n            let reqCnfData;\r\n            if (!request.popKid) {\r\n                const generatedReqCnfData = await invokeAsync(popTokenGenerator.generateCnf.bind(popTokenGenerator), PerformanceEvents.PopTokenGenerateCnf, this.logger, this.performanceClient, request.correlationId)(request, this.logger);\r\n                reqCnfData = generatedReqCnfData.reqCnfString;\r\n            }\r\n            else {\r\n                reqCnfData = this.cryptoUtils.encodeKid(request.popKid);\r\n            }\r\n            // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\r\n            addPopToken(parameters, reqCnfData);\r\n        }\r\n        else if (request.authenticationScheme === AuthenticationScheme.SSH) {\r\n            if (request.sshJwk) {\r\n                addSshJwk(parameters, request.sshJwk);\r\n            }\r\n            else {\r\n                throw createClientConfigurationError(missingSshJwk);\r\n            }\r\n        }\r\n        if (!StringUtils.isEmptyObj(request.claims) ||\r\n            (this.config.authOptions.clientCapabilities &&\r\n                this.config.authOptions.clientCapabilities.length > 0)) {\r\n            addClaims(parameters, request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n        let ccsCred = undefined;\r\n        if (request.clientInfo) {\r\n            try {\r\n                const clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils.base64Decode);\r\n                ccsCred = {\r\n                    credential: `${clientInfo.uid}${Separators.CLIENT_INFO_SEPARATOR}${clientInfo.utid}`,\r\n                    type: CcsCredentialType.HOME_ACCOUNT_ID,\r\n                };\r\n            }\r\n            catch (e) {\r\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\r\n            }\r\n        }\r\n        else {\r\n            ccsCred = request.ccsCredential;\r\n        }\r\n        // Adds these as parameters in the request instead of headers to prevent CORS preflight request\r\n        if (this.config.systemOptions.preventCorsPreflight && ccsCred) {\r\n            switch (ccsCred.type) {\r\n                case CcsCredentialType.HOME_ACCOUNT_ID:\r\n                    try {\r\n                        const clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\r\n                        addCcsOid(parameters, clientInfo);\r\n                    }\r\n                    catch (e) {\r\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" +\r\n                            e);\r\n                    }\r\n                    break;\r\n                case CcsCredentialType.UPN:\r\n                    addCcsUpn(parameters, ccsCred.credential);\r\n                    break;\r\n            }\r\n        }\r\n        if (request.embeddedClientId) {\r\n            addBrokerParameters(parameters, this.config.authOptions.clientId, this.config.authOptions.redirectUri);\r\n        }\r\n        if (request.tokenBodyParameters) {\r\n            addExtraQueryParameters(parameters, request.tokenBodyParameters);\r\n        }\r\n        // Add hybrid spa parameters if not already provided\r\n        if (request.enableSpaAuthorizationCode &&\r\n            (!request.tokenBodyParameters ||\r\n                !request.tokenBodyParameters[RETURN_SPA_CODE])) {\r\n            addExtraQueryParameters(parameters, {\r\n                [RETURN_SPA_CODE]: \"1\",\r\n            });\r\n        }\r\n        instrumentBrokerParams(parameters, request.correlationId, this.performanceClient);\r\n        return mapToQueryString(parameters);\r\n    }\r\n    /**\r\n     * This API validates the `EndSessionRequest` and creates a URL\r\n     * @param request\r\n     */\r\n    createLogoutUrlQueryString(request) {\r\n        const parameters = new Map();\r\n        if (request.postLogoutRedirectUri) {\r\n            addPostLogoutRedirectUri(parameters, request.postLogoutRedirectUri);\r\n        }\r\n        if (request.correlationId) {\r\n            addCorrelationId(parameters, request.correlationId);\r\n        }\r\n        if (request.idTokenHint) {\r\n            addIdTokenHint(parameters, request.idTokenHint);\r\n        }\r\n        if (request.state) {\r\n            addState(parameters, request.state);\r\n        }\r\n        if (request.logoutHint) {\r\n            addLogoutHint(parameters, request.logoutHint);\r\n        }\r\n        if (request.extraQueryParameters) {\r\n            addExtraQueryParameters(parameters, request.extraQueryParameters);\r\n        }\r\n        if (this.config.authOptions.instanceAware) {\r\n            addInstanceAware(parameters);\r\n        }\r\n        return mapToQueryString(parameters, this.config.authOptions.encodeExtraQueryParams, request.extraQueryParameters);\r\n    }\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst DEFAULT_REFRESH_TOKEN_EXPIRATION_OFFSET_SECONDS = 300; // 5 Minutes\r\n/**\r\n * OAuth2.0 refresh token client\r\n * @internal\r\n */\r\nclass RefreshTokenClient extends BaseClient {\r\n    constructor(configuration, performanceClient) {\r\n        super(configuration, performanceClient);\r\n    }\r\n    async acquireToken(request) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireToken, request.correlationId);\r\n        const reqTimestamp = nowSeconds();\r\n        const response = await invokeAsync(this.executeTokenRequest.bind(this), PerformanceEvents.RefreshTokenClientExecuteTokenRequest, this.logger, this.performanceClient, request.correlationId)(request, this.authority);\r\n        // Retrieve requestId from response headers\r\n        const requestId = response.headers?.[HeaderNames.X_MS_REQUEST_ID];\r\n        const responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\r\n        responseHandler.validateTokenResponse(response.body);\r\n        return invokeAsync(responseHandler.handleServerTokenResponse.bind(responseHandler), PerformanceEvents.HandleServerTokenResponse, this.logger, this.performanceClient, request.correlationId)(response.body, this.authority, reqTimestamp, request, undefined, undefined, true, request.forceCache, requestId);\r\n    }\r\n    /**\r\n     * Gets cached refresh token and attaches to request, then calls acquireToken API\r\n     * @param request\r\n     */\r\n    async acquireTokenByRefreshToken(request) {\r\n        // Cannot renew token if no request object is given.\r\n        if (!request) {\r\n            throw createClientConfigurationError(tokenRequestEmpty);\r\n        }\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken, request.correlationId);\r\n        // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\r\n        if (!request.account) {\r\n            throw createClientAuthError(noAccountInSilentRequest);\r\n        }\r\n        // try checking if FOCI is enabled for the given application\r\n        const isFOCI = this.cacheManager.isAppMetadataFOCI(request.account.environment);\r\n        // if the app is part of the family, retrive a Family refresh token if present and make a refreshTokenRequest\r\n        if (isFOCI) {\r\n            try {\r\n                return await invokeAsync(this.acquireTokenWithCachedRefreshToken.bind(this), PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, this.logger, this.performanceClient, request.correlationId)(request, true);\r\n            }\r\n            catch (e) {\r\n                const noFamilyRTInCache = e instanceof InteractionRequiredAuthError &&\r\n                    e.errorCode ===\r\n                        noTokensFound;\r\n                const clientMismatchErrorWithFamilyRT = e instanceof ServerError &&\r\n                    e.errorCode === Errors.INVALID_GRANT_ERROR &&\r\n                    e.subError === Errors.CLIENT_MISMATCH_ERROR;\r\n                // if family Refresh Token (FRT) cache acquisition fails or if client_mismatch error is seen with FRT, reattempt with application Refresh Token (ART)\r\n                if (noFamilyRTInCache || clientMismatchErrorWithFamilyRT) {\r\n                    return invokeAsync(this.acquireTokenWithCachedRefreshToken.bind(this), PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, this.logger, this.performanceClient, request.correlationId)(request, false);\r\n                    // throw in all other cases\r\n                }\r\n                else {\r\n                    throw e;\r\n                }\r\n            }\r\n        }\r\n        // fall back to application refresh token acquisition\r\n        return invokeAsync(this.acquireTokenWithCachedRefreshToken.bind(this), PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, this.logger, this.performanceClient, request.correlationId)(request, false);\r\n    }\r\n    /**\r\n     * makes a network call to acquire tokens by exchanging RefreshToken available in userCache; throws if refresh token is not cached\r\n     * @param request\r\n     */\r\n    async acquireTokenWithCachedRefreshToken(request, foci) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\r\n        // fetches family RT or application RT based on FOCI value\r\n        const refreshToken = invoke(this.cacheManager.getRefreshToken.bind(this.cacheManager), PerformanceEvents.CacheManagerGetRefreshToken, this.logger, this.performanceClient, request.correlationId)(request.account, foci, request.correlationId, undefined, this.performanceClient);\r\n        if (!refreshToken) {\r\n            throw createInteractionRequiredAuthError(noTokensFound);\r\n        }\r\n        if (refreshToken.expiresOn &&\r\n            isTokenExpired(refreshToken.expiresOn, request.refreshTokenExpirationOffsetSeconds ||\r\n                DEFAULT_REFRESH_TOKEN_EXPIRATION_OFFSET_SECONDS)) {\r\n            this.performanceClient?.addFields({ rtExpiresOnMs: Number(refreshToken.expiresOn) }, request.correlationId);\r\n            throw createInteractionRequiredAuthError(refreshTokenExpired);\r\n        }\r\n        // attach cached RT size to the current measurement\r\n        const refreshTokenRequest = {\r\n            ...request,\r\n            refreshToken: refreshToken.secret,\r\n            authenticationScheme: request.authenticationScheme || AuthenticationScheme.BEARER,\r\n            ccsCredential: {\r\n                credential: request.account.homeAccountId,\r\n                type: CcsCredentialType.HOME_ACCOUNT_ID,\r\n            },\r\n        };\r\n        try {\r\n            return await invokeAsync(this.acquireToken.bind(this), PerformanceEvents.RefreshTokenClientAcquireToken, this.logger, this.performanceClient, request.correlationId)(refreshTokenRequest);\r\n        }\r\n        catch (e) {\r\n            if (e instanceof InteractionRequiredAuthError) {\r\n                this.performanceClient?.addFields({ rtExpiresOnMs: Number(refreshToken.expiresOn) }, request.correlationId);\r\n                if (e.subError === badToken) {\r\n                    // Remove bad refresh token from cache\r\n                    this.logger.verbose(\"acquireTokenWithRefreshToken: bad refresh token, removing from cache\");\r\n                    const badRefreshTokenKey = this.cacheManager.generateCredentialKey(refreshToken);\r\n                    this.cacheManager.removeRefreshToken(badRefreshTokenKey, request.correlationId);\r\n                }\r\n            }\r\n            throw e;\r\n        }\r\n    }\r\n    /**\r\n     * Constructs the network message and makes a NW call to the underlying secure token service\r\n     * @param request\r\n     * @param authority\r\n     */\r\n    async executeTokenRequest(request, authority) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientExecuteTokenRequest, request.correlationId);\r\n        const queryParametersString = this.createTokenQueryParameters(request);\r\n        const endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\r\n        const requestBody = await invokeAsync(this.createTokenRequestBody.bind(this), PerformanceEvents.RefreshTokenClientCreateTokenRequestBody, this.logger, this.performanceClient, request.correlationId)(request);\r\n        const headers = this.createTokenRequestHeaders(request.ccsCredential);\r\n        const thumbprint = getRequestThumbprint(this.config.authOptions.clientId, request);\r\n        return invokeAsync(this.executePostToTokenEndpoint.bind(this), PerformanceEvents.RefreshTokenClientExecutePostToTokenEndpoint, this.logger, this.performanceClient, request.correlationId)(endpoint, requestBody, headers, thumbprint, request.correlationId, PerformanceEvents.RefreshTokenClientExecutePostToTokenEndpoint);\r\n    }\r\n    /**\r\n     * Helper function to create the token request body\r\n     * @param request\r\n     */\r\n    async createTokenRequestBody(request) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientCreateTokenRequestBody, request.correlationId);\r\n        const parameters = new Map();\r\n        addClientId(parameters, request.embeddedClientId ||\r\n            request.tokenBodyParameters?.[CLIENT_ID] ||\r\n            this.config.authOptions.clientId);\r\n        if (request.redirectUri) {\r\n            addRedirectUri(parameters, request.redirectUri);\r\n        }\r\n        addScopes(parameters, request.scopes, true, this.config.authOptions.authority.options.OIDCOptions?.defaultScopes);\r\n        addGrantType(parameters, GrantType.REFRESH_TOKEN_GRANT);\r\n        addClientInfo(parameters);\r\n        addLibraryInfo(parameters, this.config.libraryInfo);\r\n        addApplicationTelemetry(parameters, this.config.telemetry.application);\r\n        addThrottling(parameters);\r\n        if (this.serverTelemetryManager && !isOidcProtocolMode(this.config)) {\r\n            addServerTelemetry(parameters, this.serverTelemetryManager);\r\n        }\r\n        addRefreshToken(parameters, request.refreshToken);\r\n        if (this.config.clientCredentials.clientSecret) {\r\n            addClientSecret(parameters, this.config.clientCredentials.clientSecret);\r\n        }\r\n        if (this.config.clientCredentials.clientAssertion) {\r\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\r\n            addClientAssertion(parameters, await getClientAssertion(clientAssertion.assertion, this.config.authOptions.clientId, request.resourceRequestUri));\r\n            addClientAssertionType(parameters, clientAssertion.assertionType);\r\n        }\r\n        if (request.authenticationScheme === AuthenticationScheme.POP) {\r\n            const popTokenGenerator = new PopTokenGenerator(this.cryptoUtils, this.performanceClient);\r\n            let reqCnfData;\r\n            if (!request.popKid) {\r\n                const generatedReqCnfData = await invokeAsync(popTokenGenerator.generateCnf.bind(popTokenGenerator), PerformanceEvents.PopTokenGenerateCnf, this.logger, this.performanceClient, request.correlationId)(request, this.logger);\r\n                reqCnfData = generatedReqCnfData.reqCnfString;\r\n            }\r\n            else {\r\n                reqCnfData = this.cryptoUtils.encodeKid(request.popKid);\r\n            }\r\n            // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\r\n            addPopToken(parameters, reqCnfData);\r\n        }\r\n        else if (request.authenticationScheme === AuthenticationScheme.SSH) {\r\n            if (request.sshJwk) {\r\n                addSshJwk(parameters, request.sshJwk);\r\n            }\r\n            else {\r\n                throw createClientConfigurationError(missingSshJwk);\r\n            }\r\n        }\r\n        if (!StringUtils.isEmptyObj(request.claims) ||\r\n            (this.config.authOptions.clientCapabilities &&\r\n                this.config.authOptions.clientCapabilities.length > 0)) {\r\n            addClaims(parameters, request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n        if (this.config.systemOptions.preventCorsPreflight &&\r\n            request.ccsCredential) {\r\n            switch (request.ccsCredential.type) {\r\n                case CcsCredentialType.HOME_ACCOUNT_ID:\r\n                    try {\r\n                        const clientInfo = buildClientInfoFromHomeAccountId(request.ccsCredential.credential);\r\n                        addCcsOid(parameters, clientInfo);\r\n                    }\r\n                    catch (e) {\r\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" +\r\n                            e);\r\n                    }\r\n                    break;\r\n                case CcsCredentialType.UPN:\r\n                    addCcsUpn(parameters, request.ccsCredential.credential);\r\n                    break;\r\n            }\r\n        }\r\n        if (request.embeddedClientId) {\r\n            addBrokerParameters(parameters, this.config.authOptions.clientId, this.config.authOptions.redirectUri);\r\n        }\r\n        if (request.tokenBodyParameters) {\r\n            addExtraQueryParameters(parameters, request.tokenBodyParameters);\r\n        }\r\n        instrumentBrokerParams(parameters, request.correlationId, this.performanceClient);\r\n        return mapToQueryString(parameters);\r\n    }\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/** @internal */\r\nclass SilentFlowClient extends BaseClient {\r\n    constructor(configuration, performanceClient) {\r\n        super(configuration, performanceClient);\r\n    }\r\n    /**\r\n     * Retrieves token from cache or throws an error if it must be refreshed.\r\n     * @param request\r\n     */\r\n    async acquireCachedToken(request) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.SilentFlowClientAcquireCachedToken, request.correlationId);\r\n        let lastCacheOutcome = CacheOutcome.NOT_APPLICABLE;\r\n        if (request.forceRefresh ||\r\n            (!this.config.cacheOptions.claimsBasedCachingEnabled &&\r\n                !StringUtils.isEmptyObj(request.claims))) {\r\n            // Must refresh due to present force_refresh flag.\r\n            this.setCacheOutcome(CacheOutcome.FORCE_REFRESH_OR_CLAIMS, request.correlationId);\r\n            throw createClientAuthError(tokenRefreshRequired);\r\n        }\r\n        // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\r\n        if (!request.account) {\r\n            throw createClientAuthError(noAccountInSilentRequest);\r\n        }\r\n        const requestTenantId = request.account.tenantId ||\r\n            getTenantFromAuthorityString(request.authority);\r\n        const tokenKeys = this.cacheManager.getTokenKeys();\r\n        const cachedAccessToken = this.cacheManager.getAccessToken(request.account, request, tokenKeys, requestTenantId);\r\n        if (!cachedAccessToken) {\r\n            // must refresh due to non-existent access_token\r\n            this.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN, request.correlationId);\r\n            throw createClientAuthError(tokenRefreshRequired);\r\n        }\r\n        else if (wasClockTurnedBack(cachedAccessToken.cachedAt) ||\r\n            isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\r\n            // must refresh due to the expires_in value\r\n            this.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED, request.correlationId);\r\n            throw createClientAuthError(tokenRefreshRequired);\r\n        }\r\n        else if (cachedAccessToken.refreshOn &&\r\n            isTokenExpired(cachedAccessToken.refreshOn, 0)) {\r\n            // must refresh (in the background) due to the refresh_in value\r\n            lastCacheOutcome = CacheOutcome.PROACTIVELY_REFRESHED;\r\n            // don't throw ClientAuthError.createRefreshRequiredError(), return cached token instead\r\n        }\r\n        const environment = request.authority || this.authority.getPreferredCache();\r\n        const cacheRecord = {\r\n            account: this.cacheManager.getAccount(this.cacheManager.generateAccountKey(request.account), request.correlationId),\r\n            accessToken: cachedAccessToken,\r\n            idToken: this.cacheManager.getIdToken(request.account, request.correlationId, tokenKeys, requestTenantId, this.performanceClient),\r\n            refreshToken: null,\r\n            appMetadata: this.cacheManager.readAppMetadataFromCache(environment),\r\n        };\r\n        this.setCacheOutcome(lastCacheOutcome, request.correlationId);\r\n        if (this.config.serverTelemetryManager) {\r\n            this.config.serverTelemetryManager.incrementCacheHits();\r\n        }\r\n        return [\r\n            await invokeAsync(this.generateResultFromCacheRecord.bind(this), PerformanceEvents.SilentFlowClientGenerateResultFromCacheRecord, this.logger, this.performanceClient, request.correlationId)(cacheRecord, request),\r\n            lastCacheOutcome,\r\n        ];\r\n    }\r\n    setCacheOutcome(cacheOutcome, correlationId) {\r\n        this.serverTelemetryManager?.setCacheOutcome(cacheOutcome);\r\n        this.performanceClient?.addFields({\r\n            cacheOutcome: cacheOutcome,\r\n        }, correlationId);\r\n        if (cacheOutcome !== CacheOutcome.NOT_APPLICABLE) {\r\n            this.logger.info(`Token refresh is required due to cache outcome: ${cacheOutcome}`);\r\n        }\r\n    }\r\n    /**\r\n     * Helper function to build response object from the CacheRecord\r\n     * @param cacheRecord\r\n     */\r\n    async generateResultFromCacheRecord(cacheRecord, request) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.SilentFlowClientGenerateResultFromCacheRecord, request.correlationId);\r\n        let idTokenClaims;\r\n        if (cacheRecord.idToken) {\r\n            idTokenClaims = extractTokenClaims(cacheRecord.idToken.secret, this.config.cryptoInterface.base64Decode);\r\n        }\r\n        // token max_age check\r\n        if (request.maxAge || request.maxAge === 0) {\r\n            const authTime = idTokenClaims?.auth_time;\r\n            if (!authTime) {\r\n                throw createClientAuthError(authTimeNotFound);\r\n            }\r\n            checkMaxAge(authTime, request.maxAge);\r\n        }\r\n        return ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, cacheRecord, true, request, idTokenClaims);\r\n    }\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst StubbedNetworkModule = {\r\n    sendGetRequestAsync: () => {\r\n        return Promise.reject(createClientAuthError(methodNotImplemented));\r\n    },\r\n    sendPostRequestAsync: () => {\r\n        return Promise.reject(createClientAuthError(methodNotImplemented));\r\n    },\r\n};\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Returns map of parameters that are applicable to all calls to /authorize whether using PKCE or EAR\r\n * @param config\r\n * @param request\r\n * @param logger\r\n * @param performanceClient\r\n * @returns\r\n */\r\nfunction getStandardAuthorizeRequestParameters(authOptions, request, logger, performanceClient) {\r\n    // generate the correlationId if not set by the user and add\r\n    const correlationId = request.correlationId;\r\n    const parameters = new Map();\r\n    addClientId(parameters, request.embeddedClientId ||\r\n        request.extraQueryParameters?.[CLIENT_ID] ||\r\n        authOptions.clientId);\r\n    const requestScopes = [\r\n        ...(request.scopes || []),\r\n        ...(request.extraScopesToConsent || []),\r\n    ];\r\n    addScopes(parameters, requestScopes, true, authOptions.authority.options.OIDCOptions?.defaultScopes);\r\n    addRedirectUri(parameters, request.redirectUri);\r\n    addCorrelationId(parameters, correlationId);\r\n    // add response_mode. If not passed in it defaults to query.\r\n    addResponseMode(parameters, request.responseMode);\r\n    // add client_info=1\r\n    addClientInfo(parameters);\r\n    if (request.prompt) {\r\n        addPrompt(parameters, request.prompt);\r\n        performanceClient?.addFields({ prompt: request.prompt }, correlationId);\r\n    }\r\n    if (request.domainHint) {\r\n        addDomainHint(parameters, request.domainHint);\r\n        performanceClient?.addFields({ domainHintFromRequest: true }, correlationId);\r\n    }\r\n    // Add sid or loginHint with preference for login_hint claim (in request) -> sid -> loginHint (upn/email) -> username of AccountInfo object\r\n    if (request.prompt !== PromptValue.SELECT_ACCOUNT) {\r\n        // AAD will throw if prompt=select_account is passed with an account hint\r\n        if (request.sid && request.prompt === PromptValue.NONE) {\r\n            // SessionID is only used in silent calls\r\n            logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from request\");\r\n            addSid(parameters, request.sid);\r\n            performanceClient?.addFields({ sidFromRequest: true }, correlationId);\r\n        }\r\n        else if (request.account) {\r\n            const accountSid = extractAccountSid(request.account);\r\n            let accountLoginHintClaim = extractLoginHint(request.account);\r\n            if (accountLoginHintClaim && request.domainHint) {\r\n                logger.warning(`AuthorizationCodeClient.createAuthCodeUrlQueryString: \"domainHint\" param is set, skipping opaque \"login_hint\" claim. Please consider not passing domainHint`);\r\n                accountLoginHintClaim = null;\r\n            }\r\n            // If login_hint claim is present, use it over sid/username\r\n            if (accountLoginHintClaim) {\r\n                logger.verbose(\"createAuthCodeUrlQueryString: login_hint claim present on account\");\r\n                addLoginHint(parameters, accountLoginHintClaim);\r\n                performanceClient?.addFields({ loginHintFromClaim: true }, correlationId);\r\n                try {\r\n                    const clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\r\n                    addCcsOid(parameters, clientInfo);\r\n                }\r\n                catch (e) {\r\n                    logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\r\n                }\r\n            }\r\n            else if (accountSid && request.prompt === PromptValue.NONE) {\r\n                /*\r\n                 * If account and loginHint are provided, we will check account first for sid before adding loginHint\r\n                 * SessionId is only used in silent calls\r\n                 */\r\n                logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from account\");\r\n                addSid(parameters, accountSid);\r\n                performanceClient?.addFields({ sidFromClaim: true }, correlationId);\r\n                try {\r\n                    const clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\r\n                    addCcsOid(parameters, clientInfo);\r\n                }\r\n                catch (e) {\r\n                    logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\r\n                }\r\n            }\r\n            else if (request.loginHint) {\r\n                logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from request\");\r\n                addLoginHint(parameters, request.loginHint);\r\n                addCcsUpn(parameters, request.loginHint);\r\n                performanceClient?.addFields({ loginHintFromRequest: true }, correlationId);\r\n            }\r\n            else if (request.account.username) {\r\n                // Fallback to account username if provided\r\n                logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from account\");\r\n                addLoginHint(parameters, request.account.username);\r\n                performanceClient?.addFields({ loginHintFromUpn: true }, correlationId);\r\n                try {\r\n                    const clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\r\n                    addCcsOid(parameters, clientInfo);\r\n                }\r\n                catch (e) {\r\n                    logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\r\n                }\r\n            }\r\n        }\r\n        else if (request.loginHint) {\r\n            logger.verbose(\"createAuthCodeUrlQueryString: No account, adding login_hint from request\");\r\n            addLoginHint(parameters, request.loginHint);\r\n            addCcsUpn(parameters, request.loginHint);\r\n            performanceClient?.addFields({ loginHintFromRequest: true }, correlationId);\r\n        }\r\n    }\r\n    else {\r\n        logger.verbose(\"createAuthCodeUrlQueryString: Prompt is select_account, ignoring account hints\");\r\n    }\r\n    if (request.nonce) {\r\n        addNonce(parameters, request.nonce);\r\n    }\r\n    if (request.state) {\r\n        addState(parameters, request.state);\r\n    }\r\n    if (request.claims ||\r\n        (authOptions.clientCapabilities &&\r\n            authOptions.clientCapabilities.length > 0)) {\r\n        addClaims(parameters, request.claims, authOptions.clientCapabilities);\r\n    }\r\n    if (request.embeddedClientId) {\r\n        addBrokerParameters(parameters, authOptions.clientId, authOptions.redirectUri);\r\n    }\r\n    // If extraQueryParameters includes instance_aware its value will be added when extraQueryParameters are added\r\n    if (authOptions.instanceAware &&\r\n        (!request.extraQueryParameters ||\r\n            !Object.keys(request.extraQueryParameters).includes(INSTANCE_AWARE))) {\r\n        addInstanceAware(parameters);\r\n    }\r\n    return parameters;\r\n}\r\n/**\r\n * Returns authorize endpoint with given request parameters in the query string\r\n * @param authority\r\n * @param requestParameters\r\n * @returns\r\n */\r\nfunction getAuthorizeUrl(authority, requestParameters, encodeParams, extraQueryParameters) {\r\n    const queryString = mapToQueryString(requestParameters, encodeParams, extraQueryParameters);\r\n    return UrlString.appendQueryString(authority.authorizationEndpoint, queryString);\r\n}\r\n/**\r\n * Handles the hash fragment response from public client code request. Returns a code response used by\r\n * the client to exchange for a token in acquireToken.\r\n * @param serverParams\r\n * @param cachedState\r\n */\r\nfunction getAuthorizationCodePayload(serverParams, cachedState) {\r\n    // Get code response\r\n    validateAuthorizationResponse(serverParams, cachedState);\r\n    // throw when there is no auth code in the response\r\n    if (!serverParams.code) {\r\n        throw createClientAuthError(authorizationCodeMissingFromServerResponse);\r\n    }\r\n    return serverParams;\r\n}\r\n/**\r\n * Function which validates server authorization code response.\r\n * @param serverResponseHash\r\n * @param requestState\r\n */\r\nfunction validateAuthorizationResponse(serverResponse, requestState) {\r\n    if (!serverResponse.state || !requestState) {\r\n        throw serverResponse.state\r\n            ? createClientAuthError(stateNotFound, \"Cached State\")\r\n            : createClientAuthError(stateNotFound, \"Server State\");\r\n    }\r\n    let decodedServerResponseState;\r\n    let decodedRequestState;\r\n    try {\r\n        decodedServerResponseState = decodeURIComponent(serverResponse.state);\r\n    }\r\n    catch (e) {\r\n        throw createClientAuthError(invalidState, serverResponse.state);\r\n    }\r\n    try {\r\n        decodedRequestState = decodeURIComponent(requestState);\r\n    }\r\n    catch (e) {\r\n        throw createClientAuthError(invalidState, serverResponse.state);\r\n    }\r\n    if (decodedServerResponseState !== decodedRequestState) {\r\n        throw createClientAuthError(stateMismatch);\r\n    }\r\n    // Check for error\r\n    if (serverResponse.error ||\r\n        serverResponse.error_description ||\r\n        serverResponse.suberror) {\r\n        const serverErrorNo = parseServerErrorNo(serverResponse);\r\n        if (isInteractionRequiredError(serverResponse.error, serverResponse.error_description, serverResponse.suberror)) {\r\n            throw new InteractionRequiredAuthError(serverResponse.error || \"\", serverResponse.error_description, serverResponse.suberror, serverResponse.timestamp || \"\", serverResponse.trace_id || \"\", serverResponse.correlation_id || \"\", serverResponse.claims || \"\", serverErrorNo);\r\n        }\r\n        throw new ServerError(serverResponse.error || \"\", serverResponse.error_description, serverResponse.suberror, serverErrorNo);\r\n    }\r\n}\r\n/**\r\n * Get server error No from the error_uri\r\n * @param serverResponse\r\n * @returns\r\n */\r\nfunction parseServerErrorNo(serverResponse) {\r\n    const errorCodePrefix = \"code=\";\r\n    const errorCodePrefixIndex = serverResponse.error_uri?.lastIndexOf(errorCodePrefix);\r\n    return errorCodePrefixIndex && errorCodePrefixIndex >= 0\r\n        ? serverResponse.error_uri?.substring(errorCodePrefixIndex + errorCodePrefix.length)\r\n        : undefined;\r\n}\r\n/**\r\n * Helper to get sid from account. Returns null if idTokenClaims are not present or sid is not present.\r\n * @param account\r\n */\r\nfunction extractAccountSid(account) {\r\n    return account.idTokenClaims?.sid || null;\r\n}\r\nfunction extractLoginHint(account) {\r\n    return account.loginHint || account.idTokenClaims?.login_hint || null;\r\n}\n\nvar Authorize = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    getAuthorizationCodePayload: getAuthorizationCodePayload,\n    getAuthorizeUrl: getAuthorizeUrl,\n    getStandardAuthorizeRequestParameters: getStandardAuthorizeRequestParameters,\n    validateAuthorizationResponse: validateAuthorizationResponse\n});\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * This is a helper class that parses supported HTTP response authentication headers to extract and return\r\n * header challenge values that can be used outside the basic authorization flows.\r\n */\r\nclass AuthenticationHeaderParser {\r\n    constructor(headers) {\r\n        this.headers = headers;\r\n    }\r\n    /**\r\n     * This method parses the SHR nonce value out of either the Authentication-Info or WWW-Authenticate authentication headers.\r\n     * @returns\r\n     */\r\n    getShrNonce() {\r\n        // Attempt to parse nonce from Authentiacation-Info\r\n        const authenticationInfo = this.headers[HeaderNames.AuthenticationInfo];\r\n        if (authenticationInfo) {\r\n            const authenticationInfoChallenges = this.parseChallenges(authenticationInfo);\r\n            if (authenticationInfoChallenges.nextnonce) {\r\n                return authenticationInfoChallenges.nextnonce;\r\n            }\r\n            throw createClientConfigurationError(invalidAuthenticationHeader);\r\n        }\r\n        // Attempt to parse nonce from WWW-Authenticate\r\n        const wwwAuthenticate = this.headers[HeaderNames.WWWAuthenticate];\r\n        if (wwwAuthenticate) {\r\n            const wwwAuthenticateChallenges = this.parseChallenges(wwwAuthenticate);\r\n            if (wwwAuthenticateChallenges.nonce) {\r\n                return wwwAuthenticateChallenges.nonce;\r\n            }\r\n            throw createClientConfigurationError(invalidAuthenticationHeader);\r\n        }\r\n        // If neither header is present, throw missing headers error\r\n        throw createClientConfigurationError(missingNonceAuthenticationHeader);\r\n    }\r\n    /**\r\n     * Parses an HTTP header's challenge set into a key/value map.\r\n     * @param header\r\n     * @returns\r\n     */\r\n    parseChallenges(header) {\r\n        const schemeSeparator = header.indexOf(\" \");\r\n        const challenges = header.substr(schemeSeparator + 1).split(\",\");\r\n        const challengeMap = {};\r\n        challenges.forEach((challenge) => {\r\n            const [key, value] = challenge.split(\"=\");\r\n            // Remove escaped quotation marks (', \") from challenge string to keep only the challenge value\r\n            challengeMap[key] = unescape(value.replace(/['\"]+/g, Constants.EMPTY_STRING));\r\n        });\r\n        return challengeMap;\r\n    }\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst skuGroupSeparator = \",\";\r\nconst skuValueSeparator = \"|\";\r\nfunction makeExtraSkuString(params) {\r\n    const { skus, libraryName, libraryVersion, extensionName, extensionVersion, } = params;\r\n    const skuMap = new Map([\r\n        [0, [libraryName, libraryVersion]],\r\n        [2, [extensionName, extensionVersion]],\r\n    ]);\r\n    let skuArr = [];\r\n    if (skus?.length) {\r\n        skuArr = skus.split(skuGroupSeparator);\r\n        // Ignore invalid input sku param\r\n        if (skuArr.length < 4) {\r\n            return skus;\r\n        }\r\n    }\r\n    else {\r\n        skuArr = Array.from({ length: 4 }, () => skuValueSeparator);\r\n    }\r\n    skuMap.forEach((value, key) => {\r\n        if (value.length === 2 && value[0]?.length && value[1]?.length) {\r\n            setSku({\r\n                skuArr,\r\n                index: key,\r\n                skuName: value[0],\r\n                skuVersion: value[1],\r\n            });\r\n        }\r\n    });\r\n    return skuArr.join(skuGroupSeparator);\r\n}\r\nfunction setSku(params) {\r\n    const { skuArr, index, skuName, skuVersion } = params;\r\n    if (index >= skuArr.length) {\r\n        return;\r\n    }\r\n    skuArr[index] = [skuName, skuVersion].join(skuValueSeparator);\r\n}\r\n/** @internal */\r\nclass ServerTelemetryManager {\r\n    constructor(telemetryRequest, cacheManager) {\r\n        this.cacheOutcome = CacheOutcome.NOT_APPLICABLE;\r\n        this.cacheManager = cacheManager;\r\n        this.apiId = telemetryRequest.apiId;\r\n        this.correlationId = telemetryRequest.correlationId;\r\n        this.wrapperSKU = telemetryRequest.wrapperSKU || Constants.EMPTY_STRING;\r\n        this.wrapperVer = telemetryRequest.wrapperVer || Constants.EMPTY_STRING;\r\n        this.telemetryCacheKey =\r\n            SERVER_TELEM_CONSTANTS.CACHE_KEY +\r\n                Separators.CACHE_KEY_SEPARATOR +\r\n                telemetryRequest.clientId;\r\n    }\r\n    /**\r\n     * API to add MSER Telemetry to request\r\n     */\r\n    generateCurrentRequestHeaderValue() {\r\n        const request = `${this.apiId}${SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR}${this.cacheOutcome}`;\r\n        const platformFieldsArr = [this.wrapperSKU, this.wrapperVer];\r\n        const nativeBrokerErrorCode = this.getNativeBrokerErrorCode();\r\n        if (nativeBrokerErrorCode?.length) {\r\n            platformFieldsArr.push(`broker_error=${nativeBrokerErrorCode}`);\r\n        }\r\n        const platformFields = platformFieldsArr.join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\r\n        const regionDiscoveryFields = this.getRegionDiscoveryFields();\r\n        const requestWithRegionDiscoveryFields = [\r\n            request,\r\n            regionDiscoveryFields,\r\n        ].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\r\n        return [\r\n            SERVER_TELEM_CONSTANTS.SCHEMA_VERSION,\r\n            requestWithRegionDiscoveryFields,\r\n            platformFields,\r\n        ].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\r\n    }\r\n    /**\r\n     * API to add MSER Telemetry for the last failed request\r\n     */\r\n    generateLastRequestHeaderValue() {\r\n        const lastRequests = this.getLastRequests();\r\n        const maxErrors = ServerTelemetryManager.maxErrorsToSend(lastRequests);\r\n        const failedRequests = lastRequests.failedRequests\r\n            .slice(0, 2 * maxErrors)\r\n            .join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\r\n        const errors = lastRequests.errors\r\n            .slice(0, maxErrors)\r\n            .join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\r\n        const errorCount = lastRequests.errors.length;\r\n        // Indicate whether this header contains all data or partial data\r\n        const overflow = maxErrors < errorCount\r\n            ? SERVER_TELEM_CONSTANTS.OVERFLOW_TRUE\r\n            : SERVER_TELEM_CONSTANTS.OVERFLOW_FALSE;\r\n        const platformFields = [errorCount, overflow].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\r\n        return [\r\n            SERVER_TELEM_CONSTANTS.SCHEMA_VERSION,\r\n            lastRequests.cacheHits,\r\n            failedRequests,\r\n            errors,\r\n            platformFields,\r\n        ].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\r\n    }\r\n    /**\r\n     * API to cache token failures for MSER data capture\r\n     * @param error\r\n     */\r\n    cacheFailedRequest(error) {\r\n        const lastRequests = this.getLastRequests();\r\n        if (lastRequests.errors.length >=\r\n            SERVER_TELEM_CONSTANTS.MAX_CACHED_ERRORS) {\r\n            // Remove a cached error to make room, first in first out\r\n            lastRequests.failedRequests.shift(); // apiId\r\n            lastRequests.failedRequests.shift(); // correlationId\r\n            lastRequests.errors.shift();\r\n        }\r\n        lastRequests.failedRequests.push(this.apiId, this.correlationId);\r\n        if (error instanceof Error && !!error && error.toString()) {\r\n            if (error instanceof AuthError) {\r\n                if (error.subError) {\r\n                    lastRequests.errors.push(error.subError);\r\n                }\r\n                else if (error.errorCode) {\r\n                    lastRequests.errors.push(error.errorCode);\r\n                }\r\n                else {\r\n                    lastRequests.errors.push(error.toString());\r\n                }\r\n            }\r\n            else {\r\n                lastRequests.errors.push(error.toString());\r\n            }\r\n        }\r\n        else {\r\n            lastRequests.errors.push(SERVER_TELEM_CONSTANTS.UNKNOWN_ERROR);\r\n        }\r\n        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests, this.correlationId);\r\n        return;\r\n    }\r\n    /**\r\n     * Update server telemetry cache entry by incrementing cache hit counter\r\n     */\r\n    incrementCacheHits() {\r\n        const lastRequests = this.getLastRequests();\r\n        lastRequests.cacheHits += 1;\r\n        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests, this.correlationId);\r\n        return lastRequests.cacheHits;\r\n    }\r\n    /**\r\n     * Get the server telemetry entity from cache or initialize a new one\r\n     */\r\n    getLastRequests() {\r\n        const initialValue = {\r\n            failedRequests: [],\r\n            errors: [],\r\n            cacheHits: 0,\r\n        };\r\n        const lastRequests = this.cacheManager.getServerTelemetry(this.telemetryCacheKey);\r\n        return lastRequests || initialValue;\r\n    }\r\n    /**\r\n     * Remove server telemetry cache entry\r\n     */\r\n    clearTelemetryCache() {\r\n        const lastRequests = this.getLastRequests();\r\n        const numErrorsFlushed = ServerTelemetryManager.maxErrorsToSend(lastRequests);\r\n        const errorCount = lastRequests.errors.length;\r\n        if (numErrorsFlushed === errorCount) {\r\n            // All errors were sent on last request, clear Telemetry cache\r\n            this.cacheManager.removeItem(this.telemetryCacheKey, this.correlationId);\r\n        }\r\n        else {\r\n            // Partial data was flushed to server, construct a new telemetry cache item with errors that were not flushed\r\n            const serverTelemEntity = {\r\n                failedRequests: lastRequests.failedRequests.slice(numErrorsFlushed * 2),\r\n                errors: lastRequests.errors.slice(numErrorsFlushed),\r\n                cacheHits: 0,\r\n            };\r\n            this.cacheManager.setServerTelemetry(this.telemetryCacheKey, serverTelemEntity, this.correlationId);\r\n        }\r\n    }\r\n    /**\r\n     * Returns the maximum number of errors that can be flushed to the server in the next network request\r\n     * @param serverTelemetryEntity\r\n     */\r\n    static maxErrorsToSend(serverTelemetryEntity) {\r\n        let i;\r\n        let maxErrors = 0;\r\n        let dataSize = 0;\r\n        const errorCount = serverTelemetryEntity.errors.length;\r\n        for (i = 0; i < errorCount; i++) {\r\n            // failedRequests parameter contains pairs of apiId and correlationId, multiply index by 2 to preserve pairs\r\n            const apiId = serverTelemetryEntity.failedRequests[2 * i] ||\r\n                Constants.EMPTY_STRING;\r\n            const correlationId = serverTelemetryEntity.failedRequests[2 * i + 1] ||\r\n                Constants.EMPTY_STRING;\r\n            const errorCode = serverTelemetryEntity.errors[i] || Constants.EMPTY_STRING;\r\n            // Count number of characters that would be added to header, each character is 1 byte. Add 3 at the end to account for separators\r\n            dataSize +=\r\n                apiId.toString().length +\r\n                    correlationId.toString().length +\r\n                    errorCode.length +\r\n                    3;\r\n            if (dataSize < SERVER_TELEM_CONSTANTS.MAX_LAST_HEADER_BYTES) {\r\n                // Adding this entry to the header would still keep header size below the limit\r\n                maxErrors += 1;\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        return maxErrors;\r\n    }\r\n    /**\r\n     * Get the region discovery fields\r\n     *\r\n     * @returns string\r\n     */\r\n    getRegionDiscoveryFields() {\r\n        const regionDiscoveryFields = [];\r\n        regionDiscoveryFields.push(this.regionUsed || Constants.EMPTY_STRING);\r\n        regionDiscoveryFields.push(this.regionSource || Constants.EMPTY_STRING);\r\n        regionDiscoveryFields.push(this.regionOutcome || Constants.EMPTY_STRING);\r\n        return regionDiscoveryFields.join(\",\");\r\n    }\r\n    /**\r\n     * Update the region discovery metadata\r\n     *\r\n     * @param regionDiscoveryMetadata\r\n     * @returns void\r\n     */\r\n    updateRegionDiscoveryMetadata(regionDiscoveryMetadata) {\r\n        this.regionUsed = regionDiscoveryMetadata.region_used;\r\n        this.regionSource = regionDiscoveryMetadata.region_source;\r\n        this.regionOutcome = regionDiscoveryMetadata.region_outcome;\r\n    }\r\n    /**\r\n     * Set cache outcome\r\n     */\r\n    setCacheOutcome(cacheOutcome) {\r\n        this.cacheOutcome = cacheOutcome;\r\n    }\r\n    setNativeBrokerErrorCode(errorCode) {\r\n        const lastRequests = this.getLastRequests();\r\n        lastRequests.nativeBrokerErrorCode = errorCode;\r\n        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests, this.correlationId);\r\n    }\r\n    getNativeBrokerErrorCode() {\r\n        return this.getLastRequests().nativeBrokerErrorCode;\r\n    }\r\n    clearNativeBrokerErrorCode() {\r\n        const lastRequests = this.getLastRequests();\r\n        delete lastRequests.nativeBrokerErrorCode;\r\n        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests, this.correlationId);\r\n    }\r\n    static makeExtraSkuString(params) {\r\n        return makeExtraSkuString(params);\r\n    }\r\n}\n\nexports.AADAuthorityConstants = AADAuthorityConstants;\nexports.AADServerParamKeys = AADServerParamKeys;\nexports.AccountEntity = AccountEntity;\nexports.AuthError = AuthError;\nexports.AuthErrorCodes = AuthErrorCodes;\nexports.AuthErrorMessage = AuthErrorMessage;\nexports.AuthToken = AuthToken;\nexports.AuthenticationHeaderParser = AuthenticationHeaderParser;\nexports.AuthenticationScheme = AuthenticationScheme;\nexports.Authority = Authority;\nexports.AuthorityFactory = AuthorityFactory;\nexports.AuthorityType = AuthorityType;\nexports.AuthorizationCodeClient = AuthorizationCodeClient;\nexports.Authorize = Authorize;\nexports.AzureCloudInstance = AzureCloudInstance;\nexports.BaseClient = BaseClient;\nexports.CacheAccountType = CacheAccountType;\nexports.CacheError = CacheError;\nexports.CacheErrorCodes = CacheErrorCodes;\nexports.CacheHelpers = CacheHelpers;\nexports.CacheManager = CacheManager;\nexports.CacheOutcome = CacheOutcome;\nexports.CacheType = CacheType;\nexports.CcsCredentialType = CcsCredentialType;\nexports.ClaimsRequestKeys = ClaimsRequestKeys;\nexports.ClientAssertionUtils = ClientAssertionUtils;\nexports.ClientAuthError = ClientAuthError;\nexports.ClientAuthErrorCodes = ClientAuthErrorCodes;\nexports.ClientAuthErrorMessage = ClientAuthErrorMessage;\nexports.ClientConfigurationError = ClientConfigurationError;\nexports.ClientConfigurationErrorCodes = ClientConfigurationErrorCodes;\nexports.ClientConfigurationErrorMessage = ClientConfigurationErrorMessage;\nexports.CodeChallengeMethodValues = CodeChallengeMethodValues;\nexports.Constants = Constants;\nexports.CredentialType = CredentialType;\nexports.DEFAULT_CRYPTO_IMPLEMENTATION = DEFAULT_CRYPTO_IMPLEMENTATION;\nexports.DEFAULT_SYSTEM_OPTIONS = DEFAULT_SYSTEM_OPTIONS;\nexports.DEFAULT_TOKEN_RENEWAL_OFFSET_SEC = DEFAULT_TOKEN_RENEWAL_OFFSET_SEC;\nexports.DefaultStorageClass = DefaultStorageClass;\nexports.EncodingTypes = EncodingTypes;\nexports.Errors = Errors;\nexports.GrantType = GrantType;\nexports.HeaderNames = HeaderNames;\nexports.HttpMethod = HttpMethod;\nexports.HttpStatus = HttpStatus;\nexports.IntFields = IntFields;\nexports.InteractionRequiredAuthError = InteractionRequiredAuthError;\nexports.InteractionRequiredAuthErrorCodes = InteractionRequiredAuthErrorCodes;\nexports.InteractionRequiredAuthErrorMessage = InteractionRequiredAuthErrorMessage;\nexports.JsonWebTokenTypes = JsonWebTokenTypes;\nexports.Logger = Logger;\nexports.NetworkError = NetworkError;\nexports.OAuthResponseType = OAuthResponseType;\nexports.OIDC_DEFAULT_SCOPES = OIDC_DEFAULT_SCOPES;\nexports.ONE_DAY_IN_MS = ONE_DAY_IN_MS;\nexports.PasswordGrantConstants = PasswordGrantConstants;\nexports.PerformanceEventAbbreviations = PerformanceEventAbbreviations;\nexports.PerformanceEventStatus = PerformanceEventStatus;\nexports.PerformanceEvents = PerformanceEvents;\nexports.PersistentCacheKeys = PersistentCacheKeys;\nexports.PopTokenGenerator = PopTokenGenerator;\nexports.PromptValue = PromptValue;\nexports.ProtocolMode = ProtocolMode;\nexports.ProtocolUtils = ProtocolUtils;\nexports.RefreshTokenClient = RefreshTokenClient;\nexports.RequestParameterBuilder = RequestParameterBuilder;\nexports.ResponseHandler = ResponseHandler;\nexports.ResponseMode = ResponseMode;\nexports.ScopeSet = ScopeSet;\nexports.ServerError = ServerError;\nexports.ServerResponseType = ServerResponseType;\nexports.ServerTelemetryManager = ServerTelemetryManager;\nexports.SilentFlowClient = SilentFlowClient;\nexports.StringUtils = StringUtils;\nexports.StubPerformanceClient = StubPerformanceClient;\nexports.StubPerformanceMeasurement = StubPerformanceMeasurement;\nexports.StubbedNetworkModule = StubbedNetworkModule;\nexports.THE_FAMILY_ID = THE_FAMILY_ID;\nexports.ThrottlingConstants = ThrottlingConstants;\nexports.ThrottlingUtils = ThrottlingUtils;\nexports.TimeUtils = TimeUtils;\nexports.TokenCacheContext = TokenCacheContext;\nexports.UrlString = UrlString;\nexports.UrlUtils = UrlUtils;\nexports.buildAccountToCache = buildAccountToCache;\nexports.buildClientInfo = buildClientInfo;\nexports.buildClientInfoFromHomeAccountId = buildClientInfoFromHomeAccountId;\nexports.buildStaticAuthorityOptions = buildStaticAuthorityOptions;\nexports.buildTenantProfile = buildTenantProfile;\nexports.createAuthError = createAuthError;\nexports.createCacheError = createCacheError;\nexports.createClientAuthError = createClientAuthError;\nexports.createClientConfigurationError = createClientConfigurationError;\nexports.createInteractionRequiredAuthError = createInteractionRequiredAuthError;\nexports.createNetworkError = createNetworkError;\nexports.formatAuthorityUri = formatAuthorityUri;\nexports.getClientAssertion = getClientAssertion;\nexports.getRequestThumbprint = getRequestThumbprint;\nexports.getTenantIdFromIdTokenClaims = getTenantIdFromIdTokenClaims;\nexports.invoke = invoke;\nexports.invokeAsync = invokeAsync;\nexports.tenantIdMatchesHomeTenant = tenantIdMatchesHomeTenant;\nexports.updateAccountTenantProfileData = updateAccountTenantProfileData;\nexports.version = version;\n//# sourceMappingURL=index-node-C8h2xZEM.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/lib/index-node-C8h2xZEM.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/lib/index.cjs":
/*!*******************************************************!*\
  !*** ./node_modules/@azure/msal-common/lib/index.cjs ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/*! @azure/msal-common v15.12.0 2025-08-19 */\n\n'use strict';\n\nvar indexNode = __webpack_require__(/*! ./index-node-C8h2xZEM.js */ \"(rsc)/./node_modules/@azure/msal-common/lib/index-node-C8h2xZEM.js\");\nvar indexBrowser = __webpack_require__(/*! ./index-browser.cjs */ \"(rsc)/./node_modules/@azure/msal-common/lib/index-browser.cjs\");\n\n\n\nexports.AADAuthorityConstants = indexNode.AADAuthorityConstants;\nexports.AADServerParamKeys = indexNode.AADServerParamKeys;\nexports.AccountEntity = indexNode.AccountEntity;\nexports.AuthError = indexNode.AuthError;\nexports.AuthErrorCodes = indexNode.AuthErrorCodes;\nexports.AuthErrorMessage = indexNode.AuthErrorMessage;\nexports.AuthToken = indexNode.AuthToken;\nexports.AuthenticationHeaderParser = indexNode.AuthenticationHeaderParser;\nexports.AuthenticationScheme = indexNode.AuthenticationScheme;\nexports.Authority = indexNode.Authority;\nexports.AuthorityFactory = indexNode.AuthorityFactory;\nexports.AuthorityType = indexNode.AuthorityType;\nexports.AuthorizationCodeClient = indexNode.AuthorizationCodeClient;\nexports.AuthorizeProtocol = indexNode.Authorize;\nexports.AzureCloudInstance = indexNode.AzureCloudInstance;\nexports.BaseClient = indexNode.BaseClient;\nexports.CacheAccountType = indexNode.CacheAccountType;\nexports.CacheError = indexNode.CacheError;\nexports.CacheErrorCodes = indexNode.CacheErrorCodes;\nexports.CacheHelpers = indexNode.CacheHelpers;\nexports.CacheManager = indexNode.CacheManager;\nexports.CacheOutcome = indexNode.CacheOutcome;\nexports.CacheType = indexNode.CacheType;\nexports.CcsCredentialType = indexNode.CcsCredentialType;\nexports.ClaimsRequestKeys = indexNode.ClaimsRequestKeys;\nexports.ClientAssertionUtils = indexNode.ClientAssertionUtils;\nexports.ClientAuthError = indexNode.ClientAuthError;\nexports.ClientAuthErrorCodes = indexNode.ClientAuthErrorCodes;\nexports.ClientAuthErrorMessage = indexNode.ClientAuthErrorMessage;\nexports.ClientConfigurationError = indexNode.ClientConfigurationError;\nexports.ClientConfigurationErrorCodes = indexNode.ClientConfigurationErrorCodes;\nexports.ClientConfigurationErrorMessage = indexNode.ClientConfigurationErrorMessage;\nexports.CodeChallengeMethodValues = indexNode.CodeChallengeMethodValues;\nexports.Constants = indexNode.Constants;\nexports.CredentialType = indexNode.CredentialType;\nexports.DEFAULT_CRYPTO_IMPLEMENTATION = indexNode.DEFAULT_CRYPTO_IMPLEMENTATION;\nexports.DEFAULT_SYSTEM_OPTIONS = indexNode.DEFAULT_SYSTEM_OPTIONS;\nexports.DEFAULT_TOKEN_RENEWAL_OFFSET_SEC = indexNode.DEFAULT_TOKEN_RENEWAL_OFFSET_SEC;\nexports.DefaultStorageClass = indexNode.DefaultStorageClass;\nexports.EncodingTypes = indexNode.EncodingTypes;\nexports.Errors = indexNode.Errors;\nexports.GrantType = indexNode.GrantType;\nexports.HeaderNames = indexNode.HeaderNames;\nexports.HttpMethod = indexNode.HttpMethod;\nexports.HttpStatus = indexNode.HttpStatus;\nexports.IntFields = indexNode.IntFields;\nexports.InteractionRequiredAuthError = indexNode.InteractionRequiredAuthError;\nexports.InteractionRequiredAuthErrorCodes = indexNode.InteractionRequiredAuthErrorCodes;\nexports.InteractionRequiredAuthErrorMessage = indexNode.InteractionRequiredAuthErrorMessage;\nexports.JsonWebTokenTypes = indexNode.JsonWebTokenTypes;\nObject.defineProperty(exports, \"LogLevel\", ({\n\tenumerable: true,\n\tget: function () { return indexNode.LogLevel; }\n}));\nexports.Logger = indexNode.Logger;\nexports.NetworkError = indexNode.NetworkError;\nexports.OAuthResponseType = indexNode.OAuthResponseType;\nexports.OIDC_DEFAULT_SCOPES = indexNode.OIDC_DEFAULT_SCOPES;\nexports.ONE_DAY_IN_MS = indexNode.ONE_DAY_IN_MS;\nexports.PasswordGrantConstants = indexNode.PasswordGrantConstants;\nexports.PerformanceEventStatus = indexNode.PerformanceEventStatus;\nexports.PerformanceEvents = indexNode.PerformanceEvents;\nexports.PersistentCacheKeys = indexNode.PersistentCacheKeys;\nexports.PopTokenGenerator = indexNode.PopTokenGenerator;\nexports.PromptValue = indexNode.PromptValue;\nexports.ProtocolMode = indexNode.ProtocolMode;\nexports.ProtocolUtils = indexNode.ProtocolUtils;\nexports.RefreshTokenClient = indexNode.RefreshTokenClient;\nexports.RequestParameterBuilder = indexNode.RequestParameterBuilder;\nexports.ResponseHandler = indexNode.ResponseHandler;\nexports.ResponseMode = indexNode.ResponseMode;\nexports.ScopeSet = indexNode.ScopeSet;\nexports.ServerError = indexNode.ServerError;\nexports.ServerResponseType = indexNode.ServerResponseType;\nexports.ServerTelemetryManager = indexNode.ServerTelemetryManager;\nexports.SilentFlowClient = indexNode.SilentFlowClient;\nexports.StringUtils = indexNode.StringUtils;\nexports.StubPerformanceClient = indexNode.StubPerformanceClient;\nexports.StubbedNetworkModule = indexNode.StubbedNetworkModule;\nexports.THE_FAMILY_ID = indexNode.THE_FAMILY_ID;\nexports.ThrottlingConstants = indexNode.ThrottlingConstants;\nexports.ThrottlingUtils = indexNode.ThrottlingUtils;\nexports.TimeUtils = indexNode.TimeUtils;\nexports.TokenCacheContext = indexNode.TokenCacheContext;\nexports.UrlString = indexNode.UrlString;\nexports.UrlUtils = indexNode.UrlUtils;\nexports.buildAccountToCache = indexNode.buildAccountToCache;\nexports.buildClientInfo = indexNode.buildClientInfo;\nexports.buildClientInfoFromHomeAccountId = indexNode.buildClientInfoFromHomeAccountId;\nexports.buildStaticAuthorityOptions = indexNode.buildStaticAuthorityOptions;\nexports.buildTenantProfile = indexNode.buildTenantProfile;\nexports.createAuthError = indexNode.createAuthError;\nexports.createCacheError = indexNode.createCacheError;\nexports.createClientAuthError = indexNode.createClientAuthError;\nexports.createClientConfigurationError = indexNode.createClientConfigurationError;\nexports.createInteractionRequiredAuthError = indexNode.createInteractionRequiredAuthError;\nexports.createNetworkError = indexNode.createNetworkError;\nexports.formatAuthorityUri = indexNode.formatAuthorityUri;\nexports.getClientAssertion = indexNode.getClientAssertion;\nexports.getRequestThumbprint = indexNode.getRequestThumbprint;\nexports.getTenantIdFromIdTokenClaims = indexNode.getTenantIdFromIdTokenClaims;\nexports.invoke = indexNode.invoke;\nexports.invokeAsync = indexNode.invokeAsync;\nexports.tenantIdMatchesHomeTenant = indexNode.tenantIdMatchesHomeTenant;\nexports.updateAccountTenantProfileData = indexNode.updateAccountTenantProfileData;\nexports.version = indexNode.version;\nexports.JoseHeader = indexBrowser.JoseHeader;\nexports.PerformanceClient = indexBrowser.PerformanceClient;\n//# sourceMappingURL=index.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/lib/index.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-node/lib/msal-node.cjs":
/*!*********************************************************!*\
  !*** ./node_modules/@azure/msal-node/lib/msal-node.cjs ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/*! @azure/msal-node v3.7.2 2025-08-19 */\n\n'use strict';\n\nvar http = __webpack_require__(/*! http */ \"http\");\nvar https = __webpack_require__(/*! https */ \"https\");\nvar uuid = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/index.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar msalCommon = __webpack_require__(/*! @azure/msal-common */ \"(rsc)/./node_modules/@azure/msal-common/lib/index.cjs\");\nvar jwt = __webpack_require__(/*! jsonwebtoken */ \"(rsc)/./node_modules/jsonwebtoken/index.js\");\nvar fs = __webpack_require__(/*! fs */ \"fs\");\nvar path = __webpack_require__(/*! path */ \"path\");\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * This class serializes cache entities to be saved into in-memory object types defined internally\r\n * @internal\r\n */\r\nclass Serializer {\r\n    /**\r\n     * serialize the JSON blob\r\n     * @param data - JSON blob cache\r\n     */\r\n    static serializeJSONBlob(data) {\r\n        return JSON.stringify(data);\r\n    }\r\n    /**\r\n     * Serialize Accounts\r\n     * @param accCache - cache of accounts\r\n     */\r\n    static serializeAccounts(accCache) {\r\n        const accounts = {};\r\n        Object.keys(accCache).map(function (key) {\r\n            const accountEntity = accCache[key];\r\n            accounts[key] = {\r\n                home_account_id: accountEntity.homeAccountId,\r\n                environment: accountEntity.environment,\r\n                realm: accountEntity.realm,\r\n                local_account_id: accountEntity.localAccountId,\r\n                username: accountEntity.username,\r\n                authority_type: accountEntity.authorityType,\r\n                name: accountEntity.name,\r\n                client_info: accountEntity.clientInfo,\r\n                last_modification_time: accountEntity.lastModificationTime,\r\n                last_modification_app: accountEntity.lastModificationApp,\r\n                tenantProfiles: accountEntity.tenantProfiles?.map((tenantProfile) => {\r\n                    return JSON.stringify(tenantProfile);\r\n                }),\r\n            };\r\n        });\r\n        return accounts;\r\n    }\r\n    /**\r\n     * Serialize IdTokens\r\n     * @param idTCache - cache of ID tokens\r\n     */\r\n    static serializeIdTokens(idTCache) {\r\n        const idTokens = {};\r\n        Object.keys(idTCache).map(function (key) {\r\n            const idTEntity = idTCache[key];\r\n            idTokens[key] = {\r\n                home_account_id: idTEntity.homeAccountId,\r\n                environment: idTEntity.environment,\r\n                credential_type: idTEntity.credentialType,\r\n                client_id: idTEntity.clientId,\r\n                secret: idTEntity.secret,\r\n                realm: idTEntity.realm,\r\n            };\r\n        });\r\n        return idTokens;\r\n    }\r\n    /**\r\n     * Serializes AccessTokens\r\n     * @param atCache - cache of access tokens\r\n     */\r\n    static serializeAccessTokens(atCache) {\r\n        const accessTokens = {};\r\n        Object.keys(atCache).map(function (key) {\r\n            const atEntity = atCache[key];\r\n            accessTokens[key] = {\r\n                home_account_id: atEntity.homeAccountId,\r\n                environment: atEntity.environment,\r\n                credential_type: atEntity.credentialType,\r\n                client_id: atEntity.clientId,\r\n                secret: atEntity.secret,\r\n                realm: atEntity.realm,\r\n                target: atEntity.target,\r\n                cached_at: atEntity.cachedAt,\r\n                expires_on: atEntity.expiresOn,\r\n                extended_expires_on: atEntity.extendedExpiresOn,\r\n                refresh_on: atEntity.refreshOn,\r\n                key_id: atEntity.keyId,\r\n                token_type: atEntity.tokenType,\r\n                requestedClaims: atEntity.requestedClaims,\r\n                requestedClaimsHash: atEntity.requestedClaimsHash,\r\n                userAssertionHash: atEntity.userAssertionHash,\r\n            };\r\n        });\r\n        return accessTokens;\r\n    }\r\n    /**\r\n     * Serialize refreshTokens\r\n     * @param rtCache - cache of refresh tokens\r\n     */\r\n    static serializeRefreshTokens(rtCache) {\r\n        const refreshTokens = {};\r\n        Object.keys(rtCache).map(function (key) {\r\n            const rtEntity = rtCache[key];\r\n            refreshTokens[key] = {\r\n                home_account_id: rtEntity.homeAccountId,\r\n                environment: rtEntity.environment,\r\n                credential_type: rtEntity.credentialType,\r\n                client_id: rtEntity.clientId,\r\n                secret: rtEntity.secret,\r\n                family_id: rtEntity.familyId,\r\n                target: rtEntity.target,\r\n                realm: rtEntity.realm,\r\n            };\r\n        });\r\n        return refreshTokens;\r\n    }\r\n    /**\r\n     * Serialize amdtCache\r\n     * @param amdtCache - cache of app metadata\r\n     */\r\n    static serializeAppMetadata(amdtCache) {\r\n        const appMetadata = {};\r\n        Object.keys(amdtCache).map(function (key) {\r\n            const amdtEntity = amdtCache[key];\r\n            appMetadata[key] = {\r\n                client_id: amdtEntity.clientId,\r\n                environment: amdtEntity.environment,\r\n                family_id: amdtEntity.familyId,\r\n            };\r\n        });\r\n        return appMetadata;\r\n    }\r\n    /**\r\n     * Serialize the cache\r\n     * @param inMemCache - itemised cache read from the JSON\r\n     */\r\n    static serializeAllCache(inMemCache) {\r\n        return {\r\n            Account: this.serializeAccounts(inMemCache.accounts),\r\n            IdToken: this.serializeIdTokens(inMemCache.idTokens),\r\n            AccessToken: this.serializeAccessTokens(inMemCache.accessTokens),\r\n            RefreshToken: this.serializeRefreshTokens(inMemCache.refreshTokens),\r\n            AppMetadata: this.serializeAppMetadata(inMemCache.appMetadata),\r\n        };\r\n    }\r\n}\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst Constants$1 = {\r\n    LIBRARY_NAME: \"MSAL.JS\",\r\n    SKU: \"msal.js.common\",\r\n    // default authority\r\n    DEFAULT_AUTHORITY: \"https://login.microsoftonline.com/common/\",\r\n    DEFAULT_AUTHORITY_HOST: \"login.microsoftonline.com\",\r\n    DEFAULT_COMMON_TENANT: \"common\",\r\n    // ADFS String\r\n    ADFS: \"adfs\",\r\n    DSTS: \"dstsv2\",\r\n    // Default AAD Instance Discovery Endpoint\r\n    AAD_INSTANCE_DISCOVERY_ENDPT: \"https://login.microsoftonline.com/common/discovery/instance?api-version=1.1&authorization_endpoint=\",\r\n    // CIAM URL\r\n    CIAM_AUTH_URL: \".ciamlogin.com\",\r\n    AAD_TENANT_DOMAIN_SUFFIX: \".onmicrosoft.com\",\r\n    // Resource delimiter - used for certain cache entries\r\n    RESOURCE_DELIM: \"|\",\r\n    // Placeholder for non-existent account ids/objects\r\n    NO_ACCOUNT: \"NO_ACCOUNT\",\r\n    // Claims\r\n    CLAIMS: \"claims\",\r\n    // Consumer UTID\r\n    CONSUMER_UTID: \"9188040d-6c67-4c5b-b112-36a304b66dad\",\r\n    // Default scopes\r\n    OPENID_SCOPE: \"openid\",\r\n    PROFILE_SCOPE: \"profile\",\r\n    OFFLINE_ACCESS_SCOPE: \"offline_access\",\r\n    EMAIL_SCOPE: \"email\",\r\n    CODE_GRANT_TYPE: \"authorization_code\",\r\n    RT_GRANT_TYPE: \"refresh_token\",\r\n    S256_CODE_CHALLENGE_METHOD: \"S256\",\r\n    URL_FORM_CONTENT_TYPE: \"application/x-www-form-urlencoded;charset=utf-8\",\r\n    AUTHORIZATION_PENDING: \"authorization_pending\",\r\n    NOT_DEFINED: \"not_defined\",\r\n    EMPTY_STRING: \"\",\r\n    NOT_APPLICABLE: \"N/A\",\r\n    NOT_AVAILABLE: \"Not Available\",\r\n    FORWARD_SLASH: \"/\",\r\n    IMDS_ENDPOINT: \"http://169.254.169.254/metadata/instance/compute/location\",\r\n    IMDS_VERSION: \"2020-06-01\",\r\n    IMDS_TIMEOUT: 2000,\r\n    AZURE_REGION_AUTO_DISCOVER_FLAG: \"TryAutoDetect\",\r\n    REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX: \"login.microsoft.com\",\r\n    KNOWN_PUBLIC_CLOUDS: [\r\n        \"login.microsoftonline.com\",\r\n        \"login.windows.net\",\r\n        \"login.microsoft.com\",\r\n        \"sts.windows.net\",\r\n    ],\r\n    SHR_NONCE_VALIDITY: 240,\r\n    INVALID_INSTANCE: \"invalid_instance\",\r\n};\r\nconst HttpStatus = {\r\n    SUCCESS: 200,\r\n    SUCCESS_RANGE_START: 200,\r\n    SUCCESS_RANGE_END: 299,\r\n    REDIRECT: 302,\r\n    CLIENT_ERROR: 400,\r\n    CLIENT_ERROR_RANGE_START: 400,\r\n    BAD_REQUEST: 400,\r\n    UNAUTHORIZED: 401,\r\n    NOT_FOUND: 404,\r\n    REQUEST_TIMEOUT: 408,\r\n    GONE: 410,\r\n    TOO_MANY_REQUESTS: 429,\r\n    CLIENT_ERROR_RANGE_END: 499,\r\n    SERVER_ERROR: 500,\r\n    SERVER_ERROR_RANGE_START: 500,\r\n    SERVICE_UNAVAILABLE: 503,\r\n    GATEWAY_TIMEOUT: 504,\r\n    SERVER_ERROR_RANGE_END: 599,\r\n    MULTI_SIDED_ERROR: 600,\r\n};\r\nconst OIDC_DEFAULT_SCOPES = [\r\n    Constants$1.OPENID_SCOPE,\r\n    Constants$1.PROFILE_SCOPE,\r\n    Constants$1.OFFLINE_ACCESS_SCOPE,\r\n];\r\nconst OIDC_SCOPES = [...OIDC_DEFAULT_SCOPES, Constants$1.EMAIL_SCOPE];\r\n/**\r\n * Request header names\r\n */\r\nconst HeaderNames = {\r\n    CONTENT_TYPE: \"Content-Type\",\r\n    CONTENT_LENGTH: \"Content-Length\",\r\n    RETRY_AFTER: \"Retry-After\",\r\n    CCS_HEADER: \"X-AnchorMailbox\",\r\n    WWWAuthenticate: \"WWW-Authenticate\",\r\n    AuthenticationInfo: \"Authentication-Info\",\r\n    X_MS_REQUEST_ID: \"x-ms-request-id\",\r\n    X_MS_HTTP_VERSION: \"x-ms-httpver\",\r\n};\r\n/**\r\n * String constants related to AAD Authority\r\n */\r\nconst AADAuthorityConstants = {\r\n    COMMON: \"common\",\r\n    ORGANIZATIONS: \"organizations\",\r\n    CONSUMERS: \"consumers\",\r\n};\r\n/**\r\n * Claims request keys\r\n */\r\nconst ClaimsRequestKeys = {\r\n    ACCESS_TOKEN: \"access_token\",\r\n    XMS_CC: \"xms_cc\",\r\n};\r\n/**\r\n * we considered making this \"enum\" in the request instead of string, however it looks like the allowed list of\r\n * prompt values kept changing over past couple of years. There are some undocumented prompt values for some\r\n * internal partners too, hence the choice of generic \"string\" type instead of the \"enum\"\r\n */\r\nconst PromptValue = {\r\n    LOGIN: \"login\",\r\n    SELECT_ACCOUNT: \"select_account\",\r\n    CONSENT: \"consent\",\r\n    NONE: \"none\",\r\n    CREATE: \"create\",\r\n    NO_SESSION: \"no_session\",\r\n};\r\n/**\r\n * allowed values for codeVerifier\r\n */\r\nconst CodeChallengeMethodValues = {\r\n    PLAIN: \"plain\",\r\n    S256: \"S256\",\r\n};\r\n/**\r\n * Allowed values for response_type\r\n */\r\nconst OAuthResponseType = {\r\n    CODE: \"code\",\r\n    IDTOKEN_TOKEN: \"id_token token\"};\r\n/**\r\n * allowed values for response_mode\r\n */\r\nconst ResponseMode = {\r\n    QUERY: \"query\",\r\n    FRAGMENT: \"fragment\",\r\n    FORM_POST: \"form_post\",\r\n};\r\n/**\r\n * allowed grant_type\r\n */\r\nconst GrantType = {\r\n    AUTHORIZATION_CODE_GRANT: \"authorization_code\",\r\n    CLIENT_CREDENTIALS_GRANT: \"client_credentials\",\r\n    RESOURCE_OWNER_PASSWORD_GRANT: \"password\",\r\n    REFRESH_TOKEN_GRANT: \"refresh_token\",\r\n    DEVICE_CODE_GRANT: \"device_code\",\r\n    JWT_BEARER: \"urn:ietf:params:oauth:grant-type:jwt-bearer\",\r\n};\r\n/**\r\n * Account types in Cache\r\n */\r\nconst CacheAccountType = {\r\n    MSSTS_ACCOUNT_TYPE: \"MSSTS\",\r\n    ADFS_ACCOUNT_TYPE: \"ADFS\",\r\n    GENERIC_ACCOUNT_TYPE: \"Generic\", // NTLM, Kerberos, FBA, Basic etc\r\n};\r\n/**\r\n * Separators used in cache\r\n */\r\nconst Separators = {\r\n    CACHE_KEY_SEPARATOR: \"-\",\r\n    CLIENT_INFO_SEPARATOR: \".\",\r\n};\r\n/**\r\n * Credential Type stored in the cache\r\n */\r\nconst CredentialType = {\r\n    ID_TOKEN: \"IdToken\",\r\n    ACCESS_TOKEN: \"AccessToken\",\r\n    ACCESS_TOKEN_WITH_AUTH_SCHEME: \"AccessToken_With_AuthScheme\",\r\n    REFRESH_TOKEN: \"RefreshToken\",\r\n};\r\n/**\r\n * More Cache related constants\r\n */\r\nconst APP_METADATA = \"appmetadata\";\r\nconst CLIENT_INFO = \"client_info\";\r\nconst THE_FAMILY_ID = \"1\";\r\nconst AUTHORITY_METADATA_CONSTANTS = {\r\n    CACHE_KEY: \"authority-metadata\",\r\n    REFRESH_TIME_SECONDS: 3600 * 24, // 24 Hours\r\n};\r\nconst AuthorityMetadataSource = {\r\n    CONFIG: \"config\",\r\n    CACHE: \"cache\",\r\n    NETWORK: \"network\",\r\n    HARDCODED_VALUES: \"hardcoded_values\",\r\n};\r\nconst SERVER_TELEM_CONSTANTS = {\r\n    SCHEMA_VERSION: 5,\r\n    MAX_LAST_HEADER_BYTES: 330,\r\n    MAX_CACHED_ERRORS: 50,\r\n    CACHE_KEY: \"server-telemetry\",\r\n    CATEGORY_SEPARATOR: \"|\",\r\n    VALUE_SEPARATOR: \",\",\r\n    OVERFLOW_TRUE: \"1\",\r\n    OVERFLOW_FALSE: \"0\",\r\n    UNKNOWN_ERROR: \"unknown_error\",\r\n};\r\n/**\r\n * Type of the authentication request\r\n */\r\nconst AuthenticationScheme = {\r\n    BEARER: \"Bearer\",\r\n    POP: \"pop\",\r\n    SSH: \"ssh-cert\",\r\n};\r\n/**\r\n * Constants related to throttling\r\n */\r\nconst ThrottlingConstants = {\r\n    // Default time to throttle RequestThumbprint in seconds\r\n    DEFAULT_THROTTLE_TIME_SECONDS: 60,\r\n    // Default maximum time to throttle in seconds, overrides what the server sends back\r\n    DEFAULT_MAX_THROTTLE_TIME_SECONDS: 3600,\r\n    // Prefix for storing throttling entries\r\n    THROTTLING_PREFIX: \"throttling\",\r\n    // Value assigned to the x-ms-lib-capability header to indicate to the server the library supports throttling\r\n    X_MS_LIB_CAPABILITY_VALUE: \"retry-after, h429\",\r\n};\r\nconst Errors = {\r\n    INVALID_GRANT_ERROR: \"invalid_grant\",\r\n    CLIENT_MISMATCH_ERROR: \"client_mismatch\",\r\n};\r\n/**\r\n * Password grant parameters\r\n */\r\nconst PasswordGrantConstants = {\r\n    username: \"username\",\r\n    password: \"password\",\r\n};\r\n/**\r\n * Region Discovery Sources\r\n */\r\nconst RegionDiscoverySources = {\r\n    FAILED_AUTO_DETECTION: \"1\",\r\n    INTERNAL_CACHE: \"2\",\r\n    ENVIRONMENT_VARIABLE: \"3\",\r\n    IMDS: \"4\",\r\n};\r\n/**\r\n * Region Discovery Outcomes\r\n */\r\nconst RegionDiscoveryOutcomes = {\r\n    CONFIGURED_NO_AUTO_DETECTION: \"2\",\r\n    AUTO_DETECTION_REQUESTED_SUCCESSFUL: \"4\",\r\n    AUTO_DETECTION_REQUESTED_FAILED: \"5\",\r\n};\r\n/**\r\n * Specifies the reason for fetching the access token from the identity provider\r\n */\r\nconst CacheOutcome = {\r\n    // When a token is found in the cache or the cache is not supposed to be hit when making the request\r\n    NOT_APPLICABLE: \"0\",\r\n    // When the token request goes to the identity provider because force_refresh was set to true. Also occurs if claims were requested\r\n    FORCE_REFRESH_OR_CLAIMS: \"1\",\r\n    // When the token request goes to the identity provider because no cached access token exists\r\n    NO_CACHED_ACCESS_TOKEN: \"2\",\r\n    // When the token request goes to the identity provider because cached access token expired\r\n    CACHED_ACCESS_TOKEN_EXPIRED: \"3\",\r\n    // When the token request goes to the identity provider because refresh_in was used and the existing token needs to be refreshed\r\n    PROACTIVELY_REFRESHED: \"4\",\r\n};\r\n// Token renewal offset default in seconds\r\nconst DEFAULT_TOKEN_RENEWAL_OFFSET_SEC = 300;\r\nconst EncodingTypes = {\r\n    BASE64: \"base64\",\r\n    HEX: \"hex\",\r\n    UTF8: \"utf-8\",\r\n};\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * AuthErrorMessage class containing string constants used by error codes and messages.\r\n */\r\nconst unexpectedError = \"unexpected_error\";\r\nconst postRequestFailed = \"post_request_failed\";\n\nvar AuthErrorCodes = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    postRequestFailed: postRequestFailed,\n    unexpectedError: unexpectedError\n});\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst AuthErrorMessages = {\r\n    [unexpectedError]: \"Unexpected error in authentication.\",\r\n    [postRequestFailed]: \"Post request failed from the network, could be a 4xx/5xx or a network unavailability. Please check the exact error code for details.\",\r\n};\r\n/**\r\n * AuthErrorMessage class containing string constants used by error codes and messages.\r\n * @deprecated Use AuthErrorCodes instead\r\n */\r\nconst AuthErrorMessage = {\r\n    unexpectedError: {\r\n        code: unexpectedError,\r\n        desc: AuthErrorMessages[unexpectedError],\r\n    },\r\n    postRequestFailed: {\r\n        code: postRequestFailed,\r\n        desc: AuthErrorMessages[postRequestFailed],\r\n    },\r\n};\r\n/**\r\n * General error class thrown by the MSAL.js library.\r\n */\r\nclass AuthError extends Error {\r\n    constructor(errorCode, errorMessage, suberror) {\r\n        const errorString = errorMessage\r\n            ? `${errorCode}: ${errorMessage}`\r\n            : errorCode;\r\n        super(errorString);\r\n        Object.setPrototypeOf(this, AuthError.prototype);\r\n        this.errorCode = errorCode || Constants$1.EMPTY_STRING;\r\n        this.errorMessage = errorMessage || Constants$1.EMPTY_STRING;\r\n        this.subError = suberror || Constants$1.EMPTY_STRING;\r\n        this.name = \"AuthError\";\r\n    }\r\n    setCorrelationId(correlationId) {\r\n        this.correlationId = correlationId;\r\n    }\r\n}\r\nfunction createAuthError(code, additionalMessage) {\r\n    return new AuthError(code, additionalMessage\r\n        ? `${AuthErrorMessages[code]} ${additionalMessage}`\r\n        : AuthErrorMessages[code]);\r\n}\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst clientInfoDecodingError = \"client_info_decoding_error\";\r\nconst clientInfoEmptyError = \"client_info_empty_error\";\r\nconst tokenParsingError = \"token_parsing_error\";\r\nconst nullOrEmptyToken = \"null_or_empty_token\";\r\nconst endpointResolutionError = \"endpoints_resolution_error\";\r\nconst networkError = \"network_error\";\r\nconst openIdConfigError = \"openid_config_error\";\r\nconst hashNotDeserialized = \"hash_not_deserialized\";\r\nconst invalidState = \"invalid_state\";\r\nconst stateMismatch = \"state_mismatch\";\r\nconst stateNotFound = \"state_not_found\";\r\nconst nonceMismatch = \"nonce_mismatch\";\r\nconst authTimeNotFound = \"auth_time_not_found\";\r\nconst maxAgeTranspired = \"max_age_transpired\";\r\nconst multipleMatchingTokens = \"multiple_matching_tokens\";\r\nconst multipleMatchingAccounts = \"multiple_matching_accounts\";\r\nconst multipleMatchingAppMetadata = \"multiple_matching_appMetadata\";\r\nconst requestCannotBeMade = \"request_cannot_be_made\";\r\nconst cannotRemoveEmptyScope = \"cannot_remove_empty_scope\";\r\nconst cannotAppendScopeSet = \"cannot_append_scopeset\";\r\nconst emptyInputScopeSet = \"empty_input_scopeset\";\r\nconst deviceCodePollingCancelled = \"device_code_polling_cancelled\";\r\nconst deviceCodeExpired = \"device_code_expired\";\r\nconst deviceCodeUnknownError = \"device_code_unknown_error\";\r\nconst noAccountInSilentRequest = \"no_account_in_silent_request\";\r\nconst invalidCacheRecord = \"invalid_cache_record\";\r\nconst invalidCacheEnvironment = \"invalid_cache_environment\";\r\nconst noAccountFound = \"no_account_found\";\r\nconst noCryptoObject = \"no_crypto_object\";\r\nconst unexpectedCredentialType = \"unexpected_credential_type\";\r\nconst invalidAssertion = \"invalid_assertion\";\r\nconst invalidClientCredential = \"invalid_client_credential\";\r\nconst tokenRefreshRequired = \"token_refresh_required\";\r\nconst userTimeoutReached = \"user_timeout_reached\";\r\nconst tokenClaimsCnfRequiredForSignedJwt = \"token_claims_cnf_required_for_signedjwt\";\r\nconst authorizationCodeMissingFromServerResponse = \"authorization_code_missing_from_server_response\";\r\nconst bindingKeyNotRemoved = \"binding_key_not_removed\";\r\nconst endSessionEndpointNotSupported = \"end_session_endpoint_not_supported\";\r\nconst keyIdMissing = \"key_id_missing\";\r\nconst noNetworkConnectivity = \"no_network_connectivity\";\r\nconst userCanceled = \"user_canceled\";\r\nconst missingTenantIdError = \"missing_tenant_id_error\";\r\nconst methodNotImplemented = \"method_not_implemented\";\r\nconst nestedAppAuthBridgeDisabled = \"nested_app_auth_bridge_disabled\";\n\nvar ClientAuthErrorCodes = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    authTimeNotFound: authTimeNotFound,\n    authorizationCodeMissingFromServerResponse: authorizationCodeMissingFromServerResponse,\n    bindingKeyNotRemoved: bindingKeyNotRemoved,\n    cannotAppendScopeSet: cannotAppendScopeSet,\n    cannotRemoveEmptyScope: cannotRemoveEmptyScope,\n    clientInfoDecodingError: clientInfoDecodingError,\n    clientInfoEmptyError: clientInfoEmptyError,\n    deviceCodeExpired: deviceCodeExpired,\n    deviceCodePollingCancelled: deviceCodePollingCancelled,\n    deviceCodeUnknownError: deviceCodeUnknownError,\n    emptyInputScopeSet: emptyInputScopeSet,\n    endSessionEndpointNotSupported: endSessionEndpointNotSupported,\n    endpointResolutionError: endpointResolutionError,\n    hashNotDeserialized: hashNotDeserialized,\n    invalidAssertion: invalidAssertion,\n    invalidCacheEnvironment: invalidCacheEnvironment,\n    invalidCacheRecord: invalidCacheRecord,\n    invalidClientCredential: invalidClientCredential,\n    invalidState: invalidState,\n    keyIdMissing: keyIdMissing,\n    maxAgeTranspired: maxAgeTranspired,\n    methodNotImplemented: methodNotImplemented,\n    missingTenantIdError: missingTenantIdError,\n    multipleMatchingAccounts: multipleMatchingAccounts,\n    multipleMatchingAppMetadata: multipleMatchingAppMetadata,\n    multipleMatchingTokens: multipleMatchingTokens,\n    nestedAppAuthBridgeDisabled: nestedAppAuthBridgeDisabled,\n    networkError: networkError,\n    noAccountFound: noAccountFound,\n    noAccountInSilentRequest: noAccountInSilentRequest,\n    noCryptoObject: noCryptoObject,\n    noNetworkConnectivity: noNetworkConnectivity,\n    nonceMismatch: nonceMismatch,\n    nullOrEmptyToken: nullOrEmptyToken,\n    openIdConfigError: openIdConfigError,\n    requestCannotBeMade: requestCannotBeMade,\n    stateMismatch: stateMismatch,\n    stateNotFound: stateNotFound,\n    tokenClaimsCnfRequiredForSignedJwt: tokenClaimsCnfRequiredForSignedJwt,\n    tokenParsingError: tokenParsingError,\n    tokenRefreshRequired: tokenRefreshRequired,\n    unexpectedCredentialType: unexpectedCredentialType,\n    userCanceled: userCanceled,\n    userTimeoutReached: userTimeoutReached\n});\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * ClientAuthErrorMessage class containing string constants used by error codes and messages.\r\n */\r\nconst ClientAuthErrorMessages = {\r\n    [clientInfoDecodingError]: \"The client info could not be parsed/decoded correctly\",\r\n    [clientInfoEmptyError]: \"The client info was empty\",\r\n    [tokenParsingError]: \"Token cannot be parsed\",\r\n    [nullOrEmptyToken]: \"The token is null or empty\",\r\n    [endpointResolutionError]: \"Endpoints cannot be resolved\",\r\n    [networkError]: \"Network request failed\",\r\n    [openIdConfigError]: \"Could not retrieve endpoints. Check your authority and verify the .well-known/openid-configuration endpoint returns the required endpoints.\",\r\n    [hashNotDeserialized]: \"The hash parameters could not be deserialized\",\r\n    [invalidState]: \"State was not the expected format\",\r\n    [stateMismatch]: \"State mismatch error\",\r\n    [stateNotFound]: \"State not found\",\r\n    [nonceMismatch]: \"Nonce mismatch error\",\r\n    [authTimeNotFound]: \"Max Age was requested and the ID token is missing the auth_time variable.\" +\r\n        \" auth_time is an optional claim and is not enabled by default - it must be enabled.\" +\r\n        \" See https://aka.ms/msaljs/optional-claims for more information.\",\r\n    [maxAgeTranspired]: \"Max Age is set to 0, or too much time has elapsed since the last end-user authentication.\",\r\n    [multipleMatchingTokens]: \"The cache contains multiple tokens satisfying the requirements. \" +\r\n        \"Call AcquireToken again providing more requirements such as authority or account.\",\r\n    [multipleMatchingAccounts]: \"The cache contains multiple accounts satisfying the given parameters. Please pass more info to obtain the correct account\",\r\n    [multipleMatchingAppMetadata]: \"The cache contains multiple appMetadata satisfying the given parameters. Please pass more info to obtain the correct appMetadata\",\r\n    [requestCannotBeMade]: \"Token request cannot be made without authorization code or refresh token.\",\r\n    [cannotRemoveEmptyScope]: \"Cannot remove null or empty scope from ScopeSet\",\r\n    [cannotAppendScopeSet]: \"Cannot append ScopeSet\",\r\n    [emptyInputScopeSet]: \"Empty input ScopeSet cannot be processed\",\r\n    [deviceCodePollingCancelled]: \"Caller has cancelled token endpoint polling during device code flow by setting DeviceCodeRequest.cancel = true.\",\r\n    [deviceCodeExpired]: \"Device code is expired.\",\r\n    [deviceCodeUnknownError]: \"Device code stopped polling for unknown reasons.\",\r\n    [noAccountInSilentRequest]: \"Please pass an account object, silent flow is not supported without account information\",\r\n    [invalidCacheRecord]: \"Cache record object was null or undefined.\",\r\n    [invalidCacheEnvironment]: \"Invalid environment when attempting to create cache entry\",\r\n    [noAccountFound]: \"No account found in cache for given key.\",\r\n    [noCryptoObject]: \"No crypto object detected.\",\r\n    [unexpectedCredentialType]: \"Unexpected credential type.\",\r\n    [invalidAssertion]: \"Client assertion must meet requirements described in https://tools.ietf.org/html/rfc7515\",\r\n    [invalidClientCredential]: \"Client credential (secret, certificate, or assertion) must not be empty when creating a confidential client. An application should at most have one credential\",\r\n    [tokenRefreshRequired]: \"Cannot return token from cache because it must be refreshed. This may be due to one of the following reasons: forceRefresh parameter is set to true, claims have been requested, there is no cached access token or it is expired.\",\r\n    [userTimeoutReached]: \"User defined timeout for device code polling reached\",\r\n    [tokenClaimsCnfRequiredForSignedJwt]: \"Cannot generate a POP jwt if the token_claims are not populated\",\r\n    [authorizationCodeMissingFromServerResponse]: \"Server response does not contain an authorization code to proceed\",\r\n    [bindingKeyNotRemoved]: \"Could not remove the credential's binding key from storage.\",\r\n    [endSessionEndpointNotSupported]: \"The provided authority does not support logout\",\r\n    [keyIdMissing]: \"A keyId value is missing from the requested bound token's cache record and is required to match the token to it's stored binding key.\",\r\n    [noNetworkConnectivity]: \"No network connectivity. Check your internet connection.\",\r\n    [userCanceled]: \"User cancelled the flow.\",\r\n    [missingTenantIdError]: \"A tenant id - not common, organizations, or consumers - must be specified when using the client_credentials flow.\",\r\n    [methodNotImplemented]: \"This method has not been implemented\",\r\n    [nestedAppAuthBridgeDisabled]: \"The nested app auth bridge is disabled\",\r\n};\r\n/**\r\n * String constants used by error codes and messages.\r\n * @deprecated Use ClientAuthErrorCodes instead\r\n */\r\nconst ClientAuthErrorMessage = {\r\n    clientInfoDecodingError: {\r\n        code: clientInfoDecodingError,\r\n        desc: ClientAuthErrorMessages[clientInfoDecodingError],\r\n    },\r\n    clientInfoEmptyError: {\r\n        code: clientInfoEmptyError,\r\n        desc: ClientAuthErrorMessages[clientInfoEmptyError],\r\n    },\r\n    tokenParsingError: {\r\n        code: tokenParsingError,\r\n        desc: ClientAuthErrorMessages[tokenParsingError],\r\n    },\r\n    nullOrEmptyToken: {\r\n        code: nullOrEmptyToken,\r\n        desc: ClientAuthErrorMessages[nullOrEmptyToken],\r\n    },\r\n    endpointResolutionError: {\r\n        code: endpointResolutionError,\r\n        desc: ClientAuthErrorMessages[endpointResolutionError],\r\n    },\r\n    networkError: {\r\n        code: networkError,\r\n        desc: ClientAuthErrorMessages[networkError],\r\n    },\r\n    unableToGetOpenidConfigError: {\r\n        code: openIdConfigError,\r\n        desc: ClientAuthErrorMessages[openIdConfigError],\r\n    },\r\n    hashNotDeserialized: {\r\n        code: hashNotDeserialized,\r\n        desc: ClientAuthErrorMessages[hashNotDeserialized],\r\n    },\r\n    invalidStateError: {\r\n        code: invalidState,\r\n        desc: ClientAuthErrorMessages[invalidState],\r\n    },\r\n    stateMismatchError: {\r\n        code: stateMismatch,\r\n        desc: ClientAuthErrorMessages[stateMismatch],\r\n    },\r\n    stateNotFoundError: {\r\n        code: stateNotFound,\r\n        desc: ClientAuthErrorMessages[stateNotFound],\r\n    },\r\n    nonceMismatchError: {\r\n        code: nonceMismatch,\r\n        desc: ClientAuthErrorMessages[nonceMismatch],\r\n    },\r\n    authTimeNotFoundError: {\r\n        code: authTimeNotFound,\r\n        desc: ClientAuthErrorMessages[authTimeNotFound],\r\n    },\r\n    maxAgeTranspired: {\r\n        code: maxAgeTranspired,\r\n        desc: ClientAuthErrorMessages[maxAgeTranspired],\r\n    },\r\n    multipleMatchingTokens: {\r\n        code: multipleMatchingTokens,\r\n        desc: ClientAuthErrorMessages[multipleMatchingTokens],\r\n    },\r\n    multipleMatchingAccounts: {\r\n        code: multipleMatchingAccounts,\r\n        desc: ClientAuthErrorMessages[multipleMatchingAccounts],\r\n    },\r\n    multipleMatchingAppMetadata: {\r\n        code: multipleMatchingAppMetadata,\r\n        desc: ClientAuthErrorMessages[multipleMatchingAppMetadata],\r\n    },\r\n    tokenRequestCannotBeMade: {\r\n        code: requestCannotBeMade,\r\n        desc: ClientAuthErrorMessages[requestCannotBeMade],\r\n    },\r\n    removeEmptyScopeError: {\r\n        code: cannotRemoveEmptyScope,\r\n        desc: ClientAuthErrorMessages[cannotRemoveEmptyScope],\r\n    },\r\n    appendScopeSetError: {\r\n        code: cannotAppendScopeSet,\r\n        desc: ClientAuthErrorMessages[cannotAppendScopeSet],\r\n    },\r\n    emptyInputScopeSetError: {\r\n        code: emptyInputScopeSet,\r\n        desc: ClientAuthErrorMessages[emptyInputScopeSet],\r\n    },\r\n    DeviceCodePollingCancelled: {\r\n        code: deviceCodePollingCancelled,\r\n        desc: ClientAuthErrorMessages[deviceCodePollingCancelled],\r\n    },\r\n    DeviceCodeExpired: {\r\n        code: deviceCodeExpired,\r\n        desc: ClientAuthErrorMessages[deviceCodeExpired],\r\n    },\r\n    DeviceCodeUnknownError: {\r\n        code: deviceCodeUnknownError,\r\n        desc: ClientAuthErrorMessages[deviceCodeUnknownError],\r\n    },\r\n    NoAccountInSilentRequest: {\r\n        code: noAccountInSilentRequest,\r\n        desc: ClientAuthErrorMessages[noAccountInSilentRequest],\r\n    },\r\n    invalidCacheRecord: {\r\n        code: invalidCacheRecord,\r\n        desc: ClientAuthErrorMessages[invalidCacheRecord],\r\n    },\r\n    invalidCacheEnvironment: {\r\n        code: invalidCacheEnvironment,\r\n        desc: ClientAuthErrorMessages[invalidCacheEnvironment],\r\n    },\r\n    noAccountFound: {\r\n        code: noAccountFound,\r\n        desc: ClientAuthErrorMessages[noAccountFound],\r\n    },\r\n    noCryptoObj: {\r\n        code: noCryptoObject,\r\n        desc: ClientAuthErrorMessages[noCryptoObject],\r\n    },\r\n    unexpectedCredentialType: {\r\n        code: unexpectedCredentialType,\r\n        desc: ClientAuthErrorMessages[unexpectedCredentialType],\r\n    },\r\n    invalidAssertion: {\r\n        code: invalidAssertion,\r\n        desc: ClientAuthErrorMessages[invalidAssertion],\r\n    },\r\n    invalidClientCredential: {\r\n        code: invalidClientCredential,\r\n        desc: ClientAuthErrorMessages[invalidClientCredential],\r\n    },\r\n    tokenRefreshRequired: {\r\n        code: tokenRefreshRequired,\r\n        desc: ClientAuthErrorMessages[tokenRefreshRequired],\r\n    },\r\n    userTimeoutReached: {\r\n        code: userTimeoutReached,\r\n        desc: ClientAuthErrorMessages[userTimeoutReached],\r\n    },\r\n    tokenClaimsRequired: {\r\n        code: tokenClaimsCnfRequiredForSignedJwt,\r\n        desc: ClientAuthErrorMessages[tokenClaimsCnfRequiredForSignedJwt],\r\n    },\r\n    noAuthorizationCodeFromServer: {\r\n        code: authorizationCodeMissingFromServerResponse,\r\n        desc: ClientAuthErrorMessages[authorizationCodeMissingFromServerResponse],\r\n    },\r\n    bindingKeyNotRemovedError: {\r\n        code: bindingKeyNotRemoved,\r\n        desc: ClientAuthErrorMessages[bindingKeyNotRemoved],\r\n    },\r\n    logoutNotSupported: {\r\n        code: endSessionEndpointNotSupported,\r\n        desc: ClientAuthErrorMessages[endSessionEndpointNotSupported],\r\n    },\r\n    keyIdMissing: {\r\n        code: keyIdMissing,\r\n        desc: ClientAuthErrorMessages[keyIdMissing],\r\n    },\r\n    noNetworkConnectivity: {\r\n        code: noNetworkConnectivity,\r\n        desc: ClientAuthErrorMessages[noNetworkConnectivity],\r\n    },\r\n    userCanceledError: {\r\n        code: userCanceled,\r\n        desc: ClientAuthErrorMessages[userCanceled],\r\n    },\r\n    missingTenantIdError: {\r\n        code: missingTenantIdError,\r\n        desc: ClientAuthErrorMessages[missingTenantIdError],\r\n    },\r\n    nestedAppAuthBridgeDisabled: {\r\n        code: nestedAppAuthBridgeDisabled,\r\n        desc: ClientAuthErrorMessages[nestedAppAuthBridgeDisabled],\r\n    },\r\n};\r\n/**\r\n * Error thrown when there is an error in the client code running on the browser.\r\n */\r\nclass ClientAuthError extends AuthError {\r\n    constructor(errorCode, additionalMessage) {\r\n        super(errorCode, additionalMessage\r\n            ? `${ClientAuthErrorMessages[errorCode]}: ${additionalMessage}`\r\n            : ClientAuthErrorMessages[errorCode]);\r\n        this.name = \"ClientAuthError\";\r\n        Object.setPrototypeOf(this, ClientAuthError.prototype);\r\n    }\r\n}\r\nfunction createClientAuthError(errorCode, additionalMessage) {\r\n    return new ClientAuthError(errorCode, additionalMessage);\r\n}\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst DEFAULT_CRYPTO_IMPLEMENTATION = {\r\n    createNewGuid: () => {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    },\r\n    base64Decode: () => {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    },\r\n    base64Encode: () => {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    },\r\n    base64UrlEncode: () => {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    },\r\n    encodeKid: () => {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    },\r\n    async getPublicKeyThumbprint() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    },\r\n    async removeTokenBindingKey() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    },\r\n    async clearKeystore() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    },\r\n    async signJwt() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    },\r\n    async hashString() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    },\r\n};\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Log message level.\r\n */\r\nexports.LogLevel = void 0;\r\n(function (LogLevel) {\r\n    LogLevel[LogLevel[\"Error\"] = 0] = \"Error\";\r\n    LogLevel[LogLevel[\"Warning\"] = 1] = \"Warning\";\r\n    LogLevel[LogLevel[\"Info\"] = 2] = \"Info\";\r\n    LogLevel[LogLevel[\"Verbose\"] = 3] = \"Verbose\";\r\n    LogLevel[LogLevel[\"Trace\"] = 4] = \"Trace\";\r\n})(exports.LogLevel || (exports.LogLevel = {}));\r\n/**\r\n * Class which facilitates logging of messages to a specific place.\r\n */\r\nclass Logger {\r\n    constructor(loggerOptions, packageName, packageVersion) {\r\n        // Current log level, defaults to info.\r\n        this.level = exports.LogLevel.Info;\r\n        const defaultLoggerCallback = () => {\r\n            return;\r\n        };\r\n        const setLoggerOptions = loggerOptions || Logger.createDefaultLoggerOptions();\r\n        this.localCallback =\r\n            setLoggerOptions.loggerCallback || defaultLoggerCallback;\r\n        this.piiLoggingEnabled = setLoggerOptions.piiLoggingEnabled || false;\r\n        this.level =\r\n            typeof setLoggerOptions.logLevel === \"number\"\r\n                ? setLoggerOptions.logLevel\r\n                : exports.LogLevel.Info;\r\n        this.correlationId =\r\n            setLoggerOptions.correlationId || Constants$1.EMPTY_STRING;\r\n        this.packageName = packageName || Constants$1.EMPTY_STRING;\r\n        this.packageVersion = packageVersion || Constants$1.EMPTY_STRING;\r\n    }\r\n    static createDefaultLoggerOptions() {\r\n        return {\r\n            loggerCallback: () => {\r\n                // allow users to not set loggerCallback\r\n            },\r\n            piiLoggingEnabled: false,\r\n            logLevel: exports.LogLevel.Info,\r\n        };\r\n    }\r\n    /**\r\n     * Create new Logger with existing configurations.\r\n     */\r\n    clone(packageName, packageVersion, correlationId) {\r\n        return new Logger({\r\n            loggerCallback: this.localCallback,\r\n            piiLoggingEnabled: this.piiLoggingEnabled,\r\n            logLevel: this.level,\r\n            correlationId: correlationId || this.correlationId,\r\n        }, packageName, packageVersion);\r\n    }\r\n    /**\r\n     * Log message with required options.\r\n     */\r\n    logMessage(logMessage, options) {\r\n        if (options.logLevel > this.level ||\r\n            (!this.piiLoggingEnabled && options.containsPii)) {\r\n            return;\r\n        }\r\n        const timestamp = new Date().toUTCString();\r\n        // Add correlationId to logs if set, correlationId provided on log messages take precedence\r\n        const logHeader = `[${timestamp}] : [${options.correlationId || this.correlationId || \"\"}]`;\r\n        const log = `${logHeader} : ${this.packageName}@${this.packageVersion} : ${exports.LogLevel[options.logLevel]} - ${logMessage}`;\r\n        // debug(`msal:${LogLevel[options.logLevel]}${options.containsPii ? \"-Pii\": Constants.EMPTY_STRING}${options.context ? `:${options.context}` : Constants.EMPTY_STRING}`)(logMessage);\r\n        this.executeCallback(options.logLevel, log, options.containsPii || false);\r\n    }\r\n    /**\r\n     * Execute callback with message.\r\n     */\r\n    executeCallback(level, message, containsPii) {\r\n        if (this.localCallback) {\r\n            this.localCallback(level, message, containsPii);\r\n        }\r\n    }\r\n    /**\r\n     * Logs error messages.\r\n     */\r\n    error(message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: exports.LogLevel.Error,\r\n            containsPii: false,\r\n            correlationId: correlationId || Constants$1.EMPTY_STRING,\r\n        });\r\n    }\r\n    /**\r\n     * Logs error messages with PII.\r\n     */\r\n    errorPii(message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: exports.LogLevel.Error,\r\n            containsPii: true,\r\n            correlationId: correlationId || Constants$1.EMPTY_STRING,\r\n        });\r\n    }\r\n    /**\r\n     * Logs warning messages.\r\n     */\r\n    warning(message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: exports.LogLevel.Warning,\r\n            containsPii: false,\r\n            correlationId: correlationId || Constants$1.EMPTY_STRING,\r\n        });\r\n    }\r\n    /**\r\n     * Logs warning messages with PII.\r\n     */\r\n    warningPii(message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: exports.LogLevel.Warning,\r\n            containsPii: true,\r\n            correlationId: correlationId || Constants$1.EMPTY_STRING,\r\n        });\r\n    }\r\n    /**\r\n     * Logs info messages.\r\n     */\r\n    info(message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: exports.LogLevel.Info,\r\n            containsPii: false,\r\n            correlationId: correlationId || Constants$1.EMPTY_STRING,\r\n        });\r\n    }\r\n    /**\r\n     * Logs info messages with PII.\r\n     */\r\n    infoPii(message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: exports.LogLevel.Info,\r\n            containsPii: true,\r\n            correlationId: correlationId || Constants$1.EMPTY_STRING,\r\n        });\r\n    }\r\n    /**\r\n     * Logs verbose messages.\r\n     */\r\n    verbose(message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: exports.LogLevel.Verbose,\r\n            containsPii: false,\r\n            correlationId: correlationId || Constants$1.EMPTY_STRING,\r\n        });\r\n    }\r\n    /**\r\n     * Logs verbose messages with PII.\r\n     */\r\n    verbosePii(message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: exports.LogLevel.Verbose,\r\n            containsPii: true,\r\n            correlationId: correlationId || Constants$1.EMPTY_STRING,\r\n        });\r\n    }\r\n    /**\r\n     * Logs trace messages.\r\n     */\r\n    trace(message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: exports.LogLevel.Trace,\r\n            containsPii: false,\r\n            correlationId: correlationId || Constants$1.EMPTY_STRING,\r\n        });\r\n    }\r\n    /**\r\n     * Logs trace messages with PII.\r\n     */\r\n    tracePii(message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: exports.LogLevel.Trace,\r\n            containsPii: true,\r\n            correlationId: correlationId || Constants$1.EMPTY_STRING,\r\n        });\r\n    }\r\n    /**\r\n     * Returns whether PII Logging is enabled or not.\r\n     */\r\n    isPiiLoggingEnabled() {\r\n        return this.piiLoggingEnabled || false;\r\n    }\r\n}\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n/* eslint-disable header/header */\r\nconst name$1 = \"@azure/msal-common\";\r\nconst version$1 = \"15.12.0\";\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst AzureCloudInstance = {\r\n    // AzureCloudInstance is not specified.\r\n    None: \"none\",\r\n    // Microsoft Azure public cloud\r\n    AzurePublic: \"https://login.microsoftonline.com\",\r\n    // Microsoft PPE\r\n    AzurePpe: \"https://login.windows-ppe.net\",\r\n    // Microsoft Chinese national/regional cloud\r\n    AzureChina: \"https://login.chinacloudapi.cn\",\r\n    // Microsoft German national/regional cloud (\"Black Forest\")\r\n    AzureGermany: \"https://login.microsoftonline.de\",\r\n    // US Government cloud\r\n    AzureUsGovernment: \"https://login.microsoftonline.us\",\r\n};\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst redirectUriEmpty = \"redirect_uri_empty\";\r\nconst claimsRequestParsingError = \"claims_request_parsing_error\";\r\nconst authorityUriInsecure = \"authority_uri_insecure\";\r\nconst urlParseError = \"url_parse_error\";\r\nconst urlEmptyError = \"empty_url_error\";\r\nconst emptyInputScopesError = \"empty_input_scopes_error\";\r\nconst invalidClaims = \"invalid_claims\";\r\nconst tokenRequestEmpty = \"token_request_empty\";\r\nconst logoutRequestEmpty = \"logout_request_empty\";\r\nconst invalidCodeChallengeMethod = \"invalid_code_challenge_method\";\r\nconst pkceParamsMissing = \"pkce_params_missing\";\r\nconst invalidCloudDiscoveryMetadata = \"invalid_cloud_discovery_metadata\";\r\nconst invalidAuthorityMetadata = \"invalid_authority_metadata\";\r\nconst untrustedAuthority = \"untrusted_authority\";\r\nconst missingSshJwk = \"missing_ssh_jwk\";\r\nconst missingSshKid = \"missing_ssh_kid\";\r\nconst missingNonceAuthenticationHeader = \"missing_nonce_authentication_header\";\r\nconst invalidAuthenticationHeader = \"invalid_authentication_header\";\r\nconst cannotSetOIDCOptions = \"cannot_set_OIDCOptions\";\r\nconst cannotAllowPlatformBroker = \"cannot_allow_platform_broker\";\r\nconst authorityMismatch = \"authority_mismatch\";\r\nconst invalidRequestMethodForEAR = \"invalid_request_method_for_EAR\";\r\nconst invalidAuthorizePostBodyParameters = \"invalid_authorize_post_body_parameters\";\n\nvar ClientConfigurationErrorCodes = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    authorityMismatch: authorityMismatch,\n    authorityUriInsecure: authorityUriInsecure,\n    cannotAllowPlatformBroker: cannotAllowPlatformBroker,\n    cannotSetOIDCOptions: cannotSetOIDCOptions,\n    claimsRequestParsingError: claimsRequestParsingError,\n    emptyInputScopesError: emptyInputScopesError,\n    invalidAuthenticationHeader: invalidAuthenticationHeader,\n    invalidAuthorityMetadata: invalidAuthorityMetadata,\n    invalidAuthorizePostBodyParameters: invalidAuthorizePostBodyParameters,\n    invalidClaims: invalidClaims,\n    invalidCloudDiscoveryMetadata: invalidCloudDiscoveryMetadata,\n    invalidCodeChallengeMethod: invalidCodeChallengeMethod,\n    invalidRequestMethodForEAR: invalidRequestMethodForEAR,\n    logoutRequestEmpty: logoutRequestEmpty,\n    missingNonceAuthenticationHeader: missingNonceAuthenticationHeader,\n    missingSshJwk: missingSshJwk,\n    missingSshKid: missingSshKid,\n    pkceParamsMissing: pkceParamsMissing,\n    redirectUriEmpty: redirectUriEmpty,\n    tokenRequestEmpty: tokenRequestEmpty,\n    untrustedAuthority: untrustedAuthority,\n    urlEmptyError: urlEmptyError,\n    urlParseError: urlParseError\n});\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst ClientConfigurationErrorMessages = {\r\n    [redirectUriEmpty]: \"A redirect URI is required for all calls, and none has been set.\",\r\n    [claimsRequestParsingError]: \"Could not parse the given claims request object.\",\r\n    [authorityUriInsecure]: \"Authority URIs must use https.  Please see here for valid authority configuration options: https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-js-initializing-client-applications#configuration-options\",\r\n    [urlParseError]: \"URL could not be parsed into appropriate segments.\",\r\n    [urlEmptyError]: \"URL was empty or null.\",\r\n    [emptyInputScopesError]: \"Scopes cannot be passed as null, undefined or empty array because they are required to obtain an access token.\",\r\n    [invalidClaims]: \"Given claims parameter must be a stringified JSON object.\",\r\n    [tokenRequestEmpty]: \"Token request was empty and not found in cache.\",\r\n    [logoutRequestEmpty]: \"The logout request was null or undefined.\",\r\n    [invalidCodeChallengeMethod]: 'code_challenge_method passed is invalid. Valid values are \"plain\" and \"S256\".',\r\n    [pkceParamsMissing]: \"Both params: code_challenge and code_challenge_method are to be passed if to be sent in the request\",\r\n    [invalidCloudDiscoveryMetadata]: \"Invalid cloudDiscoveryMetadata provided. Must be a stringified JSON object containing tenant_discovery_endpoint and metadata fields\",\r\n    [invalidAuthorityMetadata]: \"Invalid authorityMetadata provided. Must by a stringified JSON object containing authorization_endpoint, token_endpoint, issuer fields.\",\r\n    [untrustedAuthority]: \"The provided authority is not a trusted authority. Please include this authority in the knownAuthorities config parameter.\",\r\n    [missingSshJwk]: \"Missing sshJwk in SSH certificate request. A stringified JSON Web Key is required when using the SSH authentication scheme.\",\r\n    [missingSshKid]: \"Missing sshKid in SSH certificate request. A string that uniquely identifies the public SSH key is required when using the SSH authentication scheme.\",\r\n    [missingNonceAuthenticationHeader]: \"Unable to find an authentication header containing server nonce. Either the Authentication-Info or WWW-Authenticate headers must be present in order to obtain a server nonce.\",\r\n    [invalidAuthenticationHeader]: \"Invalid authentication header provided\",\r\n    [cannotSetOIDCOptions]: \"Cannot set OIDCOptions parameter. Please change the protocol mode to OIDC or use a non-Microsoft authority.\",\r\n    [cannotAllowPlatformBroker]: \"Cannot set allowPlatformBroker parameter to true when not in AAD protocol mode.\",\r\n    [authorityMismatch]: \"Authority mismatch error. Authority provided in login request or PublicClientApplication config does not match the environment of the provided account. Please use a matching account or make an interactive request to login to this authority.\",\r\n    [invalidAuthorizePostBodyParameters]: \"Invalid authorize post body parameters provided. If you are using authorizePostBodyParameters, the request method must be POST. Please check the request method and parameters.\",\r\n    [invalidRequestMethodForEAR]: \"Invalid request method for EAR protocol mode. The request method cannot be GET when using EAR protocol mode. Please change the request method to POST.\",\r\n};\r\n/**\r\n * ClientConfigurationErrorMessage class containing string constants used by error codes and messages.\r\n * @deprecated Use ClientConfigurationErrorCodes instead\r\n */\r\nconst ClientConfigurationErrorMessage = {\r\n    redirectUriNotSet: {\r\n        code: redirectUriEmpty,\r\n        desc: ClientConfigurationErrorMessages[redirectUriEmpty],\r\n    },\r\n    claimsRequestParsingError: {\r\n        code: claimsRequestParsingError,\r\n        desc: ClientConfigurationErrorMessages[claimsRequestParsingError],\r\n    },\r\n    authorityUriInsecure: {\r\n        code: authorityUriInsecure,\r\n        desc: ClientConfigurationErrorMessages[authorityUriInsecure],\r\n    },\r\n    urlParseError: {\r\n        code: urlParseError,\r\n        desc: ClientConfigurationErrorMessages[urlParseError],\r\n    },\r\n    urlEmptyError: {\r\n        code: urlEmptyError,\r\n        desc: ClientConfigurationErrorMessages[urlEmptyError],\r\n    },\r\n    emptyScopesError: {\r\n        code: emptyInputScopesError,\r\n        desc: ClientConfigurationErrorMessages[emptyInputScopesError],\r\n    },\r\n    invalidClaimsRequest: {\r\n        code: invalidClaims,\r\n        desc: ClientConfigurationErrorMessages[invalidClaims],\r\n    },\r\n    tokenRequestEmptyError: {\r\n        code: tokenRequestEmpty,\r\n        desc: ClientConfigurationErrorMessages[tokenRequestEmpty],\r\n    },\r\n    logoutRequestEmptyError: {\r\n        code: logoutRequestEmpty,\r\n        desc: ClientConfigurationErrorMessages[logoutRequestEmpty],\r\n    },\r\n    invalidCodeChallengeMethod: {\r\n        code: invalidCodeChallengeMethod,\r\n        desc: ClientConfigurationErrorMessages[invalidCodeChallengeMethod],\r\n    },\r\n    invalidCodeChallengeParams: {\r\n        code: pkceParamsMissing,\r\n        desc: ClientConfigurationErrorMessages[pkceParamsMissing],\r\n    },\r\n    invalidCloudDiscoveryMetadata: {\r\n        code: invalidCloudDiscoveryMetadata,\r\n        desc: ClientConfigurationErrorMessages[invalidCloudDiscoveryMetadata],\r\n    },\r\n    invalidAuthorityMetadata: {\r\n        code: invalidAuthorityMetadata,\r\n        desc: ClientConfigurationErrorMessages[invalidAuthorityMetadata],\r\n    },\r\n    untrustedAuthority: {\r\n        code: untrustedAuthority,\r\n        desc: ClientConfigurationErrorMessages[untrustedAuthority],\r\n    },\r\n    missingSshJwk: {\r\n        code: missingSshJwk,\r\n        desc: ClientConfigurationErrorMessages[missingSshJwk],\r\n    },\r\n    missingSshKid: {\r\n        code: missingSshKid,\r\n        desc: ClientConfigurationErrorMessages[missingSshKid],\r\n    },\r\n    missingNonceAuthenticationHeader: {\r\n        code: missingNonceAuthenticationHeader,\r\n        desc: ClientConfigurationErrorMessages[missingNonceAuthenticationHeader],\r\n    },\r\n    invalidAuthenticationHeader: {\r\n        code: invalidAuthenticationHeader,\r\n        desc: ClientConfigurationErrorMessages[invalidAuthenticationHeader],\r\n    },\r\n    cannotSetOIDCOptions: {\r\n        code: cannotSetOIDCOptions,\r\n        desc: ClientConfigurationErrorMessages[cannotSetOIDCOptions],\r\n    },\r\n    cannotAllowPlatformBroker: {\r\n        code: cannotAllowPlatformBroker,\r\n        desc: ClientConfigurationErrorMessages[cannotAllowPlatformBroker],\r\n    },\r\n    authorityMismatch: {\r\n        code: authorityMismatch,\r\n        desc: ClientConfigurationErrorMessages[authorityMismatch],\r\n    },\r\n    invalidAuthorizePostBodyParameters: {\r\n        code: invalidAuthorizePostBodyParameters,\r\n        desc: ClientConfigurationErrorMessages[invalidAuthorizePostBodyParameters],\r\n    },\r\n    invalidRequestMethodForEAR: {\r\n        code: invalidRequestMethodForEAR,\r\n        desc: ClientConfigurationErrorMessages[invalidRequestMethodForEAR],\r\n    },\r\n};\r\n/**\r\n * Error thrown when there is an error in configuration of the MSAL.js library.\r\n */\r\nclass ClientConfigurationError extends AuthError {\r\n    constructor(errorCode) {\r\n        super(errorCode, ClientConfigurationErrorMessages[errorCode]);\r\n        this.name = \"ClientConfigurationError\";\r\n        Object.setPrototypeOf(this, ClientConfigurationError.prototype);\r\n    }\r\n}\r\nfunction createClientConfigurationError(errorCode) {\r\n    return new ClientConfigurationError(errorCode);\r\n}\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * @hidden\r\n */\r\nclass StringUtils {\r\n    /**\r\n     * Check if stringified object is empty\r\n     * @param strObj\r\n     */\r\n    static isEmptyObj(strObj) {\r\n        if (strObj) {\r\n            try {\r\n                const obj = JSON.parse(strObj);\r\n                return Object.keys(obj).length === 0;\r\n            }\r\n            catch (e) { }\r\n        }\r\n        return true;\r\n    }\r\n    static startsWith(str, search) {\r\n        return str.indexOf(search) === 0;\r\n    }\r\n    static endsWith(str, search) {\r\n        return (str.length >= search.length &&\r\n            str.lastIndexOf(search) === str.length - search.length);\r\n    }\r\n    /**\r\n     * Parses string into an object.\r\n     *\r\n     * @param query\r\n     */\r\n    static queryStringToObject(query) {\r\n        const obj = {};\r\n        const params = query.split(\"&\");\r\n        const decode = (s) => decodeURIComponent(s.replace(/\\+/g, \" \"));\r\n        params.forEach((pair) => {\r\n            if (pair.trim()) {\r\n                const [key, value] = pair.split(/=(.+)/g, 2); // Split on the first occurence of the '=' character\r\n                if (key && value) {\r\n                    obj[decode(key)] = decode(value);\r\n                }\r\n            }\r\n        });\r\n        return obj;\r\n    }\r\n    /**\r\n     * Trims entries in an array.\r\n     *\r\n     * @param arr\r\n     */\r\n    static trimArrayEntries(arr) {\r\n        return arr.map((entry) => entry.trim());\r\n    }\r\n    /**\r\n     * Removes empty strings from array\r\n     * @param arr\r\n     */\r\n    static removeEmptyStringsFromArray(arr) {\r\n        return arr.filter((entry) => {\r\n            return !!entry;\r\n        });\r\n    }\r\n    /**\r\n     * Attempts to parse a string into JSON\r\n     * @param str\r\n     */\r\n    static jsonParseHelper(str) {\r\n        try {\r\n            return JSON.parse(str);\r\n        }\r\n        catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Tests if a given string matches a given pattern, with support for wildcards and queries.\r\n     * @param pattern Wildcard pattern to string match. Supports \"*\" for wildcards and \"?\" for queries\r\n     * @param input String to match against\r\n     */\r\n    static matchPattern(pattern, input) {\r\n        /**\r\n         * Wildcard support: https://stackoverflow.com/a/3117248/4888559\r\n         * Queries: replaces \"?\" in string with escaped \"\\?\" for regex test\r\n         */\r\n        // eslint-disable-next-line security/detect-non-literal-regexp\r\n        const regex = new RegExp(pattern\r\n            .replace(/\\\\/g, \"\\\\\\\\\")\r\n            .replace(/\\*/g, \"[^ ]*\")\r\n            .replace(/\\?/g, \"\\\\?\"));\r\n        return regex.test(input);\r\n    }\r\n}\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * The ScopeSet class creates a set of scopes. Scopes are case-insensitive, unique values, so the Set object in JS makes\r\n * the most sense to implement for this class. All scopes are trimmed and converted to lower case strings in intersection and union functions\r\n * to ensure uniqueness of strings.\r\n */\r\nclass ScopeSet {\r\n    constructor(inputScopes) {\r\n        // Filter empty string and null/undefined array items\r\n        const scopeArr = inputScopes\r\n            ? StringUtils.trimArrayEntries([...inputScopes])\r\n            : [];\r\n        const filteredInput = scopeArr\r\n            ? StringUtils.removeEmptyStringsFromArray(scopeArr)\r\n            : [];\r\n        // Check if scopes array has at least one member\r\n        if (!filteredInput || !filteredInput.length) {\r\n            throw createClientConfigurationError(emptyInputScopesError);\r\n        }\r\n        this.scopes = new Set(); // Iterator in constructor not supported by IE11\r\n        filteredInput.forEach((scope) => this.scopes.add(scope));\r\n    }\r\n    /**\r\n     * Factory method to create ScopeSet from space-delimited string\r\n     * @param inputScopeString\r\n     * @param appClientId\r\n     * @param scopesRequired\r\n     */\r\n    static fromString(inputScopeString) {\r\n        const scopeString = inputScopeString || Constants$1.EMPTY_STRING;\r\n        const inputScopes = scopeString.split(\" \");\r\n        return new ScopeSet(inputScopes);\r\n    }\r\n    /**\r\n     * Creates the set of scopes to search for in cache lookups\r\n     * @param inputScopeString\r\n     * @returns\r\n     */\r\n    static createSearchScopes(inputScopeString) {\r\n        // Handle empty scopes by using default OIDC scopes for cache lookup\r\n        const scopesToUse = inputScopeString && inputScopeString.length > 0\r\n            ? inputScopeString\r\n            : [...OIDC_DEFAULT_SCOPES];\r\n        const scopeSet = new ScopeSet(scopesToUse);\r\n        if (!scopeSet.containsOnlyOIDCScopes()) {\r\n            scopeSet.removeOIDCScopes();\r\n        }\r\n        else {\r\n            scopeSet.removeScope(Constants$1.OFFLINE_ACCESS_SCOPE);\r\n        }\r\n        return scopeSet;\r\n    }\r\n    /**\r\n     * Check if a given scope is present in this set of scopes.\r\n     * @param scope\r\n     */\r\n    containsScope(scope) {\r\n        const lowerCaseScopes = this.printScopesLowerCase().split(\" \");\r\n        const lowerCaseScopesSet = new ScopeSet(lowerCaseScopes);\r\n        // compare lowercase scopes\r\n        return scope\r\n            ? lowerCaseScopesSet.scopes.has(scope.toLowerCase())\r\n            : false;\r\n    }\r\n    /**\r\n     * Check if a set of scopes is present in this set of scopes.\r\n     * @param scopeSet\r\n     */\r\n    containsScopeSet(scopeSet) {\r\n        if (!scopeSet || scopeSet.scopes.size <= 0) {\r\n            return false;\r\n        }\r\n        return (this.scopes.size >= scopeSet.scopes.size &&\r\n            scopeSet.asArray().every((scope) => this.containsScope(scope)));\r\n    }\r\n    /**\r\n     * Check if set of scopes contains only the defaults\r\n     */\r\n    containsOnlyOIDCScopes() {\r\n        let defaultScopeCount = 0;\r\n        OIDC_SCOPES.forEach((defaultScope) => {\r\n            if (this.containsScope(defaultScope)) {\r\n                defaultScopeCount += 1;\r\n            }\r\n        });\r\n        return this.scopes.size === defaultScopeCount;\r\n    }\r\n    /**\r\n     * Appends single scope if passed\r\n     * @param newScope\r\n     */\r\n    appendScope(newScope) {\r\n        if (newScope) {\r\n            this.scopes.add(newScope.trim());\r\n        }\r\n    }\r\n    /**\r\n     * Appends multiple scopes if passed\r\n     * @param newScopes\r\n     */\r\n    appendScopes(newScopes) {\r\n        try {\r\n            newScopes.forEach((newScope) => this.appendScope(newScope));\r\n        }\r\n        catch (e) {\r\n            throw createClientAuthError(cannotAppendScopeSet);\r\n        }\r\n    }\r\n    /**\r\n     * Removes element from set of scopes.\r\n     * @param scope\r\n     */\r\n    removeScope(scope) {\r\n        if (!scope) {\r\n            throw createClientAuthError(cannotRemoveEmptyScope);\r\n        }\r\n        this.scopes.delete(scope.trim());\r\n    }\r\n    /**\r\n     * Removes default scopes from set of scopes\r\n     * Primarily used to prevent cache misses if the default scopes are not returned from the server\r\n     */\r\n    removeOIDCScopes() {\r\n        OIDC_SCOPES.forEach((defaultScope) => {\r\n            this.scopes.delete(defaultScope);\r\n        });\r\n    }\r\n    /**\r\n     * Combines an array of scopes with the current set of scopes.\r\n     * @param otherScopes\r\n     */\r\n    unionScopeSets(otherScopes) {\r\n        if (!otherScopes) {\r\n            throw createClientAuthError(emptyInputScopeSet);\r\n        }\r\n        const unionScopes = new Set(); // Iterator in constructor not supported in IE11\r\n        otherScopes.scopes.forEach((scope) => unionScopes.add(scope.toLowerCase()));\r\n        this.scopes.forEach((scope) => unionScopes.add(scope.toLowerCase()));\r\n        return unionScopes;\r\n    }\r\n    /**\r\n     * Check if scopes intersect between this set and another.\r\n     * @param otherScopes\r\n     */\r\n    intersectingScopeSets(otherScopes) {\r\n        if (!otherScopes) {\r\n            throw createClientAuthError(emptyInputScopeSet);\r\n        }\r\n        // Do not allow OIDC scopes to be the only intersecting scopes\r\n        if (!otherScopes.containsOnlyOIDCScopes()) {\r\n            otherScopes.removeOIDCScopes();\r\n        }\r\n        const unionScopes = this.unionScopeSets(otherScopes);\r\n        const sizeOtherScopes = otherScopes.getScopeCount();\r\n        const sizeThisScopes = this.getScopeCount();\r\n        const sizeUnionScopes = unionScopes.size;\r\n        return sizeUnionScopes < sizeThisScopes + sizeOtherScopes;\r\n    }\r\n    /**\r\n     * Returns size of set of scopes.\r\n     */\r\n    getScopeCount() {\r\n        return this.scopes.size;\r\n    }\r\n    /**\r\n     * Returns the scopes as an array of string values\r\n     */\r\n    asArray() {\r\n        const array = [];\r\n        this.scopes.forEach((val) => array.push(val));\r\n        return array;\r\n    }\r\n    /**\r\n     * Prints scopes into a space-delimited string\r\n     */\r\n    printScopes() {\r\n        if (this.scopes) {\r\n            const scopeArr = this.asArray();\r\n            return scopeArr.join(\" \");\r\n        }\r\n        return Constants$1.EMPTY_STRING;\r\n    }\r\n    /**\r\n     * Prints scopes into a space-delimited lower-case string (used for caching)\r\n     */\r\n    printScopesLowerCase() {\r\n        return this.printScopes().toLowerCase();\r\n    }\r\n}\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Returns true if tenantId matches the utid portion of homeAccountId\r\n * @param tenantId\r\n * @param homeAccountId\r\n * @returns\r\n */\r\nfunction tenantIdMatchesHomeTenant(tenantId, homeAccountId) {\r\n    return (!!tenantId &&\r\n        !!homeAccountId &&\r\n        tenantId === homeAccountId.split(\".\")[1]);\r\n}\r\n/**\r\n * Build tenant profile\r\n * @param homeAccountId - Home account identifier for this account object\r\n * @param localAccountId - Local account identifer for this account object\r\n * @param tenantId - Full tenant or organizational id that this account belongs to\r\n * @param idTokenClaims - Claims from the ID token\r\n * @returns\r\n */\r\nfunction buildTenantProfile(homeAccountId, localAccountId, tenantId, idTokenClaims) {\r\n    if (idTokenClaims) {\r\n        const { oid, sub, tid, name, tfp, acr, preferred_username, upn, login_hint, } = idTokenClaims;\r\n        /**\r\n         * Since there is no way to determine if the authority is AAD or B2C, we exhaust all the possible claims that can serve as tenant ID with the following precedence:\r\n         * tid - TenantID claim that identifies the tenant that issued the token in AAD. Expected in all AAD ID tokens, not present in B2C ID Tokens.\r\n         * tfp - Trust Framework Policy claim that identifies the policy that was used to authenticate the user. Functions as tenant for B2C scenarios.\r\n         * acr - Authentication Context Class Reference claim used only with older B2C policies. Fallback in case tfp is not present, but likely won't be present anyway.\r\n         */\r\n        const tenantId = tid || tfp || acr || \"\";\r\n        return {\r\n            tenantId: tenantId,\r\n            localAccountId: oid || sub || \"\",\r\n            name: name,\r\n            username: preferred_username || upn || \"\",\r\n            loginHint: login_hint,\r\n            isHomeTenant: tenantIdMatchesHomeTenant(tenantId, homeAccountId),\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            tenantId,\r\n            localAccountId,\r\n            username: \"\",\r\n            isHomeTenant: tenantIdMatchesHomeTenant(tenantId, homeAccountId),\r\n        };\r\n    }\r\n}\r\n/**\r\n * Replaces account info that varies by tenant profile sourced from the ID token claims passed in with the tenant-specific account info\r\n * @param baseAccountInfo\r\n * @param idTokenClaims\r\n * @returns\r\n */\r\nfunction updateAccountTenantProfileData(baseAccountInfo, tenantProfile, idTokenClaims, idTokenSecret) {\r\n    let updatedAccountInfo = baseAccountInfo;\r\n    // Tenant Profile overrides passed in account info\r\n    if (tenantProfile) {\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        const { isHomeTenant, ...tenantProfileOverride } = tenantProfile;\r\n        updatedAccountInfo = { ...baseAccountInfo, ...tenantProfileOverride };\r\n    }\r\n    // ID token claims override passed in account info and tenant profile\r\n    if (idTokenClaims) {\r\n        // Ignore isHomeTenant, loginHint, and sid which are part of tenant profile but not base account info\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        const { isHomeTenant, ...claimsSourcedTenantProfile } = buildTenantProfile(baseAccountInfo.homeAccountId, baseAccountInfo.localAccountId, baseAccountInfo.tenantId, idTokenClaims);\r\n        updatedAccountInfo = {\r\n            ...updatedAccountInfo,\r\n            ...claimsSourcedTenantProfile,\r\n            idTokenClaims: idTokenClaims,\r\n            idToken: idTokenSecret,\r\n        };\r\n        return updatedAccountInfo;\r\n    }\r\n    return updatedAccountInfo;\r\n}\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Extract token by decoding the rawToken\r\n *\r\n * @param encodedToken\r\n */\r\nfunction extractTokenClaims(encodedToken, base64Decode) {\r\n    const jswPayload = getJWSPayload(encodedToken);\r\n    // token will be decoded to get the username\r\n    try {\r\n        // base64Decode() should throw an error if there is an issue\r\n        const base64Decoded = base64Decode(jswPayload);\r\n        return JSON.parse(base64Decoded);\r\n    }\r\n    catch (err) {\r\n        throw createClientAuthError(tokenParsingError);\r\n    }\r\n}\r\n/**\r\n * decode a JWT\r\n *\r\n * @param authToken\r\n */\r\nfunction getJWSPayload(authToken) {\r\n    if (!authToken) {\r\n        throw createClientAuthError(nullOrEmptyToken);\r\n    }\r\n    const tokenPartsRegex = /^([^\\.\\s]*)\\.([^\\.\\s]+)\\.([^\\.\\s]*)$/;\r\n    const matches = tokenPartsRegex.exec(authToken);\r\n    if (!matches || matches.length < 4) {\r\n        throw createClientAuthError(tokenParsingError);\r\n    }\r\n    /**\r\n     * const crackedToken = {\r\n     *  header: matches[1],\r\n     *  JWSPayload: matches[2],\r\n     *  JWSSig: matches[3],\r\n     * };\r\n     */\r\n    return matches[2];\r\n}\r\n/**\r\n * Determine if the token's max_age has transpired\r\n */\r\nfunction checkMaxAge(authTime, maxAge) {\r\n    /*\r\n     * per https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest\r\n     * To force an immediate re-authentication: If an app requires that a user re-authenticate prior to access,\r\n     * provide a value of 0 for the max_age parameter and the AS will force a fresh login.\r\n     */\r\n    const fiveMinuteSkew = 300000; // five minutes in milliseconds\r\n    if (maxAge === 0 || Date.now() - fiveMinuteSkew > authTime + maxAge) {\r\n        throw createClientAuthError(maxAgeTranspired);\r\n    }\r\n}\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n/**\r\n * Parses hash string from given string. Returns empty string if no hash symbol is found.\r\n * @param hashString\r\n */\r\nfunction stripLeadingHashOrQuery(responseString) {\r\n    if (responseString.startsWith(\"#/\")) {\r\n        return responseString.substring(2);\r\n    }\r\n    else if (responseString.startsWith(\"#\") ||\r\n        responseString.startsWith(\"?\")) {\r\n        return responseString.substring(1);\r\n    }\r\n    return responseString;\r\n}\r\n/**\r\n * Returns URL hash as server auth code response object.\r\n */\r\nfunction getDeserializedResponse(responseString) {\r\n    // Check if given hash is empty\r\n    if (!responseString || responseString.indexOf(\"=\") < 0) {\r\n        return null;\r\n    }\r\n    try {\r\n        // Strip the # or ? symbol if present\r\n        const normalizedResponse = stripLeadingHashOrQuery(responseString);\r\n        // If # symbol was not present, above will return empty string, so give original hash value\r\n        const deserializedHash = Object.fromEntries(new URLSearchParams(normalizedResponse));\r\n        // Check for known response properties\r\n        if (deserializedHash.code ||\r\n            deserializedHash.ear_jwe ||\r\n            deserializedHash.error ||\r\n            deserializedHash.error_description ||\r\n            deserializedHash.state) {\r\n            return deserializedHash;\r\n        }\r\n    }\r\n    catch (e) {\r\n        throw createClientAuthError(hashNotDeserialized);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Utility to create a URL from the params map\r\n */\r\nfunction mapToQueryString(parameters, encodeExtraParams = true, extraQueryParameters) {\r\n    const queryParameterArray = new Array();\r\n    parameters.forEach((value, key) => {\r\n        if (!encodeExtraParams &&\r\n            extraQueryParameters &&\r\n            key in extraQueryParameters) {\r\n            queryParameterArray.push(`${key}=${value}`);\r\n        }\r\n        else {\r\n            queryParameterArray.push(`${key}=${encodeURIComponent(value)}`);\r\n        }\r\n    });\r\n    return queryParameterArray.join(\"&\");\r\n}\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Url object class which can perform various transformations on url strings.\r\n */\r\nclass UrlString {\r\n    get urlString() {\r\n        return this._urlString;\r\n    }\r\n    constructor(url) {\r\n        this._urlString = url;\r\n        if (!this._urlString) {\r\n            // Throws error if url is empty\r\n            throw createClientConfigurationError(urlEmptyError);\r\n        }\r\n        if (!url.includes(\"#\")) {\r\n            this._urlString = UrlString.canonicalizeUri(url);\r\n        }\r\n    }\r\n    /**\r\n     * Ensure urls are lower case and end with a / character.\r\n     * @param url\r\n     */\r\n    static canonicalizeUri(url) {\r\n        if (url) {\r\n            let lowerCaseUrl = url.toLowerCase();\r\n            if (StringUtils.endsWith(lowerCaseUrl, \"?\")) {\r\n                lowerCaseUrl = lowerCaseUrl.slice(0, -1);\r\n            }\r\n            else if (StringUtils.endsWith(lowerCaseUrl, \"?/\")) {\r\n                lowerCaseUrl = lowerCaseUrl.slice(0, -2);\r\n            }\r\n            if (!StringUtils.endsWith(lowerCaseUrl, \"/\")) {\r\n                lowerCaseUrl += \"/\";\r\n            }\r\n            return lowerCaseUrl;\r\n        }\r\n        return url;\r\n    }\r\n    /**\r\n     * Throws if urlString passed is not a valid authority URI string.\r\n     */\r\n    validateAsUri() {\r\n        // Attempts to parse url for uri components\r\n        let components;\r\n        try {\r\n            components = this.getUrlComponents();\r\n        }\r\n        catch (e) {\r\n            throw createClientConfigurationError(urlParseError);\r\n        }\r\n        // Throw error if URI or path segments are not parseable.\r\n        if (!components.HostNameAndPort || !components.PathSegments) {\r\n            throw createClientConfigurationError(urlParseError);\r\n        }\r\n        // Throw error if uri is insecure.\r\n        if (!components.Protocol ||\r\n            components.Protocol.toLowerCase() !== \"https:\") {\r\n            throw createClientConfigurationError(authorityUriInsecure);\r\n        }\r\n    }\r\n    /**\r\n     * Given a url and a query string return the url with provided query string appended\r\n     * @param url\r\n     * @param queryString\r\n     */\r\n    static appendQueryString(url, queryString) {\r\n        if (!queryString) {\r\n            return url;\r\n        }\r\n        return url.indexOf(\"?\") < 0\r\n            ? `${url}?${queryString}`\r\n            : `${url}&${queryString}`;\r\n    }\r\n    /**\r\n     * Returns a url with the hash removed\r\n     * @param url\r\n     */\r\n    static removeHashFromUrl(url) {\r\n        return UrlString.canonicalizeUri(url.split(\"#\")[0]);\r\n    }\r\n    /**\r\n     * Given a url like https://a:b/common/d?e=f#g, and a tenantId, returns https://a:b/tenantId/d\r\n     * @param href The url\r\n     * @param tenantId The tenant id to replace\r\n     */\r\n    replaceTenantPath(tenantId) {\r\n        const urlObject = this.getUrlComponents();\r\n        const pathArray = urlObject.PathSegments;\r\n        if (tenantId &&\r\n            pathArray.length !== 0 &&\r\n            (pathArray[0] === AADAuthorityConstants.COMMON ||\r\n                pathArray[0] === AADAuthorityConstants.ORGANIZATIONS)) {\r\n            pathArray[0] = tenantId;\r\n        }\r\n        return UrlString.constructAuthorityUriFromObject(urlObject);\r\n    }\r\n    /**\r\n     * Parses out the components from a url string.\r\n     * @returns An object with the various components. Please cache this value insted of calling this multiple times on the same url.\r\n     */\r\n    getUrlComponents() {\r\n        // https://gist.github.com/curtisz/11139b2cfcaef4a261e0\r\n        const regEx = RegExp(\"^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?(#(.*))?\");\r\n        // If url string does not match regEx, we throw an error\r\n        const match = this.urlString.match(regEx);\r\n        if (!match) {\r\n            throw createClientConfigurationError(urlParseError);\r\n        }\r\n        // Url component object\r\n        const urlComponents = {\r\n            Protocol: match[1],\r\n            HostNameAndPort: match[4],\r\n            AbsolutePath: match[5],\r\n            QueryString: match[7],\r\n        };\r\n        let pathSegments = urlComponents.AbsolutePath.split(\"/\");\r\n        pathSegments = pathSegments.filter((val) => val && val.length > 0); // remove empty elements\r\n        urlComponents.PathSegments = pathSegments;\r\n        if (urlComponents.QueryString &&\r\n            urlComponents.QueryString.endsWith(\"/\")) {\r\n            urlComponents.QueryString = urlComponents.QueryString.substring(0, urlComponents.QueryString.length - 1);\r\n        }\r\n        return urlComponents;\r\n    }\r\n    static getDomainFromUrl(url) {\r\n        const regEx = RegExp(\"^([^:/?#]+://)?([^/?#]*)\");\r\n        const match = url.match(regEx);\r\n        if (!match) {\r\n            throw createClientConfigurationError(urlParseError);\r\n        }\r\n        return match[2];\r\n    }\r\n    static getAbsoluteUrl(relativeUrl, baseUrl) {\r\n        if (relativeUrl[0] === Constants$1.FORWARD_SLASH) {\r\n            const url = new UrlString(baseUrl);\r\n            const baseComponents = url.getUrlComponents();\r\n            return (baseComponents.Protocol +\r\n                \"//\" +\r\n                baseComponents.HostNameAndPort +\r\n                relativeUrl);\r\n        }\r\n        return relativeUrl;\r\n    }\r\n    static constructAuthorityUriFromObject(urlObject) {\r\n        return new UrlString(urlObject.Protocol +\r\n            \"//\" +\r\n            urlObject.HostNameAndPort +\r\n            \"/\" +\r\n            urlObject.PathSegments.join(\"/\"));\r\n    }\r\n    /**\r\n     * Check if the hash of the URL string contains known properties\r\n     * @deprecated This API will be removed in a future version\r\n     */\r\n    static hashContainsKnownProperties(response) {\r\n        return !!getDeserializedResponse(response);\r\n    }\r\n}\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst rawMetdataJSON = {\r\n    endpointMetadata: {\r\n        \"login.microsoftonline.com\": {\r\n            token_endpoint: \"https://login.microsoftonline.com/{tenantid}/oauth2/v2.0/token\",\r\n            jwks_uri: \"https://login.microsoftonline.com/{tenantid}/discovery/v2.0/keys\",\r\n            issuer: \"https://login.microsoftonline.com/{tenantid}/v2.0\",\r\n            authorization_endpoint: \"https://login.microsoftonline.com/{tenantid}/oauth2/v2.0/authorize\",\r\n            end_session_endpoint: \"https://login.microsoftonline.com/{tenantid}/oauth2/v2.0/logout\",\r\n        },\r\n        \"login.chinacloudapi.cn\": {\r\n            token_endpoint: \"https://login.chinacloudapi.cn/{tenantid}/oauth2/v2.0/token\",\r\n            jwks_uri: \"https://login.chinacloudapi.cn/{tenantid}/discovery/v2.0/keys\",\r\n            issuer: \"https://login.partner.microsoftonline.cn/{tenantid}/v2.0\",\r\n            authorization_endpoint: \"https://login.chinacloudapi.cn/{tenantid}/oauth2/v2.0/authorize\",\r\n            end_session_endpoint: \"https://login.chinacloudapi.cn/{tenantid}/oauth2/v2.0/logout\",\r\n        },\r\n        \"login.microsoftonline.us\": {\r\n            token_endpoint: \"https://login.microsoftonline.us/{tenantid}/oauth2/v2.0/token\",\r\n            jwks_uri: \"https://login.microsoftonline.us/{tenantid}/discovery/v2.0/keys\",\r\n            issuer: \"https://login.microsoftonline.us/{tenantid}/v2.0\",\r\n            authorization_endpoint: \"https://login.microsoftonline.us/{tenantid}/oauth2/v2.0/authorize\",\r\n            end_session_endpoint: \"https://login.microsoftonline.us/{tenantid}/oauth2/v2.0/logout\",\r\n        },\r\n    },\r\n    instanceDiscoveryMetadata: {\r\n        metadata: [\r\n            {\r\n                preferred_network: \"login.microsoftonline.com\",\r\n                preferred_cache: \"login.windows.net\",\r\n                aliases: [\r\n                    \"login.microsoftonline.com\",\r\n                    \"login.windows.net\",\r\n                    \"login.microsoft.com\",\r\n                    \"sts.windows.net\",\r\n                ],\r\n            },\r\n            {\r\n                preferred_network: \"login.partner.microsoftonline.cn\",\r\n                preferred_cache: \"login.partner.microsoftonline.cn\",\r\n                aliases: [\r\n                    \"login.partner.microsoftonline.cn\",\r\n                    \"login.chinacloudapi.cn\",\r\n                ],\r\n            },\r\n            {\r\n                preferred_network: \"login.microsoftonline.de\",\r\n                preferred_cache: \"login.microsoftonline.de\",\r\n                aliases: [\"login.microsoftonline.de\"],\r\n            },\r\n            {\r\n                preferred_network: \"login.microsoftonline.us\",\r\n                preferred_cache: \"login.microsoftonline.us\",\r\n                aliases: [\r\n                    \"login.microsoftonline.us\",\r\n                    \"login.usgovcloudapi.net\",\r\n                ],\r\n            },\r\n            {\r\n                preferred_network: \"login-us.microsoftonline.com\",\r\n                preferred_cache: \"login-us.microsoftonline.com\",\r\n                aliases: [\"login-us.microsoftonline.com\"],\r\n            },\r\n        ],\r\n    },\r\n};\r\nconst EndpointMetadata = rawMetdataJSON.endpointMetadata;\r\nconst InstanceDiscoveryMetadata = rawMetdataJSON.instanceDiscoveryMetadata;\r\nconst InstanceDiscoveryMetadataAliases = new Set();\r\nInstanceDiscoveryMetadata.metadata.forEach((metadataEntry) => {\r\n    metadataEntry.aliases.forEach((alias) => {\r\n        InstanceDiscoveryMetadataAliases.add(alias);\r\n    });\r\n});\r\n/**\r\n * Attempts to get an aliases array from the static authority metadata sources based on the canonical authority host\r\n * @param staticAuthorityOptions\r\n * @param logger\r\n * @returns\r\n */\r\nfunction getAliasesFromStaticSources(staticAuthorityOptions, logger) {\r\n    let staticAliases;\r\n    const canonicalAuthority = staticAuthorityOptions.canonicalAuthority;\r\n    if (canonicalAuthority) {\r\n        const authorityHost = new UrlString(canonicalAuthority).getUrlComponents().HostNameAndPort;\r\n        staticAliases =\r\n            getAliasesFromMetadata(authorityHost, staticAuthorityOptions.cloudDiscoveryMetadata?.metadata, AuthorityMetadataSource.CONFIG, logger) ||\r\n                getAliasesFromMetadata(authorityHost, InstanceDiscoveryMetadata.metadata, AuthorityMetadataSource.HARDCODED_VALUES, logger) ||\r\n                staticAuthorityOptions.knownAuthorities;\r\n    }\r\n    return staticAliases || [];\r\n}\r\n/**\r\n * Returns aliases for from the raw cloud discovery metadata passed in\r\n * @param authorityHost\r\n * @param rawCloudDiscoveryMetadata\r\n * @returns\r\n */\r\nfunction getAliasesFromMetadata(authorityHost, cloudDiscoveryMetadata, source, logger) {\r\n    logger?.trace(`getAliasesFromMetadata called with source: ${source}`);\r\n    if (authorityHost && cloudDiscoveryMetadata) {\r\n        const metadata = getCloudDiscoveryMetadataFromNetworkResponse(cloudDiscoveryMetadata, authorityHost);\r\n        if (metadata) {\r\n            logger?.trace(`getAliasesFromMetadata: found cloud discovery metadata in ${source}, returning aliases`);\r\n            return metadata.aliases;\r\n        }\r\n        else {\r\n            logger?.trace(`getAliasesFromMetadata: did not find cloud discovery metadata in ${source}`);\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Get cloud discovery metadata for common authorities\r\n */\r\nfunction getCloudDiscoveryMetadataFromHardcodedValues(authorityHost) {\r\n    const metadata = getCloudDiscoveryMetadataFromNetworkResponse(InstanceDiscoveryMetadata.metadata, authorityHost);\r\n    return metadata;\r\n}\r\n/**\r\n * Searches instance discovery network response for the entry that contains the host in the aliases list\r\n * @param response\r\n * @param authority\r\n */\r\nfunction getCloudDiscoveryMetadataFromNetworkResponse(response, authorityHost) {\r\n    for (let i = 0; i < response.length; i++) {\r\n        const metadata = response[i];\r\n        if (metadata.aliases.includes(authorityHost)) {\r\n            return metadata;\r\n        }\r\n    }\r\n    return null;\r\n}\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst cacheQuotaExceeded = \"cache_quota_exceeded\";\r\nconst cacheErrorUnknown = \"cache_error_unknown\";\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst CacheErrorMessages = {\r\n    [cacheQuotaExceeded]: \"Exceeded cache storage capacity.\",\r\n    [cacheErrorUnknown]: \"Unexpected error occurred when using cache storage.\",\r\n};\r\n/**\r\n * Error thrown when there is an error with the cache\r\n */\r\nclass CacheError extends AuthError {\r\n    constructor(errorCode, errorMessage) {\r\n        const message = errorMessage ||\r\n            (CacheErrorMessages[errorCode]\r\n                ? CacheErrorMessages[errorCode]\r\n                : CacheErrorMessages[cacheErrorUnknown]);\r\n        super(`${errorCode}: ${message}`);\r\n        Object.setPrototypeOf(this, CacheError.prototype);\r\n        this.name = \"CacheError\";\r\n        this.errorCode = errorCode;\r\n        this.errorMessage = message;\r\n    }\r\n}\r\n/**\r\n * Helper function to wrap browser errors in a CacheError object\r\n * @param e\r\n * @returns\r\n */\r\nfunction createCacheError(e) {\r\n    if (!(e instanceof Error)) {\r\n        return new CacheError(cacheErrorUnknown);\r\n    }\r\n    if (e.name === \"QuotaExceededError\" ||\r\n        e.name === \"NS_ERROR_DOM_QUOTA_REACHED\" ||\r\n        e.message.includes(\"exceeded the quota\")) {\r\n        return new CacheError(cacheQuotaExceeded);\r\n    }\r\n    else {\r\n        return new CacheError(e.name, e.message);\r\n    }\r\n}\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Interface class which implement cache storage functions used by MSAL to perform validity checks, and store tokens.\r\n * @internal\r\n */\r\nclass CacheManager {\r\n    constructor(clientId, cryptoImpl, logger, performanceClient, staticAuthorityOptions) {\r\n        this.clientId = clientId;\r\n        this.cryptoImpl = cryptoImpl;\r\n        this.commonLogger = logger.clone(name$1, version$1);\r\n        this.staticAuthorityOptions = staticAuthorityOptions;\r\n        this.performanceClient = performanceClient;\r\n    }\r\n    /**\r\n     * Returns all the accounts in the cache that match the optional filter. If no filter is provided, all accounts are returned.\r\n     * @param accountFilter - (Optional) filter to narrow down the accounts returned\r\n     * @returns Array of AccountInfo objects in cache\r\n     */\r\n    getAllAccounts(accountFilter, correlationId) {\r\n        return this.buildTenantProfiles(this.getAccountsFilteredBy(accountFilter, correlationId), correlationId, accountFilter);\r\n    }\r\n    /**\r\n     * Gets first tenanted AccountInfo object found based on provided filters\r\n     */\r\n    getAccountInfoFilteredBy(accountFilter, correlationId) {\r\n        if (Object.keys(accountFilter).length === 0 ||\r\n            Object.values(accountFilter).every((value) => !value)) {\r\n            this.commonLogger.warning(\"getAccountInfoFilteredBy: Account filter is empty or invalid, returning null\");\r\n            return null;\r\n        }\r\n        const allAccounts = this.getAllAccounts(accountFilter, correlationId);\r\n        if (allAccounts.length > 1) {\r\n            // If one or more accounts are found, prioritize accounts that have an ID token\r\n            const sortedAccounts = allAccounts.sort((account) => {\r\n                return account.idTokenClaims ? -1 : 1;\r\n            });\r\n            return sortedAccounts[0];\r\n        }\r\n        else if (allAccounts.length === 1) {\r\n            // If only one account is found, return it regardless of whether a matching ID token was found\r\n            return allAccounts[0];\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Returns a single matching\r\n     * @param accountFilter\r\n     * @returns\r\n     */\r\n    getBaseAccountInfo(accountFilter, correlationId) {\r\n        const accountEntities = this.getAccountsFilteredBy(accountFilter, correlationId);\r\n        if (accountEntities.length > 0) {\r\n            return accountEntities[0].getAccountInfo();\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Matches filtered account entities with cached ID tokens that match the tenant profile-specific account filters\r\n     * and builds the account info objects from the matching ID token's claims\r\n     * @param cachedAccounts\r\n     * @param accountFilter\r\n     * @returns Array of AccountInfo objects that match account and tenant profile filters\r\n     */\r\n    buildTenantProfiles(cachedAccounts, correlationId, accountFilter) {\r\n        return cachedAccounts.flatMap((accountEntity) => {\r\n            return this.getTenantProfilesFromAccountEntity(accountEntity, correlationId, accountFilter?.tenantId, accountFilter);\r\n        });\r\n    }\r\n    getTenantedAccountInfoByFilter(accountInfo, tokenKeys, tenantProfile, correlationId, tenantProfileFilter) {\r\n        let tenantedAccountInfo = null;\r\n        let idTokenClaims;\r\n        if (tenantProfileFilter) {\r\n            if (!this.tenantProfileMatchesFilter(tenantProfile, tenantProfileFilter)) {\r\n                return null;\r\n            }\r\n        }\r\n        const idToken = this.getIdToken(accountInfo, correlationId, tokenKeys, tenantProfile.tenantId);\r\n        if (idToken) {\r\n            idTokenClaims = extractTokenClaims(idToken.secret, this.cryptoImpl.base64Decode);\r\n            if (!this.idTokenClaimsMatchTenantProfileFilter(idTokenClaims, tenantProfileFilter)) {\r\n                // ID token sourced claims don't match so this tenant profile is not a match\r\n                return null;\r\n            }\r\n        }\r\n        // Expand tenant profile into account info based on matching tenant profile and if available matching ID token claims\r\n        tenantedAccountInfo = updateAccountTenantProfileData(accountInfo, tenantProfile, idTokenClaims, idToken?.secret);\r\n        return tenantedAccountInfo;\r\n    }\r\n    getTenantProfilesFromAccountEntity(accountEntity, correlationId, targetTenantId, tenantProfileFilter) {\r\n        const accountInfo = accountEntity.getAccountInfo();\r\n        let searchTenantProfiles = accountInfo.tenantProfiles || new Map();\r\n        const tokenKeys = this.getTokenKeys();\r\n        // If a tenant ID was provided, only return the tenant profile for that tenant ID if it exists\r\n        if (targetTenantId) {\r\n            const tenantProfile = searchTenantProfiles.get(targetTenantId);\r\n            if (tenantProfile) {\r\n                // Reduce search field to just this tenant profile\r\n                searchTenantProfiles = new Map([\r\n                    [targetTenantId, tenantProfile],\r\n                ]);\r\n            }\r\n            else {\r\n                // No tenant profile for search tenant ID, return empty array\r\n                return [];\r\n            }\r\n        }\r\n        const matchingTenantProfiles = [];\r\n        searchTenantProfiles.forEach((tenantProfile) => {\r\n            const tenantedAccountInfo = this.getTenantedAccountInfoByFilter(accountInfo, tokenKeys, tenantProfile, correlationId, tenantProfileFilter);\r\n            if (tenantedAccountInfo) {\r\n                matchingTenantProfiles.push(tenantedAccountInfo);\r\n            }\r\n        });\r\n        return matchingTenantProfiles;\r\n    }\r\n    tenantProfileMatchesFilter(tenantProfile, tenantProfileFilter) {\r\n        if (!!tenantProfileFilter.localAccountId &&\r\n            !this.matchLocalAccountIdFromTenantProfile(tenantProfile, tenantProfileFilter.localAccountId)) {\r\n            return false;\r\n        }\r\n        if (!!tenantProfileFilter.name &&\r\n            !(tenantProfile.name === tenantProfileFilter.name)) {\r\n            return false;\r\n        }\r\n        if (tenantProfileFilter.isHomeTenant !== undefined &&\r\n            !(tenantProfile.isHomeTenant === tenantProfileFilter.isHomeTenant)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    idTokenClaimsMatchTenantProfileFilter(idTokenClaims, tenantProfileFilter) {\r\n        // Tenant Profile filtering\r\n        if (tenantProfileFilter) {\r\n            if (!!tenantProfileFilter.localAccountId &&\r\n                !this.matchLocalAccountIdFromTokenClaims(idTokenClaims, tenantProfileFilter.localAccountId)) {\r\n                return false;\r\n            }\r\n            if (!!tenantProfileFilter.loginHint &&\r\n                !this.matchLoginHintFromTokenClaims(idTokenClaims, tenantProfileFilter.loginHint)) {\r\n                return false;\r\n            }\r\n            if (!!tenantProfileFilter.username &&\r\n                !this.matchUsername(idTokenClaims.preferred_username, tenantProfileFilter.username)) {\r\n                return false;\r\n            }\r\n            if (!!tenantProfileFilter.name &&\r\n                !this.matchName(idTokenClaims, tenantProfileFilter.name)) {\r\n                return false;\r\n            }\r\n            if (!!tenantProfileFilter.sid &&\r\n                !this.matchSid(idTokenClaims, tenantProfileFilter.sid)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * saves a cache record\r\n     * @param cacheRecord {CacheRecord}\r\n     * @param storeInCache {?StoreInCache}\r\n     * @param correlationId {?string} correlation id\r\n     */\r\n    async saveCacheRecord(cacheRecord, correlationId, storeInCache) {\r\n        if (!cacheRecord) {\r\n            throw createClientAuthError(invalidCacheRecord);\r\n        }\r\n        try {\r\n            if (!!cacheRecord.account) {\r\n                await this.setAccount(cacheRecord.account, correlationId);\r\n            }\r\n            if (!!cacheRecord.idToken && storeInCache?.idToken !== false) {\r\n                await this.setIdTokenCredential(cacheRecord.idToken, correlationId);\r\n            }\r\n            if (!!cacheRecord.accessToken &&\r\n                storeInCache?.accessToken !== false) {\r\n                await this.saveAccessToken(cacheRecord.accessToken, correlationId);\r\n            }\r\n            if (!!cacheRecord.refreshToken &&\r\n                storeInCache?.refreshToken !== false) {\r\n                await this.setRefreshTokenCredential(cacheRecord.refreshToken, correlationId);\r\n            }\r\n            if (!!cacheRecord.appMetadata) {\r\n                this.setAppMetadata(cacheRecord.appMetadata, correlationId);\r\n            }\r\n        }\r\n        catch (e) {\r\n            this.commonLogger?.error(`CacheManager.saveCacheRecord: failed`);\r\n            if (e instanceof AuthError) {\r\n                throw e;\r\n            }\r\n            else {\r\n                throw createCacheError(e);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * saves access token credential\r\n     * @param credential\r\n     */\r\n    async saveAccessToken(credential, correlationId) {\r\n        const accessTokenFilter = {\r\n            clientId: credential.clientId,\r\n            credentialType: credential.credentialType,\r\n            environment: credential.environment,\r\n            homeAccountId: credential.homeAccountId,\r\n            realm: credential.realm,\r\n            tokenType: credential.tokenType,\r\n            requestedClaimsHash: credential.requestedClaimsHash,\r\n        };\r\n        const tokenKeys = this.getTokenKeys();\r\n        const currentScopes = ScopeSet.fromString(credential.target);\r\n        tokenKeys.accessToken.forEach((key) => {\r\n            if (!this.accessTokenKeyMatchesFilter(key, accessTokenFilter, false)) {\r\n                return;\r\n            }\r\n            const tokenEntity = this.getAccessTokenCredential(key, correlationId);\r\n            if (tokenEntity &&\r\n                this.credentialMatchesFilter(tokenEntity, accessTokenFilter)) {\r\n                const tokenScopeSet = ScopeSet.fromString(tokenEntity.target);\r\n                if (tokenScopeSet.intersectingScopeSets(currentScopes)) {\r\n                    this.removeAccessToken(key, correlationId);\r\n                }\r\n            }\r\n        });\r\n        await this.setAccessTokenCredential(credential, correlationId);\r\n    }\r\n    /**\r\n     * Retrieve account entities matching all provided tenant-agnostic filters; if no filter is set, get all account entities in the cache\r\n     * Not checking for casing as keys are all generated in lower case, remember to convert to lower case if object properties are compared\r\n     * @param accountFilter - An object containing Account properties to filter by\r\n     */\r\n    getAccountsFilteredBy(accountFilter, correlationId) {\r\n        const allAccountKeys = this.getAccountKeys();\r\n        const matchingAccounts = [];\r\n        allAccountKeys.forEach((cacheKey) => {\r\n            const entity = this.getAccount(cacheKey, correlationId);\r\n            // Match base account fields\r\n            if (!entity) {\r\n                return;\r\n            }\r\n            if (!!accountFilter.homeAccountId &&\r\n                !this.matchHomeAccountId(entity, accountFilter.homeAccountId)) {\r\n                return;\r\n            }\r\n            if (!!accountFilter.username &&\r\n                !this.matchUsername(entity.username, accountFilter.username)) {\r\n                return;\r\n            }\r\n            if (!!accountFilter.environment &&\r\n                !this.matchEnvironment(entity, accountFilter.environment)) {\r\n                return;\r\n            }\r\n            if (!!accountFilter.realm &&\r\n                !this.matchRealm(entity, accountFilter.realm)) {\r\n                return;\r\n            }\r\n            if (!!accountFilter.nativeAccountId &&\r\n                !this.matchNativeAccountId(entity, accountFilter.nativeAccountId)) {\r\n                return;\r\n            }\r\n            if (!!accountFilter.authorityType &&\r\n                !this.matchAuthorityType(entity, accountFilter.authorityType)) {\r\n                return;\r\n            }\r\n            // If at least one tenant profile matches the tenant profile filter, add the account to the list of matching accounts\r\n            const tenantProfileFilter = {\r\n                localAccountId: accountFilter?.localAccountId,\r\n                name: accountFilter?.name,\r\n            };\r\n            const matchingTenantProfiles = entity.tenantProfiles?.filter((tenantProfile) => {\r\n                return this.tenantProfileMatchesFilter(tenantProfile, tenantProfileFilter);\r\n            });\r\n            if (matchingTenantProfiles && matchingTenantProfiles.length === 0) {\r\n                // No tenant profile for this account matches filter, don't add to list of matching accounts\r\n                return;\r\n            }\r\n            matchingAccounts.push(entity);\r\n        });\r\n        return matchingAccounts;\r\n    }\r\n    /**\r\n     * Returns whether or not the given credential entity matches the filter\r\n     * @param entity\r\n     * @param filter\r\n     * @returns\r\n     */\r\n    credentialMatchesFilter(entity, filter) {\r\n        if (!!filter.clientId && !this.matchClientId(entity, filter.clientId)) {\r\n            return false;\r\n        }\r\n        if (!!filter.userAssertionHash &&\r\n            !this.matchUserAssertionHash(entity, filter.userAssertionHash)) {\r\n            return false;\r\n        }\r\n        /*\r\n         * homeAccountId can be undefined, and we want to filter out cached items that have a homeAccountId of \"\"\r\n         * because we don't want a client_credential request to return a cached token that has a homeAccountId\r\n         */\r\n        if (typeof filter.homeAccountId === \"string\" &&\r\n            !this.matchHomeAccountId(entity, filter.homeAccountId)) {\r\n            return false;\r\n        }\r\n        if (!!filter.environment &&\r\n            !this.matchEnvironment(entity, filter.environment)) {\r\n            return false;\r\n        }\r\n        if (!!filter.realm && !this.matchRealm(entity, filter.realm)) {\r\n            return false;\r\n        }\r\n        if (!!filter.credentialType &&\r\n            !this.matchCredentialType(entity, filter.credentialType)) {\r\n            return false;\r\n        }\r\n        if (!!filter.familyId && !this.matchFamilyId(entity, filter.familyId)) {\r\n            return false;\r\n        }\r\n        /*\r\n         * idTokens do not have \"target\", target specific refreshTokens do exist for some types of authentication\r\n         * Resource specific refresh tokens case will be added when the support is deemed necessary\r\n         */\r\n        if (!!filter.target && !this.matchTarget(entity, filter.target)) {\r\n            return false;\r\n        }\r\n        // If request OR cached entity has requested Claims Hash, check if they match\r\n        if (filter.requestedClaimsHash || entity.requestedClaimsHash) {\r\n            // Don't match if either is undefined or they are different\r\n            if (entity.requestedClaimsHash !== filter.requestedClaimsHash) {\r\n                return false;\r\n            }\r\n        }\r\n        // Access Token with Auth Scheme specific matching\r\n        if (entity.credentialType ===\r\n            CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME) {\r\n            if (!!filter.tokenType &&\r\n                !this.matchTokenType(entity, filter.tokenType)) {\r\n                return false;\r\n            }\r\n            // KeyId (sshKid) in request must match cached SSH certificate keyId because SSH cert is bound to a specific key\r\n            if (filter.tokenType === AuthenticationScheme.SSH) {\r\n                if (filter.keyId && !this.matchKeyId(entity, filter.keyId)) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * retrieve appMetadata matching all provided filters; if no filter is set, get all appMetadata\r\n     * @param filter\r\n     */\r\n    getAppMetadataFilteredBy(filter) {\r\n        const allCacheKeys = this.getKeys();\r\n        const matchingAppMetadata = {};\r\n        allCacheKeys.forEach((cacheKey) => {\r\n            // don't parse any non-appMetadata type cache entities\r\n            if (!this.isAppMetadata(cacheKey)) {\r\n                return;\r\n            }\r\n            // Attempt retrieval\r\n            const entity = this.getAppMetadata(cacheKey);\r\n            if (!entity) {\r\n                return;\r\n            }\r\n            if (!!filter.environment &&\r\n                !this.matchEnvironment(entity, filter.environment)) {\r\n                return;\r\n            }\r\n            if (!!filter.clientId &&\r\n                !this.matchClientId(entity, filter.clientId)) {\r\n                return;\r\n            }\r\n            matchingAppMetadata[cacheKey] = entity;\r\n        });\r\n        return matchingAppMetadata;\r\n    }\r\n    /**\r\n     * retrieve authorityMetadata that contains a matching alias\r\n     * @param filter\r\n     */\r\n    getAuthorityMetadataByAlias(host) {\r\n        const allCacheKeys = this.getAuthorityMetadataKeys();\r\n        let matchedEntity = null;\r\n        allCacheKeys.forEach((cacheKey) => {\r\n            // don't parse any non-authorityMetadata type cache entities\r\n            if (!this.isAuthorityMetadata(cacheKey) ||\r\n                cacheKey.indexOf(this.clientId) === -1) {\r\n                return;\r\n            }\r\n            // Attempt retrieval\r\n            const entity = this.getAuthorityMetadata(cacheKey);\r\n            if (!entity) {\r\n                return;\r\n            }\r\n            if (entity.aliases.indexOf(host) === -1) {\r\n                return;\r\n            }\r\n            matchedEntity = entity;\r\n        });\r\n        return matchedEntity;\r\n    }\r\n    /**\r\n     * Removes all accounts and related tokens from cache.\r\n     */\r\n    removeAllAccounts(correlationId) {\r\n        const accounts = this.getAllAccounts({}, correlationId);\r\n        accounts.forEach((account) => {\r\n            this.removeAccount(account, correlationId);\r\n        });\r\n    }\r\n    /**\r\n     * Removes the account and related tokens for a given account key\r\n     * @param account\r\n     */\r\n    removeAccount(account, correlationId) {\r\n        this.removeAccountContext(account, correlationId);\r\n        const accountKeys = this.getAccountKeys();\r\n        const keyFilter = (key) => {\r\n            return (key.includes(account.homeAccountId) &&\r\n                key.includes(account.environment));\r\n        };\r\n        accountKeys.filter(keyFilter).forEach((key) => {\r\n            this.removeItem(key, correlationId);\r\n            this.performanceClient.incrementFields({ accountsRemoved: 1 }, correlationId);\r\n        });\r\n    }\r\n    /**\r\n     * Removes credentials associated with the provided account\r\n     * @param account\r\n     */\r\n    removeAccountContext(account, correlationId) {\r\n        const allTokenKeys = this.getTokenKeys();\r\n        const keyFilter = (key) => {\r\n            return (key.includes(account.homeAccountId) &&\r\n                key.includes(account.environment));\r\n        };\r\n        allTokenKeys.idToken.filter(keyFilter).forEach((key) => {\r\n            this.removeIdToken(key, correlationId);\r\n        });\r\n        allTokenKeys.accessToken.filter(keyFilter).forEach((key) => {\r\n            this.removeAccessToken(key, correlationId);\r\n        });\r\n        allTokenKeys.refreshToken.filter(keyFilter).forEach((key) => {\r\n            this.removeRefreshToken(key, correlationId);\r\n        });\r\n    }\r\n    /**\r\n     * Removes accessToken from the cache\r\n     * @param key\r\n     * @param correlationId\r\n     */\r\n    removeAccessToken(key, correlationId) {\r\n        const credential = this.getAccessTokenCredential(key, correlationId);\r\n        this.removeItem(key, correlationId);\r\n        this.performanceClient.incrementFields({ accessTokensRemoved: 1 }, correlationId);\r\n        if (!credential ||\r\n            credential.credentialType.toLowerCase() !==\r\n                CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME.toLowerCase() ||\r\n            credential.tokenType !== AuthenticationScheme.POP) {\r\n            // If the credential is not a PoP token, we can return\r\n            return;\r\n        }\r\n        // Remove Token Binding Key from key store for PoP Tokens Credentials\r\n        const kid = credential.keyId;\r\n        if (kid) {\r\n            void this.cryptoImpl.removeTokenBindingKey(kid).catch(() => {\r\n                this.commonLogger.error(`Failed to remove token binding key ${kid}`, correlationId);\r\n                this.performanceClient?.incrementFields({ removeTokenBindingKeyFailure: 1 }, correlationId);\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Removes all app metadata objects from cache.\r\n     */\r\n    removeAppMetadata(correlationId) {\r\n        const allCacheKeys = this.getKeys();\r\n        allCacheKeys.forEach((cacheKey) => {\r\n            if (this.isAppMetadata(cacheKey)) {\r\n                this.removeItem(cacheKey, correlationId);\r\n            }\r\n        });\r\n        return true;\r\n    }\r\n    /**\r\n     * Retrieve IdTokenEntity from cache\r\n     * @param account {AccountInfo}\r\n     * @param tokenKeys {?TokenKeys}\r\n     * @param targetRealm {?string}\r\n     * @param performanceClient {?IPerformanceClient}\r\n     * @param correlationId {?string}\r\n     */\r\n    getIdToken(account, correlationId, tokenKeys, targetRealm, performanceClient) {\r\n        this.commonLogger.trace(\"CacheManager - getIdToken called\");\r\n        const idTokenFilter = {\r\n            homeAccountId: account.homeAccountId,\r\n            environment: account.environment,\r\n            credentialType: CredentialType.ID_TOKEN,\r\n            clientId: this.clientId,\r\n            realm: targetRealm,\r\n        };\r\n        const idTokenMap = this.getIdTokensByFilter(idTokenFilter, correlationId, tokenKeys);\r\n        const numIdTokens = idTokenMap.size;\r\n        if (numIdTokens < 1) {\r\n            this.commonLogger.info(\"CacheManager:getIdToken - No token found\");\r\n            return null;\r\n        }\r\n        else if (numIdTokens > 1) {\r\n            let tokensToBeRemoved = idTokenMap;\r\n            // Multiple tenant profiles and no tenant specified, pick home account\r\n            if (!targetRealm) {\r\n                const homeIdTokenMap = new Map();\r\n                idTokenMap.forEach((idToken, key) => {\r\n                    if (idToken.realm === account.tenantId) {\r\n                        homeIdTokenMap.set(key, idToken);\r\n                    }\r\n                });\r\n                const numHomeIdTokens = homeIdTokenMap.size;\r\n                if (numHomeIdTokens < 1) {\r\n                    this.commonLogger.info(\"CacheManager:getIdToken - Multiple ID tokens found for account but none match account entity tenant id, returning first result\");\r\n                    return idTokenMap.values().next().value;\r\n                }\r\n                else if (numHomeIdTokens === 1) {\r\n                    this.commonLogger.info(\"CacheManager:getIdToken - Multiple ID tokens found for account, defaulting to home tenant profile\");\r\n                    return homeIdTokenMap.values().next().value;\r\n                }\r\n                else {\r\n                    // Multiple ID tokens for home tenant profile, remove all and return null\r\n                    tokensToBeRemoved = homeIdTokenMap;\r\n                }\r\n            }\r\n            // Multiple tokens for a single tenant profile, remove all and return null\r\n            this.commonLogger.info(\"CacheManager:getIdToken - Multiple matching ID tokens found, clearing them\");\r\n            tokensToBeRemoved.forEach((idToken, key) => {\r\n                this.removeIdToken(key, correlationId);\r\n            });\r\n            if (performanceClient && correlationId) {\r\n                performanceClient.addFields({ multiMatchedID: idTokenMap.size }, correlationId);\r\n            }\r\n            return null;\r\n        }\r\n        this.commonLogger.info(\"CacheManager:getIdToken - Returning ID token\");\r\n        return idTokenMap.values().next().value;\r\n    }\r\n    /**\r\n     * Gets all idTokens matching the given filter\r\n     * @param filter\r\n     * @returns\r\n     */\r\n    getIdTokensByFilter(filter, correlationId, tokenKeys) {\r\n        const idTokenKeys = (tokenKeys && tokenKeys.idToken) || this.getTokenKeys().idToken;\r\n        const idTokens = new Map();\r\n        idTokenKeys.forEach((key) => {\r\n            if (!this.idTokenKeyMatchesFilter(key, {\r\n                clientId: this.clientId,\r\n                ...filter,\r\n            })) {\r\n                return;\r\n            }\r\n            const idToken = this.getIdTokenCredential(key, correlationId);\r\n            if (idToken && this.credentialMatchesFilter(idToken, filter)) {\r\n                idTokens.set(key, idToken);\r\n            }\r\n        });\r\n        return idTokens;\r\n    }\r\n    /**\r\n     * Validate the cache key against filter before retrieving and parsing cache value\r\n     * @param key\r\n     * @param filter\r\n     * @returns\r\n     */\r\n    idTokenKeyMatchesFilter(inputKey, filter) {\r\n        const key = inputKey.toLowerCase();\r\n        if (filter.clientId &&\r\n            key.indexOf(filter.clientId.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n        if (filter.homeAccountId &&\r\n            key.indexOf(filter.homeAccountId.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * Removes idToken from the cache\r\n     * @param key\r\n     */\r\n    removeIdToken(key, correlationId) {\r\n        this.removeItem(key, correlationId);\r\n    }\r\n    /**\r\n     * Removes refresh token from the cache\r\n     * @param key\r\n     */\r\n    removeRefreshToken(key, correlationId) {\r\n        this.removeItem(key, correlationId);\r\n    }\r\n    /**\r\n     * Retrieve AccessTokenEntity from cache\r\n     * @param account {AccountInfo}\r\n     * @param request {BaseAuthRequest}\r\n     * @param correlationId {?string}\r\n     * @param tokenKeys {?TokenKeys}\r\n     * @param performanceClient {?IPerformanceClient}\r\n     */\r\n    getAccessToken(account, request, tokenKeys, targetRealm) {\r\n        const correlationId = request.correlationId;\r\n        this.commonLogger.trace(\"CacheManager - getAccessToken called\", correlationId);\r\n        const scopes = ScopeSet.createSearchScopes(request.scopes);\r\n        const authScheme = request.authenticationScheme || AuthenticationScheme.BEARER;\r\n        /*\r\n         * Distinguish between Bearer and PoP/SSH token cache types\r\n         * Cast to lowercase to handle \"bearer\" from ADFS\r\n         */\r\n        const credentialType = authScheme.toLowerCase() !==\r\n                AuthenticationScheme.BEARER.toLowerCase()\r\n            ? CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME\r\n            : CredentialType.ACCESS_TOKEN;\r\n        const accessTokenFilter = {\r\n            homeAccountId: account.homeAccountId,\r\n            environment: account.environment,\r\n            credentialType: credentialType,\r\n            clientId: this.clientId,\r\n            realm: targetRealm || account.tenantId,\r\n            target: scopes,\r\n            tokenType: authScheme,\r\n            keyId: request.sshKid,\r\n            requestedClaimsHash: request.requestedClaimsHash,\r\n        };\r\n        const accessTokenKeys = (tokenKeys && tokenKeys.accessToken) ||\r\n            this.getTokenKeys().accessToken;\r\n        const accessTokens = [];\r\n        accessTokenKeys.forEach((key) => {\r\n            // Validate key\r\n            if (this.accessTokenKeyMatchesFilter(key, accessTokenFilter, true)) {\r\n                const accessToken = this.getAccessTokenCredential(key, correlationId);\r\n                // Validate value\r\n                if (accessToken &&\r\n                    this.credentialMatchesFilter(accessToken, accessTokenFilter)) {\r\n                    accessTokens.push(accessToken);\r\n                }\r\n            }\r\n        });\r\n        const numAccessTokens = accessTokens.length;\r\n        if (numAccessTokens < 1) {\r\n            this.commonLogger.info(\"CacheManager:getAccessToken - No token found\", correlationId);\r\n            return null;\r\n        }\r\n        else if (numAccessTokens > 1) {\r\n            this.commonLogger.info(\"CacheManager:getAccessToken - Multiple access tokens found, clearing them\", correlationId);\r\n            accessTokens.forEach((accessToken) => {\r\n                this.removeAccessToken(this.generateCredentialKey(accessToken), correlationId);\r\n            });\r\n            this.performanceClient.addFields({ multiMatchedAT: accessTokens.length }, correlationId);\r\n            return null;\r\n        }\r\n        this.commonLogger.info(\"CacheManager:getAccessToken - Returning access token\", correlationId);\r\n        return accessTokens[0];\r\n    }\r\n    /**\r\n     * Validate the cache key against filter before retrieving and parsing cache value\r\n     * @param key\r\n     * @param filter\r\n     * @param keyMustContainAllScopes\r\n     * @returns\r\n     */\r\n    accessTokenKeyMatchesFilter(inputKey, filter, keyMustContainAllScopes) {\r\n        const key = inputKey.toLowerCase();\r\n        if (filter.clientId &&\r\n            key.indexOf(filter.clientId.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n        if (filter.homeAccountId &&\r\n            key.indexOf(filter.homeAccountId.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n        if (filter.realm && key.indexOf(filter.realm.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n        if (filter.requestedClaimsHash &&\r\n            key.indexOf(filter.requestedClaimsHash.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n        if (filter.target) {\r\n            const scopes = filter.target.asArray();\r\n            for (let i = 0; i < scopes.length; i++) {\r\n                if (keyMustContainAllScopes &&\r\n                    !key.includes(scopes[i].toLowerCase())) {\r\n                    // When performing a cache lookup a missing scope would be a cache miss\r\n                    return false;\r\n                }\r\n                else if (!keyMustContainAllScopes &&\r\n                    key.includes(scopes[i].toLowerCase())) {\r\n                    // When performing a cache write, any token with a subset of requested scopes should be replaced\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * Gets all access tokens matching the filter\r\n     * @param filter\r\n     * @returns\r\n     */\r\n    getAccessTokensByFilter(filter, correlationId) {\r\n        const tokenKeys = this.getTokenKeys();\r\n        const accessTokens = [];\r\n        tokenKeys.accessToken.forEach((key) => {\r\n            if (!this.accessTokenKeyMatchesFilter(key, filter, true)) {\r\n                return;\r\n            }\r\n            const accessToken = this.getAccessTokenCredential(key, correlationId);\r\n            if (accessToken &&\r\n                this.credentialMatchesFilter(accessToken, filter)) {\r\n                accessTokens.push(accessToken);\r\n            }\r\n        });\r\n        return accessTokens;\r\n    }\r\n    /**\r\n     * Helper to retrieve the appropriate refresh token from cache\r\n     * @param account {AccountInfo}\r\n     * @param familyRT {boolean}\r\n     * @param correlationId {?string}\r\n     * @param tokenKeys {?TokenKeys}\r\n     * @param performanceClient {?IPerformanceClient}\r\n     */\r\n    getRefreshToken(account, familyRT, correlationId, tokenKeys, performanceClient) {\r\n        this.commonLogger.trace(\"CacheManager - getRefreshToken called\");\r\n        const id = familyRT ? THE_FAMILY_ID : undefined;\r\n        const refreshTokenFilter = {\r\n            homeAccountId: account.homeAccountId,\r\n            environment: account.environment,\r\n            credentialType: CredentialType.REFRESH_TOKEN,\r\n            clientId: this.clientId,\r\n            familyId: id,\r\n        };\r\n        const refreshTokenKeys = (tokenKeys && tokenKeys.refreshToken) ||\r\n            this.getTokenKeys().refreshToken;\r\n        const refreshTokens = [];\r\n        refreshTokenKeys.forEach((key) => {\r\n            // Validate key\r\n            if (this.refreshTokenKeyMatchesFilter(key, refreshTokenFilter)) {\r\n                const refreshToken = this.getRefreshTokenCredential(key, correlationId);\r\n                // Validate value\r\n                if (refreshToken &&\r\n                    this.credentialMatchesFilter(refreshToken, refreshTokenFilter)) {\r\n                    refreshTokens.push(refreshToken);\r\n                }\r\n            }\r\n        });\r\n        const numRefreshTokens = refreshTokens.length;\r\n        if (numRefreshTokens < 1) {\r\n            this.commonLogger.info(\"CacheManager:getRefreshToken - No refresh token found.\");\r\n            return null;\r\n        }\r\n        // address the else case after remove functions address environment aliases\r\n        if (numRefreshTokens > 1 && performanceClient && correlationId) {\r\n            performanceClient.addFields({ multiMatchedRT: numRefreshTokens }, correlationId);\r\n        }\r\n        this.commonLogger.info(\"CacheManager:getRefreshToken - returning refresh token\");\r\n        return refreshTokens[0];\r\n    }\r\n    /**\r\n     * Validate the cache key against filter before retrieving and parsing cache value\r\n     * @param key\r\n     * @param filter\r\n     */\r\n    refreshTokenKeyMatchesFilter(inputKey, filter) {\r\n        const key = inputKey.toLowerCase();\r\n        if (filter.familyId &&\r\n            key.indexOf(filter.familyId.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n        // If familyId is used, clientId is not in the key\r\n        if (!filter.familyId &&\r\n            filter.clientId &&\r\n            key.indexOf(filter.clientId.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n        if (filter.homeAccountId &&\r\n            key.indexOf(filter.homeAccountId.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * Retrieve AppMetadataEntity from cache\r\n     */\r\n    readAppMetadataFromCache(environment) {\r\n        const appMetadataFilter = {\r\n            environment,\r\n            clientId: this.clientId,\r\n        };\r\n        const appMetadata = this.getAppMetadataFilteredBy(appMetadataFilter);\r\n        const appMetadataEntries = Object.keys(appMetadata).map((key) => appMetadata[key]);\r\n        const numAppMetadata = appMetadataEntries.length;\r\n        if (numAppMetadata < 1) {\r\n            return null;\r\n        }\r\n        else if (numAppMetadata > 1) {\r\n            throw createClientAuthError(multipleMatchingAppMetadata);\r\n        }\r\n        return appMetadataEntries[0];\r\n    }\r\n    /**\r\n     * Return the family_id value associated  with FOCI\r\n     * @param environment\r\n     * @param clientId\r\n     */\r\n    isAppMetadataFOCI(environment) {\r\n        const appMetadata = this.readAppMetadataFromCache(environment);\r\n        return !!(appMetadata && appMetadata.familyId === THE_FAMILY_ID);\r\n    }\r\n    /**\r\n     * helper to match account ids\r\n     * @param value\r\n     * @param homeAccountId\r\n     */\r\n    matchHomeAccountId(entity, homeAccountId) {\r\n        return !!(typeof entity.homeAccountId === \"string\" &&\r\n            homeAccountId === entity.homeAccountId);\r\n    }\r\n    /**\r\n     * helper to match account ids\r\n     * @param entity\r\n     * @param localAccountId\r\n     * @returns\r\n     */\r\n    matchLocalAccountIdFromTokenClaims(tokenClaims, localAccountId) {\r\n        const idTokenLocalAccountId = tokenClaims.oid || tokenClaims.sub;\r\n        return localAccountId === idTokenLocalAccountId;\r\n    }\r\n    matchLocalAccountIdFromTenantProfile(tenantProfile, localAccountId) {\r\n        return tenantProfile.localAccountId === localAccountId;\r\n    }\r\n    /**\r\n     * helper to match names\r\n     * @param entity\r\n     * @param name\r\n     * @returns true if the downcased name properties are present and match in the filter and the entity\r\n     */\r\n    matchName(claims, name) {\r\n        return !!(name.toLowerCase() === claims.name?.toLowerCase());\r\n    }\r\n    /**\r\n     * helper to match usernames\r\n     * @param entity\r\n     * @param username\r\n     * @returns\r\n     */\r\n    matchUsername(cachedUsername, filterUsername) {\r\n        return !!(cachedUsername &&\r\n            typeof cachedUsername === \"string\" &&\r\n            filterUsername?.toLowerCase() === cachedUsername.toLowerCase());\r\n    }\r\n    /**\r\n     * helper to match assertion\r\n     * @param value\r\n     * @param oboAssertion\r\n     */\r\n    matchUserAssertionHash(entity, userAssertionHash) {\r\n        return !!(entity.userAssertionHash &&\r\n            userAssertionHash === entity.userAssertionHash);\r\n    }\r\n    /**\r\n     * helper to match environment\r\n     * @param value\r\n     * @param environment\r\n     */\r\n    matchEnvironment(entity, environment) {\r\n        // Check static authority options first for cases where authority metadata has not been resolved and cached yet\r\n        if (this.staticAuthorityOptions) {\r\n            const staticAliases = getAliasesFromStaticSources(this.staticAuthorityOptions, this.commonLogger);\r\n            if (staticAliases.includes(environment) &&\r\n                staticAliases.includes(entity.environment)) {\r\n                return true;\r\n            }\r\n        }\r\n        // Query metadata cache if no static authority configuration has aliases that match enviroment\r\n        const cloudMetadata = this.getAuthorityMetadataByAlias(environment);\r\n        if (cloudMetadata &&\r\n            cloudMetadata.aliases.indexOf(entity.environment) > -1) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * helper to match credential type\r\n     * @param entity\r\n     * @param credentialType\r\n     */\r\n    matchCredentialType(entity, credentialType) {\r\n        return (entity.credentialType &&\r\n            credentialType.toLowerCase() === entity.credentialType.toLowerCase());\r\n    }\r\n    /**\r\n     * helper to match client ids\r\n     * @param entity\r\n     * @param clientId\r\n     */\r\n    matchClientId(entity, clientId) {\r\n        return !!(entity.clientId && clientId === entity.clientId);\r\n    }\r\n    /**\r\n     * helper to match family ids\r\n     * @param entity\r\n     * @param familyId\r\n     */\r\n    matchFamilyId(entity, familyId) {\r\n        return !!(entity.familyId && familyId === entity.familyId);\r\n    }\r\n    /**\r\n     * helper to match realm\r\n     * @param entity\r\n     * @param realm\r\n     */\r\n    matchRealm(entity, realm) {\r\n        return !!(entity.realm?.toLowerCase() === realm.toLowerCase());\r\n    }\r\n    /**\r\n     * helper to match nativeAccountId\r\n     * @param entity\r\n     * @param nativeAccountId\r\n     * @returns boolean indicating the match result\r\n     */\r\n    matchNativeAccountId(entity, nativeAccountId) {\r\n        return !!(entity.nativeAccountId && nativeAccountId === entity.nativeAccountId);\r\n    }\r\n    /**\r\n     * helper to match loginHint which can be either:\r\n     * 1. login_hint ID token claim\r\n     * 2. username in cached account object\r\n     * 3. upn in ID token claims\r\n     * @param entity\r\n     * @param loginHint\r\n     * @returns\r\n     */\r\n    matchLoginHintFromTokenClaims(tokenClaims, loginHint) {\r\n        if (tokenClaims.login_hint === loginHint) {\r\n            return true;\r\n        }\r\n        if (tokenClaims.preferred_username === loginHint) {\r\n            return true;\r\n        }\r\n        if (tokenClaims.upn === loginHint) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * Helper to match sid\r\n     * @param entity\r\n     * @param sid\r\n     * @returns true if the sid claim is present and matches the filter\r\n     */\r\n    matchSid(idTokenClaims, sid) {\r\n        return idTokenClaims.sid === sid;\r\n    }\r\n    matchAuthorityType(entity, authorityType) {\r\n        return !!(entity.authorityType &&\r\n            authorityType.toLowerCase() === entity.authorityType.toLowerCase());\r\n    }\r\n    /**\r\n     * Returns true if the target scopes are a subset of the current entity's scopes, false otherwise.\r\n     * @param entity\r\n     * @param target\r\n     */\r\n    matchTarget(entity, target) {\r\n        const isNotAccessTokenCredential = entity.credentialType !== CredentialType.ACCESS_TOKEN &&\r\n            entity.credentialType !==\r\n                CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;\r\n        if (isNotAccessTokenCredential || !entity.target) {\r\n            return false;\r\n        }\r\n        const entityScopeSet = ScopeSet.fromString(entity.target);\r\n        return entityScopeSet.containsScopeSet(target);\r\n    }\r\n    /**\r\n     * Returns true if the credential's tokenType or Authentication Scheme matches the one in the request, false otherwise\r\n     * @param entity\r\n     * @param tokenType\r\n     */\r\n    matchTokenType(entity, tokenType) {\r\n        return !!(entity.tokenType && entity.tokenType === tokenType);\r\n    }\r\n    /**\r\n     * Returns true if the credential's keyId matches the one in the request, false otherwise\r\n     * @param entity\r\n     * @param keyId\r\n     */\r\n    matchKeyId(entity, keyId) {\r\n        return !!(entity.keyId && entity.keyId === keyId);\r\n    }\r\n    /**\r\n     * returns if a given cache entity is of the type appmetadata\r\n     * @param key\r\n     */\r\n    isAppMetadata(key) {\r\n        return key.indexOf(APP_METADATA) !== -1;\r\n    }\r\n    /**\r\n     * returns if a given cache entity is of the type authoritymetadata\r\n     * @param key\r\n     */\r\n    isAuthorityMetadata(key) {\r\n        return key.indexOf(AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) !== -1;\r\n    }\r\n    /**\r\n     * returns cache key used for cloud instance metadata\r\n     */\r\n    generateAuthorityMetadataCacheKey(authority) {\r\n        return `${AUTHORITY_METADATA_CONSTANTS.CACHE_KEY}-${this.clientId}-${authority}`;\r\n    }\r\n    /**\r\n     * Helper to convert serialized data to object\r\n     * @param obj\r\n     * @param json\r\n     */\r\n    static toObject(obj, json) {\r\n        for (const propertyName in json) {\r\n            obj[propertyName] = json[propertyName];\r\n        }\r\n        return obj;\r\n    }\r\n}\r\n/** @internal */\r\nclass DefaultStorageClass extends CacheManager {\r\n    async setAccount() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    getAccount() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    async setIdTokenCredential() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    getIdTokenCredential() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    async setAccessTokenCredential() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    getAccessTokenCredential() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    async setRefreshTokenCredential() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    getRefreshTokenCredential() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    setAppMetadata() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    getAppMetadata() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    setServerTelemetry() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    getServerTelemetry() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    setAuthorityMetadata() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    getAuthorityMetadata() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    getAuthorityMetadataKeys() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    setThrottlingCache() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    getThrottlingCache() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    removeItem() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    getKeys() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    getAccountKeys() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    getTokenKeys() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    generateCredentialKey() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    generateAccountKey() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n}\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Protocol modes supported by MSAL.\r\n */\r\nconst ProtocolMode = {\r\n    /**\r\n     * Auth Code + PKCE with Entra ID (formerly AAD) specific optimizations and features\r\n     */\r\n    AAD: \"AAD\",\r\n    /**\r\n     * Auth Code + PKCE without Entra ID specific optimizations and features. For use only with non-Microsoft owned authorities.\r\n     * Support is limited for this mode.\r\n     */\r\n    OIDC: \"OIDC\",\r\n    /**\r\n     * Encrypted Authorize Response (EAR) with Entra ID specific optimizations and features\r\n     */\r\n    EAR: \"EAR\",\r\n};\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Enumeration of operations that are instrumented by have their performance measured by the PerformanceClient.\r\n *\r\n * @export\r\n * @enum {number}\r\n */\r\nconst PerformanceEvents = {\r\n    /**\r\n     * acquireTokenByCode API (msal-browser and msal-node).\r\n     * Used to acquire tokens by trading an authorization code against the token endpoint.\r\n     */\r\n    AcquireTokenByCode: \"acquireTokenByCode\",\r\n    /**\r\n     * acquireTokenByRefreshToken API (msal-browser and msal-node).\r\n     * Used to renew an access token using a refresh token against the token endpoint.\r\n     */\r\n    AcquireTokenByRefreshToken: \"acquireTokenByRefreshToken\",\r\n    /**\r\n     * acquireTokenSilent API (msal-browser and msal-node).\r\n     * Used to silently acquire a new access token (from the cache or the network).\r\n     */\r\n    AcquireTokenSilent: \"acquireTokenSilent\",\r\n    /**\r\n     * acquireTokenSilentAsync (msal-browser).\r\n     * Internal API for acquireTokenSilent.\r\n     */\r\n    AcquireTokenSilentAsync: \"acquireTokenSilentAsync\",\r\n    /**\r\n     * acquireTokenPopup (msal-browser).\r\n     * Used to acquire a new access token interactively through pop ups\r\n     */\r\n    AcquireTokenPopup: \"acquireTokenPopup\",\r\n    /**\r\n     * acquireTokenPreRedirect (msal-browser).\r\n     * First part of the redirect flow.\r\n     * Used to acquire a new access token interactively through redirects.\r\n     */\r\n    AcquireTokenPreRedirect: \"acquireTokenPreRedirect\",\r\n    /**\r\n     * acquireTokenRedirect (msal-browser).\r\n     * Second part of the redirect flow.\r\n     * Used to acquire a new access token interactively through redirects.\r\n     */\r\n    AcquireTokenRedirect: \"acquireTokenRedirect\",\r\n    /**\r\n     * getPublicKeyThumbprint API in CryptoOpts class (msal-browser).\r\n     * Used to generate a public/private keypair and generate a public key thumbprint for pop requests.\r\n     */\r\n    CryptoOptsGetPublicKeyThumbprint: \"cryptoOptsGetPublicKeyThumbprint\",\r\n    /**\r\n     * signJwt API in CryptoOpts class (msal-browser).\r\n     * Used to signed a pop token.\r\n     */\r\n    CryptoOptsSignJwt: \"cryptoOptsSignJwt\",\r\n    /**\r\n     * acquireToken API in the SilentCacheClient class (msal-browser).\r\n     * Used to read access tokens from the cache.\r\n     */\r\n    SilentCacheClientAcquireToken: \"silentCacheClientAcquireToken\",\r\n    /**\r\n     * acquireToken API in the SilentIframeClient class (msal-browser).\r\n     * Used to acquire a new set of tokens from the authorize endpoint in a hidden iframe.\r\n     */\r\n    SilentIframeClientAcquireToken: \"silentIframeClientAcquireToken\",\r\n    AwaitConcurrentIframe: \"awaitConcurrentIframe\",\r\n    /**\r\n     * acquireToken API in SilentRereshClient (msal-browser).\r\n     * Used to acquire a new set of tokens from the token endpoint using a refresh token.\r\n     */\r\n    SilentRefreshClientAcquireToken: \"silentRefreshClientAcquireToken\",\r\n    /**\r\n     * ssoSilent API (msal-browser).\r\n     * Used to silently acquire an authorization code and set of tokens using a hidden iframe.\r\n     */\r\n    SsoSilent: \"ssoSilent\",\r\n    /**\r\n     * getDiscoveredAuthority API in StandardInteractionClient class (msal-browser).\r\n     * Used to load authority metadata for a request.\r\n     */\r\n    StandardInteractionClientGetDiscoveredAuthority: \"standardInteractionClientGetDiscoveredAuthority\",\r\n    /**\r\n     * acquireToken APIs in msal-browser.\r\n     * Used to make an /authorize endpoint call with native brokering enabled.\r\n     */\r\n    FetchAccountIdWithNativeBroker: \"fetchAccountIdWithNativeBroker\",\r\n    /**\r\n     * acquireToken API in NativeInteractionClient class (msal-browser).\r\n     * Used to acquire a token from Native component when native brokering is enabled.\r\n     */\r\n    NativeInteractionClientAcquireToken: \"nativeInteractionClientAcquireToken\",\r\n    /**\r\n     * Time spent creating default headers for requests to token endpoint\r\n     */\r\n    BaseClientCreateTokenRequestHeaders: \"baseClientCreateTokenRequestHeaders\",\r\n    /**\r\n     * Time spent sending/waiting for the response of a request to the token endpoint\r\n     */\r\n    NetworkClientSendPostRequestAsync: \"networkClientSendPostRequestAsync\",\r\n    RefreshTokenClientExecutePostToTokenEndpoint: \"refreshTokenClientExecutePostToTokenEndpoint\",\r\n    AuthorizationCodeClientExecutePostToTokenEndpoint: \"authorizationCodeClientExecutePostToTokenEndpoint\",\r\n    /**\r\n     * Used to measure the time taken for completing embedded-broker handshake (PW-Broker).\r\n     */\r\n    BrokerHandhshake: \"brokerHandshake\",\r\n    /**\r\n     * acquireTokenByRefreshToken API in BrokerClientApplication (PW-Broker) .\r\n     */\r\n    AcquireTokenByRefreshTokenInBroker: \"acquireTokenByRefreshTokenInBroker\",\r\n    /**\r\n     * Time taken for token acquisition by broker\r\n     */\r\n    AcquireTokenByBroker: \"acquireTokenByBroker\",\r\n    /**\r\n     * Time spent on the network for refresh token acquisition\r\n     */\r\n    RefreshTokenClientExecuteTokenRequest: \"refreshTokenClientExecuteTokenRequest\",\r\n    /**\r\n     * Time taken for acquiring refresh token , records RT size\r\n     */\r\n    RefreshTokenClientAcquireToken: \"refreshTokenClientAcquireToken\",\r\n    /**\r\n     * Time taken for acquiring cached refresh token\r\n     */\r\n    RefreshTokenClientAcquireTokenWithCachedRefreshToken: \"refreshTokenClientAcquireTokenWithCachedRefreshToken\",\r\n    /**\r\n     * acquireTokenByRefreshToken API in RefreshTokenClient (msal-common).\r\n     */\r\n    RefreshTokenClientAcquireTokenByRefreshToken: \"refreshTokenClientAcquireTokenByRefreshToken\",\r\n    /**\r\n     * Helper function to create token request body in RefreshTokenClient (msal-common).\r\n     */\r\n    RefreshTokenClientCreateTokenRequestBody: \"refreshTokenClientCreateTokenRequestBody\",\r\n    /**\r\n     * acquireTokenFromCache (msal-browser).\r\n     * Internal API for acquiring token from cache\r\n     */\r\n    AcquireTokenFromCache: \"acquireTokenFromCache\",\r\n    SilentFlowClientAcquireCachedToken: \"silentFlowClientAcquireCachedToken\",\r\n    SilentFlowClientGenerateResultFromCacheRecord: \"silentFlowClientGenerateResultFromCacheRecord\",\r\n    /**\r\n     * acquireTokenBySilentIframe (msal-browser).\r\n     * Internal API for acquiring token by silent Iframe\r\n     */\r\n    AcquireTokenBySilentIframe: \"acquireTokenBySilentIframe\",\r\n    /**\r\n     * Internal API for initializing base request in BaseInteractionClient (msal-browser)\r\n     */\r\n    InitializeBaseRequest: \"initializeBaseRequest\",\r\n    /**\r\n     * Internal API for initializing silent request in SilentCacheClient (msal-browser)\r\n     */\r\n    InitializeSilentRequest: \"initializeSilentRequest\",\r\n    InitializeClientApplication: \"initializeClientApplication\",\r\n    InitializeCache: \"initializeCache\",\r\n    /**\r\n     * Helper function in SilentIframeClient class (msal-browser).\r\n     */\r\n    SilentIframeClientTokenHelper: \"silentIframeClientTokenHelper\",\r\n    /**\r\n     * SilentHandler\r\n     */\r\n    SilentHandlerInitiateAuthRequest: \"silentHandlerInitiateAuthRequest\",\r\n    SilentHandlerMonitorIframeForHash: \"silentHandlerMonitorIframeForHash\",\r\n    SilentHandlerLoadFrame: \"silentHandlerLoadFrame\",\r\n    SilentHandlerLoadFrameSync: \"silentHandlerLoadFrameSync\",\r\n    /**\r\n     * Helper functions in StandardInteractionClient class (msal-browser)\r\n     */\r\n    StandardInteractionClientCreateAuthCodeClient: \"standardInteractionClientCreateAuthCodeClient\",\r\n    StandardInteractionClientGetClientConfiguration: \"standardInteractionClientGetClientConfiguration\",\r\n    StandardInteractionClientInitializeAuthorizationRequest: \"standardInteractionClientInitializeAuthorizationRequest\",\r\n    /**\r\n     * getAuthCodeUrl API (msal-browser and msal-node).\r\n     */\r\n    GetAuthCodeUrl: \"getAuthCodeUrl\",\r\n    GetStandardParams: \"getStandardParams\",\r\n    /**\r\n     * Functions from InteractionHandler (msal-browser)\r\n     */\r\n    HandleCodeResponseFromServer: \"handleCodeResponseFromServer\",\r\n    HandleCodeResponse: \"handleCodeResponse\",\r\n    HandleResponseEar: \"handleResponseEar\",\r\n    HandleResponsePlatformBroker: \"handleResponsePlatformBroker\",\r\n    HandleResponseCode: \"handleResponseCode\",\r\n    UpdateTokenEndpointAuthority: \"updateTokenEndpointAuthority\",\r\n    /**\r\n     * APIs in Authorization Code Client (msal-common)\r\n     */\r\n    AuthClientAcquireToken: \"authClientAcquireToken\",\r\n    AuthClientExecuteTokenRequest: \"authClientExecuteTokenRequest\",\r\n    AuthClientCreateTokenRequestBody: \"authClientCreateTokenRequestBody\",\r\n    /**\r\n     * Generate functions in PopTokenGenerator (msal-common)\r\n     */\r\n    PopTokenGenerateCnf: \"popTokenGenerateCnf\",\r\n    PopTokenGenerateKid: \"popTokenGenerateKid\",\r\n    /**\r\n     * handleServerTokenResponse API in ResponseHandler (msal-common)\r\n     */\r\n    HandleServerTokenResponse: \"handleServerTokenResponse\",\r\n    DeserializeResponse: \"deserializeResponse\",\r\n    /**\r\n     * Authority functions\r\n     */\r\n    AuthorityFactoryCreateDiscoveredInstance: \"authorityFactoryCreateDiscoveredInstance\",\r\n    AuthorityResolveEndpointsAsync: \"authorityResolveEndpointsAsync\",\r\n    AuthorityResolveEndpointsFromLocalSources: \"authorityResolveEndpointsFromLocalSources\",\r\n    AuthorityGetCloudDiscoveryMetadataFromNetwork: \"authorityGetCloudDiscoveryMetadataFromNetwork\",\r\n    AuthorityUpdateCloudDiscoveryMetadata: \"authorityUpdateCloudDiscoveryMetadata\",\r\n    AuthorityGetEndpointMetadataFromNetwork: \"authorityGetEndpointMetadataFromNetwork\",\r\n    AuthorityUpdateEndpointMetadata: \"authorityUpdateEndpointMetadata\",\r\n    AuthorityUpdateMetadataWithRegionalInformation: \"authorityUpdateMetadataWithRegionalInformation\",\r\n    /**\r\n     * Region Discovery functions\r\n     */\r\n    RegionDiscoveryDetectRegion: \"regionDiscoveryDetectRegion\",\r\n    RegionDiscoveryGetRegionFromIMDS: \"regionDiscoveryGetRegionFromIMDS\",\r\n    RegionDiscoveryGetCurrentVersion: \"regionDiscoveryGetCurrentVersion\",\r\n    AcquireTokenByCodeAsync: \"acquireTokenByCodeAsync\",\r\n    GetEndpointMetadataFromNetwork: \"getEndpointMetadataFromNetwork\",\r\n    GetCloudDiscoveryMetadataFromNetworkMeasurement: \"getCloudDiscoveryMetadataFromNetworkMeasurement\",\r\n    HandleRedirectPromiseMeasurement: \"handleRedirectPromise\",\r\n    HandleNativeRedirectPromiseMeasurement: \"handleNativeRedirectPromise\",\r\n    UpdateCloudDiscoveryMetadataMeasurement: \"updateCloudDiscoveryMetadataMeasurement\",\r\n    UsernamePasswordClientAcquireToken: \"usernamePasswordClientAcquireToken\",\r\n    NativeMessageHandlerHandshake: \"nativeMessageHandlerHandshake\",\r\n    NativeGenerateAuthResult: \"nativeGenerateAuthResult\",\r\n    RemoveHiddenIframe: \"removeHiddenIframe\",\r\n    /**\r\n     * Cache operations\r\n     */\r\n    ClearTokensAndKeysWithClaims: \"clearTokensAndKeysWithClaims\",\r\n    CacheManagerGetRefreshToken: \"cacheManagerGetRefreshToken\",\r\n    ImportExistingCache: \"importExistingCache\",\r\n    SetUserData: \"setUserData\",\r\n    LocalStorageUpdated: \"localStorageUpdated\",\r\n    /**\r\n     * Crypto Operations\r\n     */\r\n    GeneratePkceCodes: \"generatePkceCodes\",\r\n    GenerateCodeVerifier: \"generateCodeVerifier\",\r\n    GenerateCodeChallengeFromVerifier: \"generateCodeChallengeFromVerifier\",\r\n    Sha256Digest: \"sha256Digest\",\r\n    GetRandomValues: \"getRandomValues\",\r\n    GenerateHKDF: \"generateHKDF\",\r\n    GenerateBaseKey: \"generateBaseKey\",\r\n    Base64Decode: \"base64Decode\",\r\n    UrlEncodeArr: \"urlEncodeArr\",\r\n    Encrypt: \"encrypt\",\r\n    Decrypt: \"decrypt\",\r\n    GenerateEarKey: \"generateEarKey\",\r\n    DecryptEarResponse: \"decryptEarResponse\",\r\n};\r\n/**\r\n * State of the performance event.\r\n *\r\n * @export\r\n * @enum {number}\r\n */\r\nconst PerformanceEventStatus = {\r\n    InProgress: 1};\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nclass StubPerformanceMeasurement {\r\n    startMeasurement() {\r\n        return;\r\n    }\r\n    endMeasurement() {\r\n        return;\r\n    }\r\n    flushMeasurement() {\r\n        return null;\r\n    }\r\n}\r\nclass StubPerformanceClient {\r\n    generateId() {\r\n        return \"callback-id\";\r\n    }\r\n    startMeasurement(measureName, correlationId) {\r\n        return {\r\n            end: () => null,\r\n            discard: () => { },\r\n            add: () => { },\r\n            increment: () => { },\r\n            event: {\r\n                eventId: this.generateId(),\r\n                status: PerformanceEventStatus.InProgress,\r\n                authority: \"\",\r\n                libraryName: \"\",\r\n                libraryVersion: \"\",\r\n                clientId: \"\",\r\n                name: measureName,\r\n                startTimeMs: Date.now(),\r\n                correlationId: correlationId || \"\",\r\n            },\r\n            measurement: new StubPerformanceMeasurement(),\r\n        };\r\n    }\r\n    startPerformanceMeasurement() {\r\n        return new StubPerformanceMeasurement();\r\n    }\r\n    calculateQueuedTime() {\r\n        return 0;\r\n    }\r\n    addQueueMeasurement() {\r\n        return;\r\n    }\r\n    setPreQueueTime() {\r\n        return;\r\n    }\r\n    endMeasurement() {\r\n        return null;\r\n    }\r\n    discardMeasurements() {\r\n        return;\r\n    }\r\n    removePerformanceCallback() {\r\n        return true;\r\n    }\r\n    addPerformanceCallback() {\r\n        return \"\";\r\n    }\r\n    emitEvents() {\r\n        return;\r\n    }\r\n    addFields() {\r\n        return;\r\n    }\r\n    incrementFields() {\r\n        return;\r\n    }\r\n    cacheEventByCorrelationId() {\r\n        return;\r\n    }\r\n}\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst DEFAULT_SYSTEM_OPTIONS$1 = {\r\n    tokenRenewalOffsetSeconds: DEFAULT_TOKEN_RENEWAL_OFFSET_SEC,\r\n    preventCorsPreflight: false,\r\n};\r\nconst DEFAULT_LOGGER_IMPLEMENTATION = {\r\n    loggerCallback: () => {\r\n        // allow users to not set loggerCallback\r\n    },\r\n    piiLoggingEnabled: false,\r\n    logLevel: exports.LogLevel.Info,\r\n    correlationId: Constants$1.EMPTY_STRING,\r\n};\r\nconst DEFAULT_CACHE_OPTIONS$1 = {\r\n    claimsBasedCachingEnabled: false,\r\n};\r\nconst DEFAULT_NETWORK_IMPLEMENTATION = {\r\n    async sendGetRequestAsync() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    },\r\n    async sendPostRequestAsync() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    },\r\n};\r\nconst DEFAULT_LIBRARY_INFO = {\r\n    sku: Constants$1.SKU,\r\n    version: version$1,\r\n    cpu: Constants$1.EMPTY_STRING,\r\n    os: Constants$1.EMPTY_STRING,\r\n};\r\nconst DEFAULT_CLIENT_CREDENTIALS = {\r\n    clientSecret: Constants$1.EMPTY_STRING,\r\n    clientAssertion: undefined,\r\n};\r\nconst DEFAULT_AZURE_CLOUD_OPTIONS = {\r\n    azureCloudInstance: AzureCloudInstance.None,\r\n    tenant: `${Constants$1.DEFAULT_COMMON_TENANT}`,\r\n};\r\nconst DEFAULT_TELEMETRY_OPTIONS$1 = {\r\n    application: {\r\n        appName: \"\",\r\n        appVersion: \"\",\r\n    },\r\n};\r\n/**\r\n * Function that sets the default options when not explicitly configured from app developer\r\n *\r\n * @param Configuration\r\n *\r\n * @returns Configuration\r\n */\r\nfunction buildClientConfiguration({ authOptions: userAuthOptions, systemOptions: userSystemOptions, loggerOptions: userLoggerOption, cacheOptions: userCacheOptions, storageInterface: storageImplementation, networkInterface: networkImplementation, cryptoInterface: cryptoImplementation, clientCredentials: clientCredentials, libraryInfo: libraryInfo, telemetry: telemetry, serverTelemetryManager: serverTelemetryManager, persistencePlugin: persistencePlugin, serializableCache: serializableCache, }) {\r\n    const loggerOptions = {\r\n        ...DEFAULT_LOGGER_IMPLEMENTATION,\r\n        ...userLoggerOption,\r\n    };\r\n    return {\r\n        authOptions: buildAuthOptions(userAuthOptions),\r\n        systemOptions: { ...DEFAULT_SYSTEM_OPTIONS$1, ...userSystemOptions },\r\n        loggerOptions: loggerOptions,\r\n        cacheOptions: { ...DEFAULT_CACHE_OPTIONS$1, ...userCacheOptions },\r\n        storageInterface: storageImplementation ||\r\n            new DefaultStorageClass(userAuthOptions.clientId, DEFAULT_CRYPTO_IMPLEMENTATION, new Logger(loggerOptions), new StubPerformanceClient()),\r\n        networkInterface: networkImplementation || DEFAULT_NETWORK_IMPLEMENTATION,\r\n        cryptoInterface: cryptoImplementation || DEFAULT_CRYPTO_IMPLEMENTATION,\r\n        clientCredentials: clientCredentials || DEFAULT_CLIENT_CREDENTIALS,\r\n        libraryInfo: { ...DEFAULT_LIBRARY_INFO, ...libraryInfo },\r\n        telemetry: { ...DEFAULT_TELEMETRY_OPTIONS$1, ...telemetry },\r\n        serverTelemetryManager: serverTelemetryManager || null,\r\n        persistencePlugin: persistencePlugin || null,\r\n        serializableCache: serializableCache || null,\r\n    };\r\n}\r\n/**\r\n * Construct authoptions from the client and platform passed values\r\n * @param authOptions\r\n */\r\nfunction buildAuthOptions(authOptions) {\r\n    return {\r\n        clientCapabilities: [],\r\n        azureCloudOptions: DEFAULT_AZURE_CLOUD_OPTIONS,\r\n        skipAuthorityMetadataCache: false,\r\n        instanceAware: false,\r\n        encodeExtraQueryParams: false,\r\n        ...authOptions,\r\n    };\r\n}\r\n/**\r\n * Returns true if config has protocolMode set to ProtocolMode.OIDC, false otherwise\r\n * @param ClientConfiguration\r\n */\r\nfunction isOidcProtocolMode(config) {\r\n    return (config.authOptions.authority.options.protocolMode === ProtocolMode.OIDC);\r\n}\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst CcsCredentialType = {\r\n    HOME_ACCOUNT_ID: \"home_account_id\",\r\n    UPN: \"UPN\",\r\n};\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Function to build a client info object from server clientInfo string\r\n * @param rawClientInfo\r\n * @param crypto\r\n */\r\nfunction buildClientInfo(rawClientInfo, base64Decode) {\r\n    if (!rawClientInfo) {\r\n        throw createClientAuthError(clientInfoEmptyError);\r\n    }\r\n    try {\r\n        const decodedClientInfo = base64Decode(rawClientInfo);\r\n        return JSON.parse(decodedClientInfo);\r\n    }\r\n    catch (e) {\r\n        throw createClientAuthError(clientInfoDecodingError);\r\n    }\r\n}\r\n/**\r\n * Function to build a client info object from cached homeAccountId string\r\n * @param homeAccountId\r\n */\r\nfunction buildClientInfoFromHomeAccountId(homeAccountId) {\r\n    if (!homeAccountId) {\r\n        throw createClientAuthError(clientInfoDecodingError);\r\n    }\r\n    const clientInfoParts = homeAccountId.split(Separators.CLIENT_INFO_SEPARATOR, 2);\r\n    return {\r\n        uid: clientInfoParts[0],\r\n        utid: clientInfoParts.length < 2\r\n            ? Constants$1.EMPTY_STRING\r\n            : clientInfoParts[1],\r\n    };\r\n}\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst CLIENT_ID = \"client_id\";\r\nconst REDIRECT_URI = \"redirect_uri\";\r\nconst RESPONSE_TYPE = \"response_type\";\r\nconst RESPONSE_MODE = \"response_mode\";\r\nconst GRANT_TYPE = \"grant_type\";\r\nconst CLAIMS = \"claims\";\r\nconst SCOPE = \"scope\";\r\nconst REFRESH_TOKEN = \"refresh_token\";\r\nconst STATE = \"state\";\r\nconst NONCE = \"nonce\";\r\nconst PROMPT = \"prompt\";\r\nconst CODE = \"code\";\r\nconst CODE_CHALLENGE = \"code_challenge\";\r\nconst CODE_CHALLENGE_METHOD = \"code_challenge_method\";\r\nconst CODE_VERIFIER = \"code_verifier\";\r\nconst CLIENT_REQUEST_ID = \"client-request-id\";\r\nconst X_CLIENT_SKU = \"x-client-SKU\";\r\nconst X_CLIENT_VER = \"x-client-VER\";\r\nconst X_CLIENT_OS = \"x-client-OS\";\r\nconst X_CLIENT_CPU = \"x-client-CPU\";\r\nconst X_CLIENT_CURR_TELEM = \"x-client-current-telemetry\";\r\nconst X_CLIENT_LAST_TELEM = \"x-client-last-telemetry\";\r\nconst X_MS_LIB_CAPABILITY = \"x-ms-lib-capability\";\r\nconst X_APP_NAME = \"x-app-name\";\r\nconst X_APP_VER = \"x-app-ver\";\r\nconst POST_LOGOUT_URI = \"post_logout_redirect_uri\";\r\nconst ID_TOKEN_HINT = \"id_token_hint\";\r\nconst DEVICE_CODE = \"device_code\";\r\nconst CLIENT_SECRET = \"client_secret\";\r\nconst CLIENT_ASSERTION = \"client_assertion\";\r\nconst CLIENT_ASSERTION_TYPE = \"client_assertion_type\";\r\nconst TOKEN_TYPE = \"token_type\";\r\nconst REQ_CNF = \"req_cnf\";\r\nconst OBO_ASSERTION = \"assertion\";\r\nconst REQUESTED_TOKEN_USE = \"requested_token_use\";\r\nconst ON_BEHALF_OF = \"on_behalf_of\";\r\nconst RETURN_SPA_CODE = \"return_spa_code\";\r\nconst LOGOUT_HINT = \"logout_hint\";\r\nconst SID = \"sid\";\r\nconst LOGIN_HINT = \"login_hint\";\r\nconst DOMAIN_HINT = \"domain_hint\";\r\nconst X_CLIENT_EXTRA_SKU = \"x-client-xtra-sku\";\r\nconst BROKER_CLIENT_ID = \"brk_client_id\";\r\nconst BROKER_REDIRECT_URI = \"brk_redirect_uri\";\r\nconst INSTANCE_AWARE = \"instance_aware\";\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nfunction instrumentBrokerParams(parameters, correlationId, performanceClient) {\r\n    if (!correlationId) {\r\n        return;\r\n    }\r\n    const clientId = parameters.get(CLIENT_ID);\r\n    if (clientId && parameters.has(BROKER_CLIENT_ID)) {\r\n        performanceClient?.addFields({\r\n            embeddedClientId: clientId,\r\n            embeddedRedirectUri: parameters.get(REDIRECT_URI),\r\n        }, correlationId);\r\n    }\r\n}\r\n/**\r\n * Add the given response_type\r\n * @param parameters\r\n * @param responseType\r\n */\r\nfunction addResponseType(parameters, responseType) {\r\n    parameters.set(RESPONSE_TYPE, responseType);\r\n}\r\n/**\r\n * add response_mode. defaults to query.\r\n * @param responseMode\r\n */\r\nfunction addResponseMode(parameters, responseMode) {\r\n    parameters.set(RESPONSE_MODE, responseMode ? responseMode : ResponseMode.QUERY);\r\n}\r\n/**\r\n * add scopes. set addOidcScopes to false to prevent default scopes in non-user scenarios\r\n * @param scopeSet\r\n * @param addOidcScopes\r\n */\r\nfunction addScopes(parameters, scopes, addOidcScopes = true, defaultScopes = OIDC_DEFAULT_SCOPES) {\r\n    // Always add openid to the scopes when adding OIDC scopes\r\n    if (addOidcScopes &&\r\n        !defaultScopes.includes(\"openid\") &&\r\n        !scopes.includes(\"openid\")) {\r\n        defaultScopes.push(\"openid\");\r\n    }\r\n    const requestScopes = addOidcScopes\r\n        ? [...(scopes || []), ...defaultScopes]\r\n        : scopes || [];\r\n    const scopeSet = new ScopeSet(requestScopes);\r\n    parameters.set(SCOPE, scopeSet.printScopes());\r\n}\r\n/**\r\n * add clientId\r\n * @param clientId\r\n */\r\nfunction addClientId(parameters, clientId) {\r\n    parameters.set(CLIENT_ID, clientId);\r\n}\r\n/**\r\n * add redirect_uri\r\n * @param redirectUri\r\n */\r\nfunction addRedirectUri(parameters, redirectUri) {\r\n    parameters.set(REDIRECT_URI, redirectUri);\r\n}\r\n/**\r\n * add post logout redirectUri\r\n * @param redirectUri\r\n */\r\nfunction addPostLogoutRedirectUri(parameters, redirectUri) {\r\n    parameters.set(POST_LOGOUT_URI, redirectUri);\r\n}\r\n/**\r\n * add id_token_hint to logout request\r\n * @param idTokenHint\r\n */\r\nfunction addIdTokenHint(parameters, idTokenHint) {\r\n    parameters.set(ID_TOKEN_HINT, idTokenHint);\r\n}\r\n/**\r\n * add domain_hint\r\n * @param domainHint\r\n */\r\nfunction addDomainHint(parameters, domainHint) {\r\n    parameters.set(DOMAIN_HINT, domainHint);\r\n}\r\n/**\r\n * add login_hint\r\n * @param loginHint\r\n */\r\nfunction addLoginHint(parameters, loginHint) {\r\n    parameters.set(LOGIN_HINT, loginHint);\r\n}\r\n/**\r\n * Adds the CCS (Cache Credential Service) query parameter for login_hint\r\n * @param loginHint\r\n */\r\nfunction addCcsUpn(parameters, loginHint) {\r\n    parameters.set(HeaderNames.CCS_HEADER, `UPN:${loginHint}`);\r\n}\r\n/**\r\n * Adds the CCS (Cache Credential Service) query parameter for account object\r\n * @param loginHint\r\n */\r\nfunction addCcsOid(parameters, clientInfo) {\r\n    parameters.set(HeaderNames.CCS_HEADER, `Oid:${clientInfo.uid}@${clientInfo.utid}`);\r\n}\r\n/**\r\n * add sid\r\n * @param sid\r\n */\r\nfunction addSid(parameters, sid) {\r\n    parameters.set(SID, sid);\r\n}\r\n/**\r\n * add claims\r\n * @param claims\r\n */\r\nfunction addClaims(parameters, claims, clientCapabilities) {\r\n    const mergedClaims = addClientCapabilitiesToClaims(claims, clientCapabilities);\r\n    try {\r\n        JSON.parse(mergedClaims);\r\n    }\r\n    catch (e) {\r\n        throw createClientConfigurationError(invalidClaims);\r\n    }\r\n    parameters.set(CLAIMS, mergedClaims);\r\n}\r\n/**\r\n * add correlationId\r\n * @param correlationId\r\n */\r\nfunction addCorrelationId(parameters, correlationId) {\r\n    parameters.set(CLIENT_REQUEST_ID, correlationId);\r\n}\r\n/**\r\n * add library info query params\r\n * @param libraryInfo\r\n */\r\nfunction addLibraryInfo(parameters, libraryInfo) {\r\n    // Telemetry Info\r\n    parameters.set(X_CLIENT_SKU, libraryInfo.sku);\r\n    parameters.set(X_CLIENT_VER, libraryInfo.version);\r\n    if (libraryInfo.os) {\r\n        parameters.set(X_CLIENT_OS, libraryInfo.os);\r\n    }\r\n    if (libraryInfo.cpu) {\r\n        parameters.set(X_CLIENT_CPU, libraryInfo.cpu);\r\n    }\r\n}\r\n/**\r\n * Add client telemetry parameters\r\n * @param appTelemetry\r\n */\r\nfunction addApplicationTelemetry(parameters, appTelemetry) {\r\n    if (appTelemetry?.appName) {\r\n        parameters.set(X_APP_NAME, appTelemetry.appName);\r\n    }\r\n    if (appTelemetry?.appVersion) {\r\n        parameters.set(X_APP_VER, appTelemetry.appVersion);\r\n    }\r\n}\r\n/**\r\n * add prompt\r\n * @param prompt\r\n */\r\nfunction addPrompt(parameters, prompt) {\r\n    parameters.set(PROMPT, prompt);\r\n}\r\n/**\r\n * add state\r\n * @param state\r\n */\r\nfunction addState(parameters, state) {\r\n    if (state) {\r\n        parameters.set(STATE, state);\r\n    }\r\n}\r\n/**\r\n * add nonce\r\n * @param nonce\r\n */\r\nfunction addNonce(parameters, nonce) {\r\n    parameters.set(NONCE, nonce);\r\n}\r\n/**\r\n * add code_challenge and code_challenge_method\r\n * - throw if either of them are not passed\r\n * @param codeChallenge\r\n * @param codeChallengeMethod\r\n */\r\nfunction addCodeChallengeParams(parameters, codeChallenge, codeChallengeMethod) {\r\n    if (codeChallenge && codeChallengeMethod) {\r\n        parameters.set(CODE_CHALLENGE, codeChallenge);\r\n        parameters.set(CODE_CHALLENGE_METHOD, codeChallengeMethod);\r\n    }\r\n    else {\r\n        throw createClientConfigurationError(pkceParamsMissing);\r\n    }\r\n}\r\n/**\r\n * add the `authorization_code` passed by the user to exchange for a token\r\n * @param code\r\n */\r\nfunction addAuthorizationCode(parameters, code) {\r\n    parameters.set(CODE, code);\r\n}\r\n/**\r\n * add the `authorization_code` passed by the user to exchange for a token\r\n * @param code\r\n */\r\nfunction addDeviceCode(parameters, code) {\r\n    parameters.set(DEVICE_CODE, code);\r\n}\r\n/**\r\n * add the `refreshToken` passed by the user\r\n * @param refreshToken\r\n */\r\nfunction addRefreshToken(parameters, refreshToken) {\r\n    parameters.set(REFRESH_TOKEN, refreshToken);\r\n}\r\n/**\r\n * add the `code_verifier` passed by the user to exchange for a token\r\n * @param codeVerifier\r\n */\r\nfunction addCodeVerifier(parameters, codeVerifier) {\r\n    parameters.set(CODE_VERIFIER, codeVerifier);\r\n}\r\n/**\r\n * add client_secret\r\n * @param clientSecret\r\n */\r\nfunction addClientSecret(parameters, clientSecret) {\r\n    parameters.set(CLIENT_SECRET, clientSecret);\r\n}\r\n/**\r\n * add clientAssertion for confidential client flows\r\n * @param clientAssertion\r\n */\r\nfunction addClientAssertion(parameters, clientAssertion) {\r\n    if (clientAssertion) {\r\n        parameters.set(CLIENT_ASSERTION, clientAssertion);\r\n    }\r\n}\r\n/**\r\n * add clientAssertionType for confidential client flows\r\n * @param clientAssertionType\r\n */\r\nfunction addClientAssertionType(parameters, clientAssertionType) {\r\n    if (clientAssertionType) {\r\n        parameters.set(CLIENT_ASSERTION_TYPE, clientAssertionType);\r\n    }\r\n}\r\n/**\r\n * add OBO assertion for confidential client flows\r\n * @param clientAssertion\r\n */\r\nfunction addOboAssertion(parameters, oboAssertion) {\r\n    parameters.set(OBO_ASSERTION, oboAssertion);\r\n}\r\n/**\r\n * add grant type\r\n * @param grantType\r\n */\r\nfunction addRequestTokenUse(parameters, tokenUse) {\r\n    parameters.set(REQUESTED_TOKEN_USE, tokenUse);\r\n}\r\n/**\r\n * add grant type\r\n * @param grantType\r\n */\r\nfunction addGrantType(parameters, grantType) {\r\n    parameters.set(GRANT_TYPE, grantType);\r\n}\r\n/**\r\n * add client info\r\n *\r\n */\r\nfunction addClientInfo(parameters) {\r\n    parameters.set(CLIENT_INFO, \"1\");\r\n}\r\nfunction addInstanceAware(parameters) {\r\n    if (!parameters.has(INSTANCE_AWARE)) {\r\n        parameters.set(INSTANCE_AWARE, \"true\");\r\n    }\r\n}\r\n/**\r\n * add extraQueryParams\r\n * @param eQParams\r\n */\r\nfunction addExtraQueryParameters(parameters, eQParams) {\r\n    Object.entries(eQParams).forEach(([key, value]) => {\r\n        if (!parameters.has(key) && value) {\r\n            parameters.set(key, value);\r\n        }\r\n    });\r\n}\r\nfunction addClientCapabilitiesToClaims(claims, clientCapabilities) {\r\n    let mergedClaims;\r\n    // Parse provided claims into JSON object or initialize empty object\r\n    if (!claims) {\r\n        mergedClaims = {};\r\n    }\r\n    else {\r\n        try {\r\n            mergedClaims = JSON.parse(claims);\r\n        }\r\n        catch (e) {\r\n            throw createClientConfigurationError(invalidClaims);\r\n        }\r\n    }\r\n    if (clientCapabilities && clientCapabilities.length > 0) {\r\n        if (!mergedClaims.hasOwnProperty(ClaimsRequestKeys.ACCESS_TOKEN)) {\r\n            // Add access_token key to claims object\r\n            mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN] = {};\r\n        }\r\n        // Add xms_cc claim with provided clientCapabilities to access_token key\r\n        mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN][ClaimsRequestKeys.XMS_CC] =\r\n            {\r\n                values: clientCapabilities,\r\n            };\r\n    }\r\n    return JSON.stringify(mergedClaims);\r\n}\r\n/**\r\n * adds `username` for Password Grant flow\r\n * @param username\r\n */\r\nfunction addUsername(parameters, username) {\r\n    parameters.set(PasswordGrantConstants.username, username);\r\n}\r\n/**\r\n * adds `password` for Password Grant flow\r\n * @param password\r\n */\r\nfunction addPassword(parameters, password) {\r\n    parameters.set(PasswordGrantConstants.password, password);\r\n}\r\n/**\r\n * add pop_jwk to query params\r\n * @param cnfString\r\n */\r\nfunction addPopToken(parameters, cnfString) {\r\n    if (cnfString) {\r\n        parameters.set(TOKEN_TYPE, AuthenticationScheme.POP);\r\n        parameters.set(REQ_CNF, cnfString);\r\n    }\r\n}\r\n/**\r\n * add SSH JWK and key ID to query params\r\n */\r\nfunction addSshJwk(parameters, sshJwkString) {\r\n    if (sshJwkString) {\r\n        parameters.set(TOKEN_TYPE, AuthenticationScheme.SSH);\r\n        parameters.set(REQ_CNF, sshJwkString);\r\n    }\r\n}\r\n/**\r\n * add server telemetry fields\r\n * @param serverTelemetryManager\r\n */\r\nfunction addServerTelemetry(parameters, serverTelemetryManager) {\r\n    parameters.set(X_CLIENT_CURR_TELEM, serverTelemetryManager.generateCurrentRequestHeaderValue());\r\n    parameters.set(X_CLIENT_LAST_TELEM, serverTelemetryManager.generateLastRequestHeaderValue());\r\n}\r\n/**\r\n * Adds parameter that indicates to the server that throttling is supported\r\n */\r\nfunction addThrottling(parameters) {\r\n    parameters.set(X_MS_LIB_CAPABILITY, ThrottlingConstants.X_MS_LIB_CAPABILITY_VALUE);\r\n}\r\n/**\r\n * Adds logout_hint parameter for \"silent\" logout which prevent server account picker\r\n */\r\nfunction addLogoutHint(parameters, logoutHint) {\r\n    parameters.set(LOGOUT_HINT, logoutHint);\r\n}\r\nfunction addBrokerParameters(parameters, brokerClientId, brokerRedirectUri) {\r\n    if (!parameters.has(BROKER_CLIENT_ID)) {\r\n        parameters.set(BROKER_CLIENT_ID, brokerClientId);\r\n    }\r\n    if (!parameters.has(BROKER_REDIRECT_URI)) {\r\n        parameters.set(BROKER_REDIRECT_URI, brokerRedirectUri);\r\n    }\r\n}\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Authority types supported by MSAL.\r\n */\r\nconst AuthorityType = {\r\n    Default: 0,\r\n    Adfs: 1,\r\n    Dsts: 2,\r\n    Ciam: 3,\r\n};\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nfunction isOpenIdConfigResponse(response) {\r\n    return (response.hasOwnProperty(\"authorization_endpoint\") &&\r\n        response.hasOwnProperty(\"token_endpoint\") &&\r\n        response.hasOwnProperty(\"issuer\") &&\r\n        response.hasOwnProperty(\"jwks_uri\"));\r\n}\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nfunction isCloudInstanceDiscoveryResponse(response) {\r\n    return (response.hasOwnProperty(\"tenant_discovery_endpoint\") &&\r\n        response.hasOwnProperty(\"metadata\"));\r\n}\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nfunction isCloudInstanceDiscoveryErrorResponse(response) {\r\n    return (response.hasOwnProperty(\"error\") &&\r\n        response.hasOwnProperty(\"error_description\"));\r\n}\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Wraps a function with a performance measurement.\r\n * Usage: invoke(functionToCall, performanceClient, \"EventName\", \"correlationId\")(...argsToPassToFunction)\r\n * @param callback\r\n * @param eventName\r\n * @param logger\r\n * @param telemetryClient\r\n * @param correlationId\r\n * @returns\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst invoke = (callback, eventName, logger, telemetryClient, correlationId) => {\r\n    return (...args) => {\r\n        logger.trace(`Executing function ${eventName}`);\r\n        const inProgressEvent = telemetryClient?.startMeasurement(eventName, correlationId);\r\n        if (correlationId) {\r\n            // Track number of times this API is called in a single request\r\n            const eventCount = eventName + \"CallCount\";\r\n            telemetryClient?.incrementFields({ [eventCount]: 1 }, correlationId);\r\n        }\r\n        try {\r\n            const result = callback(...args);\r\n            inProgressEvent?.end({\r\n                success: true,\r\n            });\r\n            logger.trace(`Returning result from ${eventName}`);\r\n            return result;\r\n        }\r\n        catch (e) {\r\n            logger.trace(`Error occurred in ${eventName}`);\r\n            try {\r\n                logger.trace(JSON.stringify(e));\r\n            }\r\n            catch (e) {\r\n                logger.trace(\"Unable to print error message.\");\r\n            }\r\n            inProgressEvent?.end({\r\n                success: false,\r\n            }, e);\r\n            throw e;\r\n        }\r\n    };\r\n};\r\n/**\r\n * Wraps an async function with a performance measurement.\r\n * Usage: invokeAsync(functionToCall, performanceClient, \"EventName\", \"correlationId\")(...argsToPassToFunction)\r\n * @param callback\r\n * @param eventName\r\n * @param logger\r\n * @param telemetryClient\r\n * @param correlationId\r\n * @returns\r\n * @internal\r\n *\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst invokeAsync = (callback, eventName, logger, telemetryClient, correlationId) => {\r\n    return (...args) => {\r\n        logger.trace(`Executing function ${eventName}`);\r\n        const inProgressEvent = telemetryClient?.startMeasurement(eventName, correlationId);\r\n        if (correlationId) {\r\n            // Track number of times this API is called in a single request\r\n            const eventCount = eventName + \"CallCount\";\r\n            telemetryClient?.incrementFields({ [eventCount]: 1 }, correlationId);\r\n        }\r\n        telemetryClient?.setPreQueueTime(eventName, correlationId);\r\n        return callback(...args)\r\n            .then((response) => {\r\n            logger.trace(`Returning result from ${eventName}`);\r\n            inProgressEvent?.end({\r\n                success: true,\r\n            });\r\n            return response;\r\n        })\r\n            .catch((e) => {\r\n            logger.trace(`Error occurred in ${eventName}`);\r\n            try {\r\n                logger.trace(JSON.stringify(e));\r\n            }\r\n            catch (e) {\r\n                logger.trace(\"Unable to print error message.\");\r\n            }\r\n            inProgressEvent?.end({\r\n                success: false,\r\n            }, e);\r\n            throw e;\r\n        });\r\n    };\r\n};\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nclass RegionDiscovery {\r\n    constructor(networkInterface, logger, performanceClient, correlationId) {\r\n        this.networkInterface = networkInterface;\r\n        this.logger = logger;\r\n        this.performanceClient = performanceClient;\r\n        this.correlationId = correlationId;\r\n    }\r\n    /**\r\n     * Detect the region from the application's environment.\r\n     *\r\n     * @returns Promise<string | null>\r\n     */\r\n    async detectRegion(environmentRegion, regionDiscoveryMetadata) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RegionDiscoveryDetectRegion, this.correlationId);\r\n        // Initialize auto detected region with the region from the envrionment\r\n        let autodetectedRegionName = environmentRegion;\r\n        // Check if a region was detected from the environment, if not, attempt to get the region from IMDS\r\n        if (!autodetectedRegionName) {\r\n            const options = RegionDiscovery.IMDS_OPTIONS;\r\n            try {\r\n                const localIMDSVersionResponse = await invokeAsync(this.getRegionFromIMDS.bind(this), PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.logger, this.performanceClient, this.correlationId)(Constants$1.IMDS_VERSION, options);\r\n                if (localIMDSVersionResponse.status === HttpStatus.SUCCESS) {\r\n                    autodetectedRegionName = localIMDSVersionResponse.body;\r\n                    regionDiscoveryMetadata.region_source =\r\n                        RegionDiscoverySources.IMDS;\r\n                }\r\n                // If the response using the local IMDS version failed, try to fetch the current version of IMDS and retry.\r\n                if (localIMDSVersionResponse.status === HttpStatus.BAD_REQUEST) {\r\n                    const currentIMDSVersion = await invokeAsync(this.getCurrentVersion.bind(this), PerformanceEvents.RegionDiscoveryGetCurrentVersion, this.logger, this.performanceClient, this.correlationId)(options);\r\n                    if (!currentIMDSVersion) {\r\n                        regionDiscoveryMetadata.region_source =\r\n                            RegionDiscoverySources.FAILED_AUTO_DETECTION;\r\n                        return null;\r\n                    }\r\n                    const currentIMDSVersionResponse = await invokeAsync(this.getRegionFromIMDS.bind(this), PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.logger, this.performanceClient, this.correlationId)(currentIMDSVersion, options);\r\n                    if (currentIMDSVersionResponse.status === HttpStatus.SUCCESS) {\r\n                        autodetectedRegionName =\r\n                            currentIMDSVersionResponse.body;\r\n                        regionDiscoveryMetadata.region_source =\r\n                            RegionDiscoverySources.IMDS;\r\n                    }\r\n                }\r\n            }\r\n            catch (e) {\r\n                regionDiscoveryMetadata.region_source =\r\n                    RegionDiscoverySources.FAILED_AUTO_DETECTION;\r\n                return null;\r\n            }\r\n        }\r\n        else {\r\n            regionDiscoveryMetadata.region_source =\r\n                RegionDiscoverySources.ENVIRONMENT_VARIABLE;\r\n        }\r\n        // If no region was auto detected from the environment or from the IMDS endpoint, mark the attempt as a FAILED_AUTO_DETECTION\r\n        if (!autodetectedRegionName) {\r\n            regionDiscoveryMetadata.region_source =\r\n                RegionDiscoverySources.FAILED_AUTO_DETECTION;\r\n        }\r\n        return autodetectedRegionName || null;\r\n    }\r\n    /**\r\n     * Make the call to the IMDS endpoint\r\n     *\r\n     * @param imdsEndpointUrl\r\n     * @returns Promise<NetworkResponse<string>>\r\n     */\r\n    async getRegionFromIMDS(version, options) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.correlationId);\r\n        return this.networkInterface.sendGetRequestAsync(`${Constants$1.IMDS_ENDPOINT}?api-version=${version}&format=text`, options, Constants$1.IMDS_TIMEOUT);\r\n    }\r\n    /**\r\n     * Get the most recent version of the IMDS endpoint available\r\n     *\r\n     * @returns Promise<string | null>\r\n     */\r\n    async getCurrentVersion(options) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RegionDiscoveryGetCurrentVersion, this.correlationId);\r\n        try {\r\n            const response = await this.networkInterface.sendGetRequestAsync(`${Constants$1.IMDS_ENDPOINT}?format=json`, options);\r\n            // When IMDS endpoint is called without the api version query param, bad request response comes back with latest version.\r\n            if (response.status === HttpStatus.BAD_REQUEST &&\r\n                response.body &&\r\n                response.body[\"newest-versions\"] &&\r\n                response.body[\"newest-versions\"].length > 0) {\r\n                return response.body[\"newest-versions\"][0];\r\n            }\r\n            return null;\r\n        }\r\n        catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n// Options for the IMDS endpoint request\r\nRegionDiscovery.IMDS_OPTIONS = {\r\n    headers: {\r\n        Metadata: \"true\",\r\n    },\r\n};\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Utility functions for managing date and time operations.\r\n */\r\n/**\r\n * return the current time in Unix time (seconds).\r\n */\r\nfunction nowSeconds() {\r\n    // Date.getTime() returns in milliseconds.\r\n    return Math.round(new Date().getTime() / 1000.0);\r\n}\r\n/**\r\n * Convert seconds to JS Date object. Seconds can be in a number or string format or undefined (will still return a date).\r\n * @param seconds\r\n */\r\nfunction toDateFromSeconds(seconds) {\r\n    if (seconds) {\r\n        return new Date(Number(seconds) * 1000);\r\n    }\r\n    return new Date();\r\n}\r\n/**\r\n * check if a token is expired based on given UTC time in seconds.\r\n * @param expiresOn\r\n */\r\nfunction isTokenExpired(expiresOn, offset) {\r\n    // check for access token expiry\r\n    const expirationSec = Number(expiresOn) || 0;\r\n    const offsetCurrentTimeSec = nowSeconds() + offset;\r\n    // If current time + offset is greater than token expiration time, then token is expired.\r\n    return offsetCurrentTimeSec > expirationSec;\r\n}\r\n/**\r\n * If the current time is earlier than the time that a token was cached at, we must discard the token\r\n * i.e. The system clock was turned back after acquiring the cached token\r\n * @param cachedAt\r\n * @param offset\r\n */\r\nfunction wasClockTurnedBack(cachedAt) {\r\n    const cachedAtSec = Number(cachedAt);\r\n    return cachedAtSec > nowSeconds();\r\n}\r\n/**\r\n * Waits for t number of milliseconds\r\n * @param t number\r\n * @param value T\r\n */\r\nfunction delay(t, value) {\r\n    return new Promise((resolve) => setTimeout(() => resolve(value), t));\r\n}\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Create IdTokenEntity\r\n * @param homeAccountId\r\n * @param authenticationResult\r\n * @param clientId\r\n * @param authority\r\n */\r\nfunction createIdTokenEntity(homeAccountId, environment, idToken, clientId, tenantId) {\r\n    const idTokenEntity = {\r\n        credentialType: CredentialType.ID_TOKEN,\r\n        homeAccountId: homeAccountId,\r\n        environment: environment,\r\n        clientId: clientId,\r\n        secret: idToken,\r\n        realm: tenantId,\r\n        lastUpdatedAt: Date.now().toString(), // Set the last updated time to now\r\n    };\r\n    return idTokenEntity;\r\n}\r\n/**\r\n * Create AccessTokenEntity\r\n * @param homeAccountId\r\n * @param environment\r\n * @param accessToken\r\n * @param clientId\r\n * @param tenantId\r\n * @param scopes\r\n * @param expiresOn\r\n * @param extExpiresOn\r\n */\r\nfunction createAccessTokenEntity(homeAccountId, environment, accessToken, clientId, tenantId, scopes, expiresOn, extExpiresOn, base64Decode, refreshOn, tokenType, userAssertionHash, keyId, requestedClaims, requestedClaimsHash) {\r\n    const atEntity = {\r\n        homeAccountId: homeAccountId,\r\n        credentialType: CredentialType.ACCESS_TOKEN,\r\n        secret: accessToken,\r\n        cachedAt: nowSeconds().toString(),\r\n        expiresOn: expiresOn.toString(),\r\n        extendedExpiresOn: extExpiresOn.toString(),\r\n        environment: environment,\r\n        clientId: clientId,\r\n        realm: tenantId,\r\n        target: scopes,\r\n        tokenType: tokenType || AuthenticationScheme.BEARER,\r\n        lastUpdatedAt: Date.now().toString(), // Set the last updated time to now\r\n    };\r\n    if (userAssertionHash) {\r\n        atEntity.userAssertionHash = userAssertionHash;\r\n    }\r\n    if (refreshOn) {\r\n        atEntity.refreshOn = refreshOn.toString();\r\n    }\r\n    if (requestedClaims) {\r\n        atEntity.requestedClaims = requestedClaims;\r\n        atEntity.requestedClaimsHash = requestedClaimsHash;\r\n    }\r\n    /*\r\n     * Create Access Token With Auth Scheme instead of regular access token\r\n     * Cast to lower to handle \"bearer\" from ADFS\r\n     */\r\n    if (atEntity.tokenType?.toLowerCase() !==\r\n        AuthenticationScheme.BEARER.toLowerCase()) {\r\n        atEntity.credentialType = CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;\r\n        switch (atEntity.tokenType) {\r\n            case AuthenticationScheme.POP:\r\n                // Make sure keyId is present and add it to credential\r\n                const tokenClaims = extractTokenClaims(accessToken, base64Decode);\r\n                if (!tokenClaims?.cnf?.kid) {\r\n                    throw createClientAuthError(tokenClaimsCnfRequiredForSignedJwt);\r\n                }\r\n                atEntity.keyId = tokenClaims.cnf.kid;\r\n                break;\r\n            case AuthenticationScheme.SSH:\r\n                atEntity.keyId = keyId;\r\n        }\r\n    }\r\n    return atEntity;\r\n}\r\n/**\r\n * Create RefreshTokenEntity\r\n * @param homeAccountId\r\n * @param authenticationResult\r\n * @param clientId\r\n * @param authority\r\n */\r\nfunction createRefreshTokenEntity(homeAccountId, environment, refreshToken, clientId, familyId, userAssertionHash, expiresOn) {\r\n    const rtEntity = {\r\n        credentialType: CredentialType.REFRESH_TOKEN,\r\n        homeAccountId: homeAccountId,\r\n        environment: environment,\r\n        clientId: clientId,\r\n        secret: refreshToken,\r\n        lastUpdatedAt: Date.now().toString(),\r\n    };\r\n    if (userAssertionHash) {\r\n        rtEntity.userAssertionHash = userAssertionHash;\r\n    }\r\n    if (familyId) {\r\n        rtEntity.familyId = familyId;\r\n    }\r\n    if (expiresOn) {\r\n        rtEntity.expiresOn = expiresOn.toString();\r\n    }\r\n    return rtEntity;\r\n}\r\nfunction isCredentialEntity(entity) {\r\n    return (entity.hasOwnProperty(\"homeAccountId\") &&\r\n        entity.hasOwnProperty(\"environment\") &&\r\n        entity.hasOwnProperty(\"credentialType\") &&\r\n        entity.hasOwnProperty(\"clientId\") &&\r\n        entity.hasOwnProperty(\"secret\"));\r\n}\r\n/**\r\n * Validates an entity: checks for all expected params\r\n * @param entity\r\n */\r\nfunction isAccessTokenEntity(entity) {\r\n    if (!entity) {\r\n        return false;\r\n    }\r\n    return (isCredentialEntity(entity) &&\r\n        entity.hasOwnProperty(\"realm\") &&\r\n        entity.hasOwnProperty(\"target\") &&\r\n        (entity[\"credentialType\"] === CredentialType.ACCESS_TOKEN ||\r\n            entity[\"credentialType\"] ===\r\n                CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME));\r\n}\r\n/**\r\n * Validates an entity: checks for all expected params\r\n * @param entity\r\n */\r\nfunction isIdTokenEntity(entity) {\r\n    if (!entity) {\r\n        return false;\r\n    }\r\n    return (isCredentialEntity(entity) &&\r\n        entity.hasOwnProperty(\"realm\") &&\r\n        entity[\"credentialType\"] === CredentialType.ID_TOKEN);\r\n}\r\n/**\r\n * Validates an entity: checks for all expected params\r\n * @param entity\r\n */\r\nfunction isRefreshTokenEntity(entity) {\r\n    if (!entity) {\r\n        return false;\r\n    }\r\n    return (isCredentialEntity(entity) &&\r\n        entity[\"credentialType\"] === CredentialType.REFRESH_TOKEN);\r\n}\r\n/**\r\n * validates if a given cache entry is \"Telemetry\", parses <key,value>\r\n * @param key\r\n * @param entity\r\n */\r\nfunction isServerTelemetryEntity(key, entity) {\r\n    const validateKey = key.indexOf(SERVER_TELEM_CONSTANTS.CACHE_KEY) === 0;\r\n    let validateEntity = true;\r\n    if (entity) {\r\n        validateEntity =\r\n            entity.hasOwnProperty(\"failedRequests\") &&\r\n                entity.hasOwnProperty(\"errors\") &&\r\n                entity.hasOwnProperty(\"cacheHits\");\r\n    }\r\n    return validateKey && validateEntity;\r\n}\r\n/**\r\n * validates if a given cache entry is \"Throttling\", parses <key,value>\r\n * @param key\r\n * @param entity\r\n */\r\nfunction isThrottlingEntity(key, entity) {\r\n    let validateKey = false;\r\n    if (key) {\r\n        validateKey = key.indexOf(ThrottlingConstants.THROTTLING_PREFIX) === 0;\r\n    }\r\n    let validateEntity = true;\r\n    if (entity) {\r\n        validateEntity = entity.hasOwnProperty(\"throttleTime\");\r\n    }\r\n    return validateKey && validateEntity;\r\n}\r\n/**\r\n * Generate AppMetadata Cache Key as per the schema: appmetadata-<environment>-<client_id>\r\n */\r\nfunction generateAppMetadataKey({ environment, clientId, }) {\r\n    const appMetaDataKeyArray = [\r\n        APP_METADATA,\r\n        environment,\r\n        clientId,\r\n    ];\r\n    return appMetaDataKeyArray\r\n        .join(Separators.CACHE_KEY_SEPARATOR)\r\n        .toLowerCase();\r\n}\r\n/*\r\n * Validates an entity: checks for all expected params\r\n * @param entity\r\n */\r\nfunction isAppMetadataEntity(key, entity) {\r\n    if (!entity) {\r\n        return false;\r\n    }\r\n    return (key.indexOf(APP_METADATA) === 0 &&\r\n        entity.hasOwnProperty(\"clientId\") &&\r\n        entity.hasOwnProperty(\"environment\"));\r\n}\r\n/**\r\n * Validates an entity: checks for all expected params\r\n * @param entity\r\n */\r\nfunction isAuthorityMetadataEntity(key, entity) {\r\n    if (!entity) {\r\n        return false;\r\n    }\r\n    return (key.indexOf(AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) === 0 &&\r\n        entity.hasOwnProperty(\"aliases\") &&\r\n        entity.hasOwnProperty(\"preferred_cache\") &&\r\n        entity.hasOwnProperty(\"preferred_network\") &&\r\n        entity.hasOwnProperty(\"canonical_authority\") &&\r\n        entity.hasOwnProperty(\"authorization_endpoint\") &&\r\n        entity.hasOwnProperty(\"token_endpoint\") &&\r\n        entity.hasOwnProperty(\"issuer\") &&\r\n        entity.hasOwnProperty(\"aliasesFromNetwork\") &&\r\n        entity.hasOwnProperty(\"endpointsFromNetwork\") &&\r\n        entity.hasOwnProperty(\"expiresAt\") &&\r\n        entity.hasOwnProperty(\"jwks_uri\"));\r\n}\r\n/**\r\n * Reset the exiresAt value\r\n */\r\nfunction generateAuthorityMetadataExpiresAt() {\r\n    return (nowSeconds() +\r\n        AUTHORITY_METADATA_CONSTANTS.REFRESH_TIME_SECONDS);\r\n}\r\nfunction updateAuthorityEndpointMetadata(authorityMetadata, updatedValues, fromNetwork) {\r\n    authorityMetadata.authorization_endpoint =\r\n        updatedValues.authorization_endpoint;\r\n    authorityMetadata.token_endpoint = updatedValues.token_endpoint;\r\n    authorityMetadata.end_session_endpoint = updatedValues.end_session_endpoint;\r\n    authorityMetadata.issuer = updatedValues.issuer;\r\n    authorityMetadata.endpointsFromNetwork = fromNetwork;\r\n    authorityMetadata.jwks_uri = updatedValues.jwks_uri;\r\n}\r\nfunction updateCloudDiscoveryMetadata(authorityMetadata, updatedValues, fromNetwork) {\r\n    authorityMetadata.aliases = updatedValues.aliases;\r\n    authorityMetadata.preferred_cache = updatedValues.preferred_cache;\r\n    authorityMetadata.preferred_network = updatedValues.preferred_network;\r\n    authorityMetadata.aliasesFromNetwork = fromNetwork;\r\n}\r\n/**\r\n * Returns whether or not the data needs to be refreshed\r\n */\r\nfunction isAuthorityMetadataExpired(metadata) {\r\n    return metadata.expiresAt <= nowSeconds();\r\n}\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * The authority class validates the authority URIs used by the user, and retrieves the OpenID Configuration Data from the\r\n * endpoint. It will store the pertinent config data in this object for use during token calls.\r\n * @internal\r\n */\r\nclass Authority {\r\n    constructor(authority, networkInterface, cacheManager, authorityOptions, logger, correlationId, performanceClient, managedIdentity) {\r\n        this.canonicalAuthority = authority;\r\n        this._canonicalAuthority.validateAsUri();\r\n        this.networkInterface = networkInterface;\r\n        this.cacheManager = cacheManager;\r\n        this.authorityOptions = authorityOptions;\r\n        this.regionDiscoveryMetadata = {\r\n            region_used: undefined,\r\n            region_source: undefined,\r\n            region_outcome: undefined,\r\n        };\r\n        this.logger = logger;\r\n        this.performanceClient = performanceClient;\r\n        this.correlationId = correlationId;\r\n        this.managedIdentity = managedIdentity || false;\r\n        this.regionDiscovery = new RegionDiscovery(networkInterface, this.logger, this.performanceClient, this.correlationId);\r\n    }\r\n    /**\r\n     * Get {@link AuthorityType}\r\n     * @param authorityUri {@link IUri}\r\n     * @private\r\n     */\r\n    getAuthorityType(authorityUri) {\r\n        // CIAM auth url pattern is being standardized as: <tenant>.ciamlogin.com\r\n        if (authorityUri.HostNameAndPort.endsWith(Constants$1.CIAM_AUTH_URL)) {\r\n            return AuthorityType.Ciam;\r\n        }\r\n        const pathSegments = authorityUri.PathSegments;\r\n        if (pathSegments.length) {\r\n            switch (pathSegments[0].toLowerCase()) {\r\n                case Constants$1.ADFS:\r\n                    return AuthorityType.Adfs;\r\n                case Constants$1.DSTS:\r\n                    return AuthorityType.Dsts;\r\n            }\r\n        }\r\n        return AuthorityType.Default;\r\n    }\r\n    // See above for AuthorityType\r\n    get authorityType() {\r\n        return this.getAuthorityType(this.canonicalAuthorityUrlComponents);\r\n    }\r\n    /**\r\n     * ProtocolMode enum representing the way endpoints are constructed.\r\n     */\r\n    get protocolMode() {\r\n        return this.authorityOptions.protocolMode;\r\n    }\r\n    /**\r\n     * Returns authorityOptions which can be used to reinstantiate a new authority instance\r\n     */\r\n    get options() {\r\n        return this.authorityOptions;\r\n    }\r\n    /**\r\n     * A URL that is the authority set by the developer\r\n     */\r\n    get canonicalAuthority() {\r\n        return this._canonicalAuthority.urlString;\r\n    }\r\n    /**\r\n     * Sets canonical authority.\r\n     */\r\n    set canonicalAuthority(url) {\r\n        this._canonicalAuthority = new UrlString(url);\r\n        this._canonicalAuthority.validateAsUri();\r\n        this._canonicalAuthorityUrlComponents = null;\r\n    }\r\n    /**\r\n     * Get authority components.\r\n     */\r\n    get canonicalAuthorityUrlComponents() {\r\n        if (!this._canonicalAuthorityUrlComponents) {\r\n            this._canonicalAuthorityUrlComponents =\r\n                this._canonicalAuthority.getUrlComponents();\r\n        }\r\n        return this._canonicalAuthorityUrlComponents;\r\n    }\r\n    /**\r\n     * Get hostname and port i.e. login.microsoftonline.com\r\n     */\r\n    get hostnameAndPort() {\r\n        return this.canonicalAuthorityUrlComponents.HostNameAndPort.toLowerCase();\r\n    }\r\n    /**\r\n     * Get tenant for authority.\r\n     */\r\n    get tenant() {\r\n        return this.canonicalAuthorityUrlComponents.PathSegments[0];\r\n    }\r\n    /**\r\n     * OAuth /authorize endpoint for requests\r\n     */\r\n    get authorizationEndpoint() {\r\n        if (this.discoveryComplete()) {\r\n            return this.replacePath(this.metadata.authorization_endpoint);\r\n        }\r\n        else {\r\n            throw createClientAuthError(endpointResolutionError);\r\n        }\r\n    }\r\n    /**\r\n     * OAuth /token endpoint for requests\r\n     */\r\n    get tokenEndpoint() {\r\n        if (this.discoveryComplete()) {\r\n            return this.replacePath(this.metadata.token_endpoint);\r\n        }\r\n        else {\r\n            throw createClientAuthError(endpointResolutionError);\r\n        }\r\n    }\r\n    get deviceCodeEndpoint() {\r\n        if (this.discoveryComplete()) {\r\n            return this.replacePath(this.metadata.token_endpoint.replace(\"/token\", \"/devicecode\"));\r\n        }\r\n        else {\r\n            throw createClientAuthError(endpointResolutionError);\r\n        }\r\n    }\r\n    /**\r\n     * OAuth logout endpoint for requests\r\n     */\r\n    get endSessionEndpoint() {\r\n        if (this.discoveryComplete()) {\r\n            // ROPC policies may not have end_session_endpoint set\r\n            if (!this.metadata.end_session_endpoint) {\r\n                throw createClientAuthError(endSessionEndpointNotSupported);\r\n            }\r\n            return this.replacePath(this.metadata.end_session_endpoint);\r\n        }\r\n        else {\r\n            throw createClientAuthError(endpointResolutionError);\r\n        }\r\n    }\r\n    /**\r\n     * OAuth issuer for requests\r\n     */\r\n    get selfSignedJwtAudience() {\r\n        if (this.discoveryComplete()) {\r\n            return this.replacePath(this.metadata.issuer);\r\n        }\r\n        else {\r\n            throw createClientAuthError(endpointResolutionError);\r\n        }\r\n    }\r\n    /**\r\n     * Jwks_uri for token signing keys\r\n     */\r\n    get jwksUri() {\r\n        if (this.discoveryComplete()) {\r\n            return this.replacePath(this.metadata.jwks_uri);\r\n        }\r\n        else {\r\n            throw createClientAuthError(endpointResolutionError);\r\n        }\r\n    }\r\n    /**\r\n     * Returns a flag indicating that tenant name can be replaced in authority {@link IUri}\r\n     * @param authorityUri {@link IUri}\r\n     * @private\r\n     */\r\n    canReplaceTenant(authorityUri) {\r\n        return (authorityUri.PathSegments.length === 1 &&\r\n            !Authority.reservedTenantDomains.has(authorityUri.PathSegments[0]) &&\r\n            this.getAuthorityType(authorityUri) === AuthorityType.Default &&\r\n            this.protocolMode !== ProtocolMode.OIDC);\r\n    }\r\n    /**\r\n     * Replaces tenant in url path with current tenant. Defaults to common.\r\n     * @param urlString\r\n     */\r\n    replaceTenant(urlString) {\r\n        return urlString.replace(/{tenant}|{tenantid}/g, this.tenant);\r\n    }\r\n    /**\r\n     * Replaces path such as tenant or policy with the current tenant or policy.\r\n     * @param urlString\r\n     */\r\n    replacePath(urlString) {\r\n        let endpoint = urlString;\r\n        const cachedAuthorityUrl = new UrlString(this.metadata.canonical_authority);\r\n        const cachedAuthorityUrlComponents = cachedAuthorityUrl.getUrlComponents();\r\n        const cachedAuthorityParts = cachedAuthorityUrlComponents.PathSegments;\r\n        const currentAuthorityParts = this.canonicalAuthorityUrlComponents.PathSegments;\r\n        currentAuthorityParts.forEach((currentPart, index) => {\r\n            let cachedPart = cachedAuthorityParts[index];\r\n            if (index === 0 &&\r\n                this.canReplaceTenant(cachedAuthorityUrlComponents)) {\r\n                const tenantId = new UrlString(this.metadata.authorization_endpoint).getUrlComponents().PathSegments[0];\r\n                /**\r\n                 * Check if AAD canonical authority contains tenant domain name, for example \"testdomain.onmicrosoft.com\",\r\n                 * by comparing its first path segment to the corresponding authorization endpoint path segment, which is\r\n                 * always resolved with tenant id by OIDC.\r\n                 */\r\n                if (cachedPart !== tenantId) {\r\n                    this.logger.verbose(`Replacing tenant domain name ${cachedPart} with id ${tenantId}`);\r\n                    cachedPart = tenantId;\r\n                }\r\n            }\r\n            if (currentPart !== cachedPart) {\r\n                endpoint = endpoint.replace(`/${cachedPart}/`, `/${currentPart}/`);\r\n            }\r\n        });\r\n        return this.replaceTenant(endpoint);\r\n    }\r\n    /**\r\n     * The default open id configuration endpoint for any canonical authority.\r\n     */\r\n    get defaultOpenIdConfigurationEndpoint() {\r\n        const canonicalAuthorityHost = this.hostnameAndPort;\r\n        if (this.canonicalAuthority.endsWith(\"v2.0/\") ||\r\n            this.authorityType === AuthorityType.Adfs ||\r\n            (this.protocolMode === ProtocolMode.OIDC &&\r\n                !this.isAliasOfKnownMicrosoftAuthority(canonicalAuthorityHost))) {\r\n            return `${this.canonicalAuthority}.well-known/openid-configuration`;\r\n        }\r\n        return `${this.canonicalAuthority}v2.0/.well-known/openid-configuration`;\r\n    }\r\n    /**\r\n     * Boolean that returns whether or not tenant discovery has been completed.\r\n     */\r\n    discoveryComplete() {\r\n        return !!this.metadata;\r\n    }\r\n    /**\r\n     * Perform endpoint discovery to discover aliases, preferred_cache, preferred_network\r\n     * and the /authorize, /token and logout endpoints.\r\n     */\r\n    async resolveEndpointsAsync() {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityResolveEndpointsAsync, this.correlationId);\r\n        const metadataEntity = this.getCurrentMetadataEntity();\r\n        const cloudDiscoverySource = await invokeAsync(this.updateCloudDiscoveryMetadata.bind(this), PerformanceEvents.AuthorityUpdateCloudDiscoveryMetadata, this.logger, this.performanceClient, this.correlationId)(metadataEntity);\r\n        this.canonicalAuthority = this.canonicalAuthority.replace(this.hostnameAndPort, metadataEntity.preferred_network);\r\n        const endpointSource = await invokeAsync(this.updateEndpointMetadata.bind(this), PerformanceEvents.AuthorityUpdateEndpointMetadata, this.logger, this.performanceClient, this.correlationId)(metadataEntity);\r\n        this.updateCachedMetadata(metadataEntity, cloudDiscoverySource, {\r\n            source: endpointSource,\r\n        });\r\n        this.performanceClient?.addFields({\r\n            cloudDiscoverySource: cloudDiscoverySource,\r\n            authorityEndpointSource: endpointSource,\r\n        }, this.correlationId);\r\n    }\r\n    /**\r\n     * Returns metadata entity from cache if it exists, otherwiser returns a new metadata entity built\r\n     * from the configured canonical authority\r\n     * @returns\r\n     */\r\n    getCurrentMetadataEntity() {\r\n        let metadataEntity = this.cacheManager.getAuthorityMetadataByAlias(this.hostnameAndPort);\r\n        if (!metadataEntity) {\r\n            metadataEntity = {\r\n                aliases: [],\r\n                preferred_cache: this.hostnameAndPort,\r\n                preferred_network: this.hostnameAndPort,\r\n                canonical_authority: this.canonicalAuthority,\r\n                authorization_endpoint: \"\",\r\n                token_endpoint: \"\",\r\n                end_session_endpoint: \"\",\r\n                issuer: \"\",\r\n                aliasesFromNetwork: false,\r\n                endpointsFromNetwork: false,\r\n                expiresAt: generateAuthorityMetadataExpiresAt(),\r\n                jwks_uri: \"\",\r\n            };\r\n        }\r\n        return metadataEntity;\r\n    }\r\n    /**\r\n     * Updates cached metadata based on metadata source and sets the instance's metadata\r\n     * property to the same value\r\n     * @param metadataEntity\r\n     * @param cloudDiscoverySource\r\n     * @param endpointMetadataResult\r\n     */\r\n    updateCachedMetadata(metadataEntity, cloudDiscoverySource, endpointMetadataResult) {\r\n        if (cloudDiscoverySource !== AuthorityMetadataSource.CACHE &&\r\n            endpointMetadataResult?.source !== AuthorityMetadataSource.CACHE) {\r\n            // Reset the expiration time unless both values came from a successful cache lookup\r\n            metadataEntity.expiresAt =\r\n                generateAuthorityMetadataExpiresAt();\r\n            metadataEntity.canonical_authority = this.canonicalAuthority;\r\n        }\r\n        const cacheKey = this.cacheManager.generateAuthorityMetadataCacheKey(metadataEntity.preferred_cache);\r\n        this.cacheManager.setAuthorityMetadata(cacheKey, metadataEntity);\r\n        this.metadata = metadataEntity;\r\n    }\r\n    /**\r\n     * Update AuthorityMetadataEntity with new endpoints and return where the information came from\r\n     * @param metadataEntity\r\n     */\r\n    async updateEndpointMetadata(metadataEntity) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityUpdateEndpointMetadata, this.correlationId);\r\n        const localMetadata = this.updateEndpointMetadataFromLocalSources(metadataEntity);\r\n        // Further update may be required for hardcoded metadata if regional metadata is preferred\r\n        if (localMetadata) {\r\n            if (localMetadata.source ===\r\n                AuthorityMetadataSource.HARDCODED_VALUES) {\r\n                // If the user prefers to use an azure region replace the global endpoints with regional information.\r\n                if (this.authorityOptions.azureRegionConfiguration?.azureRegion) {\r\n                    if (localMetadata.metadata) {\r\n                        const hardcodedMetadata = await invokeAsync(this.updateMetadataWithRegionalInformation.bind(this), PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation, this.logger, this.performanceClient, this.correlationId)(localMetadata.metadata);\r\n                        updateAuthorityEndpointMetadata(metadataEntity, hardcodedMetadata, false);\r\n                        metadataEntity.canonical_authority =\r\n                            this.canonicalAuthority;\r\n                    }\r\n                }\r\n            }\r\n            return localMetadata.source;\r\n        }\r\n        // Get metadata from network if local sources aren't available\r\n        let metadata = await invokeAsync(this.getEndpointMetadataFromNetwork.bind(this), PerformanceEvents.AuthorityGetEndpointMetadataFromNetwork, this.logger, this.performanceClient, this.correlationId)();\r\n        if (metadata) {\r\n            // If the user prefers to use an azure region replace the global endpoints with regional information.\r\n            if (this.authorityOptions.azureRegionConfiguration?.azureRegion) {\r\n                metadata = await invokeAsync(this.updateMetadataWithRegionalInformation.bind(this), PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation, this.logger, this.performanceClient, this.correlationId)(metadata);\r\n            }\r\n            updateAuthorityEndpointMetadata(metadataEntity, metadata, true);\r\n            return AuthorityMetadataSource.NETWORK;\r\n        }\r\n        else {\r\n            // Metadata could not be obtained from the config, cache, network or hardcoded values\r\n            throw createClientAuthError(openIdConfigError, this.defaultOpenIdConfigurationEndpoint);\r\n        }\r\n    }\r\n    /**\r\n     * Updates endpoint metadata from local sources and returns where the information was retrieved from and the metadata config\r\n     * response if the source is hardcoded metadata\r\n     * @param metadataEntity\r\n     * @returns\r\n     */\r\n    updateEndpointMetadataFromLocalSources(metadataEntity) {\r\n        this.logger.verbose(\"Attempting to get endpoint metadata from authority configuration\");\r\n        const configMetadata = this.getEndpointMetadataFromConfig();\r\n        if (configMetadata) {\r\n            this.logger.verbose(\"Found endpoint metadata in authority configuration\");\r\n            updateAuthorityEndpointMetadata(metadataEntity, configMetadata, false);\r\n            return {\r\n                source: AuthorityMetadataSource.CONFIG,\r\n            };\r\n        }\r\n        this.logger.verbose(\"Did not find endpoint metadata in the config... Attempting to get endpoint metadata from the hardcoded values.\");\r\n        // skipAuthorityMetadataCache is used to bypass hardcoded authority metadata and force a network metadata cache lookup and network metadata request if no cached response is available.\r\n        if (this.authorityOptions.skipAuthorityMetadataCache) {\r\n            this.logger.verbose(\"Skipping hardcoded metadata cache since skipAuthorityMetadataCache is set to true. Attempting to get endpoint metadata from the network metadata cache.\");\r\n        }\r\n        else {\r\n            const hardcodedMetadata = this.getEndpointMetadataFromHardcodedValues();\r\n            if (hardcodedMetadata) {\r\n                updateAuthorityEndpointMetadata(metadataEntity, hardcodedMetadata, false);\r\n                return {\r\n                    source: AuthorityMetadataSource.HARDCODED_VALUES,\r\n                    metadata: hardcodedMetadata,\r\n                };\r\n            }\r\n            else {\r\n                this.logger.verbose(\"Did not find endpoint metadata in hardcoded values... Attempting to get endpoint metadata from the network metadata cache.\");\r\n            }\r\n        }\r\n        // Check cached metadata entity expiration status\r\n        const metadataEntityExpired = isAuthorityMetadataExpired(metadataEntity);\r\n        if (this.isAuthoritySameType(metadataEntity) &&\r\n            metadataEntity.endpointsFromNetwork &&\r\n            !metadataEntityExpired) {\r\n            // No need to update\r\n            this.logger.verbose(\"Found endpoint metadata in the cache.\");\r\n            return { source: AuthorityMetadataSource.CACHE };\r\n        }\r\n        else if (metadataEntityExpired) {\r\n            this.logger.verbose(\"The metadata entity is expired.\");\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Compares the number of url components after the domain to determine if the cached\r\n     * authority metadata can be used for the requested authority. Protects against same domain different\r\n     * authority such as login.microsoftonline.com/tenant and login.microsoftonline.com/tfp/tenant/policy\r\n     * @param metadataEntity\r\n     */\r\n    isAuthoritySameType(metadataEntity) {\r\n        const cachedAuthorityUrl = new UrlString(metadataEntity.canonical_authority);\r\n        const cachedParts = cachedAuthorityUrl.getUrlComponents().PathSegments;\r\n        return (cachedParts.length ===\r\n            this.canonicalAuthorityUrlComponents.PathSegments.length);\r\n    }\r\n    /**\r\n     * Parse authorityMetadata config option\r\n     */\r\n    getEndpointMetadataFromConfig() {\r\n        if (this.authorityOptions.authorityMetadata) {\r\n            try {\r\n                return JSON.parse(this.authorityOptions.authorityMetadata);\r\n            }\r\n            catch (e) {\r\n                throw createClientConfigurationError(invalidAuthorityMetadata);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Gets OAuth endpoints from the given OpenID configuration endpoint.\r\n     *\r\n     * @param hasHardcodedMetadata boolean\r\n     */\r\n    async getEndpointMetadataFromNetwork() {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityGetEndpointMetadataFromNetwork, this.correlationId);\r\n        const options = {};\r\n        /*\r\n         * TODO: Add a timeout if the authority exists in our library's\r\n         * hardcoded list of metadata\r\n         */\r\n        const openIdConfigurationEndpoint = this.defaultOpenIdConfigurationEndpoint;\r\n        this.logger.verbose(`Authority.getEndpointMetadataFromNetwork: attempting to retrieve OAuth endpoints from ${openIdConfigurationEndpoint}`);\r\n        try {\r\n            const response = await this.networkInterface.sendGetRequestAsync(openIdConfigurationEndpoint, options);\r\n            const isValidResponse = isOpenIdConfigResponse(response.body);\r\n            if (isValidResponse) {\r\n                return response.body;\r\n            }\r\n            else {\r\n                this.logger.verbose(`Authority.getEndpointMetadataFromNetwork: could not parse response as OpenID configuration`);\r\n                return null;\r\n            }\r\n        }\r\n        catch (e) {\r\n            this.logger.verbose(`Authority.getEndpointMetadataFromNetwork: ${e}`);\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Get OAuth endpoints for common authorities.\r\n     */\r\n    getEndpointMetadataFromHardcodedValues() {\r\n        if (this.hostnameAndPort in EndpointMetadata) {\r\n            return EndpointMetadata[this.hostnameAndPort];\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Update the retrieved metadata with regional information.\r\n     * User selected Azure region will be used if configured.\r\n     */\r\n    async updateMetadataWithRegionalInformation(metadata) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation, this.correlationId);\r\n        const userConfiguredAzureRegion = this.authorityOptions.azureRegionConfiguration?.azureRegion;\r\n        if (userConfiguredAzureRegion) {\r\n            if (userConfiguredAzureRegion !==\r\n                Constants$1.AZURE_REGION_AUTO_DISCOVER_FLAG) {\r\n                this.regionDiscoveryMetadata.region_outcome =\r\n                    RegionDiscoveryOutcomes.CONFIGURED_NO_AUTO_DETECTION;\r\n                this.regionDiscoveryMetadata.region_used =\r\n                    userConfiguredAzureRegion;\r\n                return Authority.replaceWithRegionalInformation(metadata, userConfiguredAzureRegion);\r\n            }\r\n            const autodetectedRegionName = await invokeAsync(this.regionDiscovery.detectRegion.bind(this.regionDiscovery), PerformanceEvents.RegionDiscoveryDetectRegion, this.logger, this.performanceClient, this.correlationId)(this.authorityOptions.azureRegionConfiguration\r\n                ?.environmentRegion, this.regionDiscoveryMetadata);\r\n            if (autodetectedRegionName) {\r\n                this.regionDiscoveryMetadata.region_outcome =\r\n                    RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_SUCCESSFUL;\r\n                this.regionDiscoveryMetadata.region_used =\r\n                    autodetectedRegionName;\r\n                return Authority.replaceWithRegionalInformation(metadata, autodetectedRegionName);\r\n            }\r\n            this.regionDiscoveryMetadata.region_outcome =\r\n                RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_FAILED;\r\n        }\r\n        return metadata;\r\n    }\r\n    /**\r\n     * Updates the AuthorityMetadataEntity with new aliases, preferred_network and preferred_cache\r\n     * and returns where the information was retrieved from\r\n     * @param metadataEntity\r\n     * @returns AuthorityMetadataSource\r\n     */\r\n    async updateCloudDiscoveryMetadata(metadataEntity) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityUpdateCloudDiscoveryMetadata, this.correlationId);\r\n        const localMetadataSource = this.updateCloudDiscoveryMetadataFromLocalSources(metadataEntity);\r\n        if (localMetadataSource) {\r\n            return localMetadataSource;\r\n        }\r\n        // Fallback to network as metadata source\r\n        const metadata = await invokeAsync(this.getCloudDiscoveryMetadataFromNetwork.bind(this), PerformanceEvents.AuthorityGetCloudDiscoveryMetadataFromNetwork, this.logger, this.performanceClient, this.correlationId)();\r\n        if (metadata) {\r\n            updateCloudDiscoveryMetadata(metadataEntity, metadata, true);\r\n            return AuthorityMetadataSource.NETWORK;\r\n        }\r\n        // Metadata could not be obtained from the config, cache, network or hardcoded values\r\n        throw createClientConfigurationError(untrustedAuthority);\r\n    }\r\n    updateCloudDiscoveryMetadataFromLocalSources(metadataEntity) {\r\n        this.logger.verbose(\"Attempting to get cloud discovery metadata  from authority configuration\");\r\n        this.logger.verbosePii(`Known Authorities: ${this.authorityOptions.knownAuthorities ||\r\n            Constants$1.NOT_APPLICABLE}`);\r\n        this.logger.verbosePii(`Authority Metadata: ${this.authorityOptions.authorityMetadata ||\r\n            Constants$1.NOT_APPLICABLE}`);\r\n        this.logger.verbosePii(`Canonical Authority: ${metadataEntity.canonical_authority || Constants$1.NOT_APPLICABLE}`);\r\n        const metadata = this.getCloudDiscoveryMetadataFromConfig();\r\n        if (metadata) {\r\n            this.logger.verbose(\"Found cloud discovery metadata in authority configuration\");\r\n            updateCloudDiscoveryMetadata(metadataEntity, metadata, false);\r\n            return AuthorityMetadataSource.CONFIG;\r\n        }\r\n        // If the cached metadata came from config but that config was not passed to this instance, we must go to hardcoded values\r\n        this.logger.verbose(\"Did not find cloud discovery metadata in the config... Attempting to get cloud discovery metadata from the hardcoded values.\");\r\n        if (this.options.skipAuthorityMetadataCache) {\r\n            this.logger.verbose(\"Skipping hardcoded cloud discovery metadata cache since skipAuthorityMetadataCache is set to true. Attempting to get cloud discovery metadata from the network metadata cache.\");\r\n        }\r\n        else {\r\n            const hardcodedMetadata = getCloudDiscoveryMetadataFromHardcodedValues(this.hostnameAndPort);\r\n            if (hardcodedMetadata) {\r\n                this.logger.verbose(\"Found cloud discovery metadata from hardcoded values.\");\r\n                updateCloudDiscoveryMetadata(metadataEntity, hardcodedMetadata, false);\r\n                return AuthorityMetadataSource.HARDCODED_VALUES;\r\n            }\r\n            this.logger.verbose(\"Did not find cloud discovery metadata in hardcoded values... Attempting to get cloud discovery metadata from the network metadata cache.\");\r\n        }\r\n        const metadataEntityExpired = isAuthorityMetadataExpired(metadataEntity);\r\n        if (this.isAuthoritySameType(metadataEntity) &&\r\n            metadataEntity.aliasesFromNetwork &&\r\n            !metadataEntityExpired) {\r\n            this.logger.verbose(\"Found cloud discovery metadata in the cache.\");\r\n            // No need to update\r\n            return AuthorityMetadataSource.CACHE;\r\n        }\r\n        else if (metadataEntityExpired) {\r\n            this.logger.verbose(\"The metadata entity is expired.\");\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Parse cloudDiscoveryMetadata config or check knownAuthorities\r\n     */\r\n    getCloudDiscoveryMetadataFromConfig() {\r\n        // CIAM does not support cloud discovery metadata\r\n        if (this.authorityType === AuthorityType.Ciam) {\r\n            this.logger.verbose(\"CIAM authorities do not support cloud discovery metadata, generate the aliases from authority host.\");\r\n            return Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\r\n        }\r\n        // Check if network response was provided in config\r\n        if (this.authorityOptions.cloudDiscoveryMetadata) {\r\n            this.logger.verbose(\"The cloud discovery metadata has been provided as a network response, in the config.\");\r\n            try {\r\n                this.logger.verbose(\"Attempting to parse the cloud discovery metadata.\");\r\n                const parsedResponse = JSON.parse(this.authorityOptions.cloudDiscoveryMetadata);\r\n                const metadata = getCloudDiscoveryMetadataFromNetworkResponse(parsedResponse.metadata, this.hostnameAndPort);\r\n                this.logger.verbose(\"Parsed the cloud discovery metadata.\");\r\n                if (metadata) {\r\n                    this.logger.verbose(\"There is returnable metadata attached to the parsed cloud discovery metadata.\");\r\n                    return metadata;\r\n                }\r\n                else {\r\n                    this.logger.verbose(\"There is no metadata attached to the parsed cloud discovery metadata.\");\r\n                }\r\n            }\r\n            catch (e) {\r\n                this.logger.verbose(\"Unable to parse the cloud discovery metadata. Throwing Invalid Cloud Discovery Metadata Error.\");\r\n                throw createClientConfigurationError(invalidCloudDiscoveryMetadata);\r\n            }\r\n        }\r\n        // If cloudDiscoveryMetadata is empty or does not contain the host, check knownAuthorities\r\n        if (this.isInKnownAuthorities()) {\r\n            this.logger.verbose(\"The host is included in knownAuthorities. Creating new cloud discovery metadata from the host.\");\r\n            return Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Called to get metadata from network if CloudDiscoveryMetadata was not populated by config\r\n     *\r\n     * @param hasHardcodedMetadata boolean\r\n     */\r\n    async getCloudDiscoveryMetadataFromNetwork() {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityGetCloudDiscoveryMetadataFromNetwork, this.correlationId);\r\n        const instanceDiscoveryEndpoint = `${Constants$1.AAD_INSTANCE_DISCOVERY_ENDPT}${this.canonicalAuthority}oauth2/v2.0/authorize`;\r\n        const options = {};\r\n        /*\r\n         * TODO: Add a timeout if the authority exists in our library's\r\n         * hardcoded list of metadata\r\n         */\r\n        let match = null;\r\n        try {\r\n            const response = await this.networkInterface.sendGetRequestAsync(instanceDiscoveryEndpoint, options);\r\n            let typedResponseBody;\r\n            let metadata;\r\n            if (isCloudInstanceDiscoveryResponse(response.body)) {\r\n                typedResponseBody =\r\n                    response.body;\r\n                metadata = typedResponseBody.metadata;\r\n                this.logger.verbosePii(`tenant_discovery_endpoint is: ${typedResponseBody.tenant_discovery_endpoint}`);\r\n            }\r\n            else if (isCloudInstanceDiscoveryErrorResponse(response.body)) {\r\n                this.logger.warning(`A CloudInstanceDiscoveryErrorResponse was returned. The cloud instance discovery network request's status code is: ${response.status}`);\r\n                typedResponseBody =\r\n                    response.body;\r\n                if (typedResponseBody.error === Constants$1.INVALID_INSTANCE) {\r\n                    this.logger.error(\"The CloudInstanceDiscoveryErrorResponse error is invalid_instance.\");\r\n                    return null;\r\n                }\r\n                this.logger.warning(`The CloudInstanceDiscoveryErrorResponse error is ${typedResponseBody.error}`);\r\n                this.logger.warning(`The CloudInstanceDiscoveryErrorResponse error description is ${typedResponseBody.error_description}`);\r\n                this.logger.warning(\"Setting the value of the CloudInstanceDiscoveryMetadata (returned from the network) to []\");\r\n                metadata = [];\r\n            }\r\n            else {\r\n                this.logger.error(\"AAD did not return a CloudInstanceDiscoveryResponse or CloudInstanceDiscoveryErrorResponse\");\r\n                return null;\r\n            }\r\n            this.logger.verbose(\"Attempting to find a match between the developer's authority and the CloudInstanceDiscoveryMetadata returned from the network request.\");\r\n            match = getCloudDiscoveryMetadataFromNetworkResponse(metadata, this.hostnameAndPort);\r\n        }\r\n        catch (error) {\r\n            if (error instanceof AuthError) {\r\n                this.logger.error(`There was a network error while attempting to get the cloud discovery instance metadata.\\nError: ${error.errorCode}\\nError Description: ${error.errorMessage}`);\r\n            }\r\n            else {\r\n                const typedError = error;\r\n                this.logger.error(`A non-MSALJS error was thrown while attempting to get the cloud instance discovery metadata.\\nError: ${typedError.name}\\nError Description: ${typedError.message}`);\r\n            }\r\n            return null;\r\n        }\r\n        // Custom Domain scenario, host is trusted because Instance Discovery call succeeded\r\n        if (!match) {\r\n            this.logger.warning(\"The developer's authority was not found within the CloudInstanceDiscoveryMetadata returned from the network request.\");\r\n            this.logger.verbose(\"Creating custom Authority for custom domain scenario.\");\r\n            match = Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\r\n        }\r\n        return match;\r\n    }\r\n    /**\r\n     * Helper function to determine if this host is included in the knownAuthorities config option\r\n     */\r\n    isInKnownAuthorities() {\r\n        const matches = this.authorityOptions.knownAuthorities.filter((authority) => {\r\n            return (authority &&\r\n                UrlString.getDomainFromUrl(authority).toLowerCase() ===\r\n                    this.hostnameAndPort);\r\n        });\r\n        return matches.length > 0;\r\n    }\r\n    /**\r\n     * helper function to populate the authority based on azureCloudOptions\r\n     * @param authorityString\r\n     * @param azureCloudOptions\r\n     */\r\n    static generateAuthority(authorityString, azureCloudOptions) {\r\n        let authorityAzureCloudInstance;\r\n        if (azureCloudOptions &&\r\n            azureCloudOptions.azureCloudInstance !== AzureCloudInstance.None) {\r\n            const tenant = azureCloudOptions.tenant\r\n                ? azureCloudOptions.tenant\r\n                : Constants$1.DEFAULT_COMMON_TENANT;\r\n            authorityAzureCloudInstance = `${azureCloudOptions.azureCloudInstance}/${tenant}/`;\r\n        }\r\n        return authorityAzureCloudInstance\r\n            ? authorityAzureCloudInstance\r\n            : authorityString;\r\n    }\r\n    /**\r\n     * Creates cloud discovery metadata object from a given host\r\n     * @param host\r\n     */\r\n    static createCloudDiscoveryMetadataFromHost(host) {\r\n        return {\r\n            preferred_network: host,\r\n            preferred_cache: host,\r\n            aliases: [host],\r\n        };\r\n    }\r\n    /**\r\n     * helper function to generate environment from authority object\r\n     */\r\n    getPreferredCache() {\r\n        if (this.managedIdentity) {\r\n            return Constants$1.DEFAULT_AUTHORITY_HOST;\r\n        }\r\n        else if (this.discoveryComplete()) {\r\n            return this.metadata.preferred_cache;\r\n        }\r\n        else {\r\n            throw createClientAuthError(endpointResolutionError);\r\n        }\r\n    }\r\n    /**\r\n     * Returns whether or not the provided host is an alias of this authority instance\r\n     * @param host\r\n     */\r\n    isAlias(host) {\r\n        return this.metadata.aliases.indexOf(host) > -1;\r\n    }\r\n    /**\r\n     * Returns whether or not the provided host is an alias of a known Microsoft authority for purposes of endpoint discovery\r\n     * @param host\r\n     */\r\n    isAliasOfKnownMicrosoftAuthority(host) {\r\n        return InstanceDiscoveryMetadataAliases.has(host);\r\n    }\r\n    /**\r\n     * Checks whether the provided host is that of a public cloud authority\r\n     *\r\n     * @param authority string\r\n     * @returns bool\r\n     */\r\n    static isPublicCloudAuthority(host) {\r\n        return Constants$1.KNOWN_PUBLIC_CLOUDS.indexOf(host) >= 0;\r\n    }\r\n    /**\r\n     * Rebuild the authority string with the region\r\n     *\r\n     * @param host string\r\n     * @param region string\r\n     */\r\n    static buildRegionalAuthorityString(host, region, queryString) {\r\n        // Create and validate a Url string object with the initial authority string\r\n        const authorityUrlInstance = new UrlString(host);\r\n        authorityUrlInstance.validateAsUri();\r\n        const authorityUrlParts = authorityUrlInstance.getUrlComponents();\r\n        let hostNameAndPort = `${region}.${authorityUrlParts.HostNameAndPort}`;\r\n        if (this.isPublicCloudAuthority(authorityUrlParts.HostNameAndPort)) {\r\n            hostNameAndPort = `${region}.${Constants$1.REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX}`;\r\n        }\r\n        // Include the query string portion of the url\r\n        const url = UrlString.constructAuthorityUriFromObject({\r\n            ...authorityUrlInstance.getUrlComponents(),\r\n            HostNameAndPort: hostNameAndPort,\r\n        }).urlString;\r\n        // Add the query string if a query string was provided\r\n        if (queryString)\r\n            return `${url}?${queryString}`;\r\n        return url;\r\n    }\r\n    /**\r\n     * Replace the endpoints in the metadata object with their regional equivalents.\r\n     *\r\n     * @param metadata OpenIdConfigResponse\r\n     * @param azureRegion string\r\n     */\r\n    static replaceWithRegionalInformation(metadata, azureRegion) {\r\n        const regionalMetadata = { ...metadata };\r\n        regionalMetadata.authorization_endpoint =\r\n            Authority.buildRegionalAuthorityString(regionalMetadata.authorization_endpoint, azureRegion);\r\n        regionalMetadata.token_endpoint =\r\n            Authority.buildRegionalAuthorityString(regionalMetadata.token_endpoint, azureRegion);\r\n        if (regionalMetadata.end_session_endpoint) {\r\n            regionalMetadata.end_session_endpoint =\r\n                Authority.buildRegionalAuthorityString(regionalMetadata.end_session_endpoint, azureRegion);\r\n        }\r\n        return regionalMetadata;\r\n    }\r\n    /**\r\n     * Transform CIAM_AUTHORIY as per the below rules:\r\n     * If no path segments found and it is a CIAM authority (hostname ends with .ciamlogin.com), then transform it\r\n     *\r\n     * NOTE: The transformation path should go away once STS supports CIAM with the format: `tenantIdorDomain.ciamlogin.com`\r\n     * `ciamlogin.com` can also change in the future and we should accommodate the same\r\n     *\r\n     * @param authority\r\n     */\r\n    static transformCIAMAuthority(authority) {\r\n        let ciamAuthority = authority;\r\n        const authorityUrl = new UrlString(authority);\r\n        const authorityUrlComponents = authorityUrl.getUrlComponents();\r\n        // check if transformation is needed\r\n        if (authorityUrlComponents.PathSegments.length === 0 &&\r\n            authorityUrlComponents.HostNameAndPort.endsWith(Constants$1.CIAM_AUTH_URL)) {\r\n            const tenantIdOrDomain = authorityUrlComponents.HostNameAndPort.split(\".\")[0];\r\n            ciamAuthority = `${ciamAuthority}${tenantIdOrDomain}${Constants$1.AAD_TENANT_DOMAIN_SUFFIX}`;\r\n        }\r\n        return ciamAuthority;\r\n    }\r\n}\r\n// Reserved tenant domain names that will not be replaced with tenant id\r\nAuthority.reservedTenantDomains = new Set([\r\n    \"{tenant}\",\r\n    \"{tenantid}\",\r\n    AADAuthorityConstants.COMMON,\r\n    AADAuthorityConstants.CONSUMERS,\r\n    AADAuthorityConstants.ORGANIZATIONS,\r\n]);\r\n/**\r\n * Extract tenantId from authority\r\n */\r\nfunction getTenantFromAuthorityString(authority) {\r\n    const authorityUrl = new UrlString(authority);\r\n    const authorityUrlComponents = authorityUrl.getUrlComponents();\r\n    /**\r\n     * For credential matching purposes, tenantId is the last path segment of the authority URL:\r\n     *  AAD Authority - domain/tenantId -> Credentials are cached with realm = tenantId\r\n     *  B2C Authority - domain/{tenantId}?/.../policy -> Credentials are cached with realm = policy\r\n     *  tenantId is downcased because B2C policies can have mixed case but tfp claim is downcased\r\n     *\r\n     * Note that we may not have any path segments in certain OIDC scenarios.\r\n     */\r\n    const tenantId = authorityUrlComponents.PathSegments.slice(-1)[0]?.toLowerCase();\r\n    switch (tenantId) {\r\n        case AADAuthorityConstants.COMMON:\r\n        case AADAuthorityConstants.ORGANIZATIONS:\r\n        case AADAuthorityConstants.CONSUMERS:\r\n            return undefined;\r\n        default:\r\n            return tenantId;\r\n    }\r\n}\r\nfunction formatAuthorityUri(authorityUri) {\r\n    return authorityUri.endsWith(Constants$1.FORWARD_SLASH)\r\n        ? authorityUri\r\n        : `${authorityUri}${Constants$1.FORWARD_SLASH}`;\r\n}\r\nfunction buildStaticAuthorityOptions(authOptions) {\r\n    const rawCloudDiscoveryMetadata = authOptions.cloudDiscoveryMetadata;\r\n    let cloudDiscoveryMetadata = undefined;\r\n    if (rawCloudDiscoveryMetadata) {\r\n        try {\r\n            cloudDiscoveryMetadata = JSON.parse(rawCloudDiscoveryMetadata);\r\n        }\r\n        catch (e) {\r\n            throw createClientConfigurationError(invalidCloudDiscoveryMetadata);\r\n        }\r\n    }\r\n    return {\r\n        canonicalAuthority: authOptions.authority\r\n            ? formatAuthorityUri(authOptions.authority)\r\n            : undefined,\r\n        knownAuthorities: authOptions.knownAuthorities,\r\n        cloudDiscoveryMetadata: cloudDiscoveryMetadata,\r\n    };\r\n}\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Create an authority object of the correct type based on the url\r\n * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)\r\n *\r\n * Also performs endpoint discovery.\r\n *\r\n * @param authorityUri\r\n * @param networkClient\r\n * @param protocolMode\r\n * @internal\r\n */\r\nasync function createDiscoveredInstance(authorityUri, networkClient, cacheManager, authorityOptions, logger, correlationId, performanceClient) {\r\n    performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance, correlationId);\r\n    const authorityUriFinal = Authority.transformCIAMAuthority(formatAuthorityUri(authorityUri));\r\n    // Initialize authority and perform discovery endpoint check.\r\n    const acquireTokenAuthority = new Authority(authorityUriFinal, networkClient, cacheManager, authorityOptions, logger, correlationId, performanceClient);\r\n    try {\r\n        await invokeAsync(acquireTokenAuthority.resolveEndpointsAsync.bind(acquireTokenAuthority), PerformanceEvents.AuthorityResolveEndpointsAsync, logger, performanceClient, correlationId)();\r\n        return acquireTokenAuthority;\r\n    }\r\n    catch (e) {\r\n        throw createClientAuthError(endpointResolutionError);\r\n    }\r\n}\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Error thrown when there is an error with the server code, for example, unavailability.\r\n */\r\nclass ServerError extends AuthError {\r\n    constructor(errorCode, errorMessage, subError, errorNo, status) {\r\n        super(errorCode, errorMessage, subError);\r\n        this.name = \"ServerError\";\r\n        this.errorNo = errorNo;\r\n        this.status = status;\r\n        Object.setPrototypeOf(this, ServerError.prototype);\r\n    }\r\n}\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nfunction getRequestThumbprint(clientId, request, homeAccountId) {\r\n    return {\r\n        clientId: clientId,\r\n        authority: request.authority,\r\n        scopes: request.scopes,\r\n        homeAccountIdentifier: homeAccountId,\r\n        claims: request.claims,\r\n        authenticationScheme: request.authenticationScheme,\r\n        resourceRequestMethod: request.resourceRequestMethod,\r\n        resourceRequestUri: request.resourceRequestUri,\r\n        shrClaims: request.shrClaims,\r\n        sshKid: request.sshKid,\r\n        embeddedClientId: request.embeddedClientId || request.tokenBodyParameters?.clientId,\r\n    };\r\n}\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/** @internal */\r\nclass ThrottlingUtils {\r\n    /**\r\n     * Prepares a RequestThumbprint to be stored as a key.\r\n     * @param thumbprint\r\n     */\r\n    static generateThrottlingStorageKey(thumbprint) {\r\n        return `${ThrottlingConstants.THROTTLING_PREFIX}.${JSON.stringify(thumbprint)}`;\r\n    }\r\n    /**\r\n     * Performs necessary throttling checks before a network request.\r\n     * @param cacheManager\r\n     * @param thumbprint\r\n     */\r\n    static preProcess(cacheManager, thumbprint, correlationId) {\r\n        const key = ThrottlingUtils.generateThrottlingStorageKey(thumbprint);\r\n        const value = cacheManager.getThrottlingCache(key);\r\n        if (value) {\r\n            if (value.throttleTime < Date.now()) {\r\n                cacheManager.removeItem(key, correlationId);\r\n                return;\r\n            }\r\n            throw new ServerError(value.errorCodes?.join(\" \") || Constants$1.EMPTY_STRING, value.errorMessage, value.subError);\r\n        }\r\n    }\r\n    /**\r\n     * Performs necessary throttling checks after a network request.\r\n     * @param cacheManager\r\n     * @param thumbprint\r\n     * @param response\r\n     */\r\n    static postProcess(cacheManager, thumbprint, response, correlationId) {\r\n        if (ThrottlingUtils.checkResponseStatus(response) ||\r\n            ThrottlingUtils.checkResponseForRetryAfter(response)) {\r\n            const thumbprintValue = {\r\n                throttleTime: ThrottlingUtils.calculateThrottleTime(parseInt(response.headers[HeaderNames.RETRY_AFTER])),\r\n                error: response.body.error,\r\n                errorCodes: response.body.error_codes,\r\n                errorMessage: response.body.error_description,\r\n                subError: response.body.suberror,\r\n            };\r\n            cacheManager.setThrottlingCache(ThrottlingUtils.generateThrottlingStorageKey(thumbprint), thumbprintValue, correlationId);\r\n        }\r\n    }\r\n    /**\r\n     * Checks a NetworkResponse object's status codes against 429 or 5xx\r\n     * @param response\r\n     */\r\n    static checkResponseStatus(response) {\r\n        return (response.status === 429 ||\r\n            (response.status >= 500 && response.status < 600));\r\n    }\r\n    /**\r\n     * Checks a NetworkResponse object's RetryAfter header\r\n     * @param response\r\n     */\r\n    static checkResponseForRetryAfter(response) {\r\n        if (response.headers) {\r\n            return (response.headers.hasOwnProperty(HeaderNames.RETRY_AFTER) &&\r\n                (response.status < 200 || response.status >= 300));\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * Calculates the Unix-time value for a throttle to expire given throttleTime in seconds.\r\n     * @param throttleTime\r\n     */\r\n    static calculateThrottleTime(throttleTime) {\r\n        const time = throttleTime <= 0 ? 0 : throttleTime;\r\n        const currentSeconds = Date.now() / 1000;\r\n        return Math.floor(Math.min(currentSeconds +\r\n            (time || ThrottlingConstants.DEFAULT_THROTTLE_TIME_SECONDS), currentSeconds +\r\n            ThrottlingConstants.DEFAULT_MAX_THROTTLE_TIME_SECONDS) * 1000);\r\n    }\r\n    static removeThrottle(cacheManager, clientId, request, homeAccountIdentifier) {\r\n        const thumbprint = getRequestThumbprint(clientId, request, homeAccountIdentifier);\r\n        const key = this.generateThrottlingStorageKey(thumbprint);\r\n        cacheManager.removeItem(key, request.correlationId);\r\n    }\r\n}\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Represents network related errors\r\n */\r\nclass NetworkError extends AuthError {\r\n    constructor(error, httpStatus, responseHeaders) {\r\n        super(error.errorCode, error.errorMessage, error.subError);\r\n        Object.setPrototypeOf(this, NetworkError.prototype);\r\n        this.name = \"NetworkError\";\r\n        this.error = error;\r\n        this.httpStatus = httpStatus;\r\n        this.responseHeaders = responseHeaders;\r\n    }\r\n}\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Base application class which will construct requests to send to and handle responses from the Microsoft STS using the authorization code flow.\r\n * @internal\r\n */\r\nclass BaseClient {\r\n    constructor(configuration, performanceClient) {\r\n        // Set the configuration\r\n        this.config = buildClientConfiguration(configuration);\r\n        // Initialize the logger\r\n        this.logger = new Logger(this.config.loggerOptions, name$1, version$1);\r\n        // Initialize crypto\r\n        this.cryptoUtils = this.config.cryptoInterface;\r\n        // Initialize storage interface\r\n        this.cacheManager = this.config.storageInterface;\r\n        // Set the network interface\r\n        this.networkClient = this.config.networkInterface;\r\n        // Set TelemetryManager\r\n        this.serverTelemetryManager = this.config.serverTelemetryManager;\r\n        // set Authority\r\n        this.authority = this.config.authOptions.authority;\r\n        // set performance telemetry client\r\n        this.performanceClient = performanceClient;\r\n    }\r\n    /**\r\n     * Creates default headers for requests to token endpoint\r\n     */\r\n    createTokenRequestHeaders(ccsCred) {\r\n        const headers = {};\r\n        headers[HeaderNames.CONTENT_TYPE] = Constants$1.URL_FORM_CONTENT_TYPE;\r\n        if (!this.config.systemOptions.preventCorsPreflight && ccsCred) {\r\n            switch (ccsCred.type) {\r\n                case CcsCredentialType.HOME_ACCOUNT_ID:\r\n                    try {\r\n                        const clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\r\n                        headers[HeaderNames.CCS_HEADER] = `Oid:${clientInfo.uid}@${clientInfo.utid}`;\r\n                    }\r\n                    catch (e) {\r\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" +\r\n                            e);\r\n                    }\r\n                    break;\r\n                case CcsCredentialType.UPN:\r\n                    headers[HeaderNames.CCS_HEADER] = `UPN: ${ccsCred.credential}`;\r\n                    break;\r\n            }\r\n        }\r\n        return headers;\r\n    }\r\n    /**\r\n     * Http post to token endpoint\r\n     * @param tokenEndpoint\r\n     * @param queryString\r\n     * @param headers\r\n     * @param thumbprint\r\n     */\r\n    async executePostToTokenEndpoint(tokenEndpoint, queryString, headers, thumbprint, correlationId, queuedEvent) {\r\n        if (queuedEvent) {\r\n            this.performanceClient?.addQueueMeasurement(queuedEvent, correlationId);\r\n        }\r\n        const response = await this.sendPostRequest(thumbprint, tokenEndpoint, { body: queryString, headers: headers }, correlationId);\r\n        if (this.config.serverTelemetryManager &&\r\n            response.status < 500 &&\r\n            response.status !== 429) {\r\n            // Telemetry data successfully logged by server, clear Telemetry cache\r\n            this.config.serverTelemetryManager.clearTelemetryCache();\r\n        }\r\n        return response;\r\n    }\r\n    /**\r\n     * Wraps sendPostRequestAsync with necessary preflight and postflight logic\r\n     * @param thumbprint - Request thumbprint for throttling\r\n     * @param tokenEndpoint - Endpoint to make the POST to\r\n     * @param options - Body and Headers to include on the POST request\r\n     * @param correlationId - CorrelationId for telemetry\r\n     */\r\n    async sendPostRequest(thumbprint, tokenEndpoint, options, correlationId) {\r\n        ThrottlingUtils.preProcess(this.cacheManager, thumbprint, correlationId);\r\n        let response;\r\n        try {\r\n            response = await invokeAsync((this.networkClient.sendPostRequestAsync.bind(this.networkClient)), PerformanceEvents.NetworkClientSendPostRequestAsync, this.logger, this.performanceClient, correlationId)(tokenEndpoint, options);\r\n            const responseHeaders = response.headers || {};\r\n            this.performanceClient?.addFields({\r\n                refreshTokenSize: response.body.refresh_token?.length || 0,\r\n                httpVerToken: responseHeaders[HeaderNames.X_MS_HTTP_VERSION] || \"\",\r\n                requestId: responseHeaders[HeaderNames.X_MS_REQUEST_ID] || \"\",\r\n            }, correlationId);\r\n        }\r\n        catch (e) {\r\n            if (e instanceof NetworkError) {\r\n                const responseHeaders = e.responseHeaders;\r\n                if (responseHeaders) {\r\n                    this.performanceClient?.addFields({\r\n                        httpVerToken: responseHeaders[HeaderNames.X_MS_HTTP_VERSION] || \"\",\r\n                        requestId: responseHeaders[HeaderNames.X_MS_REQUEST_ID] ||\r\n                            \"\",\r\n                        contentTypeHeader: responseHeaders[HeaderNames.CONTENT_TYPE] ||\r\n                            undefined,\r\n                        contentLengthHeader: responseHeaders[HeaderNames.CONTENT_LENGTH] ||\r\n                            undefined,\r\n                        httpStatus: e.httpStatus,\r\n                    }, correlationId);\r\n                }\r\n                throw e.error;\r\n            }\r\n            if (e instanceof AuthError) {\r\n                throw e;\r\n            }\r\n            else {\r\n                throw createClientAuthError(networkError);\r\n            }\r\n        }\r\n        ThrottlingUtils.postProcess(this.cacheManager, thumbprint, response, correlationId);\r\n        return response;\r\n    }\r\n    /**\r\n     * Updates the authority object of the client. Endpoint discovery must be completed.\r\n     * @param updatedAuthority\r\n     */\r\n    async updateAuthority(cloudInstanceHostname, correlationId) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.UpdateTokenEndpointAuthority, correlationId);\r\n        const cloudInstanceAuthorityUri = `https://${cloudInstanceHostname}/${this.authority.tenant}/`;\r\n        const cloudInstanceAuthority = await createDiscoveredInstance(cloudInstanceAuthorityUri, this.networkClient, this.cacheManager, this.authority.options, this.logger, correlationId, this.performanceClient);\r\n        this.authority = cloudInstanceAuthority;\r\n    }\r\n    /**\r\n     * Creates query string for the /token request\r\n     * @param request\r\n     */\r\n    createTokenQueryParameters(request) {\r\n        const parameters = new Map();\r\n        if (request.embeddedClientId) {\r\n            addBrokerParameters(parameters, this.config.authOptions.clientId, this.config.authOptions.redirectUri);\r\n        }\r\n        if (request.tokenQueryParameters) {\r\n            addExtraQueryParameters(parameters, request.tokenQueryParameters);\r\n        }\r\n        addCorrelationId(parameters, request.correlationId);\r\n        instrumentBrokerParams(parameters, request.correlationId, this.performanceClient);\r\n        return mapToQueryString(parameters);\r\n    }\r\n}\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Gets tenantId from available ID token claims to set as credential realm with the following precedence:\r\n * 1. tid - if the token is acquired from an Azure AD tenant tid will be present\r\n * 2. tfp - if the token is acquired from a modern B2C tenant tfp should be present\r\n * 3. acr - if the token is acquired from a legacy B2C tenant acr should be present\r\n * Downcased to match the realm case-insensitive comparison requirements\r\n * @param idTokenClaims\r\n * @returns\r\n */\r\nfunction getTenantIdFromIdTokenClaims(idTokenClaims) {\r\n    if (idTokenClaims) {\r\n        const tenantId = idTokenClaims.tid || idTokenClaims.tfp || idTokenClaims.acr;\r\n        return tenantId || null;\r\n    }\r\n    return null;\r\n}\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Type that defines required and optional parameters for an Account field (based on universal cache schema implemented by all MSALs).\r\n *\r\n * Key : Value Schema\r\n *\r\n * Key: <home_account_id>-<environment>-<realm*>\r\n *\r\n * Value Schema:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n *      localAccountId: Original tenant-specific accountID, usually used for legacy cases\r\n *      username: primary username that represents the user, usually corresponds to preferred_username in the v2 endpt\r\n *      authorityType: Accounts authority type as a string\r\n *      name: Full name for the account, including given name and family name,\r\n *      lastModificationTime: last time this entity was modified in the cache\r\n *      lastModificationApp:\r\n *      nativeAccountId: Account identifier on the native device\r\n *      tenantProfiles: Array of tenant profile objects for each tenant that the account has authenticated with in the browser\r\n * }\r\n * @internal\r\n */\r\nclass AccountEntity {\r\n    /**\r\n     * Returns the AccountInfo interface for this account.\r\n     */\r\n    getAccountInfo() {\r\n        return {\r\n            homeAccountId: this.homeAccountId,\r\n            environment: this.environment,\r\n            tenantId: this.realm,\r\n            username: this.username,\r\n            localAccountId: this.localAccountId,\r\n            loginHint: this.loginHint,\r\n            name: this.name,\r\n            nativeAccountId: this.nativeAccountId,\r\n            authorityType: this.authorityType,\r\n            // Deserialize tenant profiles array into a Map\r\n            tenantProfiles: new Map((this.tenantProfiles || []).map((tenantProfile) => {\r\n                return [tenantProfile.tenantId, tenantProfile];\r\n            })),\r\n        };\r\n    }\r\n    /**\r\n     * Returns true if the account entity is in single tenant format (outdated), false otherwise\r\n     */\r\n    isSingleTenant() {\r\n        return !this.tenantProfiles;\r\n    }\r\n    /**\r\n     * Build Account cache from IdToken, clientInfo and authority/policy. Associated with AAD.\r\n     * @param accountDetails\r\n     */\r\n    static createAccount(accountDetails, authority, base64Decode) {\r\n        const account = new AccountEntity();\r\n        if (authority.authorityType === AuthorityType.Adfs) {\r\n            account.authorityType = CacheAccountType.ADFS_ACCOUNT_TYPE;\r\n        }\r\n        else if (authority.protocolMode === ProtocolMode.OIDC) {\r\n            account.authorityType = CacheAccountType.GENERIC_ACCOUNT_TYPE;\r\n        }\r\n        else {\r\n            account.authorityType = CacheAccountType.MSSTS_ACCOUNT_TYPE;\r\n        }\r\n        let clientInfo;\r\n        if (accountDetails.clientInfo && base64Decode) {\r\n            clientInfo = buildClientInfo(accountDetails.clientInfo, base64Decode);\r\n        }\r\n        account.clientInfo = accountDetails.clientInfo;\r\n        account.homeAccountId = accountDetails.homeAccountId;\r\n        account.nativeAccountId = accountDetails.nativeAccountId;\r\n        const env = accountDetails.environment ||\r\n            (authority && authority.getPreferredCache());\r\n        if (!env) {\r\n            throw createClientAuthError(invalidCacheEnvironment);\r\n        }\r\n        account.environment = env;\r\n        // non AAD scenarios can have empty realm\r\n        account.realm =\r\n            clientInfo?.utid ||\r\n                getTenantIdFromIdTokenClaims(accountDetails.idTokenClaims) ||\r\n                \"\";\r\n        // How do you account for MSA CID here?\r\n        account.localAccountId =\r\n            clientInfo?.uid ||\r\n                accountDetails.idTokenClaims?.oid ||\r\n                accountDetails.idTokenClaims?.sub ||\r\n                \"\";\r\n        /*\r\n         * In B2C scenarios the emails claim is used instead of preferred_username and it is an array.\r\n         * In most cases it will contain a single email. This field should not be relied upon if a custom\r\n         * policy is configured to return more than 1 email.\r\n         */\r\n        const preferredUsername = accountDetails.idTokenClaims?.preferred_username ||\r\n            accountDetails.idTokenClaims?.upn;\r\n        const email = accountDetails.idTokenClaims?.emails\r\n            ? accountDetails.idTokenClaims.emails[0]\r\n            : null;\r\n        account.username = preferredUsername || email || \"\";\r\n        account.loginHint = accountDetails.idTokenClaims?.login_hint;\r\n        account.name = accountDetails.idTokenClaims?.name || \"\";\r\n        account.cloudGraphHostName = accountDetails.cloudGraphHostName;\r\n        account.msGraphHost = accountDetails.msGraphHost;\r\n        if (accountDetails.tenantProfiles) {\r\n            account.tenantProfiles = accountDetails.tenantProfiles;\r\n        }\r\n        else {\r\n            const tenantProfile = buildTenantProfile(accountDetails.homeAccountId, account.localAccountId, account.realm, accountDetails.idTokenClaims);\r\n            account.tenantProfiles = [tenantProfile];\r\n        }\r\n        return account;\r\n    }\r\n    /**\r\n     * Creates an AccountEntity object from AccountInfo\r\n     * @param accountInfo\r\n     * @param cloudGraphHostName\r\n     * @param msGraphHost\r\n     * @returns\r\n     */\r\n    static createFromAccountInfo(accountInfo, cloudGraphHostName, msGraphHost) {\r\n        const account = new AccountEntity();\r\n        account.authorityType =\r\n            accountInfo.authorityType || CacheAccountType.GENERIC_ACCOUNT_TYPE;\r\n        account.homeAccountId = accountInfo.homeAccountId;\r\n        account.localAccountId = accountInfo.localAccountId;\r\n        account.nativeAccountId = accountInfo.nativeAccountId;\r\n        account.realm = accountInfo.tenantId;\r\n        account.environment = accountInfo.environment;\r\n        account.username = accountInfo.username;\r\n        account.name = accountInfo.name;\r\n        account.loginHint = accountInfo.loginHint;\r\n        account.cloudGraphHostName = cloudGraphHostName;\r\n        account.msGraphHost = msGraphHost;\r\n        // Serialize tenant profiles map into an array\r\n        account.tenantProfiles = Array.from(accountInfo.tenantProfiles?.values() || []);\r\n        return account;\r\n    }\r\n    /**\r\n     * Generate HomeAccountId from server response\r\n     * @param serverClientInfo\r\n     * @param authType\r\n     */\r\n    static generateHomeAccountId(serverClientInfo, authType, logger, cryptoObj, idTokenClaims) {\r\n        // since ADFS/DSTS do not have tid and does not set client_info\r\n        if (!(authType === AuthorityType.Adfs ||\r\n            authType === AuthorityType.Dsts)) {\r\n            // for cases where there is clientInfo\r\n            if (serverClientInfo) {\r\n                try {\r\n                    const clientInfo = buildClientInfo(serverClientInfo, cryptoObj.base64Decode);\r\n                    if (clientInfo.uid && clientInfo.utid) {\r\n                        return `${clientInfo.uid}.${clientInfo.utid}`;\r\n                    }\r\n                }\r\n                catch (e) { }\r\n            }\r\n            logger.warning(\"No client info in response\");\r\n        }\r\n        // default to \"sub\" claim\r\n        return idTokenClaims?.sub || \"\";\r\n    }\r\n    /**\r\n     * Validates an entity: checks for all expected params\r\n     * @param entity\r\n     */\r\n    static isAccountEntity(entity) {\r\n        if (!entity) {\r\n            return false;\r\n        }\r\n        return (entity.hasOwnProperty(\"homeAccountId\") &&\r\n            entity.hasOwnProperty(\"environment\") &&\r\n            entity.hasOwnProperty(\"realm\") &&\r\n            entity.hasOwnProperty(\"localAccountId\") &&\r\n            entity.hasOwnProperty(\"username\") &&\r\n            entity.hasOwnProperty(\"authorityType\"));\r\n    }\r\n    /**\r\n     * Helper function to determine whether 2 accountInfo objects represent the same account\r\n     * @param accountA\r\n     * @param accountB\r\n     * @param compareClaims - If set to true idTokenClaims will also be compared to determine account equality\r\n     */\r\n    static accountInfoIsEqual(accountA, accountB, compareClaims) {\r\n        if (!accountA || !accountB) {\r\n            return false;\r\n        }\r\n        let claimsMatch = true; // default to true so as to not fail comparison below if compareClaims: false\r\n        if (compareClaims) {\r\n            const accountAClaims = (accountA.idTokenClaims ||\r\n                {});\r\n            const accountBClaims = (accountB.idTokenClaims ||\r\n                {});\r\n            // issued at timestamp and nonce are expected to change each time a new id token is acquired\r\n            claimsMatch =\r\n                accountAClaims.iat === accountBClaims.iat &&\r\n                    accountAClaims.nonce === accountBClaims.nonce;\r\n        }\r\n        return (accountA.homeAccountId === accountB.homeAccountId &&\r\n            accountA.localAccountId === accountB.localAccountId &&\r\n            accountA.username === accountB.username &&\r\n            accountA.tenantId === accountB.tenantId &&\r\n            accountA.loginHint === accountB.loginHint &&\r\n            accountA.environment === accountB.environment &&\r\n            accountA.nativeAccountId === accountB.nativeAccountId &&\r\n            claimsMatch);\r\n    }\r\n}\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n// Codes defined by MSAL\r\nconst noTokensFound = \"no_tokens_found\";\r\nconst nativeAccountUnavailable = \"native_account_unavailable\";\r\nconst refreshTokenExpired = \"refresh_token_expired\";\r\nconst uxNotAllowed = \"ux_not_allowed\";\r\n// Codes potentially returned by server\r\nconst interactionRequired = \"interaction_required\";\r\nconst consentRequired = \"consent_required\";\r\nconst loginRequired = \"login_required\";\r\nconst badToken = \"bad_token\";\n\nvar InteractionRequiredAuthErrorCodes = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    badToken: badToken,\n    consentRequired: consentRequired,\n    interactionRequired: interactionRequired,\n    loginRequired: loginRequired,\n    nativeAccountUnavailable: nativeAccountUnavailable,\n    noTokensFound: noTokensFound,\n    refreshTokenExpired: refreshTokenExpired,\n    uxNotAllowed: uxNotAllowed\n});\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * InteractionRequiredServerErrorMessage contains string constants used by error codes and messages returned by the server indicating interaction is required\r\n */\r\nconst InteractionRequiredServerErrorMessage = [\r\n    interactionRequired,\r\n    consentRequired,\r\n    loginRequired,\r\n    badToken,\r\n    uxNotAllowed,\r\n];\r\nconst InteractionRequiredAuthSubErrorMessage = [\r\n    \"message_only\",\r\n    \"additional_action\",\r\n    \"basic_action\",\r\n    \"user_password_expired\",\r\n    \"consent_required\",\r\n    \"bad_token\",\r\n];\r\nconst InteractionRequiredAuthErrorMessages = {\r\n    [noTokensFound]: \"No refresh token found in the cache. Please sign-in.\",\r\n    [nativeAccountUnavailable]: \"The requested account is not available in the native broker. It may have been deleted or logged out. Please sign-in again using an interactive API.\",\r\n    [refreshTokenExpired]: \"Refresh token has expired.\",\r\n    [badToken]: \"Identity provider returned bad_token due to an expired or invalid refresh token. Please invoke an interactive API to resolve.\",\r\n    [uxNotAllowed]: \"`canShowUI` flag in Edge was set to false. User interaction required on web page. Please invoke an interactive API to resolve.\",\r\n};\r\n/**\r\n * Interaction required errors defined by the SDK\r\n * @deprecated Use InteractionRequiredAuthErrorCodes instead\r\n */\r\nconst InteractionRequiredAuthErrorMessage = {\r\n    noTokensFoundError: {\r\n        code: noTokensFound,\r\n        desc: InteractionRequiredAuthErrorMessages[noTokensFound],\r\n    },\r\n    native_account_unavailable: {\r\n        code: nativeAccountUnavailable,\r\n        desc: InteractionRequiredAuthErrorMessages[nativeAccountUnavailable],\r\n    },\r\n    bad_token: {\r\n        code: badToken,\r\n        desc: InteractionRequiredAuthErrorMessages[badToken],\r\n    },\r\n};\r\n/**\r\n * Error thrown when user interaction is required.\r\n */\r\nclass InteractionRequiredAuthError extends AuthError {\r\n    constructor(errorCode, errorMessage, subError, timestamp, traceId, correlationId, claims, errorNo) {\r\n        super(errorCode, errorMessage, subError);\r\n        Object.setPrototypeOf(this, InteractionRequiredAuthError.prototype);\r\n        this.timestamp = timestamp || Constants$1.EMPTY_STRING;\r\n        this.traceId = traceId || Constants$1.EMPTY_STRING;\r\n        this.correlationId = correlationId || Constants$1.EMPTY_STRING;\r\n        this.claims = claims || Constants$1.EMPTY_STRING;\r\n        this.name = \"InteractionRequiredAuthError\";\r\n        this.errorNo = errorNo;\r\n    }\r\n}\r\n/**\r\n * Helper function used to determine if an error thrown by the server requires interaction to resolve\r\n * @param errorCode\r\n * @param errorString\r\n * @param subError\r\n */\r\nfunction isInteractionRequiredError(errorCode, errorString, subError) {\r\n    const isInteractionRequiredErrorCode = !!errorCode &&\r\n        InteractionRequiredServerErrorMessage.indexOf(errorCode) > -1;\r\n    const isInteractionRequiredSubError = !!subError &&\r\n        InteractionRequiredAuthSubErrorMessage.indexOf(subError) > -1;\r\n    const isInteractionRequiredErrorDesc = !!errorString &&\r\n        InteractionRequiredServerErrorMessage.some((irErrorCode) => {\r\n            return errorString.indexOf(irErrorCode) > -1;\r\n        });\r\n    return (isInteractionRequiredErrorCode ||\r\n        isInteractionRequiredErrorDesc ||\r\n        isInteractionRequiredSubError);\r\n}\r\n/**\r\n * Creates an InteractionRequiredAuthError\r\n */\r\nfunction createInteractionRequiredAuthError(errorCode) {\r\n    return new InteractionRequiredAuthError(errorCode, InteractionRequiredAuthErrorMessages[errorCode]);\r\n}\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Class which provides helpers for OAuth 2.0 protocol specific values\r\n */\r\nclass ProtocolUtils {\r\n    /**\r\n     * Appends user state with random guid, or returns random guid.\r\n     * @param userState\r\n     * @param randomGuid\r\n     */\r\n    static setRequestState(cryptoObj, userState, meta) {\r\n        const libraryState = ProtocolUtils.generateLibraryState(cryptoObj, meta);\r\n        return userState\r\n            ? `${libraryState}${Constants$1.RESOURCE_DELIM}${userState}`\r\n            : libraryState;\r\n    }\r\n    /**\r\n     * Generates the state value used by the common library.\r\n     * @param randomGuid\r\n     * @param cryptoObj\r\n     */\r\n    static generateLibraryState(cryptoObj, meta) {\r\n        if (!cryptoObj) {\r\n            throw createClientAuthError(noCryptoObject);\r\n        }\r\n        // Create a state object containing a unique id and the timestamp of the request creation\r\n        const stateObj = {\r\n            id: cryptoObj.createNewGuid(),\r\n        };\r\n        if (meta) {\r\n            stateObj.meta = meta;\r\n        }\r\n        const stateString = JSON.stringify(stateObj);\r\n        return cryptoObj.base64Encode(stateString);\r\n    }\r\n    /**\r\n     * Parses the state into the RequestStateObject, which contains the LibraryState info and the state passed by the user.\r\n     * @param state\r\n     * @param cryptoObj\r\n     */\r\n    static parseRequestState(cryptoObj, state) {\r\n        if (!cryptoObj) {\r\n            throw createClientAuthError(noCryptoObject);\r\n        }\r\n        if (!state) {\r\n            throw createClientAuthError(invalidState);\r\n        }\r\n        try {\r\n            // Split the state between library state and user passed state and decode them separately\r\n            const splitState = state.split(Constants$1.RESOURCE_DELIM);\r\n            const libraryState = splitState[0];\r\n            const userState = splitState.length > 1\r\n                ? splitState.slice(1).join(Constants$1.RESOURCE_DELIM)\r\n                : Constants$1.EMPTY_STRING;\r\n            const libraryStateString = cryptoObj.base64Decode(libraryState);\r\n            const libraryStateObj = JSON.parse(libraryStateString);\r\n            return {\r\n                userRequestState: userState || Constants$1.EMPTY_STRING,\r\n                libraryState: libraryStateObj,\r\n            };\r\n        }\r\n        catch (e) {\r\n            throw createClientAuthError(invalidState);\r\n        }\r\n    }\r\n}\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst KeyLocation = {\r\n    SW: \"sw\"};\r\n/** @internal */\r\nclass PopTokenGenerator {\r\n    constructor(cryptoUtils, performanceClient) {\r\n        this.cryptoUtils = cryptoUtils;\r\n        this.performanceClient = performanceClient;\r\n    }\r\n    /**\r\n     * Generates the req_cnf validated at the RP in the POP protocol for SHR parameters\r\n     * and returns an object containing the keyid, the full req_cnf string and the req_cnf string hash\r\n     * @param request\r\n     * @returns\r\n     */\r\n    async generateCnf(request, logger) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.PopTokenGenerateCnf, request.correlationId);\r\n        const reqCnf = await invokeAsync(this.generateKid.bind(this), PerformanceEvents.PopTokenGenerateCnf, logger, this.performanceClient, request.correlationId)(request);\r\n        const reqCnfString = this.cryptoUtils.base64UrlEncode(JSON.stringify(reqCnf));\r\n        return {\r\n            kid: reqCnf.kid,\r\n            reqCnfString,\r\n        };\r\n    }\r\n    /**\r\n     * Generates key_id for a SHR token request\r\n     * @param request\r\n     * @returns\r\n     */\r\n    async generateKid(request) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.PopTokenGenerateKid, request.correlationId);\r\n        const kidThumbprint = await this.cryptoUtils.getPublicKeyThumbprint(request);\r\n        return {\r\n            kid: kidThumbprint,\r\n            xms_ksl: KeyLocation.SW,\r\n        };\r\n    }\r\n    /**\r\n     * Signs the POP access_token with the local generated key-pair\r\n     * @param accessToken\r\n     * @param request\r\n     * @returns\r\n     */\r\n    async signPopToken(accessToken, keyId, request) {\r\n        return this.signPayload(accessToken, keyId, request);\r\n    }\r\n    /**\r\n     * Utility function to generate the signed JWT for an access_token\r\n     * @param payload\r\n     * @param kid\r\n     * @param request\r\n     * @param claims\r\n     * @returns\r\n     */\r\n    async signPayload(payload, keyId, request, claims) {\r\n        // Deconstruct request to extract SHR parameters\r\n        const { resourceRequestMethod, resourceRequestUri, shrClaims, shrNonce, shrOptions, } = request;\r\n        const resourceUrlString = resourceRequestUri\r\n            ? new UrlString(resourceRequestUri)\r\n            : undefined;\r\n        const resourceUrlComponents = resourceUrlString?.getUrlComponents();\r\n        return this.cryptoUtils.signJwt({\r\n            at: payload,\r\n            ts: nowSeconds(),\r\n            m: resourceRequestMethod?.toUpperCase(),\r\n            u: resourceUrlComponents?.HostNameAndPort,\r\n            nonce: shrNonce || this.cryptoUtils.createNewGuid(),\r\n            p: resourceUrlComponents?.AbsolutePath,\r\n            q: resourceUrlComponents?.QueryString\r\n                ? [[], resourceUrlComponents.QueryString]\r\n                : undefined,\r\n            client_claims: shrClaims || undefined,\r\n            ...claims,\r\n        }, keyId, shrOptions, request.correlationId);\r\n    }\r\n}\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * This class instance helps track the memory changes facilitating\r\n * decisions to read from and write to the persistent cache\r\n */ class TokenCacheContext {\r\n    constructor(tokenCache, hasChanged) {\r\n        this.cache = tokenCache;\r\n        this.hasChanged = hasChanged;\r\n    }\r\n    /**\r\n     * boolean which indicates the changes in cache\r\n     */\r\n    get cacheHasChanged() {\r\n        return this.hasChanged;\r\n    }\r\n    /**\r\n     * function to retrieve the token cache\r\n     */\r\n    get tokenCache() {\r\n        return this.cache;\r\n    }\r\n}\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Class that handles response parsing.\r\n * @internal\r\n */\r\nclass ResponseHandler {\r\n    constructor(clientId, cacheStorage, cryptoObj, logger, serializableCache, persistencePlugin, performanceClient) {\r\n        this.clientId = clientId;\r\n        this.cacheStorage = cacheStorage;\r\n        this.cryptoObj = cryptoObj;\r\n        this.logger = logger;\r\n        this.serializableCache = serializableCache;\r\n        this.persistencePlugin = persistencePlugin;\r\n        this.performanceClient = performanceClient;\r\n    }\r\n    /**\r\n     * Function which validates server authorization token response.\r\n     * @param serverResponse\r\n     * @param refreshAccessToken\r\n     */\r\n    validateTokenResponse(serverResponse, refreshAccessToken) {\r\n        // Check for error\r\n        if (serverResponse.error ||\r\n            serverResponse.error_description ||\r\n            serverResponse.suberror) {\r\n            const errString = `Error(s): ${serverResponse.error_codes || Constants$1.NOT_AVAILABLE} - Timestamp: ${serverResponse.timestamp || Constants$1.NOT_AVAILABLE} - Description: ${serverResponse.error_description || Constants$1.NOT_AVAILABLE} - Correlation ID: ${serverResponse.correlation_id || Constants$1.NOT_AVAILABLE} - Trace ID: ${serverResponse.trace_id || Constants$1.NOT_AVAILABLE}`;\r\n            const serverErrorNo = serverResponse.error_codes?.length\r\n                ? serverResponse.error_codes[0]\r\n                : undefined;\r\n            const serverError = new ServerError(serverResponse.error, errString, serverResponse.suberror, serverErrorNo, serverResponse.status);\r\n            // check if 500 error\r\n            if (refreshAccessToken &&\r\n                serverResponse.status &&\r\n                serverResponse.status >= HttpStatus.SERVER_ERROR_RANGE_START &&\r\n                serverResponse.status <= HttpStatus.SERVER_ERROR_RANGE_END) {\r\n                this.logger.warning(`executeTokenRequest:validateTokenResponse - AAD is currently unavailable and the access token is unable to be refreshed.\\n${serverError}`);\r\n                // don't throw an exception, but alert the user via a log that the token was unable to be refreshed\r\n                return;\r\n                // check if 400 error\r\n            }\r\n            else if (refreshAccessToken &&\r\n                serverResponse.status &&\r\n                serverResponse.status >= HttpStatus.CLIENT_ERROR_RANGE_START &&\r\n                serverResponse.status <= HttpStatus.CLIENT_ERROR_RANGE_END) {\r\n                this.logger.warning(`executeTokenRequest:validateTokenResponse - AAD is currently available but is unable to refresh the access token.\\n${serverError}`);\r\n                // don't throw an exception, but alert the user via a log that the token was unable to be refreshed\r\n                return;\r\n            }\r\n            if (isInteractionRequiredError(serverResponse.error, serverResponse.error_description, serverResponse.suberror)) {\r\n                throw new InteractionRequiredAuthError(serverResponse.error, serverResponse.error_description, serverResponse.suberror, serverResponse.timestamp || Constants$1.EMPTY_STRING, serverResponse.trace_id || Constants$1.EMPTY_STRING, serverResponse.correlation_id || Constants$1.EMPTY_STRING, serverResponse.claims || Constants$1.EMPTY_STRING, serverErrorNo);\r\n            }\r\n            throw serverError;\r\n        }\r\n    }\r\n    /**\r\n     * Returns a constructed token response based on given string. Also manages the cache updates and cleanups.\r\n     * @param serverTokenResponse\r\n     * @param authority\r\n     */\r\n    async handleServerTokenResponse(serverTokenResponse, authority, reqTimestamp, request, authCodePayload, userAssertionHash, handlingRefreshTokenResponse, forceCacheRefreshTokenResponse, serverRequestId) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.HandleServerTokenResponse, serverTokenResponse.correlation_id);\r\n        // create an idToken object (not entity)\r\n        let idTokenClaims;\r\n        if (serverTokenResponse.id_token) {\r\n            idTokenClaims = extractTokenClaims(serverTokenResponse.id_token || Constants$1.EMPTY_STRING, this.cryptoObj.base64Decode);\r\n            // token nonce check (TODO: Add a warning if no nonce is given?)\r\n            if (authCodePayload && authCodePayload.nonce) {\r\n                if (idTokenClaims.nonce !== authCodePayload.nonce) {\r\n                    throw createClientAuthError(nonceMismatch);\r\n                }\r\n            }\r\n            // token max_age check\r\n            if (request.maxAge || request.maxAge === 0) {\r\n                const authTime = idTokenClaims.auth_time;\r\n                if (!authTime) {\r\n                    throw createClientAuthError(authTimeNotFound);\r\n                }\r\n                checkMaxAge(authTime, request.maxAge);\r\n            }\r\n        }\r\n        // generate homeAccountId\r\n        this.homeAccountIdentifier = AccountEntity.generateHomeAccountId(serverTokenResponse.client_info || Constants$1.EMPTY_STRING, authority.authorityType, this.logger, this.cryptoObj, idTokenClaims);\r\n        // save the response tokens\r\n        let requestStateObj;\r\n        if (!!authCodePayload && !!authCodePayload.state) {\r\n            requestStateObj = ProtocolUtils.parseRequestState(this.cryptoObj, authCodePayload.state);\r\n        }\r\n        // Add keyId from request to serverTokenResponse if defined\r\n        serverTokenResponse.key_id =\r\n            serverTokenResponse.key_id || request.sshKid || undefined;\r\n        const cacheRecord = this.generateCacheRecord(serverTokenResponse, authority, reqTimestamp, request, idTokenClaims, userAssertionHash, authCodePayload);\r\n        let cacheContext;\r\n        try {\r\n            if (this.persistencePlugin && this.serializableCache) {\r\n                this.logger.verbose(\"Persistence enabled, calling beforeCacheAccess\");\r\n                cacheContext = new TokenCacheContext(this.serializableCache, true);\r\n                await this.persistencePlugin.beforeCacheAccess(cacheContext);\r\n            }\r\n            /*\r\n             * When saving a refreshed tokens to the cache, it is expected that the account that was used is present in the cache.\r\n             * If not present, we should return null, as it's the case that another application called removeAccount in between\r\n             * the calls to getAllAccounts and acquireTokenSilent. We should not overwrite that removal, unless explicitly flagged by\r\n             * the developer, as in the case of refresh token flow used in ADAL Node to MSAL Node migration.\r\n             */\r\n            if (handlingRefreshTokenResponse &&\r\n                !forceCacheRefreshTokenResponse &&\r\n                cacheRecord.account) {\r\n                const key = this.cacheStorage.generateAccountKey(cacheRecord.account.getAccountInfo());\r\n                const account = this.cacheStorage.getAccount(key, request.correlationId);\r\n                if (!account) {\r\n                    this.logger.warning(\"Account used to refresh tokens not in persistence, refreshed tokens will not be stored in the cache\");\r\n                    return await ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenClaims, requestStateObj, undefined, serverRequestId);\r\n                }\r\n            }\r\n            await this.cacheStorage.saveCacheRecord(cacheRecord, request.correlationId, request.storeInCache);\r\n        }\r\n        finally {\r\n            if (this.persistencePlugin &&\r\n                this.serializableCache &&\r\n                cacheContext) {\r\n                this.logger.verbose(\"Persistence enabled, calling afterCacheAccess\");\r\n                await this.persistencePlugin.afterCacheAccess(cacheContext);\r\n            }\r\n        }\r\n        return ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenClaims, requestStateObj, serverTokenResponse, serverRequestId);\r\n    }\r\n    /**\r\n     * Generates CacheRecord\r\n     * @param serverTokenResponse\r\n     * @param idTokenObj\r\n     * @param authority\r\n     */\r\n    generateCacheRecord(serverTokenResponse, authority, reqTimestamp, request, idTokenClaims, userAssertionHash, authCodePayload) {\r\n        const env = authority.getPreferredCache();\r\n        if (!env) {\r\n            throw createClientAuthError(invalidCacheEnvironment);\r\n        }\r\n        const claimsTenantId = getTenantIdFromIdTokenClaims(idTokenClaims);\r\n        // IdToken: non AAD scenarios can have empty realm\r\n        let cachedIdToken;\r\n        let cachedAccount;\r\n        if (serverTokenResponse.id_token && !!idTokenClaims) {\r\n            cachedIdToken = createIdTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.id_token, this.clientId, claimsTenantId || \"\");\r\n            cachedAccount = buildAccountToCache(this.cacheStorage, authority, this.homeAccountIdentifier, this.cryptoObj.base64Decode, request.correlationId, idTokenClaims, serverTokenResponse.client_info, env, claimsTenantId, authCodePayload, undefined, // nativeAccountId\r\n            this.logger);\r\n        }\r\n        // AccessToken\r\n        let cachedAccessToken = null;\r\n        if (serverTokenResponse.access_token) {\r\n            // If scopes not returned in server response, use request scopes\r\n            const responseScopes = serverTokenResponse.scope\r\n                ? ScopeSet.fromString(serverTokenResponse.scope)\r\n                : new ScopeSet(request.scopes || []);\r\n            /*\r\n             * Use timestamp calculated before request\r\n             * Server may return timestamps as strings, parse to numbers if so.\r\n             */\r\n            const expiresIn = (typeof serverTokenResponse.expires_in === \"string\"\r\n                ? parseInt(serverTokenResponse.expires_in, 10)\r\n                : serverTokenResponse.expires_in) || 0;\r\n            const extExpiresIn = (typeof serverTokenResponse.ext_expires_in === \"string\"\r\n                ? parseInt(serverTokenResponse.ext_expires_in, 10)\r\n                : serverTokenResponse.ext_expires_in) || 0;\r\n            const refreshIn = (typeof serverTokenResponse.refresh_in === \"string\"\r\n                ? parseInt(serverTokenResponse.refresh_in, 10)\r\n                : serverTokenResponse.refresh_in) || undefined;\r\n            const tokenExpirationSeconds = reqTimestamp + expiresIn;\r\n            const extendedTokenExpirationSeconds = tokenExpirationSeconds + extExpiresIn;\r\n            const refreshOnSeconds = refreshIn && refreshIn > 0\r\n                ? reqTimestamp + refreshIn\r\n                : undefined;\r\n            // non AAD scenarios can have empty realm\r\n            cachedAccessToken = createAccessTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.access_token, this.clientId, claimsTenantId || authority.tenant || \"\", responseScopes.printScopes(), tokenExpirationSeconds, extendedTokenExpirationSeconds, this.cryptoObj.base64Decode, refreshOnSeconds, serverTokenResponse.token_type, userAssertionHash, serverTokenResponse.key_id, request.claims, request.requestedClaimsHash);\r\n        }\r\n        // refreshToken\r\n        let cachedRefreshToken = null;\r\n        if (serverTokenResponse.refresh_token) {\r\n            let rtExpiresOn;\r\n            if (serverTokenResponse.refresh_token_expires_in) {\r\n                const rtExpiresIn = typeof serverTokenResponse.refresh_token_expires_in ===\r\n                    \"string\"\r\n                    ? parseInt(serverTokenResponse.refresh_token_expires_in, 10)\r\n                    : serverTokenResponse.refresh_token_expires_in;\r\n                rtExpiresOn = reqTimestamp + rtExpiresIn;\r\n            }\r\n            cachedRefreshToken = createRefreshTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.refresh_token, this.clientId, serverTokenResponse.foci, userAssertionHash, rtExpiresOn);\r\n        }\r\n        // appMetadata\r\n        let cachedAppMetadata = null;\r\n        if (serverTokenResponse.foci) {\r\n            cachedAppMetadata = {\r\n                clientId: this.clientId,\r\n                environment: env,\r\n                familyId: serverTokenResponse.foci,\r\n            };\r\n        }\r\n        return {\r\n            account: cachedAccount,\r\n            idToken: cachedIdToken,\r\n            accessToken: cachedAccessToken,\r\n            refreshToken: cachedRefreshToken,\r\n            appMetadata: cachedAppMetadata,\r\n        };\r\n    }\r\n    /**\r\n     * Creates an @AuthenticationResult from @CacheRecord , @IdToken , and a boolean that states whether or not the result is from cache.\r\n     *\r\n     * Optionally takes a state string that is set as-is in the response.\r\n     *\r\n     * @param cacheRecord\r\n     * @param idTokenObj\r\n     * @param fromTokenCache\r\n     * @param stateString\r\n     */\r\n    static async generateAuthenticationResult(cryptoObj, authority, cacheRecord, fromTokenCache, request, idTokenClaims, requestState, serverTokenResponse, requestId) {\r\n        let accessToken = Constants$1.EMPTY_STRING;\r\n        let responseScopes = [];\r\n        let expiresOn = null;\r\n        let extExpiresOn;\r\n        let refreshOn;\r\n        let familyId = Constants$1.EMPTY_STRING;\r\n        if (cacheRecord.accessToken) {\r\n            /*\r\n             * if the request object has `popKid` property, `signPopToken` will be set to false and\r\n             * the token will be returned unsigned\r\n             */\r\n            if (cacheRecord.accessToken.tokenType ===\r\n                AuthenticationScheme.POP &&\r\n                !request.popKid) {\r\n                const popTokenGenerator = new PopTokenGenerator(cryptoObj);\r\n                const { secret, keyId } = cacheRecord.accessToken;\r\n                if (!keyId) {\r\n                    throw createClientAuthError(keyIdMissing);\r\n                }\r\n                accessToken = await popTokenGenerator.signPopToken(secret, keyId, request);\r\n            }\r\n            else {\r\n                accessToken = cacheRecord.accessToken.secret;\r\n            }\r\n            responseScopes = ScopeSet.fromString(cacheRecord.accessToken.target).asArray();\r\n            // Access token expiresOn cached in seconds, converting to Date for AuthenticationResult\r\n            expiresOn = toDateFromSeconds(cacheRecord.accessToken.expiresOn);\r\n            extExpiresOn = toDateFromSeconds(cacheRecord.accessToken.extendedExpiresOn);\r\n            if (cacheRecord.accessToken.refreshOn) {\r\n                refreshOn = toDateFromSeconds(cacheRecord.accessToken.refreshOn);\r\n            }\r\n        }\r\n        if (cacheRecord.appMetadata) {\r\n            familyId =\r\n                cacheRecord.appMetadata.familyId === THE_FAMILY_ID\r\n                    ? THE_FAMILY_ID\r\n                    : \"\";\r\n        }\r\n        const uid = idTokenClaims?.oid || idTokenClaims?.sub || \"\";\r\n        const tid = idTokenClaims?.tid || \"\";\r\n        // for hybrid + native bridge enablement, send back the native account Id\r\n        if (serverTokenResponse?.spa_accountid && !!cacheRecord.account) {\r\n            cacheRecord.account.nativeAccountId =\r\n                serverTokenResponse?.spa_accountid;\r\n        }\r\n        const accountInfo = cacheRecord.account\r\n            ? updateAccountTenantProfileData(cacheRecord.account.getAccountInfo(), undefined, // tenantProfile optional\r\n            idTokenClaims, cacheRecord.idToken?.secret)\r\n            : null;\r\n        return {\r\n            authority: authority.canonicalAuthority,\r\n            uniqueId: uid,\r\n            tenantId: tid,\r\n            scopes: responseScopes,\r\n            account: accountInfo,\r\n            idToken: cacheRecord?.idToken?.secret || \"\",\r\n            idTokenClaims: idTokenClaims || {},\r\n            accessToken: accessToken,\r\n            fromCache: fromTokenCache,\r\n            expiresOn: expiresOn,\r\n            extExpiresOn: extExpiresOn,\r\n            refreshOn: refreshOn,\r\n            correlationId: request.correlationId,\r\n            requestId: requestId || Constants$1.EMPTY_STRING,\r\n            familyId: familyId,\r\n            tokenType: cacheRecord.accessToken?.tokenType || Constants$1.EMPTY_STRING,\r\n            state: requestState\r\n                ? requestState.userRequestState\r\n                : Constants$1.EMPTY_STRING,\r\n            cloudGraphHostName: cacheRecord.account?.cloudGraphHostName ||\r\n                Constants$1.EMPTY_STRING,\r\n            msGraphHost: cacheRecord.account?.msGraphHost || Constants$1.EMPTY_STRING,\r\n            code: serverTokenResponse?.spa_code,\r\n            fromNativeBroker: false,\r\n        };\r\n    }\r\n}\r\nfunction buildAccountToCache(cacheStorage, authority, homeAccountId, base64Decode, correlationId, idTokenClaims, clientInfo, environment, claimsTenantId, authCodePayload, nativeAccountId, logger) {\r\n    logger?.verbose(\"setCachedAccount called\");\r\n    // Check if base account is already cached\r\n    const accountKeys = cacheStorage.getAccountKeys();\r\n    const baseAccountKey = accountKeys.find((accountKey) => {\r\n        return accountKey.startsWith(homeAccountId);\r\n    });\r\n    let cachedAccount = null;\r\n    if (baseAccountKey) {\r\n        cachedAccount = cacheStorage.getAccount(baseAccountKey, correlationId);\r\n    }\r\n    const baseAccount = cachedAccount ||\r\n        AccountEntity.createAccount({\r\n            homeAccountId,\r\n            idTokenClaims,\r\n            clientInfo,\r\n            environment,\r\n            cloudGraphHostName: authCodePayload?.cloud_graph_host_name,\r\n            msGraphHost: authCodePayload?.msgraph_host,\r\n            nativeAccountId: nativeAccountId,\r\n        }, authority, base64Decode);\r\n    const tenantProfiles = baseAccount.tenantProfiles || [];\r\n    const tenantId = claimsTenantId || baseAccount.realm;\r\n    if (tenantId &&\r\n        !tenantProfiles.find((tenantProfile) => {\r\n            return tenantProfile.tenantId === tenantId;\r\n        })) {\r\n        const newTenantProfile = buildTenantProfile(homeAccountId, baseAccount.localAccountId, tenantId, idTokenClaims);\r\n        tenantProfiles.push(newTenantProfile);\r\n    }\r\n    baseAccount.tenantProfiles = tenantProfiles;\r\n    return baseAccount;\r\n}\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nasync function getClientAssertion(clientAssertion, clientId, tokenEndpoint) {\r\n    if (typeof clientAssertion === \"string\") {\r\n        return clientAssertion;\r\n    }\r\n    else {\r\n        const config = {\r\n            clientId: clientId,\r\n            tokenEndpoint: tokenEndpoint,\r\n        };\r\n        return clientAssertion(config);\r\n    }\r\n}\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Oauth2.0 Authorization Code client\r\n * @internal\r\n */\r\nclass AuthorizationCodeClient extends BaseClient {\r\n    constructor(configuration, performanceClient) {\r\n        super(configuration, performanceClient);\r\n        // Flag to indicate if client is for hybrid spa auth code redemption\r\n        this.includeRedirectUri = true;\r\n        this.oidcDefaultScopes =\r\n            this.config.authOptions.authority.options.OIDCOptions?.defaultScopes;\r\n    }\r\n    /**\r\n     * API to acquire a token in exchange of 'authorization_code` acquired by the user in the first leg of the\r\n     * authorization_code_grant\r\n     * @param request\r\n     */\r\n    async acquireToken(request, authCodePayload) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthClientAcquireToken, request.correlationId);\r\n        if (!request.code) {\r\n            throw createClientAuthError(requestCannotBeMade);\r\n        }\r\n        const reqTimestamp = nowSeconds();\r\n        const response = await invokeAsync(this.executeTokenRequest.bind(this), PerformanceEvents.AuthClientExecuteTokenRequest, this.logger, this.performanceClient, request.correlationId)(this.authority, request);\r\n        // Retrieve requestId from response headers\r\n        const requestId = response.headers?.[HeaderNames.X_MS_REQUEST_ID];\r\n        const responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin, this.performanceClient);\r\n        // Validate response. This function throws a server error if an error is returned by the server.\r\n        responseHandler.validateTokenResponse(response.body);\r\n        return invokeAsync(responseHandler.handleServerTokenResponse.bind(responseHandler), PerformanceEvents.HandleServerTokenResponse, this.logger, this.performanceClient, request.correlationId)(response.body, this.authority, reqTimestamp, request, authCodePayload, undefined, undefined, undefined, requestId);\r\n    }\r\n    /**\r\n     * Used to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n     * Default behaviour is to redirect the user to `window.location.href`.\r\n     * @param authorityUri\r\n     */\r\n    getLogoutUri(logoutRequest) {\r\n        // Throw error if logoutRequest is null/undefined\r\n        if (!logoutRequest) {\r\n            throw createClientConfigurationError(logoutRequestEmpty);\r\n        }\r\n        const queryString = this.createLogoutUrlQueryString(logoutRequest);\r\n        // Construct logout URI\r\n        return UrlString.appendQueryString(this.authority.endSessionEndpoint, queryString);\r\n    }\r\n    /**\r\n     * Executes POST request to token endpoint\r\n     * @param authority\r\n     * @param request\r\n     */\r\n    async executeTokenRequest(authority, request) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthClientExecuteTokenRequest, request.correlationId);\r\n        const queryParametersString = this.createTokenQueryParameters(request);\r\n        const endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\r\n        const requestBody = await invokeAsync(this.createTokenRequestBody.bind(this), PerformanceEvents.AuthClientCreateTokenRequestBody, this.logger, this.performanceClient, request.correlationId)(request);\r\n        let ccsCredential = undefined;\r\n        if (request.clientInfo) {\r\n            try {\r\n                const clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils.base64Decode);\r\n                ccsCredential = {\r\n                    credential: `${clientInfo.uid}${Separators.CLIENT_INFO_SEPARATOR}${clientInfo.utid}`,\r\n                    type: CcsCredentialType.HOME_ACCOUNT_ID,\r\n                };\r\n            }\r\n            catch (e) {\r\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\r\n            }\r\n        }\r\n        const headers = this.createTokenRequestHeaders(ccsCredential || request.ccsCredential);\r\n        const thumbprint = getRequestThumbprint(this.config.authOptions.clientId, request);\r\n        return invokeAsync(this.executePostToTokenEndpoint.bind(this), PerformanceEvents.AuthorizationCodeClientExecutePostToTokenEndpoint, this.logger, this.performanceClient, request.correlationId)(endpoint, requestBody, headers, thumbprint, request.correlationId, PerformanceEvents.AuthorizationCodeClientExecutePostToTokenEndpoint);\r\n    }\r\n    /**\r\n     * Generates a map for all the params to be sent to the service\r\n     * @param request\r\n     */\r\n    async createTokenRequestBody(request) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthClientCreateTokenRequestBody, request.correlationId);\r\n        const parameters = new Map();\r\n        addClientId(parameters, request.embeddedClientId ||\r\n            request.tokenBodyParameters?.[CLIENT_ID] ||\r\n            this.config.authOptions.clientId);\r\n        /*\r\n         * For hybrid spa flow, there will be a code but no verifier\r\n         * In this scenario, don't include redirect uri as auth code will not be bound to redirect URI\r\n         */\r\n        if (!this.includeRedirectUri) {\r\n            // Just validate\r\n            if (!request.redirectUri) {\r\n                throw createClientConfigurationError(redirectUriEmpty);\r\n            }\r\n        }\r\n        else {\r\n            // Validate and include redirect uri\r\n            addRedirectUri(parameters, request.redirectUri);\r\n        }\r\n        // Add scope array, parameter builder will add default scopes and dedupe\r\n        addScopes(parameters, request.scopes, true, this.oidcDefaultScopes);\r\n        // add code: user set, not validated\r\n        addAuthorizationCode(parameters, request.code);\r\n        // Add library metadata\r\n        addLibraryInfo(parameters, this.config.libraryInfo);\r\n        addApplicationTelemetry(parameters, this.config.telemetry.application);\r\n        addThrottling(parameters);\r\n        if (this.serverTelemetryManager && !isOidcProtocolMode(this.config)) {\r\n            addServerTelemetry(parameters, this.serverTelemetryManager);\r\n        }\r\n        // add code_verifier if passed\r\n        if (request.codeVerifier) {\r\n            addCodeVerifier(parameters, request.codeVerifier);\r\n        }\r\n        if (this.config.clientCredentials.clientSecret) {\r\n            addClientSecret(parameters, this.config.clientCredentials.clientSecret);\r\n        }\r\n        if (this.config.clientCredentials.clientAssertion) {\r\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\r\n            addClientAssertion(parameters, await getClientAssertion(clientAssertion.assertion, this.config.authOptions.clientId, request.resourceRequestUri));\r\n            addClientAssertionType(parameters, clientAssertion.assertionType);\r\n        }\r\n        addGrantType(parameters, GrantType.AUTHORIZATION_CODE_GRANT);\r\n        addClientInfo(parameters);\r\n        if (request.authenticationScheme === AuthenticationScheme.POP) {\r\n            const popTokenGenerator = new PopTokenGenerator(this.cryptoUtils, this.performanceClient);\r\n            let reqCnfData;\r\n            if (!request.popKid) {\r\n                const generatedReqCnfData = await invokeAsync(popTokenGenerator.generateCnf.bind(popTokenGenerator), PerformanceEvents.PopTokenGenerateCnf, this.logger, this.performanceClient, request.correlationId)(request, this.logger);\r\n                reqCnfData = generatedReqCnfData.reqCnfString;\r\n            }\r\n            else {\r\n                reqCnfData = this.cryptoUtils.encodeKid(request.popKid);\r\n            }\r\n            // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\r\n            addPopToken(parameters, reqCnfData);\r\n        }\r\n        else if (request.authenticationScheme === AuthenticationScheme.SSH) {\r\n            if (request.sshJwk) {\r\n                addSshJwk(parameters, request.sshJwk);\r\n            }\r\n            else {\r\n                throw createClientConfigurationError(missingSshJwk);\r\n            }\r\n        }\r\n        if (!StringUtils.isEmptyObj(request.claims) ||\r\n            (this.config.authOptions.clientCapabilities &&\r\n                this.config.authOptions.clientCapabilities.length > 0)) {\r\n            addClaims(parameters, request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n        let ccsCred = undefined;\r\n        if (request.clientInfo) {\r\n            try {\r\n                const clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils.base64Decode);\r\n                ccsCred = {\r\n                    credential: `${clientInfo.uid}${Separators.CLIENT_INFO_SEPARATOR}${clientInfo.utid}`,\r\n                    type: CcsCredentialType.HOME_ACCOUNT_ID,\r\n                };\r\n            }\r\n            catch (e) {\r\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\r\n            }\r\n        }\r\n        else {\r\n            ccsCred = request.ccsCredential;\r\n        }\r\n        // Adds these as parameters in the request instead of headers to prevent CORS preflight request\r\n        if (this.config.systemOptions.preventCorsPreflight && ccsCred) {\r\n            switch (ccsCred.type) {\r\n                case CcsCredentialType.HOME_ACCOUNT_ID:\r\n                    try {\r\n                        const clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\r\n                        addCcsOid(parameters, clientInfo);\r\n                    }\r\n                    catch (e) {\r\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" +\r\n                            e);\r\n                    }\r\n                    break;\r\n                case CcsCredentialType.UPN:\r\n                    addCcsUpn(parameters, ccsCred.credential);\r\n                    break;\r\n            }\r\n        }\r\n        if (request.embeddedClientId) {\r\n            addBrokerParameters(parameters, this.config.authOptions.clientId, this.config.authOptions.redirectUri);\r\n        }\r\n        if (request.tokenBodyParameters) {\r\n            addExtraQueryParameters(parameters, request.tokenBodyParameters);\r\n        }\r\n        // Add hybrid spa parameters if not already provided\r\n        if (request.enableSpaAuthorizationCode &&\r\n            (!request.tokenBodyParameters ||\r\n                !request.tokenBodyParameters[RETURN_SPA_CODE])) {\r\n            addExtraQueryParameters(parameters, {\r\n                [RETURN_SPA_CODE]: \"1\",\r\n            });\r\n        }\r\n        instrumentBrokerParams(parameters, request.correlationId, this.performanceClient);\r\n        return mapToQueryString(parameters);\r\n    }\r\n    /**\r\n     * This API validates the `EndSessionRequest` and creates a URL\r\n     * @param request\r\n     */\r\n    createLogoutUrlQueryString(request) {\r\n        const parameters = new Map();\r\n        if (request.postLogoutRedirectUri) {\r\n            addPostLogoutRedirectUri(parameters, request.postLogoutRedirectUri);\r\n        }\r\n        if (request.correlationId) {\r\n            addCorrelationId(parameters, request.correlationId);\r\n        }\r\n        if (request.idTokenHint) {\r\n            addIdTokenHint(parameters, request.idTokenHint);\r\n        }\r\n        if (request.state) {\r\n            addState(parameters, request.state);\r\n        }\r\n        if (request.logoutHint) {\r\n            addLogoutHint(parameters, request.logoutHint);\r\n        }\r\n        if (request.extraQueryParameters) {\r\n            addExtraQueryParameters(parameters, request.extraQueryParameters);\r\n        }\r\n        if (this.config.authOptions.instanceAware) {\r\n            addInstanceAware(parameters);\r\n        }\r\n        return mapToQueryString(parameters, this.config.authOptions.encodeExtraQueryParams, request.extraQueryParameters);\r\n    }\r\n}\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst DEFAULT_REFRESH_TOKEN_EXPIRATION_OFFSET_SECONDS = 300; // 5 Minutes\r\n/**\r\n * OAuth2.0 refresh token client\r\n * @internal\r\n */\r\nclass RefreshTokenClient extends BaseClient {\r\n    constructor(configuration, performanceClient) {\r\n        super(configuration, performanceClient);\r\n    }\r\n    async acquireToken(request) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireToken, request.correlationId);\r\n        const reqTimestamp = nowSeconds();\r\n        const response = await invokeAsync(this.executeTokenRequest.bind(this), PerformanceEvents.RefreshTokenClientExecuteTokenRequest, this.logger, this.performanceClient, request.correlationId)(request, this.authority);\r\n        // Retrieve requestId from response headers\r\n        const requestId = response.headers?.[HeaderNames.X_MS_REQUEST_ID];\r\n        const responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\r\n        responseHandler.validateTokenResponse(response.body);\r\n        return invokeAsync(responseHandler.handleServerTokenResponse.bind(responseHandler), PerformanceEvents.HandleServerTokenResponse, this.logger, this.performanceClient, request.correlationId)(response.body, this.authority, reqTimestamp, request, undefined, undefined, true, request.forceCache, requestId);\r\n    }\r\n    /**\r\n     * Gets cached refresh token and attaches to request, then calls acquireToken API\r\n     * @param request\r\n     */\r\n    async acquireTokenByRefreshToken(request) {\r\n        // Cannot renew token if no request object is given.\r\n        if (!request) {\r\n            throw createClientConfigurationError(tokenRequestEmpty);\r\n        }\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken, request.correlationId);\r\n        // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\r\n        if (!request.account) {\r\n            throw createClientAuthError(noAccountInSilentRequest);\r\n        }\r\n        // try checking if FOCI is enabled for the given application\r\n        const isFOCI = this.cacheManager.isAppMetadataFOCI(request.account.environment);\r\n        // if the app is part of the family, retrive a Family refresh token if present and make a refreshTokenRequest\r\n        if (isFOCI) {\r\n            try {\r\n                return await invokeAsync(this.acquireTokenWithCachedRefreshToken.bind(this), PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, this.logger, this.performanceClient, request.correlationId)(request, true);\r\n            }\r\n            catch (e) {\r\n                const noFamilyRTInCache = e instanceof InteractionRequiredAuthError &&\r\n                    e.errorCode ===\r\n                        noTokensFound;\r\n                const clientMismatchErrorWithFamilyRT = e instanceof ServerError &&\r\n                    e.errorCode === Errors.INVALID_GRANT_ERROR &&\r\n                    e.subError === Errors.CLIENT_MISMATCH_ERROR;\r\n                // if family Refresh Token (FRT) cache acquisition fails or if client_mismatch error is seen with FRT, reattempt with application Refresh Token (ART)\r\n                if (noFamilyRTInCache || clientMismatchErrorWithFamilyRT) {\r\n                    return invokeAsync(this.acquireTokenWithCachedRefreshToken.bind(this), PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, this.logger, this.performanceClient, request.correlationId)(request, false);\r\n                    // throw in all other cases\r\n                }\r\n                else {\r\n                    throw e;\r\n                }\r\n            }\r\n        }\r\n        // fall back to application refresh token acquisition\r\n        return invokeAsync(this.acquireTokenWithCachedRefreshToken.bind(this), PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, this.logger, this.performanceClient, request.correlationId)(request, false);\r\n    }\r\n    /**\r\n     * makes a network call to acquire tokens by exchanging RefreshToken available in userCache; throws if refresh token is not cached\r\n     * @param request\r\n     */\r\n    async acquireTokenWithCachedRefreshToken(request, foci) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\r\n        // fetches family RT or application RT based on FOCI value\r\n        const refreshToken = invoke(this.cacheManager.getRefreshToken.bind(this.cacheManager), PerformanceEvents.CacheManagerGetRefreshToken, this.logger, this.performanceClient, request.correlationId)(request.account, foci, request.correlationId, undefined, this.performanceClient);\r\n        if (!refreshToken) {\r\n            throw createInteractionRequiredAuthError(noTokensFound);\r\n        }\r\n        if (refreshToken.expiresOn &&\r\n            isTokenExpired(refreshToken.expiresOn, request.refreshTokenExpirationOffsetSeconds ||\r\n                DEFAULT_REFRESH_TOKEN_EXPIRATION_OFFSET_SECONDS)) {\r\n            this.performanceClient?.addFields({ rtExpiresOnMs: Number(refreshToken.expiresOn) }, request.correlationId);\r\n            throw createInteractionRequiredAuthError(refreshTokenExpired);\r\n        }\r\n        // attach cached RT size to the current measurement\r\n        const refreshTokenRequest = {\r\n            ...request,\r\n            refreshToken: refreshToken.secret,\r\n            authenticationScheme: request.authenticationScheme || AuthenticationScheme.BEARER,\r\n            ccsCredential: {\r\n                credential: request.account.homeAccountId,\r\n                type: CcsCredentialType.HOME_ACCOUNT_ID,\r\n            },\r\n        };\r\n        try {\r\n            return await invokeAsync(this.acquireToken.bind(this), PerformanceEvents.RefreshTokenClientAcquireToken, this.logger, this.performanceClient, request.correlationId)(refreshTokenRequest);\r\n        }\r\n        catch (e) {\r\n            if (e instanceof InteractionRequiredAuthError) {\r\n                this.performanceClient?.addFields({ rtExpiresOnMs: Number(refreshToken.expiresOn) }, request.correlationId);\r\n                if (e.subError === badToken) {\r\n                    // Remove bad refresh token from cache\r\n                    this.logger.verbose(\"acquireTokenWithRefreshToken: bad refresh token, removing from cache\");\r\n                    const badRefreshTokenKey = this.cacheManager.generateCredentialKey(refreshToken);\r\n                    this.cacheManager.removeRefreshToken(badRefreshTokenKey, request.correlationId);\r\n                }\r\n            }\r\n            throw e;\r\n        }\r\n    }\r\n    /**\r\n     * Constructs the network message and makes a NW call to the underlying secure token service\r\n     * @param request\r\n     * @param authority\r\n     */\r\n    async executeTokenRequest(request, authority) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientExecuteTokenRequest, request.correlationId);\r\n        const queryParametersString = this.createTokenQueryParameters(request);\r\n        const endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\r\n        const requestBody = await invokeAsync(this.createTokenRequestBody.bind(this), PerformanceEvents.RefreshTokenClientCreateTokenRequestBody, this.logger, this.performanceClient, request.correlationId)(request);\r\n        const headers = this.createTokenRequestHeaders(request.ccsCredential);\r\n        const thumbprint = getRequestThumbprint(this.config.authOptions.clientId, request);\r\n        return invokeAsync(this.executePostToTokenEndpoint.bind(this), PerformanceEvents.RefreshTokenClientExecutePostToTokenEndpoint, this.logger, this.performanceClient, request.correlationId)(endpoint, requestBody, headers, thumbprint, request.correlationId, PerformanceEvents.RefreshTokenClientExecutePostToTokenEndpoint);\r\n    }\r\n    /**\r\n     * Helper function to create the token request body\r\n     * @param request\r\n     */\r\n    async createTokenRequestBody(request) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientCreateTokenRequestBody, request.correlationId);\r\n        const parameters = new Map();\r\n        addClientId(parameters, request.embeddedClientId ||\r\n            request.tokenBodyParameters?.[CLIENT_ID] ||\r\n            this.config.authOptions.clientId);\r\n        if (request.redirectUri) {\r\n            addRedirectUri(parameters, request.redirectUri);\r\n        }\r\n        addScopes(parameters, request.scopes, true, this.config.authOptions.authority.options.OIDCOptions?.defaultScopes);\r\n        addGrantType(parameters, GrantType.REFRESH_TOKEN_GRANT);\r\n        addClientInfo(parameters);\r\n        addLibraryInfo(parameters, this.config.libraryInfo);\r\n        addApplicationTelemetry(parameters, this.config.telemetry.application);\r\n        addThrottling(parameters);\r\n        if (this.serverTelemetryManager && !isOidcProtocolMode(this.config)) {\r\n            addServerTelemetry(parameters, this.serverTelemetryManager);\r\n        }\r\n        addRefreshToken(parameters, request.refreshToken);\r\n        if (this.config.clientCredentials.clientSecret) {\r\n            addClientSecret(parameters, this.config.clientCredentials.clientSecret);\r\n        }\r\n        if (this.config.clientCredentials.clientAssertion) {\r\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\r\n            addClientAssertion(parameters, await getClientAssertion(clientAssertion.assertion, this.config.authOptions.clientId, request.resourceRequestUri));\r\n            addClientAssertionType(parameters, clientAssertion.assertionType);\r\n        }\r\n        if (request.authenticationScheme === AuthenticationScheme.POP) {\r\n            const popTokenGenerator = new PopTokenGenerator(this.cryptoUtils, this.performanceClient);\r\n            let reqCnfData;\r\n            if (!request.popKid) {\r\n                const generatedReqCnfData = await invokeAsync(popTokenGenerator.generateCnf.bind(popTokenGenerator), PerformanceEvents.PopTokenGenerateCnf, this.logger, this.performanceClient, request.correlationId)(request, this.logger);\r\n                reqCnfData = generatedReqCnfData.reqCnfString;\r\n            }\r\n            else {\r\n                reqCnfData = this.cryptoUtils.encodeKid(request.popKid);\r\n            }\r\n            // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\r\n            addPopToken(parameters, reqCnfData);\r\n        }\r\n        else if (request.authenticationScheme === AuthenticationScheme.SSH) {\r\n            if (request.sshJwk) {\r\n                addSshJwk(parameters, request.sshJwk);\r\n            }\r\n            else {\r\n                throw createClientConfigurationError(missingSshJwk);\r\n            }\r\n        }\r\n        if (!StringUtils.isEmptyObj(request.claims) ||\r\n            (this.config.authOptions.clientCapabilities &&\r\n                this.config.authOptions.clientCapabilities.length > 0)) {\r\n            addClaims(parameters, request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n        if (this.config.systemOptions.preventCorsPreflight &&\r\n            request.ccsCredential) {\r\n            switch (request.ccsCredential.type) {\r\n                case CcsCredentialType.HOME_ACCOUNT_ID:\r\n                    try {\r\n                        const clientInfo = buildClientInfoFromHomeAccountId(request.ccsCredential.credential);\r\n                        addCcsOid(parameters, clientInfo);\r\n                    }\r\n                    catch (e) {\r\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" +\r\n                            e);\r\n                    }\r\n                    break;\r\n                case CcsCredentialType.UPN:\r\n                    addCcsUpn(parameters, request.ccsCredential.credential);\r\n                    break;\r\n            }\r\n        }\r\n        if (request.embeddedClientId) {\r\n            addBrokerParameters(parameters, this.config.authOptions.clientId, this.config.authOptions.redirectUri);\r\n        }\r\n        if (request.tokenBodyParameters) {\r\n            addExtraQueryParameters(parameters, request.tokenBodyParameters);\r\n        }\r\n        instrumentBrokerParams(parameters, request.correlationId, this.performanceClient);\r\n        return mapToQueryString(parameters);\r\n    }\r\n}\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/** @internal */\r\nclass SilentFlowClient extends BaseClient {\r\n    constructor(configuration, performanceClient) {\r\n        super(configuration, performanceClient);\r\n    }\r\n    /**\r\n     * Retrieves token from cache or throws an error if it must be refreshed.\r\n     * @param request\r\n     */\r\n    async acquireCachedToken(request) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.SilentFlowClientAcquireCachedToken, request.correlationId);\r\n        let lastCacheOutcome = CacheOutcome.NOT_APPLICABLE;\r\n        if (request.forceRefresh ||\r\n            (!this.config.cacheOptions.claimsBasedCachingEnabled &&\r\n                !StringUtils.isEmptyObj(request.claims))) {\r\n            // Must refresh due to present force_refresh flag.\r\n            this.setCacheOutcome(CacheOutcome.FORCE_REFRESH_OR_CLAIMS, request.correlationId);\r\n            throw createClientAuthError(tokenRefreshRequired);\r\n        }\r\n        // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\r\n        if (!request.account) {\r\n            throw createClientAuthError(noAccountInSilentRequest);\r\n        }\r\n        const requestTenantId = request.account.tenantId ||\r\n            getTenantFromAuthorityString(request.authority);\r\n        const tokenKeys = this.cacheManager.getTokenKeys();\r\n        const cachedAccessToken = this.cacheManager.getAccessToken(request.account, request, tokenKeys, requestTenantId);\r\n        if (!cachedAccessToken) {\r\n            // must refresh due to non-existent access_token\r\n            this.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN, request.correlationId);\r\n            throw createClientAuthError(tokenRefreshRequired);\r\n        }\r\n        else if (wasClockTurnedBack(cachedAccessToken.cachedAt) ||\r\n            isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\r\n            // must refresh due to the expires_in value\r\n            this.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED, request.correlationId);\r\n            throw createClientAuthError(tokenRefreshRequired);\r\n        }\r\n        else if (cachedAccessToken.refreshOn &&\r\n            isTokenExpired(cachedAccessToken.refreshOn, 0)) {\r\n            // must refresh (in the background) due to the refresh_in value\r\n            lastCacheOutcome = CacheOutcome.PROACTIVELY_REFRESHED;\r\n            // don't throw ClientAuthError.createRefreshRequiredError(), return cached token instead\r\n        }\r\n        const environment = request.authority || this.authority.getPreferredCache();\r\n        const cacheRecord = {\r\n            account: this.cacheManager.getAccount(this.cacheManager.generateAccountKey(request.account), request.correlationId),\r\n            accessToken: cachedAccessToken,\r\n            idToken: this.cacheManager.getIdToken(request.account, request.correlationId, tokenKeys, requestTenantId, this.performanceClient),\r\n            refreshToken: null,\r\n            appMetadata: this.cacheManager.readAppMetadataFromCache(environment),\r\n        };\r\n        this.setCacheOutcome(lastCacheOutcome, request.correlationId);\r\n        if (this.config.serverTelemetryManager) {\r\n            this.config.serverTelemetryManager.incrementCacheHits();\r\n        }\r\n        return [\r\n            await invokeAsync(this.generateResultFromCacheRecord.bind(this), PerformanceEvents.SilentFlowClientGenerateResultFromCacheRecord, this.logger, this.performanceClient, request.correlationId)(cacheRecord, request),\r\n            lastCacheOutcome,\r\n        ];\r\n    }\r\n    setCacheOutcome(cacheOutcome, correlationId) {\r\n        this.serverTelemetryManager?.setCacheOutcome(cacheOutcome);\r\n        this.performanceClient?.addFields({\r\n            cacheOutcome: cacheOutcome,\r\n        }, correlationId);\r\n        if (cacheOutcome !== CacheOutcome.NOT_APPLICABLE) {\r\n            this.logger.info(`Token refresh is required due to cache outcome: ${cacheOutcome}`);\r\n        }\r\n    }\r\n    /**\r\n     * Helper function to build response object from the CacheRecord\r\n     * @param cacheRecord\r\n     */\r\n    async generateResultFromCacheRecord(cacheRecord, request) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.SilentFlowClientGenerateResultFromCacheRecord, request.correlationId);\r\n        let idTokenClaims;\r\n        if (cacheRecord.idToken) {\r\n            idTokenClaims = extractTokenClaims(cacheRecord.idToken.secret, this.config.cryptoInterface.base64Decode);\r\n        }\r\n        // token max_age check\r\n        if (request.maxAge || request.maxAge === 0) {\r\n            const authTime = idTokenClaims?.auth_time;\r\n            if (!authTime) {\r\n                throw createClientAuthError(authTimeNotFound);\r\n            }\r\n            checkMaxAge(authTime, request.maxAge);\r\n        }\r\n        return ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, cacheRecord, true, request, idTokenClaims);\r\n    }\r\n}\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Returns map of parameters that are applicable to all calls to /authorize whether using PKCE or EAR\r\n * @param config\r\n * @param request\r\n * @param logger\r\n * @param performanceClient\r\n * @returns\r\n */\r\nfunction getStandardAuthorizeRequestParameters(authOptions, request, logger, performanceClient) {\r\n    // generate the correlationId if not set by the user and add\r\n    const correlationId = request.correlationId;\r\n    const parameters = new Map();\r\n    addClientId(parameters, request.embeddedClientId ||\r\n        request.extraQueryParameters?.[CLIENT_ID] ||\r\n        authOptions.clientId);\r\n    const requestScopes = [\r\n        ...(request.scopes || []),\r\n        ...(request.extraScopesToConsent || []),\r\n    ];\r\n    addScopes(parameters, requestScopes, true, authOptions.authority.options.OIDCOptions?.defaultScopes);\r\n    addRedirectUri(parameters, request.redirectUri);\r\n    addCorrelationId(parameters, correlationId);\r\n    // add response_mode. If not passed in it defaults to query.\r\n    addResponseMode(parameters, request.responseMode);\r\n    // add client_info=1\r\n    addClientInfo(parameters);\r\n    if (request.prompt) {\r\n        addPrompt(parameters, request.prompt);\r\n    }\r\n    if (request.domainHint) {\r\n        addDomainHint(parameters, request.domainHint);\r\n    }\r\n    // Add sid or loginHint with preference for login_hint claim (in request) -> sid -> loginHint (upn/email) -> username of AccountInfo object\r\n    if (request.prompt !== PromptValue.SELECT_ACCOUNT) {\r\n        // AAD will throw if prompt=select_account is passed with an account hint\r\n        if (request.sid && request.prompt === PromptValue.NONE) {\r\n            // SessionID is only used in silent calls\r\n            logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from request\");\r\n            addSid(parameters, request.sid);\r\n        }\r\n        else if (request.account) {\r\n            const accountSid = extractAccountSid(request.account);\r\n            let accountLoginHintClaim = extractLoginHint(request.account);\r\n            if (accountLoginHintClaim && request.domainHint) {\r\n                logger.warning(`AuthorizationCodeClient.createAuthCodeUrlQueryString: \"domainHint\" param is set, skipping opaque \"login_hint\" claim. Please consider not passing domainHint`);\r\n                accountLoginHintClaim = null;\r\n            }\r\n            // If login_hint claim is present, use it over sid/username\r\n            if (accountLoginHintClaim) {\r\n                logger.verbose(\"createAuthCodeUrlQueryString: login_hint claim present on account\");\r\n                addLoginHint(parameters, accountLoginHintClaim);\r\n                try {\r\n                    const clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\r\n                    addCcsOid(parameters, clientInfo);\r\n                }\r\n                catch (e) {\r\n                    logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\r\n                }\r\n            }\r\n            else if (accountSid && request.prompt === PromptValue.NONE) {\r\n                /*\r\n                 * If account and loginHint are provided, we will check account first for sid before adding loginHint\r\n                 * SessionId is only used in silent calls\r\n                 */\r\n                logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from account\");\r\n                addSid(parameters, accountSid);\r\n                try {\r\n                    const clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\r\n                    addCcsOid(parameters, clientInfo);\r\n                }\r\n                catch (e) {\r\n                    logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\r\n                }\r\n            }\r\n            else if (request.loginHint) {\r\n                logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from request\");\r\n                addLoginHint(parameters, request.loginHint);\r\n                addCcsUpn(parameters, request.loginHint);\r\n            }\r\n            else if (request.account.username) {\r\n                // Fallback to account username if provided\r\n                logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from account\");\r\n                addLoginHint(parameters, request.account.username);\r\n                try {\r\n                    const clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\r\n                    addCcsOid(parameters, clientInfo);\r\n                }\r\n                catch (e) {\r\n                    logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\r\n                }\r\n            }\r\n        }\r\n        else if (request.loginHint) {\r\n            logger.verbose(\"createAuthCodeUrlQueryString: No account, adding login_hint from request\");\r\n            addLoginHint(parameters, request.loginHint);\r\n            addCcsUpn(parameters, request.loginHint);\r\n        }\r\n    }\r\n    else {\r\n        logger.verbose(\"createAuthCodeUrlQueryString: Prompt is select_account, ignoring account hints\");\r\n    }\r\n    if (request.nonce) {\r\n        addNonce(parameters, request.nonce);\r\n    }\r\n    if (request.state) {\r\n        addState(parameters, request.state);\r\n    }\r\n    if (request.claims ||\r\n        (authOptions.clientCapabilities &&\r\n            authOptions.clientCapabilities.length > 0)) {\r\n        addClaims(parameters, request.claims, authOptions.clientCapabilities);\r\n    }\r\n    if (request.embeddedClientId) {\r\n        addBrokerParameters(parameters, authOptions.clientId, authOptions.redirectUri);\r\n    }\r\n    // If extraQueryParameters includes instance_aware its value will be added when extraQueryParameters are added\r\n    if (authOptions.instanceAware &&\r\n        (!request.extraQueryParameters ||\r\n            !Object.keys(request.extraQueryParameters).includes(INSTANCE_AWARE))) {\r\n        addInstanceAware(parameters);\r\n    }\r\n    return parameters;\r\n}\r\n/**\r\n * Returns authorize endpoint with given request parameters in the query string\r\n * @param authority\r\n * @param requestParameters\r\n * @returns\r\n */\r\nfunction getAuthorizeUrl(authority, requestParameters, encodeParams, extraQueryParameters) {\r\n    const queryString = mapToQueryString(requestParameters, encodeParams, extraQueryParameters);\r\n    return UrlString.appendQueryString(authority.authorizationEndpoint, queryString);\r\n}\r\n/**\r\n * Helper to get sid from account. Returns null if idTokenClaims are not present or sid is not present.\r\n * @param account\r\n */\r\nfunction extractAccountSid(account) {\r\n    return account.idTokenClaims?.sid || null;\r\n}\r\nfunction extractLoginHint(account) {\r\n    return account.loginHint || account.idTokenClaims?.login_hint || null;\r\n}\n\n/*! @azure/msal-common v15.12.0 2025-08-19 */\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst skuGroupSeparator = \",\";\r\nconst skuValueSeparator = \"|\";\r\nfunction makeExtraSkuString(params) {\r\n    const { skus, libraryName, libraryVersion, extensionName, extensionVersion, } = params;\r\n    const skuMap = new Map([\r\n        [0, [libraryName, libraryVersion]],\r\n        [2, [extensionName, extensionVersion]],\r\n    ]);\r\n    let skuArr = [];\r\n    if (skus?.length) {\r\n        skuArr = skus.split(skuGroupSeparator);\r\n        // Ignore invalid input sku param\r\n        if (skuArr.length < 4) {\r\n            return skus;\r\n        }\r\n    }\r\n    else {\r\n        skuArr = Array.from({ length: 4 }, () => skuValueSeparator);\r\n    }\r\n    skuMap.forEach((value, key) => {\r\n        if (value.length === 2 && value[0]?.length && value[1]?.length) {\r\n            setSku({\r\n                skuArr,\r\n                index: key,\r\n                skuName: value[0],\r\n                skuVersion: value[1],\r\n            });\r\n        }\r\n    });\r\n    return skuArr.join(skuGroupSeparator);\r\n}\r\nfunction setSku(params) {\r\n    const { skuArr, index, skuName, skuVersion } = params;\r\n    if (index >= skuArr.length) {\r\n        return;\r\n    }\r\n    skuArr[index] = [skuName, skuVersion].join(skuValueSeparator);\r\n}\r\n/** @internal */\r\nclass ServerTelemetryManager {\r\n    constructor(telemetryRequest, cacheManager) {\r\n        this.cacheOutcome = CacheOutcome.NOT_APPLICABLE;\r\n        this.cacheManager = cacheManager;\r\n        this.apiId = telemetryRequest.apiId;\r\n        this.correlationId = telemetryRequest.correlationId;\r\n        this.wrapperSKU = telemetryRequest.wrapperSKU || Constants$1.EMPTY_STRING;\r\n        this.wrapperVer = telemetryRequest.wrapperVer || Constants$1.EMPTY_STRING;\r\n        this.telemetryCacheKey =\r\n            SERVER_TELEM_CONSTANTS.CACHE_KEY +\r\n                Separators.CACHE_KEY_SEPARATOR +\r\n                telemetryRequest.clientId;\r\n    }\r\n    /**\r\n     * API to add MSER Telemetry to request\r\n     */\r\n    generateCurrentRequestHeaderValue() {\r\n        const request = `${this.apiId}${SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR}${this.cacheOutcome}`;\r\n        const platformFieldsArr = [this.wrapperSKU, this.wrapperVer];\r\n        const nativeBrokerErrorCode = this.getNativeBrokerErrorCode();\r\n        if (nativeBrokerErrorCode?.length) {\r\n            platformFieldsArr.push(`broker_error=${nativeBrokerErrorCode}`);\r\n        }\r\n        const platformFields = platformFieldsArr.join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\r\n        const regionDiscoveryFields = this.getRegionDiscoveryFields();\r\n        const requestWithRegionDiscoveryFields = [\r\n            request,\r\n            regionDiscoveryFields,\r\n        ].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\r\n        return [\r\n            SERVER_TELEM_CONSTANTS.SCHEMA_VERSION,\r\n            requestWithRegionDiscoveryFields,\r\n            platformFields,\r\n        ].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\r\n    }\r\n    /**\r\n     * API to add MSER Telemetry for the last failed request\r\n     */\r\n    generateLastRequestHeaderValue() {\r\n        const lastRequests = this.getLastRequests();\r\n        const maxErrors = ServerTelemetryManager.maxErrorsToSend(lastRequests);\r\n        const failedRequests = lastRequests.failedRequests\r\n            .slice(0, 2 * maxErrors)\r\n            .join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\r\n        const errors = lastRequests.errors\r\n            .slice(0, maxErrors)\r\n            .join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\r\n        const errorCount = lastRequests.errors.length;\r\n        // Indicate whether this header contains all data or partial data\r\n        const overflow = maxErrors < errorCount\r\n            ? SERVER_TELEM_CONSTANTS.OVERFLOW_TRUE\r\n            : SERVER_TELEM_CONSTANTS.OVERFLOW_FALSE;\r\n        const platformFields = [errorCount, overflow].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\r\n        return [\r\n            SERVER_TELEM_CONSTANTS.SCHEMA_VERSION,\r\n            lastRequests.cacheHits,\r\n            failedRequests,\r\n            errors,\r\n            platformFields,\r\n        ].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\r\n    }\r\n    /**\r\n     * API to cache token failures for MSER data capture\r\n     * @param error\r\n     */\r\n    cacheFailedRequest(error) {\r\n        const lastRequests = this.getLastRequests();\r\n        if (lastRequests.errors.length >=\r\n            SERVER_TELEM_CONSTANTS.MAX_CACHED_ERRORS) {\r\n            // Remove a cached error to make room, first in first out\r\n            lastRequests.failedRequests.shift(); // apiId\r\n            lastRequests.failedRequests.shift(); // correlationId\r\n            lastRequests.errors.shift();\r\n        }\r\n        lastRequests.failedRequests.push(this.apiId, this.correlationId);\r\n        if (error instanceof Error && !!error && error.toString()) {\r\n            if (error instanceof AuthError) {\r\n                if (error.subError) {\r\n                    lastRequests.errors.push(error.subError);\r\n                }\r\n                else if (error.errorCode) {\r\n                    lastRequests.errors.push(error.errorCode);\r\n                }\r\n                else {\r\n                    lastRequests.errors.push(error.toString());\r\n                }\r\n            }\r\n            else {\r\n                lastRequests.errors.push(error.toString());\r\n            }\r\n        }\r\n        else {\r\n            lastRequests.errors.push(SERVER_TELEM_CONSTANTS.UNKNOWN_ERROR);\r\n        }\r\n        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests, this.correlationId);\r\n        return;\r\n    }\r\n    /**\r\n     * Update server telemetry cache entry by incrementing cache hit counter\r\n     */\r\n    incrementCacheHits() {\r\n        const lastRequests = this.getLastRequests();\r\n        lastRequests.cacheHits += 1;\r\n        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests, this.correlationId);\r\n        return lastRequests.cacheHits;\r\n    }\r\n    /**\r\n     * Get the server telemetry entity from cache or initialize a new one\r\n     */\r\n    getLastRequests() {\r\n        const initialValue = {\r\n            failedRequests: [],\r\n            errors: [],\r\n            cacheHits: 0,\r\n        };\r\n        const lastRequests = this.cacheManager.getServerTelemetry(this.telemetryCacheKey);\r\n        return lastRequests || initialValue;\r\n    }\r\n    /**\r\n     * Remove server telemetry cache entry\r\n     */\r\n    clearTelemetryCache() {\r\n        const lastRequests = this.getLastRequests();\r\n        const numErrorsFlushed = ServerTelemetryManager.maxErrorsToSend(lastRequests);\r\n        const errorCount = lastRequests.errors.length;\r\n        if (numErrorsFlushed === errorCount) {\r\n            // All errors were sent on last request, clear Telemetry cache\r\n            this.cacheManager.removeItem(this.telemetryCacheKey, this.correlationId);\r\n        }\r\n        else {\r\n            // Partial data was flushed to server, construct a new telemetry cache item with errors that were not flushed\r\n            const serverTelemEntity = {\r\n                failedRequests: lastRequests.failedRequests.slice(numErrorsFlushed * 2),\r\n                errors: lastRequests.errors.slice(numErrorsFlushed),\r\n                cacheHits: 0,\r\n            };\r\n            this.cacheManager.setServerTelemetry(this.telemetryCacheKey, serverTelemEntity, this.correlationId);\r\n        }\r\n    }\r\n    /**\r\n     * Returns the maximum number of errors that can be flushed to the server in the next network request\r\n     * @param serverTelemetryEntity\r\n     */\r\n    static maxErrorsToSend(serverTelemetryEntity) {\r\n        let i;\r\n        let maxErrors = 0;\r\n        let dataSize = 0;\r\n        const errorCount = serverTelemetryEntity.errors.length;\r\n        for (i = 0; i < errorCount; i++) {\r\n            // failedRequests parameter contains pairs of apiId and correlationId, multiply index by 2 to preserve pairs\r\n            const apiId = serverTelemetryEntity.failedRequests[2 * i] ||\r\n                Constants$1.EMPTY_STRING;\r\n            const correlationId = serverTelemetryEntity.failedRequests[2 * i + 1] ||\r\n                Constants$1.EMPTY_STRING;\r\n            const errorCode = serverTelemetryEntity.errors[i] || Constants$1.EMPTY_STRING;\r\n            // Count number of characters that would be added to header, each character is 1 byte. Add 3 at the end to account for separators\r\n            dataSize +=\r\n                apiId.toString().length +\r\n                    correlationId.toString().length +\r\n                    errorCode.length +\r\n                    3;\r\n            if (dataSize < SERVER_TELEM_CONSTANTS.MAX_LAST_HEADER_BYTES) {\r\n                // Adding this entry to the header would still keep header size below the limit\r\n                maxErrors += 1;\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        return maxErrors;\r\n    }\r\n    /**\r\n     * Get the region discovery fields\r\n     *\r\n     * @returns string\r\n     */\r\n    getRegionDiscoveryFields() {\r\n        const regionDiscoveryFields = [];\r\n        regionDiscoveryFields.push(this.regionUsed || Constants$1.EMPTY_STRING);\r\n        regionDiscoveryFields.push(this.regionSource || Constants$1.EMPTY_STRING);\r\n        regionDiscoveryFields.push(this.regionOutcome || Constants$1.EMPTY_STRING);\r\n        return regionDiscoveryFields.join(\",\");\r\n    }\r\n    /**\r\n     * Update the region discovery metadata\r\n     *\r\n     * @param regionDiscoveryMetadata\r\n     * @returns void\r\n     */\r\n    updateRegionDiscoveryMetadata(regionDiscoveryMetadata) {\r\n        this.regionUsed = regionDiscoveryMetadata.region_used;\r\n        this.regionSource = regionDiscoveryMetadata.region_source;\r\n        this.regionOutcome = regionDiscoveryMetadata.region_outcome;\r\n    }\r\n    /**\r\n     * Set cache outcome\r\n     */\r\n    setCacheOutcome(cacheOutcome) {\r\n        this.cacheOutcome = cacheOutcome;\r\n    }\r\n    setNativeBrokerErrorCode(errorCode) {\r\n        const lastRequests = this.getLastRequests();\r\n        lastRequests.nativeBrokerErrorCode = errorCode;\r\n        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests, this.correlationId);\r\n    }\r\n    getNativeBrokerErrorCode() {\r\n        return this.getLastRequests().nativeBrokerErrorCode;\r\n    }\r\n    clearNativeBrokerErrorCode() {\r\n        const lastRequests = this.getLastRequests();\r\n        delete lastRequests.nativeBrokerErrorCode;\r\n        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests, this.correlationId);\r\n    }\r\n    static makeExtraSkuString(params) {\r\n        return makeExtraSkuString(params);\r\n    }\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * This class deserializes cache entities read from the file into in-memory object types defined internally\r\n * @internal\r\n */\r\nclass Deserializer {\r\n    /**\r\n     * Parse the JSON blob in memory and deserialize the content\r\n     * @param cachedJson - JSON blob cache\r\n     */\r\n    static deserializeJSONBlob(jsonFile) {\r\n        const deserializedCache = !jsonFile ? {} : JSON.parse(jsonFile);\r\n        return deserializedCache;\r\n    }\r\n    /**\r\n     * Deserializes accounts to AccountEntity objects\r\n     * @param accounts - accounts of type SerializedAccountEntity\r\n     */\r\n    static deserializeAccounts(accounts) {\r\n        const accountObjects = {};\r\n        if (accounts) {\r\n            Object.keys(accounts).map(function (key) {\r\n                const serializedAcc = accounts[key];\r\n                const mappedAcc = {\r\n                    homeAccountId: serializedAcc.home_account_id,\r\n                    environment: serializedAcc.environment,\r\n                    realm: serializedAcc.realm,\r\n                    localAccountId: serializedAcc.local_account_id,\r\n                    username: serializedAcc.username,\r\n                    authorityType: serializedAcc.authority_type,\r\n                    name: serializedAcc.name,\r\n                    clientInfo: serializedAcc.client_info,\r\n                    lastModificationTime: serializedAcc.last_modification_time,\r\n                    lastModificationApp: serializedAcc.last_modification_app,\r\n                    tenantProfiles: serializedAcc.tenantProfiles?.map((serializedTenantProfile) => {\r\n                        return JSON.parse(serializedTenantProfile);\r\n                    }),\r\n                    lastUpdatedAt: Date.now().toString(),\r\n                };\r\n                const account = new AccountEntity();\r\n                CacheManager.toObject(account, mappedAcc);\r\n                accountObjects[key] = account;\r\n            });\r\n        }\r\n        return accountObjects;\r\n    }\r\n    /**\r\n     * Deserializes id tokens to IdTokenEntity objects\r\n     * @param idTokens - credentials of type SerializedIdTokenEntity\r\n     */\r\n    static deserializeIdTokens(idTokens) {\r\n        const idObjects = {};\r\n        if (idTokens) {\r\n            Object.keys(idTokens).map(function (key) {\r\n                const serializedIdT = idTokens[key];\r\n                const idToken = {\r\n                    homeAccountId: serializedIdT.home_account_id,\r\n                    environment: serializedIdT.environment,\r\n                    credentialType: serializedIdT.credential_type,\r\n                    clientId: serializedIdT.client_id,\r\n                    secret: serializedIdT.secret,\r\n                    realm: serializedIdT.realm,\r\n                    lastUpdatedAt: Date.now().toString(),\r\n                };\r\n                idObjects[key] = idToken;\r\n            });\r\n        }\r\n        return idObjects;\r\n    }\r\n    /**\r\n     * Deserializes access tokens to AccessTokenEntity objects\r\n     * @param accessTokens - access tokens of type SerializedAccessTokenEntity\r\n     */\r\n    static deserializeAccessTokens(accessTokens) {\r\n        const atObjects = {};\r\n        if (accessTokens) {\r\n            Object.keys(accessTokens).map(function (key) {\r\n                const serializedAT = accessTokens[key];\r\n                const accessToken = {\r\n                    homeAccountId: serializedAT.home_account_id,\r\n                    environment: serializedAT.environment,\r\n                    credentialType: serializedAT.credential_type,\r\n                    clientId: serializedAT.client_id,\r\n                    secret: serializedAT.secret,\r\n                    realm: serializedAT.realm,\r\n                    target: serializedAT.target,\r\n                    cachedAt: serializedAT.cached_at,\r\n                    expiresOn: serializedAT.expires_on,\r\n                    extendedExpiresOn: serializedAT.extended_expires_on,\r\n                    refreshOn: serializedAT.refresh_on,\r\n                    keyId: serializedAT.key_id,\r\n                    tokenType: serializedAT.token_type,\r\n                    requestedClaims: serializedAT.requestedClaims,\r\n                    requestedClaimsHash: serializedAT.requestedClaimsHash,\r\n                    userAssertionHash: serializedAT.userAssertionHash,\r\n                    lastUpdatedAt: Date.now().toString(),\r\n                };\r\n                atObjects[key] = accessToken;\r\n            });\r\n        }\r\n        return atObjects;\r\n    }\r\n    /**\r\n     * Deserializes refresh tokens to RefreshTokenEntity objects\r\n     * @param refreshTokens - refresh tokens of type SerializedRefreshTokenEntity\r\n     */\r\n    static deserializeRefreshTokens(refreshTokens) {\r\n        const rtObjects = {};\r\n        if (refreshTokens) {\r\n            Object.keys(refreshTokens).map(function (key) {\r\n                const serializedRT = refreshTokens[key];\r\n                const refreshToken = {\r\n                    homeAccountId: serializedRT.home_account_id,\r\n                    environment: serializedRT.environment,\r\n                    credentialType: serializedRT.credential_type,\r\n                    clientId: serializedRT.client_id,\r\n                    secret: serializedRT.secret,\r\n                    familyId: serializedRT.family_id,\r\n                    target: serializedRT.target,\r\n                    realm: serializedRT.realm,\r\n                    lastUpdatedAt: Date.now().toString(),\r\n                };\r\n                rtObjects[key] = refreshToken;\r\n            });\r\n        }\r\n        return rtObjects;\r\n    }\r\n    /**\r\n     * Deserializes appMetadata to AppMetaData objects\r\n     * @param appMetadata - app metadata of type SerializedAppMetadataEntity\r\n     */\r\n    static deserializeAppMetadata(appMetadata) {\r\n        const appMetadataObjects = {};\r\n        if (appMetadata) {\r\n            Object.keys(appMetadata).map(function (key) {\r\n                const serializedAmdt = appMetadata[key];\r\n                appMetadataObjects[key] = {\r\n                    clientId: serializedAmdt.client_id,\r\n                    environment: serializedAmdt.environment,\r\n                    familyId: serializedAmdt.family_id,\r\n                };\r\n            });\r\n        }\r\n        return appMetadataObjects;\r\n    }\r\n    /**\r\n     * Deserialize an inMemory Cache\r\n     * @param jsonCache - JSON blob cache\r\n     */\r\n    static deserializeAllCache(jsonCache) {\r\n        return {\r\n            accounts: jsonCache.Account\r\n                ? this.deserializeAccounts(jsonCache.Account)\r\n                : {},\r\n            idTokens: jsonCache.IdToken\r\n                ? this.deserializeIdTokens(jsonCache.IdToken)\r\n                : {},\r\n            accessTokens: jsonCache.AccessToken\r\n                ? this.deserializeAccessTokens(jsonCache.AccessToken)\r\n                : {},\r\n            refreshTokens: jsonCache.RefreshToken\r\n                ? this.deserializeRefreshTokens(jsonCache.RefreshToken)\r\n                : {},\r\n            appMetadata: jsonCache.AppMetadata\r\n                ? this.deserializeAppMetadata(jsonCache.AppMetadata)\r\n                : {},\r\n        };\r\n    }\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Warning: This set of exports is purely intended to be used by other MSAL libraries, and should be considered potentially unstable. We strongly discourage using them directly, you do so at your own risk.\r\n * Breaking changes to these APIs will be shipped under a minor version, instead of a major version.\r\n */\n\nvar internals = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    Deserializer: Deserializer,\n    Serializer: Serializer\n});\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n// MSI Constants. Docs for MSI are available here https://docs.microsoft.com/azure/app-service/overview-managed-identity\r\nconst DEFAULT_MANAGED_IDENTITY_ID = \"system_assigned_managed_identity\";\r\nconst MANAGED_IDENTITY_DEFAULT_TENANT = \"managed_identity\";\r\nconst DEFAULT_AUTHORITY_FOR_MANAGED_IDENTITY = `https://login.microsoftonline.com/${MANAGED_IDENTITY_DEFAULT_TENANT}/`;\r\n/**\r\n * Managed Identity Headers - used in network requests\r\n */\r\nconst ManagedIdentityHeaders = {\r\n    AUTHORIZATION_HEADER_NAME: \"Authorization\",\r\n    METADATA_HEADER_NAME: \"Metadata\",\r\n    APP_SERVICE_SECRET_HEADER_NAME: \"X-IDENTITY-HEADER\",\r\n    ML_AND_SF_SECRET_HEADER_NAME: \"secret\",\r\n};\r\n/**\r\n * Managed Identity Query Parameters - used in network requests\r\n */\r\nconst ManagedIdentityQueryParameters = {\r\n    API_VERSION: \"api-version\",\r\n    RESOURCE: \"resource\",\r\n    SHA256_TOKEN_TO_REFRESH: \"token_sha256_to_refresh\",\r\n    XMS_CC: \"xms_cc\",\r\n};\r\n/**\r\n * Managed Identity Environment Variable Names\r\n */\r\nconst ManagedIdentityEnvironmentVariableNames = {\r\n    AZURE_POD_IDENTITY_AUTHORITY_HOST: \"AZURE_POD_IDENTITY_AUTHORITY_HOST\",\r\n    DEFAULT_IDENTITY_CLIENT_ID: \"DEFAULT_IDENTITY_CLIENT_ID\",\r\n    IDENTITY_ENDPOINT: \"IDENTITY_ENDPOINT\",\r\n    IDENTITY_HEADER: \"IDENTITY_HEADER\",\r\n    IDENTITY_SERVER_THUMBPRINT: \"IDENTITY_SERVER_THUMBPRINT\",\r\n    IMDS_ENDPOINT: \"IMDS_ENDPOINT\",\r\n    MSI_ENDPOINT: \"MSI_ENDPOINT\",\r\n    MSI_SECRET: \"MSI_SECRET\",\r\n};\r\n/**\r\n * Managed Identity Source Names\r\n * @public\r\n */\r\nconst ManagedIdentitySourceNames = {\r\n    APP_SERVICE: \"AppService\",\r\n    AZURE_ARC: \"AzureArc\",\r\n    CLOUD_SHELL: \"CloudShell\",\r\n    DEFAULT_TO_IMDS: \"DefaultToImds\",\r\n    IMDS: \"Imds\",\r\n    MACHINE_LEARNING: \"MachineLearning\",\r\n    SERVICE_FABRIC: \"ServiceFabric\",\r\n};\r\n/**\r\n * Managed Identity Ids\r\n */\r\nconst ManagedIdentityIdType = {\r\n    SYSTEM_ASSIGNED: \"system-assigned\",\r\n    USER_ASSIGNED_CLIENT_ID: \"user-assigned-client-id\",\r\n    USER_ASSIGNED_RESOURCE_ID: \"user-assigned-resource-id\",\r\n    USER_ASSIGNED_OBJECT_ID: \"user-assigned-object-id\",\r\n};\r\n/**\r\n * http methods\r\n */\r\nconst HttpMethod = {\r\n    GET: \"get\",\r\n    POST: \"post\",\r\n};\r\nconst ProxyStatus = {\r\n    SUCCESS_RANGE_START: HttpStatus.SUCCESS_RANGE_START,\r\n    SUCCESS_RANGE_END: HttpStatus.SUCCESS_RANGE_END,\r\n    SERVER_ERROR: HttpStatus.SERVER_ERROR,\r\n};\r\n/**\r\n * Constants used for region discovery\r\n */\r\nconst REGION_ENVIRONMENT_VARIABLE = \"REGION_NAME\";\r\nconst MSAL_FORCE_REGION = \"MSAL_FORCE_REGION\";\r\n/**\r\n * Constant used for PKCE\r\n */\r\nconst RANDOM_OCTET_SIZE = 32;\r\n/**\r\n * Constants used in PKCE\r\n */\r\nconst Hash = {\r\n    SHA256: \"sha256\",\r\n};\r\n/**\r\n * Constants for encoding schemes\r\n */\r\nconst CharSet = {\r\n    CV_CHARSET: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~\",\r\n};\r\n/**\r\n * Cache Constants\r\n */\r\nconst CACHE = {\r\n    KEY_SEPARATOR: \"-\",\r\n};\r\n/**\r\n * Constants\r\n */\r\nconst Constants = {\r\n    MSAL_SKU: \"msal.js.node\",\r\n    JWT_BEARER_ASSERTION_TYPE: \"urn:ietf:params:oauth:client-assertion-type:jwt-bearer\",\r\n    AUTHORIZATION_PENDING: \"authorization_pending\",\r\n    HTTP_PROTOCOL: \"http://\",\r\n    LOCALHOST: \"localhost\",\r\n};\r\n/**\r\n * API Codes for Telemetry purposes.\r\n * Before adding a new code you must claim it in the MSAL Telemetry tracker as these number spaces are shared across all MSALs\r\n * 0-99 Silent Flow\r\n * 600-699 Device Code Flow\r\n * 800-899 Auth Code Flow\r\n */\r\nconst ApiId = {\r\n    acquireTokenSilent: 62,\r\n    acquireTokenByUsernamePassword: 371,\r\n    acquireTokenByDeviceCode: 671,\r\n    acquireTokenByClientCredential: 771,\r\n    acquireTokenByCode: 871,\r\n    acquireTokenByRefreshToken: 872,\r\n};\r\n/**\r\n * JWT  constants\r\n */\r\nconst JwtConstants = {\r\n    RSA_256: \"RS256\",\r\n    PSS_256: \"PS256\",\r\n    X5T_256: \"x5t#S256\",\r\n    X5T: \"x5t\",\r\n    X5C: \"x5c\",\r\n    AUDIENCE: \"aud\",\r\n    EXPIRATION_TIME: \"exp\",\r\n    ISSUER: \"iss\",\r\n    SUBJECT: \"sub\",\r\n    NOT_BEFORE: \"nbf\",\r\n    JWT_ID: \"jti\",\r\n};\r\nconst LOOPBACK_SERVER_CONSTANTS = {\r\n    INTERVAL_MS: 100,\r\n    TIMEOUT_MS: 5000,\r\n};\r\nconst AZURE_ARC_SECRET_FILE_MAX_SIZE_BYTES = 4096; // 4 KB\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nclass NetworkUtils {\r\n    static getNetworkResponse(headers, body, statusCode) {\r\n        return {\r\n            headers: headers,\r\n            body: body,\r\n            status: statusCode,\r\n        };\r\n    }\r\n    /*\r\n     * Utility function that converts a URL object into an ordinary options object as expected by the\r\n     * http.request and https.request APIs.\r\n     * https://github.com/nodejs/node/blob/main/lib/internal/url.js#L1090\r\n     */\r\n    static urlToHttpOptions(url) {\r\n        const options = {\r\n            protocol: url.protocol,\r\n            hostname: url.hostname && url.hostname.startsWith(\"[\")\r\n                ? url.hostname.slice(1, -1)\r\n                : url.hostname,\r\n            hash: url.hash,\r\n            search: url.search,\r\n            pathname: url.pathname,\r\n            path: `${url.pathname || \"\"}${url.search || \"\"}`,\r\n            href: url.href,\r\n        };\r\n        if (url.port !== \"\") {\r\n            options.port = Number(url.port);\r\n        }\r\n        if (url.username || url.password) {\r\n            options.auth = `${decodeURIComponent(url.username)}:${decodeURIComponent(url.password)}`;\r\n        }\r\n        return options;\r\n    }\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * This class implements the API for network requests.\r\n */\r\nclass HttpClient {\r\n    constructor(proxyUrl, customAgentOptions) {\r\n        this.proxyUrl = proxyUrl || \"\";\r\n        this.customAgentOptions = customAgentOptions || {};\r\n    }\r\n    /**\r\n     * Http Get request\r\n     * @param url\r\n     * @param options\r\n     */\r\n    async sendGetRequestAsync(url, options, timeout) {\r\n        if (this.proxyUrl) {\r\n            return networkRequestViaProxy(url, this.proxyUrl, HttpMethod.GET, options, this.customAgentOptions, timeout);\r\n        }\r\n        else {\r\n            return networkRequestViaHttps(url, HttpMethod.GET, options, this.customAgentOptions, timeout);\r\n        }\r\n    }\r\n    /**\r\n     * Http Post request\r\n     * @param url\r\n     * @param options\r\n     */\r\n    async sendPostRequestAsync(url, options) {\r\n        if (this.proxyUrl) {\r\n            return networkRequestViaProxy(url, this.proxyUrl, HttpMethod.POST, options, this.customAgentOptions);\r\n        }\r\n        else {\r\n            return networkRequestViaHttps(url, HttpMethod.POST, options, this.customAgentOptions);\r\n        }\r\n    }\r\n}\r\nconst networkRequestViaProxy = (destinationUrlString, proxyUrlString, httpMethod, options, agentOptions, timeout) => {\r\n    const destinationUrl = new URL(destinationUrlString);\r\n    const proxyUrl = new URL(proxyUrlString);\r\n    // \"method: connect\" must be used to establish a connection to the proxy\r\n    const headers = options?.headers || {};\r\n    const tunnelRequestOptions = {\r\n        host: proxyUrl.hostname,\r\n        port: proxyUrl.port,\r\n        method: \"CONNECT\",\r\n        path: destinationUrl.hostname,\r\n        headers: headers,\r\n    };\r\n    if (agentOptions && Object.keys(agentOptions).length) {\r\n        tunnelRequestOptions.agent = new http.Agent(agentOptions);\r\n    }\r\n    // compose a request string for the socket\r\n    let postRequestStringContent = \"\";\r\n    if (httpMethod === HttpMethod.POST) {\r\n        const body = options?.body || \"\";\r\n        postRequestStringContent =\r\n            \"Content-Type: application/x-www-form-urlencoded\\r\\n\" +\r\n                `Content-Length: ${body.length}\\r\\n` +\r\n                `\\r\\n${body}`;\r\n    }\r\n    else {\r\n        // optional timeout is only for get requests (regionDiscovery, for example)\r\n        if (timeout) {\r\n            tunnelRequestOptions.timeout = timeout;\r\n        }\r\n    }\r\n    const outgoingRequestString = `${httpMethod.toUpperCase()} ${destinationUrl.href} HTTP/1.1\\r\\n` +\r\n        `Host: ${destinationUrl.host}\\r\\n` +\r\n        \"Connection: close\\r\\n\" +\r\n        postRequestStringContent +\r\n        \"\\r\\n\";\r\n    return new Promise((resolve, reject) => {\r\n        const request = http.request(tunnelRequestOptions);\r\n        if (timeout) {\r\n            request.on(\"timeout\", () => {\r\n                request.destroy();\r\n                reject(new Error(\"Request time out\"));\r\n            });\r\n        }\r\n        request.end();\r\n        // establish connection to the proxy\r\n        request.on(\"connect\", (response, socket) => {\r\n            const proxyStatusCode = response?.statusCode || ProxyStatus.SERVER_ERROR;\r\n            if (proxyStatusCode < ProxyStatus.SUCCESS_RANGE_START ||\r\n                proxyStatusCode > ProxyStatus.SUCCESS_RANGE_END) {\r\n                request.destroy();\r\n                socket.destroy();\r\n                reject(new Error(`Error connecting to proxy. Http status code: ${response.statusCode}. Http status message: ${response?.statusMessage || \"Unknown\"}`));\r\n            }\r\n            // make a request over an HTTP tunnel\r\n            socket.write(outgoingRequestString);\r\n            const data = [];\r\n            socket.on(\"data\", (chunk) => {\r\n                data.push(chunk);\r\n            });\r\n            socket.on(\"end\", () => {\r\n                // combine all received buffer streams into one buffer, and then into a string\r\n                const dataString = Buffer.concat([...data]).toString();\r\n                // separate each line into it's own entry in an arry\r\n                const dataStringArray = dataString.split(\"\\r\\n\");\r\n                // the first entry will contain the statusCode and statusMessage\r\n                const httpStatusCode = parseInt(dataStringArray[0].split(\" \")[1]);\r\n                // remove \"HTTP/1.1\" and the status code to get the status message\r\n                const statusMessage = dataStringArray[0]\r\n                    .split(\" \")\r\n                    .slice(2)\r\n                    .join(\" \");\r\n                // the last entry will contain the body\r\n                const body = dataStringArray[dataStringArray.length - 1];\r\n                // everything in between the first and last entries are the headers\r\n                const headersArray = dataStringArray.slice(1, dataStringArray.length - 2);\r\n                // build an object out of all the headers\r\n                const entries = new Map();\r\n                headersArray.forEach((header) => {\r\n                    /**\r\n                     * the header might look like \"Content-Length: 1531\", but that is just a string\r\n                     * it needs to be converted to a key/value pair\r\n                     * split the string at the first instance of \":\"\r\n                     * there may be more than one \":\" if the value of the header is supposed to be a JSON object\r\n                     */\r\n                    const headerKeyValue = header.split(new RegExp(/:\\s(.*)/s));\r\n                    const headerKey = headerKeyValue[0];\r\n                    let headerValue = headerKeyValue[1];\r\n                    // check if the value of the header is supposed to be a JSON object\r\n                    try {\r\n                        const object = JSON.parse(headerValue);\r\n                        // if it is, then convert it from a string to a JSON object\r\n                        if (object && typeof object === \"object\") {\r\n                            headerValue = object;\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n                        // otherwise, leave it as a string\r\n                    }\r\n                    entries.set(headerKey, headerValue);\r\n                });\r\n                const headers = Object.fromEntries(entries);\r\n                const parsedHeaders = headers;\r\n                const networkResponse = NetworkUtils.getNetworkResponse(parsedHeaders, parseBody(httpStatusCode, statusMessage, parsedHeaders, body), httpStatusCode);\r\n                if ((httpStatusCode < HttpStatus.SUCCESS_RANGE_START ||\r\n                    httpStatusCode > HttpStatus.SUCCESS_RANGE_END) &&\r\n                    // do not destroy the request for the device code flow\r\n                    networkResponse.body[\"error\"] !==\r\n                        Constants.AUTHORIZATION_PENDING) {\r\n                    request.destroy();\r\n                }\r\n                resolve(networkResponse);\r\n            });\r\n            socket.on(\"error\", (chunk) => {\r\n                request.destroy();\r\n                socket.destroy();\r\n                reject(new Error(chunk.toString()));\r\n            });\r\n        });\r\n        request.on(\"error\", (chunk) => {\r\n            request.destroy();\r\n            reject(new Error(chunk.toString()));\r\n        });\r\n    });\r\n};\r\nconst networkRequestViaHttps = (urlString, httpMethod, options, agentOptions, timeout) => {\r\n    const isPostRequest = httpMethod === HttpMethod.POST;\r\n    const body = options?.body || \"\";\r\n    const url = new URL(urlString);\r\n    const headers = options?.headers || {};\r\n    const customOptions = {\r\n        method: httpMethod,\r\n        headers: headers,\r\n        ...NetworkUtils.urlToHttpOptions(url),\r\n    };\r\n    if (agentOptions && Object.keys(agentOptions).length) {\r\n        customOptions.agent = new https.Agent(agentOptions);\r\n    }\r\n    if (isPostRequest) {\r\n        // needed for post request to work\r\n        customOptions.headers = {\r\n            ...customOptions.headers,\r\n            \"Content-Length\": body.length,\r\n        };\r\n    }\r\n    else {\r\n        // optional timeout is only for get requests (regionDiscovery, for example)\r\n        if (timeout) {\r\n            customOptions.timeout = timeout;\r\n        }\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n        let request;\r\n        // managed identity sources use http instead of https\r\n        if (customOptions.protocol === \"http:\") {\r\n            request = http.request(customOptions);\r\n        }\r\n        else {\r\n            request = https.request(customOptions);\r\n        }\r\n        if (isPostRequest) {\r\n            request.write(body);\r\n        }\r\n        if (timeout) {\r\n            request.on(\"timeout\", () => {\r\n                request.destroy();\r\n                reject(new Error(\"Request time out\"));\r\n            });\r\n        }\r\n        request.end();\r\n        request.on(\"response\", (response) => {\r\n            const headers = response.headers;\r\n            const statusCode = response.statusCode;\r\n            const statusMessage = response.statusMessage;\r\n            const data = [];\r\n            response.on(\"data\", (chunk) => {\r\n                data.push(chunk);\r\n            });\r\n            response.on(\"end\", () => {\r\n                // combine all received buffer streams into one buffer, and then into a string\r\n                const body = Buffer.concat([...data]).toString();\r\n                const parsedHeaders = headers;\r\n                const networkResponse = NetworkUtils.getNetworkResponse(parsedHeaders, parseBody(statusCode, statusMessage, parsedHeaders, body), statusCode);\r\n                if ((statusCode < HttpStatus.SUCCESS_RANGE_START ||\r\n                    statusCode > HttpStatus.SUCCESS_RANGE_END) &&\r\n                    // do not destroy the request for the device code flow\r\n                    networkResponse.body[\"error\"] !==\r\n                        Constants.AUTHORIZATION_PENDING) {\r\n                    request.destroy();\r\n                }\r\n                resolve(networkResponse);\r\n            });\r\n        });\r\n        request.on(\"error\", (chunk) => {\r\n            request.destroy();\r\n            reject(new Error(chunk.toString()));\r\n        });\r\n    });\r\n};\r\n/**\r\n * Check if extra parsing is needed on the repsonse from the server\r\n * @param statusCode {number} the status code of the response from the server\r\n * @param statusMessage {string | undefined} the status message of the response from the server\r\n * @param headers {Record<string, string>} the headers of the response from the server\r\n * @param body {string} the body from the response of the server\r\n * @returns {Object} JSON parsed body or error object\r\n */\r\nconst parseBody = (statusCode, statusMessage, headers, body) => {\r\n    /*\r\n     * Informational responses (100 – 199)\r\n     * Successful responses (200 – 299)\r\n     * Redirection messages (300 – 399)\r\n     * Client error responses (400 – 499)\r\n     * Server error responses (500 – 599)\r\n     */\r\n    let parsedBody;\r\n    try {\r\n        parsedBody = JSON.parse(body);\r\n    }\r\n    catch (error) {\r\n        let errorType;\r\n        let errorDescriptionHelper;\r\n        if (statusCode >= HttpStatus.CLIENT_ERROR_RANGE_START &&\r\n            statusCode <= HttpStatus.CLIENT_ERROR_RANGE_END) {\r\n            errorType = \"client_error\";\r\n            errorDescriptionHelper = \"A client\";\r\n        }\r\n        else if (statusCode >= HttpStatus.SERVER_ERROR_RANGE_START &&\r\n            statusCode <= HttpStatus.SERVER_ERROR_RANGE_END) {\r\n            errorType = \"server_error\";\r\n            errorDescriptionHelper = \"A server\";\r\n        }\r\n        else {\r\n            errorType = \"unknown_error\";\r\n            errorDescriptionHelper = \"An unknown\";\r\n        }\r\n        parsedBody = {\r\n            error: errorType,\r\n            error_description: `${errorDescriptionHelper} error occured.\\nHttp status code: ${statusCode}\\nHttp status message: ${statusMessage || \"Unknown\"}\\nHeaders: ${JSON.stringify(headers)}`,\r\n        };\r\n    }\r\n    return parsedBody;\r\n};\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst invalidFileExtension = \"invalid_file_extension\";\r\nconst invalidFilePath = \"invalid_file_path\";\r\nconst invalidManagedIdentityIdType = \"invalid_managed_identity_id_type\";\r\nconst invalidSecret = \"invalid_secret\";\r\nconst missingId = \"missing_client_id\";\r\nconst networkUnavailable = \"network_unavailable\";\r\nconst platformNotSupported = \"platform_not_supported\";\r\nconst unableToCreateAzureArc = \"unable_to_create_azure_arc\";\r\nconst unableToCreateCloudShell = \"unable_to_create_cloud_shell\";\r\nconst unableToCreateSource = \"unable_to_create_source\";\r\nconst unableToReadSecretFile = \"unable_to_read_secret_file\";\r\nconst userAssignedNotAvailableAtRuntime = \"user_assigned_not_available_at_runtime\";\r\nconst wwwAuthenticateHeaderMissing = \"www_authenticate_header_missing\";\r\nconst wwwAuthenticateHeaderUnsupportedFormat = \"www_authenticate_header_unsupported_format\";\r\nconst MsiEnvironmentVariableUrlMalformedErrorCodes = {\r\n    [ManagedIdentityEnvironmentVariableNames.AZURE_POD_IDENTITY_AUTHORITY_HOST]: \"azure_pod_identity_authority_host_url_malformed\",\r\n    [ManagedIdentityEnvironmentVariableNames.IDENTITY_ENDPOINT]: \"identity_endpoint_url_malformed\",\r\n    [ManagedIdentityEnvironmentVariableNames.IMDS_ENDPOINT]: \"imds_endpoint_url_malformed\",\r\n    [ManagedIdentityEnvironmentVariableNames.MSI_ENDPOINT]: \"msi_endpoint_url_malformed\",\r\n};\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * ManagedIdentityErrorMessage class containing string constants used by error codes and messages.\r\n */\r\nconst ManagedIdentityErrorMessages = {\r\n    [invalidFileExtension]: \"The file path in the WWW-Authenticate header does not contain a .key file.\",\r\n    [invalidFilePath]: \"The file path in the WWW-Authenticate header is not in a valid Windows or Linux Format.\",\r\n    [invalidManagedIdentityIdType]: \"More than one ManagedIdentityIdType was provided.\",\r\n    [invalidSecret]: \"The secret in the file on the file path in the WWW-Authenticate header is greater than 4096 bytes.\",\r\n    [platformNotSupported]: \"The platform is not supported by Azure Arc. Azure Arc only supports Windows and Linux.\",\r\n    [missingId]: \"A ManagedIdentityId id was not provided.\",\r\n    [MsiEnvironmentVariableUrlMalformedErrorCodes\r\n        .AZURE_POD_IDENTITY_AUTHORITY_HOST]: `The Managed Identity's '${ManagedIdentityEnvironmentVariableNames.AZURE_POD_IDENTITY_AUTHORITY_HOST}' environment variable is malformed.`,\r\n    [MsiEnvironmentVariableUrlMalformedErrorCodes\r\n        .IDENTITY_ENDPOINT]: `The Managed Identity's '${ManagedIdentityEnvironmentVariableNames.IDENTITY_ENDPOINT}' environment variable is malformed.`,\r\n    [MsiEnvironmentVariableUrlMalformedErrorCodes\r\n        .IMDS_ENDPOINT]: `The Managed Identity's '${ManagedIdentityEnvironmentVariableNames.IMDS_ENDPOINT}' environment variable is malformed.`,\r\n    [MsiEnvironmentVariableUrlMalformedErrorCodes\r\n        .MSI_ENDPOINT]: `The Managed Identity's '${ManagedIdentityEnvironmentVariableNames.MSI_ENDPOINT}' environment variable is malformed.`,\r\n    [networkUnavailable]: \"Authentication unavailable. The request to the managed identity endpoint timed out.\",\r\n    [unableToCreateAzureArc]: \"Azure Arc Managed Identities can only be system assigned.\",\r\n    [unableToCreateCloudShell]: \"Cloud Shell Managed Identities can only be system assigned.\",\r\n    [unableToCreateSource]: \"Unable to create a Managed Identity source based on environment variables.\",\r\n    [unableToReadSecretFile]: \"Unable to read the secret file.\",\r\n    [userAssignedNotAvailableAtRuntime]: \"Service Fabric user assigned managed identity ClientId or ResourceId is not configurable at runtime.\",\r\n    [wwwAuthenticateHeaderMissing]: \"A 401 response was received form the Azure Arc Managed Identity, but the www-authenticate header is missing.\",\r\n    [wwwAuthenticateHeaderUnsupportedFormat]: \"A 401 response was received form the Azure Arc Managed Identity, but the www-authenticate header is in an unsupported format.\",\r\n};\r\nclass ManagedIdentityError extends AuthError {\r\n    constructor(errorCode) {\r\n        super(errorCode, ManagedIdentityErrorMessages[errorCode]);\r\n        this.name = \"ManagedIdentityError\";\r\n        Object.setPrototypeOf(this, ManagedIdentityError.prototype);\r\n    }\r\n}\r\nfunction createManagedIdentityError(errorCode) {\r\n    return new ManagedIdentityError(errorCode);\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nclass ManagedIdentityId {\r\n    get id() {\r\n        return this._id;\r\n    }\r\n    set id(value) {\r\n        this._id = value;\r\n    }\r\n    get idType() {\r\n        return this._idType;\r\n    }\r\n    set idType(value) {\r\n        this._idType = value;\r\n    }\r\n    constructor(managedIdentityIdParams) {\r\n        const userAssignedClientId = managedIdentityIdParams?.userAssignedClientId;\r\n        const userAssignedResourceId = managedIdentityIdParams?.userAssignedResourceId;\r\n        const userAssignedObjectId = managedIdentityIdParams?.userAssignedObjectId;\r\n        if (userAssignedClientId) {\r\n            if (userAssignedResourceId || userAssignedObjectId) {\r\n                throw createManagedIdentityError(invalidManagedIdentityIdType);\r\n            }\r\n            this.id = userAssignedClientId;\r\n            this.idType = ManagedIdentityIdType.USER_ASSIGNED_CLIENT_ID;\r\n        }\r\n        else if (userAssignedResourceId) {\r\n            if (userAssignedClientId || userAssignedObjectId) {\r\n                throw createManagedIdentityError(invalidManagedIdentityIdType);\r\n            }\r\n            this.id = userAssignedResourceId;\r\n            this.idType = ManagedIdentityIdType.USER_ASSIGNED_RESOURCE_ID;\r\n        }\r\n        else if (userAssignedObjectId) {\r\n            if (userAssignedClientId || userAssignedResourceId) {\r\n                throw createManagedIdentityError(invalidManagedIdentityIdType);\r\n            }\r\n            this.id = userAssignedObjectId;\r\n            this.idType = ManagedIdentityIdType.USER_ASSIGNED_OBJECT_ID;\r\n        }\r\n        else {\r\n            this.id = DEFAULT_MANAGED_IDENTITY_ID;\r\n            this.idType = ManagedIdentityIdType.SYSTEM_ASSIGNED;\r\n        }\r\n    }\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * NodeAuthErrorMessage class containing string constants used by error codes and messages.\r\n */\r\nconst NodeAuthErrorMessage = {\r\n    invalidLoopbackAddressType: {\r\n        code: \"invalid_loopback_server_address_type\",\r\n        desc: \"Loopback server address is not type string. This is unexpected.\",\r\n    },\r\n    unableToLoadRedirectUri: {\r\n        code: \"unable_to_load_redirectUrl\",\r\n        desc: \"Loopback server callback was invoked without a url. This is unexpected.\",\r\n    },\r\n    noAuthCodeInResponse: {\r\n        code: \"no_auth_code_in_response\",\r\n        desc: \"No auth code found in the server response. Please check your network trace to determine what happened.\",\r\n    },\r\n    noLoopbackServerExists: {\r\n        code: \"no_loopback_server_exists\",\r\n        desc: \"No loopback server exists yet.\",\r\n    },\r\n    loopbackServerAlreadyExists: {\r\n        code: \"loopback_server_already_exists\",\r\n        desc: \"Loopback server already exists. Cannot create another.\",\r\n    },\r\n    loopbackServerTimeout: {\r\n        code: \"loopback_server_timeout\",\r\n        desc: \"Timed out waiting for auth code listener to be registered.\",\r\n    },\r\n    stateNotFoundError: {\r\n        code: \"state_not_found\",\r\n        desc: \"State not found. Please verify that the request originated from msal.\",\r\n    },\r\n    thumbprintMissing: {\r\n        code: \"thumbprint_missing_from_client_certificate\",\r\n        desc: \"Client certificate does not contain a SHA-1 or SHA-256 thumbprint.\",\r\n    },\r\n};\r\nclass NodeAuthError extends AuthError {\r\n    constructor(errorCode, errorMessage) {\r\n        super(errorCode, errorMessage);\r\n        this.name = \"NodeAuthError\";\r\n    }\r\n    /**\r\n     * Creates an error thrown if loopback server address is of type string.\r\n     */\r\n    static createInvalidLoopbackAddressTypeError() {\r\n        return new NodeAuthError(NodeAuthErrorMessage.invalidLoopbackAddressType.code, `${NodeAuthErrorMessage.invalidLoopbackAddressType.desc}`);\r\n    }\r\n    /**\r\n     * Creates an error thrown if the loopback server is unable to get a url.\r\n     */\r\n    static createUnableToLoadRedirectUrlError() {\r\n        return new NodeAuthError(NodeAuthErrorMessage.unableToLoadRedirectUri.code, `${NodeAuthErrorMessage.unableToLoadRedirectUri.desc}`);\r\n    }\r\n    /**\r\n     * Creates an error thrown if the server response does not contain an auth code.\r\n     */\r\n    static createNoAuthCodeInResponseError() {\r\n        return new NodeAuthError(NodeAuthErrorMessage.noAuthCodeInResponse.code, `${NodeAuthErrorMessage.noAuthCodeInResponse.desc}`);\r\n    }\r\n    /**\r\n     * Creates an error thrown if the loopback server has not been spun up yet.\r\n     */\r\n    static createNoLoopbackServerExistsError() {\r\n        return new NodeAuthError(NodeAuthErrorMessage.noLoopbackServerExists.code, `${NodeAuthErrorMessage.noLoopbackServerExists.desc}`);\r\n    }\r\n    /**\r\n     * Creates an error thrown if a loopback server already exists when attempting to create another one.\r\n     */\r\n    static createLoopbackServerAlreadyExistsError() {\r\n        return new NodeAuthError(NodeAuthErrorMessage.loopbackServerAlreadyExists.code, `${NodeAuthErrorMessage.loopbackServerAlreadyExists.desc}`);\r\n    }\r\n    /**\r\n     * Creates an error thrown if the loopback server times out registering the auth code listener.\r\n     */\r\n    static createLoopbackServerTimeoutError() {\r\n        return new NodeAuthError(NodeAuthErrorMessage.loopbackServerTimeout.code, `${NodeAuthErrorMessage.loopbackServerTimeout.desc}`);\r\n    }\r\n    /**\r\n     * Creates an error thrown when the state is not present.\r\n     */\r\n    static createStateNotFoundError() {\r\n        return new NodeAuthError(NodeAuthErrorMessage.stateNotFoundError.code, NodeAuthErrorMessage.stateNotFoundError.desc);\r\n    }\r\n    /**\r\n     * Creates an error thrown when client certificate was provided, but neither the SHA-1 or SHA-256 thumbprints were provided\r\n     */\r\n    static createThumbprintMissingError() {\r\n        return new NodeAuthError(NodeAuthErrorMessage.thumbprintMissing.code, NodeAuthErrorMessage.thumbprintMissing.desc);\r\n    }\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst DEFAULT_AUTH_OPTIONS = {\r\n    clientId: Constants$1.EMPTY_STRING,\r\n    authority: Constants$1.DEFAULT_AUTHORITY,\r\n    clientSecret: Constants$1.EMPTY_STRING,\r\n    clientAssertion: Constants$1.EMPTY_STRING,\r\n    clientCertificate: {\r\n        thumbprint: Constants$1.EMPTY_STRING,\r\n        thumbprintSha256: Constants$1.EMPTY_STRING,\r\n        privateKey: Constants$1.EMPTY_STRING,\r\n        x5c: Constants$1.EMPTY_STRING,\r\n    },\r\n    knownAuthorities: [],\r\n    cloudDiscoveryMetadata: Constants$1.EMPTY_STRING,\r\n    authorityMetadata: Constants$1.EMPTY_STRING,\r\n    clientCapabilities: [],\r\n    protocolMode: ProtocolMode.AAD,\r\n    azureCloudOptions: {\r\n        azureCloudInstance: AzureCloudInstance.None,\r\n        tenant: Constants$1.EMPTY_STRING,\r\n    },\r\n    skipAuthorityMetadataCache: false,\r\n    encodeExtraQueryParams: false,\r\n};\r\nconst DEFAULT_CACHE_OPTIONS = {\r\n    claimsBasedCachingEnabled: false,\r\n};\r\nconst DEFAULT_LOGGER_OPTIONS = {\r\n    loggerCallback: () => {\r\n        // allow users to not set logger call back\r\n    },\r\n    piiLoggingEnabled: false,\r\n    logLevel: exports.LogLevel.Info,\r\n};\r\nconst DEFAULT_SYSTEM_OPTIONS = {\r\n    loggerOptions: DEFAULT_LOGGER_OPTIONS,\r\n    networkClient: new HttpClient(),\r\n    proxyUrl: Constants$1.EMPTY_STRING,\r\n    customAgentOptions: {},\r\n    disableInternalRetries: false,\r\n};\r\nconst DEFAULT_TELEMETRY_OPTIONS = {\r\n    application: {\r\n        appName: Constants$1.EMPTY_STRING,\r\n        appVersion: Constants$1.EMPTY_STRING,\r\n    },\r\n};\r\n/**\r\n * Sets the default options when not explicitly configured from app developer\r\n *\r\n * @param auth - Authentication options\r\n * @param cache - Cache options\r\n * @param system - System options\r\n * @param telemetry - Telemetry options\r\n *\r\n * @returns Configuration\r\n * @internal\r\n */\r\nfunction buildAppConfiguration({ auth, broker, cache, system, telemetry, }) {\r\n    const systemOptions = {\r\n        ...DEFAULT_SYSTEM_OPTIONS,\r\n        networkClient: new HttpClient(system?.proxyUrl, system?.customAgentOptions),\r\n        loggerOptions: system?.loggerOptions || DEFAULT_LOGGER_OPTIONS,\r\n        disableInternalRetries: system?.disableInternalRetries || false,\r\n    };\r\n    // if client certificate was provided, ensure that at least one of the SHA-1 or SHA-256 thumbprints were provided\r\n    if (!!auth.clientCertificate &&\r\n        !!!auth.clientCertificate.thumbprint &&\r\n        !!!auth.clientCertificate.thumbprintSha256) {\r\n        throw NodeAuthError.createStateNotFoundError();\r\n    }\r\n    return {\r\n        auth: { ...DEFAULT_AUTH_OPTIONS, ...auth },\r\n        broker: { ...broker },\r\n        cache: { ...DEFAULT_CACHE_OPTIONS, ...cache },\r\n        system: { ...systemOptions, ...system },\r\n        telemetry: { ...DEFAULT_TELEMETRY_OPTIONS, ...telemetry },\r\n    };\r\n}\r\nfunction buildManagedIdentityConfiguration({ clientCapabilities, managedIdentityIdParams, system, }) {\r\n    const managedIdentityId = new ManagedIdentityId(managedIdentityIdParams);\r\n    const loggerOptions = system?.loggerOptions || DEFAULT_LOGGER_OPTIONS;\r\n    let networkClient;\r\n    // use developer provided network client if passed in\r\n    if (system?.networkClient) {\r\n        networkClient = system.networkClient;\r\n        // otherwise, create a new one\r\n    }\r\n    else {\r\n        networkClient = new HttpClient(system?.proxyUrl, system?.customAgentOptions);\r\n    }\r\n    return {\r\n        clientCapabilities: clientCapabilities || [],\r\n        managedIdentityId: managedIdentityId,\r\n        system: {\r\n            loggerOptions,\r\n            networkClient,\r\n        },\r\n        disableInternalRetries: system?.disableInternalRetries || false,\r\n    };\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nclass GuidGenerator {\r\n    /**\r\n     *\r\n     * RFC4122: The version 4 UUID is meant for generating UUIDs from truly-random or pseudo-random numbers.\r\n     * uuidv4 generates guids from cryprtographically-string random\r\n     */\r\n    generateGuid() {\r\n        return uuid.v4();\r\n    }\r\n    /**\r\n     * verifies if a string is  GUID\r\n     * @param guid\r\n     */\r\n    isGuid(guid) {\r\n        const regexGuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\r\n        return regexGuid.test(guid);\r\n    }\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nclass EncodingUtils {\r\n    /**\r\n     * 'utf8': Multibyte encoded Unicode characters. Many web pages and other document formats use UTF-8.\r\n     * 'base64': Base64 encoding.\r\n     *\r\n     * @param str text\r\n     */\r\n    static base64Encode(str, encoding) {\r\n        return Buffer.from(str, encoding).toString(EncodingTypes.BASE64);\r\n    }\r\n    /**\r\n     * encode a URL\r\n     * @param str\r\n     */\r\n    static base64EncodeUrl(str, encoding) {\r\n        return EncodingUtils.base64Encode(str, encoding)\r\n            .replace(/=/g, Constants$1.EMPTY_STRING)\r\n            .replace(/\\+/g, \"-\")\r\n            .replace(/\\//g, \"_\");\r\n    }\r\n    /**\r\n     * 'utf8': Multibyte encoded Unicode characters. Many web pages and other document formats use UTF-8.\r\n     * 'base64': Base64 encoding.\r\n     *\r\n     * @param base64Str Base64 encoded text\r\n     */\r\n    static base64Decode(base64Str) {\r\n        return Buffer.from(base64Str, EncodingTypes.BASE64).toString(\"utf8\");\r\n    }\r\n    /**\r\n     * @param base64Str Base64 encoded Url\r\n     */\r\n    static base64DecodeUrl(base64Str) {\r\n        let str = base64Str.replace(/-/g, \"+\").replace(/_/g, \"/\");\r\n        while (str.length % 4) {\r\n            str += \"=\";\r\n        }\r\n        return EncodingUtils.base64Decode(str);\r\n    }\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nclass HashUtils {\r\n    /**\r\n     * generate 'SHA256' hash\r\n     * @param buffer\r\n     */\r\n    sha256(buffer) {\r\n        return crypto.createHash(Hash.SHA256).update(buffer).digest();\r\n    }\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * https://tools.ietf.org/html/rfc7636#page-8\r\n */\r\nclass PkceGenerator {\r\n    constructor() {\r\n        this.hashUtils = new HashUtils();\r\n    }\r\n    /**\r\n     * generates the codeVerfier and the challenge from the codeVerfier\r\n     * reference: https://tools.ietf.org/html/rfc7636#section-4.1 and https://tools.ietf.org/html/rfc7636#section-4.2\r\n     */\r\n    async generatePkceCodes() {\r\n        const verifier = this.generateCodeVerifier();\r\n        const challenge = this.generateCodeChallengeFromVerifier(verifier);\r\n        return { verifier, challenge };\r\n    }\r\n    /**\r\n     * generates the codeVerfier; reference: https://tools.ietf.org/html/rfc7636#section-4.1\r\n     */\r\n    generateCodeVerifier() {\r\n        const charArr = [];\r\n        const maxNumber = 256 - (256 % CharSet.CV_CHARSET.length);\r\n        while (charArr.length <= RANDOM_OCTET_SIZE) {\r\n            const byte = crypto.randomBytes(1)[0];\r\n            if (byte >= maxNumber) {\r\n                /*\r\n                 * Ignore this number to maintain randomness.\r\n                 * Including it would result in an unequal distribution of characters after doing the modulo\r\n                 */\r\n                continue;\r\n            }\r\n            const index = byte % CharSet.CV_CHARSET.length;\r\n            charArr.push(CharSet.CV_CHARSET[index]);\r\n        }\r\n        const verifier = charArr.join(Constants$1.EMPTY_STRING);\r\n        return EncodingUtils.base64EncodeUrl(verifier);\r\n    }\r\n    /**\r\n     * generate the challenge from the codeVerfier; reference: https://tools.ietf.org/html/rfc7636#section-4.2\r\n     * @param codeVerifier\r\n     */\r\n    generateCodeChallengeFromVerifier(codeVerifier) {\r\n        return EncodingUtils.base64EncodeUrl(this.hashUtils.sha256(codeVerifier).toString(EncodingTypes.BASE64), EncodingTypes.BASE64);\r\n    }\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * This class implements MSAL node's crypto interface, which allows it to perform base64 encoding and decoding, generating cryptographically random GUIDs and\r\n * implementing Proof Key for Code Exchange specs for the OAuth Authorization Code Flow using PKCE (rfc here: https://tools.ietf.org/html/rfc7636).\r\n * @public\r\n */\r\nclass CryptoProvider {\r\n    constructor() {\r\n        // Browser crypto needs to be validated first before any other classes can be set.\r\n        this.pkceGenerator = new PkceGenerator();\r\n        this.guidGenerator = new GuidGenerator();\r\n        this.hashUtils = new HashUtils();\r\n    }\r\n    /**\r\n     * base64 URL safe encoded string\r\n     */\r\n    base64UrlEncode() {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    /**\r\n     * Stringifies and base64Url encodes input public key\r\n     * @param inputKid - public key id\r\n     * @returns Base64Url encoded public key\r\n     */\r\n    encodeKid() {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    /**\r\n     * Creates a new random GUID - used to populate state and nonce.\r\n     * @returns string (GUID)\r\n     */\r\n    createNewGuid() {\r\n        return this.guidGenerator.generateGuid();\r\n    }\r\n    /**\r\n     * Encodes input string to base64.\r\n     * @param input - string to be encoded\r\n     */\r\n    base64Encode(input) {\r\n        return EncodingUtils.base64Encode(input);\r\n    }\r\n    /**\r\n     * Decodes input string from base64.\r\n     * @param input - string to be decoded\r\n     */\r\n    base64Decode(input) {\r\n        return EncodingUtils.base64Decode(input);\r\n    }\r\n    /**\r\n     * Generates PKCE codes used in Authorization Code Flow.\r\n     */\r\n    generatePkceCodes() {\r\n        return this.pkceGenerator.generatePkceCodes();\r\n    }\r\n    /**\r\n     * Generates a keypair, stores it and returns a thumbprint - not yet implemented for node\r\n     */\r\n    getPublicKeyThumbprint() {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    /**\r\n     * Removes cryptographic keypair from key store matching the keyId passed in\r\n     * @param kid - public key id\r\n     */\r\n    removeTokenBindingKey() {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    /**\r\n     * Removes all cryptographic keys from Keystore\r\n     */\r\n    clearKeystore() {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    /**\r\n     * Signs the given object as a jwt payload with private key retrieved by given kid - currently not implemented for node\r\n     */\r\n    signJwt() {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    /**\r\n     * Returns the SHA-256 hash of an input string\r\n     */\r\n    async hashString(plainText) {\r\n        return EncodingUtils.base64EncodeUrl(this.hashUtils.sha256(plainText).toString(EncodingTypes.BASE64), EncodingTypes.BASE64);\r\n    }\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nfunction generateCredentialKey(credential) {\r\n    const familyId = (credential.credentialType === CredentialType.REFRESH_TOKEN &&\r\n        credential.familyId) ||\r\n        credential.clientId;\r\n    const scheme = credential.tokenType &&\r\n        credential.tokenType.toLowerCase() !==\r\n            AuthenticationScheme.BEARER.toLowerCase()\r\n        ? credential.tokenType.toLowerCase()\r\n        : \"\";\r\n    const credentialKey = [\r\n        credential.homeAccountId,\r\n        credential.environment,\r\n        credential.credentialType,\r\n        familyId,\r\n        credential.realm || \"\",\r\n        credential.target || \"\",\r\n        credential.requestedClaimsHash || \"\",\r\n        scheme,\r\n    ];\r\n    return credentialKey.join(CACHE.KEY_SEPARATOR).toLowerCase();\r\n}\r\nfunction generateAccountKey(account) {\r\n    const homeTenantId = account.homeAccountId.split(\".\")[1];\r\n    const accountKey = [\r\n        account.homeAccountId,\r\n        account.environment,\r\n        homeTenantId || account.tenantId || \"\",\r\n    ];\r\n    return accountKey.join(CACHE.KEY_SEPARATOR).toLowerCase();\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * This class implements Storage for node, reading cache from user specified storage location or an  extension library\r\n * @public\r\n */\r\nclass NodeStorage extends CacheManager {\r\n    constructor(logger, clientId, cryptoImpl, staticAuthorityOptions) {\r\n        super(clientId, cryptoImpl, logger, new msalCommon.StubPerformanceClient(), staticAuthorityOptions);\r\n        this.cache = {};\r\n        this.changeEmitters = [];\r\n        this.logger = logger;\r\n    }\r\n    /**\r\n     * Queue up callbacks\r\n     * @param func - a callback function for cache change indication\r\n     */\r\n    registerChangeEmitter(func) {\r\n        this.changeEmitters.push(func);\r\n    }\r\n    /**\r\n     * Invoke the callback when cache changes\r\n     */\r\n    emitChange() {\r\n        this.changeEmitters.forEach((func) => func.call(null));\r\n    }\r\n    /**\r\n     * Converts cacheKVStore to InMemoryCache\r\n     * @param cache - key value store\r\n     */\r\n    cacheToInMemoryCache(cache) {\r\n        const inMemoryCache = {\r\n            accounts: {},\r\n            idTokens: {},\r\n            accessTokens: {},\r\n            refreshTokens: {},\r\n            appMetadata: {},\r\n        };\r\n        for (const key in cache) {\r\n            const value = cache[key];\r\n            if (typeof value !== \"object\") {\r\n                continue;\r\n            }\r\n            if (value instanceof AccountEntity) {\r\n                inMemoryCache.accounts[key] = value;\r\n            }\r\n            else if (isIdTokenEntity(value)) {\r\n                inMemoryCache.idTokens[key] = value;\r\n            }\r\n            else if (isAccessTokenEntity(value)) {\r\n                inMemoryCache.accessTokens[key] = value;\r\n            }\r\n            else if (isRefreshTokenEntity(value)) {\r\n                inMemoryCache.refreshTokens[key] = value;\r\n            }\r\n            else if (isAppMetadataEntity(key, value)) {\r\n                inMemoryCache.appMetadata[key] = value;\r\n            }\r\n            else {\r\n                continue;\r\n            }\r\n        }\r\n        return inMemoryCache;\r\n    }\r\n    /**\r\n     * converts inMemoryCache to CacheKVStore\r\n     * @param inMemoryCache - kvstore map for inmemory\r\n     */\r\n    inMemoryCacheToCache(inMemoryCache) {\r\n        // convert in memory cache to a flat Key-Value map\r\n        let cache = this.getCache();\r\n        cache = {\r\n            ...cache,\r\n            ...inMemoryCache.accounts,\r\n            ...inMemoryCache.idTokens,\r\n            ...inMemoryCache.accessTokens,\r\n            ...inMemoryCache.refreshTokens,\r\n            ...inMemoryCache.appMetadata,\r\n        };\r\n        // convert in memory cache to a flat Key-Value map\r\n        return cache;\r\n    }\r\n    /**\r\n     * gets the current in memory cache for the client\r\n     */\r\n    getInMemoryCache() {\r\n        this.logger.trace(\"Getting in-memory cache\");\r\n        // convert the cache key value store to inMemoryCache\r\n        const inMemoryCache = this.cacheToInMemoryCache(this.getCache());\r\n        return inMemoryCache;\r\n    }\r\n    /**\r\n     * sets the current in memory cache for the client\r\n     * @param inMemoryCache - key value map in memory\r\n     */\r\n    setInMemoryCache(inMemoryCache) {\r\n        this.logger.trace(\"Setting in-memory cache\");\r\n        // convert and append the inMemoryCache to cacheKVStore\r\n        const cache = this.inMemoryCacheToCache(inMemoryCache);\r\n        this.setCache(cache);\r\n        this.emitChange();\r\n    }\r\n    /**\r\n     * get the current cache key-value store\r\n     */\r\n    getCache() {\r\n        this.logger.trace(\"Getting cache key-value store\");\r\n        return this.cache;\r\n    }\r\n    /**\r\n     * sets the current cache (key value store)\r\n     * @param cacheMap - key value map\r\n     */\r\n    setCache(cache) {\r\n        this.logger.trace(\"Setting cache key value store\");\r\n        this.cache = cache;\r\n        // mark change in cache\r\n        this.emitChange();\r\n    }\r\n    /**\r\n     * Gets cache item with given key.\r\n     * @param key - lookup key for the cache entry\r\n     */\r\n    getItem(key) {\r\n        this.logger.tracePii(`Item key: ${key}`);\r\n        // read cache\r\n        const cache = this.getCache();\r\n        return cache[key];\r\n    }\r\n    /**\r\n     * Gets cache item with given key-value\r\n     * @param key - lookup key for the cache entry\r\n     * @param value - value of the cache entry\r\n     */\r\n    setItem(key, value) {\r\n        this.logger.tracePii(`Item key: ${key}`);\r\n        // read cache\r\n        const cache = this.getCache();\r\n        cache[key] = value;\r\n        // write to cache\r\n        this.setCache(cache);\r\n    }\r\n    generateCredentialKey(credential) {\r\n        return generateCredentialKey(credential);\r\n    }\r\n    generateAccountKey(account) {\r\n        return generateAccountKey(account);\r\n    }\r\n    getAccountKeys() {\r\n        const inMemoryCache = this.getInMemoryCache();\r\n        const accountKeys = Object.keys(inMemoryCache.accounts);\r\n        return accountKeys;\r\n    }\r\n    getTokenKeys() {\r\n        const inMemoryCache = this.getInMemoryCache();\r\n        const tokenKeys = {\r\n            idToken: Object.keys(inMemoryCache.idTokens),\r\n            accessToken: Object.keys(inMemoryCache.accessTokens),\r\n            refreshToken: Object.keys(inMemoryCache.refreshTokens),\r\n        };\r\n        return tokenKeys;\r\n    }\r\n    /**\r\n     * Reads account from cache, builds it into an account entity and returns it.\r\n     * @param accountKey - lookup key to fetch cache type AccountEntity\r\n     * @returns\r\n     */\r\n    getAccount(accountKey) {\r\n        const cachedAccount = this.getItem(accountKey);\r\n        return cachedAccount\r\n            ? Object.assign(new AccountEntity(), this.getItem(accountKey))\r\n            : null;\r\n    }\r\n    /**\r\n     * set account entity\r\n     * @param account - cache value to be set of type AccountEntity\r\n     */\r\n    async setAccount(account) {\r\n        const accountKey = this.generateAccountKey(account.getAccountInfo());\r\n        this.setItem(accountKey, account);\r\n    }\r\n    /**\r\n     * fetch the idToken credential\r\n     * @param idTokenKey - lookup key to fetch cache type IdTokenEntity\r\n     */\r\n    getIdTokenCredential(idTokenKey) {\r\n        const idToken = this.getItem(idTokenKey);\r\n        if (isIdTokenEntity(idToken)) {\r\n            return idToken;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * set idToken credential\r\n     * @param idToken - cache value to be set of type IdTokenEntity\r\n     */\r\n    async setIdTokenCredential(idToken) {\r\n        const idTokenKey = this.generateCredentialKey(idToken);\r\n        this.setItem(idTokenKey, idToken);\r\n    }\r\n    /**\r\n     * fetch the accessToken credential\r\n     * @param accessTokenKey - lookup key to fetch cache type AccessTokenEntity\r\n     */\r\n    getAccessTokenCredential(accessTokenKey) {\r\n        const accessToken = this.getItem(accessTokenKey);\r\n        if (isAccessTokenEntity(accessToken)) {\r\n            return accessToken;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * set accessToken credential\r\n     * @param accessToken -  cache value to be set of type AccessTokenEntity\r\n     */\r\n    async setAccessTokenCredential(accessToken) {\r\n        const accessTokenKey = this.generateCredentialKey(accessToken);\r\n        this.setItem(accessTokenKey, accessToken);\r\n    }\r\n    /**\r\n     * fetch the refreshToken credential\r\n     * @param refreshTokenKey - lookup key to fetch cache type RefreshTokenEntity\r\n     */\r\n    getRefreshTokenCredential(refreshTokenKey) {\r\n        const refreshToken = this.getItem(refreshTokenKey);\r\n        if (isRefreshTokenEntity(refreshToken)) {\r\n            return refreshToken;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * set refreshToken credential\r\n     * @param refreshToken - cache value to be set of type RefreshTokenEntity\r\n     */\r\n    async setRefreshTokenCredential(refreshToken) {\r\n        const refreshTokenKey = this.generateCredentialKey(refreshToken);\r\n        this.setItem(refreshTokenKey, refreshToken);\r\n    }\r\n    /**\r\n     * fetch appMetadata entity from the platform cache\r\n     * @param appMetadataKey - lookup key to fetch cache type AppMetadataEntity\r\n     */\r\n    getAppMetadata(appMetadataKey) {\r\n        const appMetadata = this.getItem(appMetadataKey);\r\n        if (isAppMetadataEntity(appMetadataKey, appMetadata)) {\r\n            return appMetadata;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * set appMetadata entity to the platform cache\r\n     * @param appMetadata - cache value to be set of type AppMetadataEntity\r\n     */\r\n    setAppMetadata(appMetadata) {\r\n        const appMetadataKey = generateAppMetadataKey(appMetadata);\r\n        this.setItem(appMetadataKey, appMetadata);\r\n    }\r\n    /**\r\n     * fetch server telemetry entity from the platform cache\r\n     * @param serverTelemetrykey - lookup key to fetch cache type ServerTelemetryEntity\r\n     */\r\n    getServerTelemetry(serverTelemetrykey) {\r\n        const serverTelemetryEntity = this.getItem(serverTelemetrykey);\r\n        if (serverTelemetryEntity &&\r\n            isServerTelemetryEntity(serverTelemetrykey, serverTelemetryEntity)) {\r\n            return serverTelemetryEntity;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * set server telemetry entity to the platform cache\r\n     * @param serverTelemetryKey - lookup key to fetch cache type ServerTelemetryEntity\r\n     * @param serverTelemetry - cache value to be set of type ServerTelemetryEntity\r\n     */\r\n    setServerTelemetry(serverTelemetryKey, serverTelemetry) {\r\n        this.setItem(serverTelemetryKey, serverTelemetry);\r\n    }\r\n    /**\r\n     * fetch authority metadata entity from the platform cache\r\n     * @param key - lookup key to fetch cache type AuthorityMetadataEntity\r\n     */\r\n    getAuthorityMetadata(key) {\r\n        const authorityMetadataEntity = this.getItem(key);\r\n        if (authorityMetadataEntity &&\r\n            isAuthorityMetadataEntity(key, authorityMetadataEntity)) {\r\n            return authorityMetadataEntity;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Get all authority metadata keys\r\n     */\r\n    getAuthorityMetadataKeys() {\r\n        return this.getKeys().filter((key) => {\r\n            return this.isAuthorityMetadata(key);\r\n        });\r\n    }\r\n    /**\r\n     * set authority metadata entity to the platform cache\r\n     * @param key - lookup key to fetch cache type AuthorityMetadataEntity\r\n     * @param metadata - cache value to be set of type AuthorityMetadataEntity\r\n     */\r\n    setAuthorityMetadata(key, metadata) {\r\n        this.setItem(key, metadata);\r\n    }\r\n    /**\r\n     * fetch throttling entity from the platform cache\r\n     * @param throttlingCacheKey - lookup key to fetch cache type ThrottlingEntity\r\n     */\r\n    getThrottlingCache(throttlingCacheKey) {\r\n        const throttlingCache = this.getItem(throttlingCacheKey);\r\n        if (throttlingCache &&\r\n            isThrottlingEntity(throttlingCacheKey, throttlingCache)) {\r\n            return throttlingCache;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * set throttling entity to the platform cache\r\n     * @param throttlingCacheKey - lookup key to fetch cache type ThrottlingEntity\r\n     * @param throttlingCache - cache value to be set of type ThrottlingEntity\r\n     */\r\n    setThrottlingCache(throttlingCacheKey, throttlingCache) {\r\n        this.setItem(throttlingCacheKey, throttlingCache);\r\n    }\r\n    /**\r\n     * Removes the cache item from memory with the given key.\r\n     * @param key - lookup key to remove a cache entity\r\n     * @param inMemory - key value map of the cache\r\n     */\r\n    removeItem(key) {\r\n        this.logger.tracePii(`Item key: ${key}`);\r\n        // read inMemoryCache\r\n        let result = false;\r\n        const cache = this.getCache();\r\n        if (!!cache[key]) {\r\n            delete cache[key];\r\n            result = true;\r\n        }\r\n        // write to the cache after removal\r\n        if (result) {\r\n            this.setCache(cache);\r\n            this.emitChange();\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * Remove account entity from the platform cache if it's outdated\r\n     * @param accountKey - lookup key to fetch cache type AccountEntity\r\n     */\r\n    removeOutdatedAccount(accountKey) {\r\n        this.removeItem(accountKey);\r\n    }\r\n    /**\r\n     * Checks whether key is in cache.\r\n     * @param key - look up key for a cache entity\r\n     */\r\n    containsKey(key) {\r\n        return this.getKeys().includes(key);\r\n    }\r\n    /**\r\n     * Gets all keys in window.\r\n     */\r\n    getKeys() {\r\n        this.logger.trace(\"Retrieving all cache keys\");\r\n        // read cache\r\n        const cache = this.getCache();\r\n        return [...Object.keys(cache)];\r\n    }\r\n    /**\r\n     * Clears all cache entries created by MSAL (except tokens).\r\n     */\r\n    clear() {\r\n        this.logger.trace(\"Clearing cache entries created by MSAL\");\r\n        // read inMemoryCache\r\n        const cacheKeys = this.getKeys();\r\n        // delete each element\r\n        cacheKeys.forEach((key) => {\r\n            this.removeItem(key);\r\n        });\r\n        this.emitChange();\r\n    }\r\n    /**\r\n     * Initialize in memory cache from an exisiting cache vault\r\n     * @param cache - blob formatted cache (JSON)\r\n     */\r\n    static generateInMemoryCache(cache) {\r\n        return Deserializer.deserializeAllCache(Deserializer.deserializeJSONBlob(cache));\r\n    }\r\n    /**\r\n     * retrieves the final JSON\r\n     * @param inMemoryCache - itemised cache read from the JSON\r\n     */\r\n    static generateJsonCache(inMemoryCache) {\r\n        return Serializer.serializeAllCache(inMemoryCache);\r\n    }\r\n    /**\r\n     * Updates a credential's cache key if the current cache key is outdated\r\n     */\r\n    updateCredentialCacheKey(currentCacheKey, credential) {\r\n        const updatedCacheKey = this.generateCredentialKey(credential);\r\n        if (currentCacheKey !== updatedCacheKey) {\r\n            const cacheItem = this.getItem(currentCacheKey);\r\n            if (cacheItem) {\r\n                this.removeItem(currentCacheKey);\r\n                this.setItem(updatedCacheKey, cacheItem);\r\n                this.logger.verbose(`Updated an outdated ${credential.credentialType} cache key`);\r\n                return updatedCacheKey;\r\n            }\r\n            else {\r\n                this.logger.error(`Attempted to update an outdated ${credential.credentialType} cache key but no item matching the outdated key was found in storage`);\r\n            }\r\n        }\r\n        return currentCacheKey;\r\n    }\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst defaultSerializedCache = {\r\n    Account: {},\r\n    IdToken: {},\r\n    AccessToken: {},\r\n    RefreshToken: {},\r\n    AppMetadata: {},\r\n};\r\n/**\r\n * In-memory token cache manager\r\n * @public\r\n */\r\nclass TokenCache {\r\n    constructor(storage, logger, cachePlugin) {\r\n        this.cacheHasChanged = false;\r\n        this.storage = storage;\r\n        this.storage.registerChangeEmitter(this.handleChangeEvent.bind(this));\r\n        if (cachePlugin) {\r\n            this.persistence = cachePlugin;\r\n        }\r\n        this.logger = logger;\r\n    }\r\n    /**\r\n     * Set to true if cache state has changed since last time serialize or writeToPersistence was called\r\n     */\r\n    hasChanged() {\r\n        return this.cacheHasChanged;\r\n    }\r\n    /**\r\n     * Serializes in memory cache to JSON\r\n     */\r\n    serialize() {\r\n        this.logger.trace(\"Serializing in-memory cache\");\r\n        let finalState = Serializer.serializeAllCache(this.storage.getInMemoryCache());\r\n        // if cacheSnapshot not null or empty, merge\r\n        if (this.cacheSnapshot) {\r\n            this.logger.trace(\"Reading cache snapshot from disk\");\r\n            finalState = this.mergeState(JSON.parse(this.cacheSnapshot), finalState);\r\n        }\r\n        else {\r\n            this.logger.trace(\"No cache snapshot to merge\");\r\n        }\r\n        this.cacheHasChanged = false;\r\n        return JSON.stringify(finalState);\r\n    }\r\n    /**\r\n     * Deserializes JSON to in-memory cache. JSON should be in MSAL cache schema format\r\n     * @param cache - blob formatted cache\r\n     */\r\n    deserialize(cache) {\r\n        this.logger.trace(\"Deserializing JSON to in-memory cache\");\r\n        this.cacheSnapshot = cache;\r\n        if (this.cacheSnapshot) {\r\n            this.logger.trace(\"Reading cache snapshot from disk\");\r\n            const deserializedCache = Deserializer.deserializeAllCache(this.overlayDefaults(JSON.parse(this.cacheSnapshot)));\r\n            this.storage.setInMemoryCache(deserializedCache);\r\n        }\r\n        else {\r\n            this.logger.trace(\"No cache snapshot to deserialize\");\r\n        }\r\n    }\r\n    /**\r\n     * Fetches the cache key-value map\r\n     */\r\n    getKVStore() {\r\n        return this.storage.getCache();\r\n    }\r\n    /**\r\n     * Gets cache snapshot in CacheKVStore format\r\n     */\r\n    getCacheSnapshot() {\r\n        const deserializedPersistentStorage = NodeStorage.generateInMemoryCache(this.cacheSnapshot);\r\n        return this.storage.inMemoryCacheToCache(deserializedPersistentStorage);\r\n    }\r\n    /**\r\n     * API that retrieves all accounts currently in cache to the user\r\n     */\r\n    async getAllAccounts(correlationId = new CryptoProvider().createNewGuid()) {\r\n        this.logger.trace(\"getAllAccounts called\");\r\n        let cacheContext;\r\n        try {\r\n            if (this.persistence) {\r\n                cacheContext = new TokenCacheContext(this, false);\r\n                await this.persistence.beforeCacheAccess(cacheContext);\r\n            }\r\n            return this.storage.getAllAccounts({}, correlationId);\r\n        }\r\n        finally {\r\n            if (this.persistence && cacheContext) {\r\n                await this.persistence.afterCacheAccess(cacheContext);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Returns the signed in account matching homeAccountId.\r\n     * (the account object is created at the time of successful login)\r\n     * or null when no matching account is found\r\n     * @param homeAccountId - unique identifier for an account (uid.utid)\r\n     */\r\n    async getAccountByHomeId(homeAccountId) {\r\n        const allAccounts = await this.getAllAccounts();\r\n        if (homeAccountId && allAccounts && allAccounts.length) {\r\n            return (allAccounts.filter((accountObj) => accountObj.homeAccountId === homeAccountId)[0] || null);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Returns the signed in account matching localAccountId.\r\n     * (the account object is created at the time of successful login)\r\n     * or null when no matching account is found\r\n     * @param localAccountId - unique identifier of an account (sub/obj when homeAccountId cannot be populated)\r\n     */\r\n    async getAccountByLocalId(localAccountId) {\r\n        const allAccounts = await this.getAllAccounts();\r\n        if (localAccountId && allAccounts && allAccounts.length) {\r\n            return (allAccounts.filter((accountObj) => accountObj.localAccountId === localAccountId)[0] || null);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * API to remove a specific account and the relevant data from cache\r\n     * @param account - AccountInfo passed by the user\r\n     */\r\n    async removeAccount(account, correlationId) {\r\n        this.logger.trace(\"removeAccount called\");\r\n        let cacheContext;\r\n        try {\r\n            if (this.persistence) {\r\n                cacheContext = new TokenCacheContext(this, true);\r\n                await this.persistence.beforeCacheAccess(cacheContext);\r\n            }\r\n            this.storage.removeAccount(account, correlationId || new GuidGenerator().generateGuid());\r\n        }\r\n        finally {\r\n            if (this.persistence && cacheContext) {\r\n                await this.persistence.afterCacheAccess(cacheContext);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Overwrites in-memory cache with persistent cache\r\n     */\r\n    async overwriteCache() {\r\n        if (!this.persistence) {\r\n            this.logger.info(\"No persistence layer specified, cache cannot be overwritten\");\r\n            return;\r\n        }\r\n        this.logger.info(\"Overwriting in-memory cache with persistent cache\");\r\n        this.storage.clear();\r\n        const cacheContext = new TokenCacheContext(this, false);\r\n        await this.persistence.beforeCacheAccess(cacheContext);\r\n        const cacheSnapshot = this.getCacheSnapshot();\r\n        this.storage.setCache(cacheSnapshot);\r\n        await this.persistence.afterCacheAccess(cacheContext);\r\n    }\r\n    /**\r\n     * Called when the cache has changed state.\r\n     */\r\n    handleChangeEvent() {\r\n        this.cacheHasChanged = true;\r\n    }\r\n    /**\r\n     * Merge in memory cache with the cache snapshot.\r\n     * @param oldState - cache before changes\r\n     * @param currentState - current cache state in the library\r\n     */\r\n    mergeState(oldState, currentState) {\r\n        this.logger.trace(\"Merging in-memory cache with cache snapshot\");\r\n        const stateAfterRemoval = this.mergeRemovals(oldState, currentState);\r\n        return this.mergeUpdates(stateAfterRemoval, currentState);\r\n    }\r\n    /**\r\n     * Deep update of oldState based on newState values\r\n     * @param oldState - cache before changes\r\n     * @param newState - updated cache\r\n     */\r\n    mergeUpdates(oldState, newState) {\r\n        Object.keys(newState).forEach((newKey) => {\r\n            const newValue = newState[newKey];\r\n            // if oldState does not contain value but newValue does, add it\r\n            if (!oldState.hasOwnProperty(newKey)) {\r\n                if (newValue !== null) {\r\n                    oldState[newKey] = newValue;\r\n                }\r\n            }\r\n            else {\r\n                // both oldState and newState contain the key, do deep update\r\n                const newValueNotNull = newValue !== null;\r\n                const newValueIsObject = typeof newValue === \"object\";\r\n                const newValueIsNotArray = !Array.isArray(newValue);\r\n                const oldStateNotUndefinedOrNull = typeof oldState[newKey] !== \"undefined\" &&\r\n                    oldState[newKey] !== null;\r\n                if (newValueNotNull &&\r\n                    newValueIsObject &&\r\n                    newValueIsNotArray &&\r\n                    oldStateNotUndefinedOrNull) {\r\n                    this.mergeUpdates(oldState[newKey], newValue);\r\n                }\r\n                else {\r\n                    oldState[newKey] = newValue;\r\n                }\r\n            }\r\n        });\r\n        return oldState;\r\n    }\r\n    /**\r\n     * Removes entities in oldState that the were removed from newState. If there are any unknown values in root of\r\n     * oldState that are not recognized, they are left untouched.\r\n     * @param oldState - cache before changes\r\n     * @param newState - updated cache\r\n     */\r\n    mergeRemovals(oldState, newState) {\r\n        this.logger.trace(\"Remove updated entries in cache\");\r\n        const accounts = oldState.Account\r\n            ? this.mergeRemovalsDict(oldState.Account, newState.Account)\r\n            : oldState.Account;\r\n        const accessTokens = oldState.AccessToken\r\n            ? this.mergeRemovalsDict(oldState.AccessToken, newState.AccessToken)\r\n            : oldState.AccessToken;\r\n        const refreshTokens = oldState.RefreshToken\r\n            ? this.mergeRemovalsDict(oldState.RefreshToken, newState.RefreshToken)\r\n            : oldState.RefreshToken;\r\n        const idTokens = oldState.IdToken\r\n            ? this.mergeRemovalsDict(oldState.IdToken, newState.IdToken)\r\n            : oldState.IdToken;\r\n        const appMetadata = oldState.AppMetadata\r\n            ? this.mergeRemovalsDict(oldState.AppMetadata, newState.AppMetadata)\r\n            : oldState.AppMetadata;\r\n        return {\r\n            ...oldState,\r\n            Account: accounts,\r\n            AccessToken: accessTokens,\r\n            RefreshToken: refreshTokens,\r\n            IdToken: idTokens,\r\n            AppMetadata: appMetadata,\r\n        };\r\n    }\r\n    /**\r\n     * Helper to merge new cache with the old one\r\n     * @param oldState - cache before changes\r\n     * @param newState - updated cache\r\n     */\r\n    mergeRemovalsDict(oldState, newState) {\r\n        const finalState = { ...oldState };\r\n        Object.keys(oldState).forEach((oldKey) => {\r\n            if (!newState || !newState.hasOwnProperty(oldKey)) {\r\n                delete finalState[oldKey];\r\n            }\r\n        });\r\n        return finalState;\r\n    }\r\n    /**\r\n     * Helper to overlay as a part of cache merge\r\n     * @param passedInCache - cache read from the blob\r\n     */\r\n    overlayDefaults(passedInCache) {\r\n        this.logger.trace(\"Overlaying input cache with the default cache\");\r\n        return {\r\n            Account: {\r\n                ...defaultSerializedCache.Account,\r\n                ...passedInCache.Account,\r\n            },\r\n            IdToken: {\r\n                ...defaultSerializedCache.IdToken,\r\n                ...passedInCache.IdToken,\r\n            },\r\n            AccessToken: {\r\n                ...defaultSerializedCache.AccessToken,\r\n                ...passedInCache.AccessToken,\r\n            },\r\n            RefreshToken: {\r\n                ...defaultSerializedCache.RefreshToken,\r\n                ...passedInCache.RefreshToken,\r\n            },\r\n            AppMetadata: {\r\n                ...defaultSerializedCache.AppMetadata,\r\n                ...passedInCache.AppMetadata,\r\n            },\r\n        };\r\n    }\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Client assertion of type jwt-bearer used in confidential client flows\r\n * @public\r\n */\r\nclass ClientAssertion {\r\n    /**\r\n     * Initialize the ClientAssertion class from the clientAssertion passed by the user\r\n     * @param assertion - refer https://tools.ietf.org/html/rfc7521\r\n     */\r\n    static fromAssertion(assertion) {\r\n        const clientAssertion = new ClientAssertion();\r\n        clientAssertion.jwt = assertion;\r\n        return clientAssertion;\r\n    }\r\n    /**\r\n     * @deprecated Use fromCertificateWithSha256Thumbprint instead, with a SHA-256 thumprint\r\n     * Initialize the ClientAssertion class from the certificate passed by the user\r\n     * @param thumbprint - identifier of a certificate\r\n     * @param privateKey - secret key\r\n     * @param publicCertificate - electronic document provided to prove the ownership of the public key\r\n     */\r\n    static fromCertificate(thumbprint, privateKey, publicCertificate) {\r\n        const clientAssertion = new ClientAssertion();\r\n        clientAssertion.privateKey = privateKey;\r\n        clientAssertion.thumbprint = thumbprint;\r\n        clientAssertion.useSha256 = false;\r\n        if (publicCertificate) {\r\n            clientAssertion.publicCertificate =\r\n                this.parseCertificate(publicCertificate);\r\n        }\r\n        return clientAssertion;\r\n    }\r\n    /**\r\n     * Initialize the ClientAssertion class from the certificate passed by the user\r\n     * @param thumbprint - identifier of a certificate\r\n     * @param privateKey - secret key\r\n     * @param publicCertificate - electronic document provided to prove the ownership of the public key\r\n     */\r\n    static fromCertificateWithSha256Thumbprint(thumbprint, privateKey, publicCertificate) {\r\n        const clientAssertion = new ClientAssertion();\r\n        clientAssertion.privateKey = privateKey;\r\n        clientAssertion.thumbprint = thumbprint;\r\n        clientAssertion.useSha256 = true;\r\n        if (publicCertificate) {\r\n            clientAssertion.publicCertificate =\r\n                this.parseCertificate(publicCertificate);\r\n        }\r\n        return clientAssertion;\r\n    }\r\n    /**\r\n     * Update JWT for certificate based clientAssertion, if passed by the user, uses it as is\r\n     * @param cryptoProvider - library's crypto helper\r\n     * @param issuer - iss claim\r\n     * @param jwtAudience - aud claim\r\n     */\r\n    getJwt(cryptoProvider, issuer, jwtAudience) {\r\n        // if assertion was created from certificate, check if jwt is expired and create new one.\r\n        if (this.privateKey && this.thumbprint) {\r\n            if (this.jwt &&\r\n                !this.isExpired() &&\r\n                issuer === this.issuer &&\r\n                jwtAudience === this.jwtAudience) {\r\n                return this.jwt;\r\n            }\r\n            return this.createJwt(cryptoProvider, issuer, jwtAudience);\r\n        }\r\n        /*\r\n         * if assertion was created by caller, then we just append it. It is up to the caller to\r\n         * ensure that it contains necessary claims and that it is not expired.\r\n         */\r\n        if (this.jwt) {\r\n            return this.jwt;\r\n        }\r\n        throw createClientAuthError(invalidAssertion);\r\n    }\r\n    /**\r\n     * JWT format and required claims specified: https://tools.ietf.org/html/rfc7523#section-3\r\n     */\r\n    createJwt(cryptoProvider, issuer, jwtAudience) {\r\n        this.issuer = issuer;\r\n        this.jwtAudience = jwtAudience;\r\n        const issuedAt = nowSeconds();\r\n        this.expirationTime = issuedAt + 600;\r\n        const algorithm = this.useSha256\r\n            ? JwtConstants.PSS_256\r\n            : JwtConstants.RSA_256;\r\n        const header = {\r\n            alg: algorithm,\r\n        };\r\n        const thumbprintHeader = this.useSha256\r\n            ? JwtConstants.X5T_256\r\n            : JwtConstants.X5T;\r\n        Object.assign(header, {\r\n            [thumbprintHeader]: EncodingUtils.base64EncodeUrl(this.thumbprint, EncodingTypes.HEX),\r\n        });\r\n        if (this.publicCertificate) {\r\n            Object.assign(header, {\r\n                [JwtConstants.X5C]: this.publicCertificate,\r\n            });\r\n        }\r\n        const payload = {\r\n            [JwtConstants.AUDIENCE]: this.jwtAudience,\r\n            [JwtConstants.EXPIRATION_TIME]: this.expirationTime,\r\n            [JwtConstants.ISSUER]: this.issuer,\r\n            [JwtConstants.SUBJECT]: this.issuer,\r\n            [JwtConstants.NOT_BEFORE]: issuedAt,\r\n            [JwtConstants.JWT_ID]: cryptoProvider.createNewGuid(),\r\n        };\r\n        this.jwt = jwt.sign(payload, this.privateKey, { header });\r\n        return this.jwt;\r\n    }\r\n    /**\r\n     * Utility API to check expiration\r\n     */\r\n    isExpired() {\r\n        return this.expirationTime < nowSeconds();\r\n    }\r\n    /**\r\n     * Extracts the raw certs from a given certificate string and returns them in an array.\r\n     * @param publicCertificate - electronic document provided to prove the ownership of the public key\r\n     */\r\n    static parseCertificate(publicCertificate) {\r\n        /**\r\n         * This is regex to identify the certs in a given certificate string.\r\n         * We want to look for the contents between the BEGIN and END certificate strings, without the associated newlines.\r\n         * The information in parens \"(.+?)\" is the capture group to represent the cert we want isolated.\r\n         * \".\" means any string character, \"+\" means match 1 or more times, and \"?\" means the shortest match.\r\n         * The \"g\" at the end of the regex means search the string globally, and the \"s\" enables the \".\" to match newlines.\r\n         */\r\n        const regexToFindCerts = /-----BEGIN CERTIFICATE-----\\r*\\n(.+?)\\r*\\n-----END CERTIFICATE-----/gs;\r\n        const certs = [];\r\n        let matches;\r\n        while ((matches = regexToFindCerts.exec(publicCertificate)) !== null) {\r\n            // matches[1] represents the first parens capture group in the regex.\r\n            certs.push(matches[1].replace(/\\r*\\n/g, Constants$1.EMPTY_STRING));\r\n        }\r\n        return certs;\r\n    }\r\n}\n\n/* eslint-disable header/header */\r\nconst name = \"@azure/msal-node\";\r\nconst version = \"3.7.2\";\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Oauth2.0 Password grant client\r\n * Note: We are only supporting public clients for password grant and for purely testing purposes\r\n * @public\r\n * @deprecated - Use a more secure flow instead\r\n */\r\nclass UsernamePasswordClient extends BaseClient {\r\n    constructor(configuration) {\r\n        super(configuration);\r\n    }\r\n    /**\r\n     * API to acquire a token by passing the username and password to the service in exchage of credentials\r\n     * password_grant\r\n     * @param request - CommonUsernamePasswordRequest\r\n     */\r\n    async acquireToken(request) {\r\n        this.logger.info(\"in acquireToken call in username-password client\");\r\n        const reqTimestamp = nowSeconds();\r\n        const response = await this.executeTokenRequest(this.authority, request);\r\n        const responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\r\n        // Validate response. This function throws a server error if an error is returned by the server.\r\n        responseHandler.validateTokenResponse(response.body);\r\n        const tokenResponse = responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request);\r\n        return tokenResponse;\r\n    }\r\n    /**\r\n     * Executes POST request to token endpoint\r\n     * @param authority - authority object\r\n     * @param request - CommonUsernamePasswordRequest provided by the developer\r\n     */\r\n    async executeTokenRequest(authority, request) {\r\n        const queryParametersString = this.createTokenQueryParameters(request);\r\n        const endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\r\n        const requestBody = await this.createTokenRequestBody(request);\r\n        const headers = this.createTokenRequestHeaders({\r\n            credential: request.username,\r\n            type: CcsCredentialType.UPN,\r\n        });\r\n        const thumbprint = {\r\n            clientId: this.config.authOptions.clientId,\r\n            authority: authority.canonicalAuthority,\r\n            scopes: request.scopes,\r\n            claims: request.claims,\r\n            authenticationScheme: request.authenticationScheme,\r\n            resourceRequestMethod: request.resourceRequestMethod,\r\n            resourceRequestUri: request.resourceRequestUri,\r\n            shrClaims: request.shrClaims,\r\n            sshKid: request.sshKid,\r\n        };\r\n        return this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint, request.correlationId);\r\n    }\r\n    /**\r\n     * Generates a map for all the params to be sent to the service\r\n     * @param request - CommonUsernamePasswordRequest provided by the developer\r\n     */\r\n    async createTokenRequestBody(request) {\r\n        const parameters = new Map();\r\n        addClientId(parameters, this.config.authOptions.clientId);\r\n        addUsername(parameters, request.username);\r\n        addPassword(parameters, request.password);\r\n        addScopes(parameters, request.scopes);\r\n        addResponseType(parameters, OAuthResponseType.IDTOKEN_TOKEN);\r\n        addGrantType(parameters, GrantType.RESOURCE_OWNER_PASSWORD_GRANT);\r\n        addClientInfo(parameters);\r\n        addLibraryInfo(parameters, this.config.libraryInfo);\r\n        addApplicationTelemetry(parameters, this.config.telemetry.application);\r\n        addThrottling(parameters);\r\n        if (this.serverTelemetryManager) {\r\n            addServerTelemetry(parameters, this.serverTelemetryManager);\r\n        }\r\n        const correlationId = request.correlationId ||\r\n            this.config.cryptoInterface.createNewGuid();\r\n        addCorrelationId(parameters, correlationId);\r\n        if (this.config.clientCredentials.clientSecret) {\r\n            addClientSecret(parameters, this.config.clientCredentials.clientSecret);\r\n        }\r\n        const clientAssertion = this.config.clientCredentials.clientAssertion;\r\n        if (clientAssertion) {\r\n            addClientAssertion(parameters, await getClientAssertion(clientAssertion.assertion, this.config.authOptions.clientId, request.resourceRequestUri));\r\n            addClientAssertionType(parameters, clientAssertion.assertionType);\r\n        }\r\n        if (!StringUtils.isEmptyObj(request.claims) ||\r\n            (this.config.authOptions.clientCapabilities &&\r\n                this.config.authOptions.clientCapabilities.length > 0)) {\r\n            addClaims(parameters, request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n        if (this.config.systemOptions.preventCorsPreflight &&\r\n            request.username) {\r\n            addCcsUpn(parameters, request.username);\r\n        }\r\n        return mapToQueryString(parameters);\r\n    }\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Constructs the full /authorize URL with request parameters\r\n * @param config\r\n * @param authority\r\n * @param request\r\n * @param logger\r\n * @returns\r\n */\r\nfunction getAuthCodeRequestUrl(config, authority, request, logger) {\r\n    const parameters = getStandardAuthorizeRequestParameters({\r\n        ...config.auth,\r\n        authority: authority,\r\n        redirectUri: request.redirectUri || \"\",\r\n    }, request, logger);\r\n    addLibraryInfo(parameters, {\r\n        sku: Constants.MSAL_SKU,\r\n        version: version,\r\n        cpu: process.arch || \"\",\r\n        os: process.platform || \"\",\r\n    });\r\n    if (config.auth.protocolMode !== ProtocolMode.OIDC) {\r\n        addApplicationTelemetry(parameters, config.telemetry.application);\r\n    }\r\n    addResponseType(parameters, OAuthResponseType.CODE);\r\n    if (request.codeChallenge && request.codeChallengeMethod) {\r\n        addCodeChallengeParams(parameters, request.codeChallenge, request.codeChallengeMethod);\r\n    }\r\n    addExtraQueryParameters(parameters, request.extraQueryParameters || {});\r\n    return getAuthorizeUrl(authority, parameters, config.auth.encodeExtraQueryParams, request.extraQueryParameters);\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Base abstract class for all ClientApplications - public and confidential\r\n * @public\r\n */\r\nclass ClientApplication {\r\n    /**\r\n     * Constructor for the ClientApplication\r\n     */\r\n    constructor(configuration) {\r\n        this.config = buildAppConfiguration(configuration);\r\n        this.cryptoProvider = new CryptoProvider();\r\n        this.logger = new Logger(this.config.system.loggerOptions, name, version);\r\n        this.storage = new NodeStorage(this.logger, this.config.auth.clientId, this.cryptoProvider, buildStaticAuthorityOptions(this.config.auth));\r\n        this.tokenCache = new TokenCache(this.storage, this.logger, this.config.cache.cachePlugin);\r\n    }\r\n    /**\r\n     * Creates the URL of the authorization request, letting the user input credentials and consent to the\r\n     * application. The URL targets the /authorize endpoint of the authority configured in the\r\n     * application object.\r\n     *\r\n     * Once the user inputs their credentials and consents, the authority will send a response to the redirect URI\r\n     * sent in the request and should contain an authorization code, which can then be used to acquire tokens via\r\n     * `acquireTokenByCode(AuthorizationCodeRequest)`.\r\n     */\r\n    async getAuthCodeUrl(request) {\r\n        this.logger.info(\"getAuthCodeUrl called\", request.correlationId);\r\n        const validRequest = {\r\n            ...request,\r\n            ...(await this.initializeBaseRequest(request)),\r\n            responseMode: request.responseMode || ResponseMode.QUERY,\r\n            authenticationScheme: AuthenticationScheme.BEARER,\r\n            state: request.state || \"\",\r\n            nonce: request.nonce || \"\",\r\n        };\r\n        const discoveredAuthority = await this.createAuthority(validRequest.authority, validRequest.correlationId, undefined, request.azureCloudOptions);\r\n        return getAuthCodeRequestUrl(this.config, discoveredAuthority, validRequest, this.logger);\r\n    }\r\n    /**\r\n     * Acquires a token by exchanging the Authorization Code received from the first step of OAuth2.0\r\n     * Authorization Code flow.\r\n     *\r\n     * `getAuthCodeUrl(AuthorizationCodeUrlRequest)` can be used to create the URL for the first step of OAuth2.0\r\n     * Authorization Code flow. Ensure that values for redirectUri and scopes in AuthorizationCodeUrlRequest and\r\n     * AuthorizationCodeRequest are the same.\r\n     */\r\n    async acquireTokenByCode(request, authCodePayLoad) {\r\n        this.logger.info(\"acquireTokenByCode called\");\r\n        if (request.state && authCodePayLoad) {\r\n            this.logger.info(\"acquireTokenByCode - validating state\");\r\n            this.validateState(request.state, authCodePayLoad.state || \"\");\r\n            // eslint-disable-next-line no-param-reassign\r\n            authCodePayLoad = { ...authCodePayLoad, state: \"\" };\r\n        }\r\n        const validRequest = {\r\n            ...request,\r\n            ...(await this.initializeBaseRequest(request)),\r\n            authenticationScheme: AuthenticationScheme.BEARER,\r\n        };\r\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenByCode, validRequest.correlationId);\r\n        try {\r\n            const discoveredAuthority = await this.createAuthority(validRequest.authority, validRequest.correlationId, undefined, request.azureCloudOptions);\r\n            const authClientConfig = await this.buildOauthClientConfiguration(discoveredAuthority, validRequest.correlationId, validRequest.redirectUri, serverTelemetryManager);\r\n            const authorizationCodeClient = new AuthorizationCodeClient(authClientConfig);\r\n            this.logger.verbose(\"Auth code client created\", validRequest.correlationId);\r\n            return await authorizationCodeClient.acquireToken(validRequest, authCodePayLoad);\r\n        }\r\n        catch (e) {\r\n            if (e instanceof AuthError) {\r\n                e.setCorrelationId(validRequest.correlationId);\r\n            }\r\n            serverTelemetryManager.cacheFailedRequest(e);\r\n            throw e;\r\n        }\r\n    }\r\n    /**\r\n     * Acquires a token by exchanging the refresh token provided for a new set of tokens.\r\n     *\r\n     * This API is provided only for scenarios where you would like to migrate from ADAL to MSAL. Otherwise, it is\r\n     * recommended that you use `acquireTokenSilent()` for silent scenarios. When using `acquireTokenSilent()`, MSAL will\r\n     * handle the caching and refreshing of tokens automatically.\r\n     */\r\n    async acquireTokenByRefreshToken(request) {\r\n        this.logger.info(\"acquireTokenByRefreshToken called\", request.correlationId);\r\n        const validRequest = {\r\n            ...request,\r\n            ...(await this.initializeBaseRequest(request)),\r\n            authenticationScheme: AuthenticationScheme.BEARER,\r\n        };\r\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenByRefreshToken, validRequest.correlationId);\r\n        try {\r\n            const discoveredAuthority = await this.createAuthority(validRequest.authority, validRequest.correlationId, undefined, request.azureCloudOptions);\r\n            const refreshTokenClientConfig = await this.buildOauthClientConfiguration(discoveredAuthority, validRequest.correlationId, validRequest.redirectUri || \"\", serverTelemetryManager);\r\n            const refreshTokenClient = new RefreshTokenClient(refreshTokenClientConfig);\r\n            this.logger.verbose(\"Refresh token client created\", validRequest.correlationId);\r\n            return await refreshTokenClient.acquireToken(validRequest);\r\n        }\r\n        catch (e) {\r\n            if (e instanceof AuthError) {\r\n                e.setCorrelationId(validRequest.correlationId);\r\n            }\r\n            serverTelemetryManager.cacheFailedRequest(e);\r\n            throw e;\r\n        }\r\n    }\r\n    /**\r\n     * Acquires a token silently when a user specifies the account the token is requested for.\r\n     *\r\n     * This API expects the user to provide an account object and looks into the cache to retrieve the token if present.\r\n     * There is also an optional \"forceRefresh\" boolean the user can send to bypass the cache for access_token and id_token.\r\n     * In case the refresh_token is expired or not found, an error is thrown\r\n     * and the guidance is for the user to call any interactive token acquisition API (eg: `acquireTokenByCode()`).\r\n     */\r\n    async acquireTokenSilent(request) {\r\n        const validRequest = {\r\n            ...request,\r\n            ...(await this.initializeBaseRequest(request)),\r\n            forceRefresh: request.forceRefresh || false,\r\n        };\r\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenSilent, validRequest.correlationId, validRequest.forceRefresh);\r\n        try {\r\n            const discoveredAuthority = await this.createAuthority(validRequest.authority, validRequest.correlationId, undefined, request.azureCloudOptions);\r\n            const clientConfiguration = await this.buildOauthClientConfiguration(discoveredAuthority, validRequest.correlationId, validRequest.redirectUri || \"\", serverTelemetryManager);\r\n            const silentFlowClient = new SilentFlowClient(clientConfiguration);\r\n            this.logger.verbose(\"Silent flow client created\", validRequest.correlationId);\r\n            try {\r\n                // always overwrite the in-memory cache with the persistence cache (if it exists) before a cache lookup\r\n                await this.tokenCache.overwriteCache();\r\n                return await this.acquireCachedTokenSilent(validRequest, silentFlowClient, clientConfiguration);\r\n            }\r\n            catch (error) {\r\n                if (error instanceof ClientAuthError &&\r\n                    error.errorCode ===\r\n                        tokenRefreshRequired) {\r\n                    const refreshTokenClient = new RefreshTokenClient(clientConfiguration);\r\n                    return refreshTokenClient.acquireTokenByRefreshToken(validRequest);\r\n                }\r\n                throw error;\r\n            }\r\n        }\r\n        catch (error) {\r\n            if (error instanceof AuthError) {\r\n                error.setCorrelationId(validRequest.correlationId);\r\n            }\r\n            serverTelemetryManager.cacheFailedRequest(error);\r\n            throw error;\r\n        }\r\n    }\r\n    async acquireCachedTokenSilent(validRequest, silentFlowClient, clientConfiguration) {\r\n        const [authResponse, cacheOutcome] = await silentFlowClient.acquireCachedToken({\r\n            ...validRequest,\r\n            scopes: validRequest.scopes?.length\r\n                ? validRequest.scopes\r\n                : [...OIDC_DEFAULT_SCOPES],\r\n        });\r\n        if (cacheOutcome === CacheOutcome.PROACTIVELY_REFRESHED) {\r\n            this.logger.info(\"ClientApplication:acquireCachedTokenSilent - Cached access token's refreshOn property has been exceeded'. It's not expired, but must be refreshed.\");\r\n            // refresh the access token in the background\r\n            const refreshTokenClient = new RefreshTokenClient(clientConfiguration);\r\n            try {\r\n                await refreshTokenClient.acquireTokenByRefreshToken(validRequest);\r\n            }\r\n            catch {\r\n                // do nothing, this is running in the background and no action is to be taken upon success or failure\r\n            }\r\n        }\r\n        // return the cached token\r\n        return authResponse;\r\n    }\r\n    /**\r\n     * Acquires tokens with password grant by exchanging client applications username and password for credentials\r\n     *\r\n     * The latest OAuth 2.0 Security Best Current Practice disallows the password grant entirely.\r\n     * More details on this recommendation at https://tools.ietf.org/html/draft-ietf-oauth-security-topics-13#section-3.4\r\n     * Microsoft's documentation and recommendations are at:\r\n     * https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-authentication-flows#usernamepassword\r\n     *\r\n     * @param request - UsenamePasswordRequest\r\n     * @deprecated - Use a more secure flow instead\r\n     */\r\n    async acquireTokenByUsernamePassword(request) {\r\n        this.logger.info(\"acquireTokenByUsernamePassword called\", request.correlationId);\r\n        const validRequest = {\r\n            ...request,\r\n            ...(await this.initializeBaseRequest(request)),\r\n        };\r\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenByUsernamePassword, validRequest.correlationId);\r\n        try {\r\n            const discoveredAuthority = await this.createAuthority(validRequest.authority, validRequest.correlationId, undefined, request.azureCloudOptions);\r\n            const usernamePasswordClientConfig = await this.buildOauthClientConfiguration(discoveredAuthority, validRequest.correlationId, \"\", serverTelemetryManager);\r\n            const usernamePasswordClient = new UsernamePasswordClient(usernamePasswordClientConfig);\r\n            this.logger.verbose(\"Username password client created\", validRequest.correlationId);\r\n            return await usernamePasswordClient.acquireToken(validRequest);\r\n        }\r\n        catch (e) {\r\n            if (e instanceof AuthError) {\r\n                e.setCorrelationId(validRequest.correlationId);\r\n            }\r\n            serverTelemetryManager.cacheFailedRequest(e);\r\n            throw e;\r\n        }\r\n    }\r\n    /**\r\n     * Gets the token cache for the application.\r\n     */\r\n    getTokenCache() {\r\n        this.logger.info(\"getTokenCache called\");\r\n        return this.tokenCache;\r\n    }\r\n    /**\r\n     * Validates OIDC state by comparing the user cached state with the state received from the server.\r\n     *\r\n     * This API is provided for scenarios where you would use OAuth2.0 state parameter to mitigate against\r\n     * CSRF attacks.\r\n     * For more information about state, visit https://datatracker.ietf.org/doc/html/rfc6819#section-3.6.\r\n     * @param state - Unique GUID generated by the user that is cached by the user and sent to the server during the first leg of the flow\r\n     * @param cachedState - This string is sent back by the server with the authorization code\r\n     */\r\n    validateState(state, cachedState) {\r\n        if (!state) {\r\n            throw NodeAuthError.createStateNotFoundError();\r\n        }\r\n        if (state !== cachedState) {\r\n            throw createClientAuthError(stateMismatch);\r\n        }\r\n    }\r\n    /**\r\n     * Returns the logger instance\r\n     */\r\n    getLogger() {\r\n        return this.logger;\r\n    }\r\n    /**\r\n     * Replaces the default logger set in configurations with new Logger with new configurations\r\n     * @param logger - Logger instance\r\n     */\r\n    setLogger(logger) {\r\n        this.logger = logger;\r\n    }\r\n    /**\r\n     * Builds the common configuration to be passed to the common component based on the platform configurarion\r\n     * @param authority - user passed authority in configuration\r\n     * @param serverTelemetryManager - initializes servertelemetry if passed\r\n     */\r\n    async buildOauthClientConfiguration(discoveredAuthority, requestCorrelationId, redirectUri, serverTelemetryManager) {\r\n        this.logger.verbose(\"buildOauthClientConfiguration called\", requestCorrelationId);\r\n        this.logger.info(`Building oauth client configuration with the following authority: ${discoveredAuthority.tokenEndpoint}.`, requestCorrelationId);\r\n        serverTelemetryManager?.updateRegionDiscoveryMetadata(discoveredAuthority.regionDiscoveryMetadata);\r\n        const clientConfiguration = {\r\n            authOptions: {\r\n                clientId: this.config.auth.clientId,\r\n                authority: discoveredAuthority,\r\n                clientCapabilities: this.config.auth.clientCapabilities,\r\n                redirectUri,\r\n            },\r\n            loggerOptions: {\r\n                logLevel: this.config.system.loggerOptions.logLevel,\r\n                loggerCallback: this.config.system.loggerOptions.loggerCallback,\r\n                piiLoggingEnabled: this.config.system.loggerOptions.piiLoggingEnabled,\r\n                correlationId: requestCorrelationId,\r\n            },\r\n            cacheOptions: {\r\n                claimsBasedCachingEnabled: this.config.cache.claimsBasedCachingEnabled,\r\n            },\r\n            cryptoInterface: this.cryptoProvider,\r\n            networkInterface: this.config.system.networkClient,\r\n            storageInterface: this.storage,\r\n            serverTelemetryManager: serverTelemetryManager,\r\n            clientCredentials: {\r\n                clientSecret: this.clientSecret,\r\n                clientAssertion: await this.getClientAssertion(discoveredAuthority),\r\n            },\r\n            libraryInfo: {\r\n                sku: Constants.MSAL_SKU,\r\n                version: version,\r\n                cpu: process.arch || Constants$1.EMPTY_STRING,\r\n                os: process.platform || Constants$1.EMPTY_STRING,\r\n            },\r\n            telemetry: this.config.telemetry,\r\n            persistencePlugin: this.config.cache.cachePlugin,\r\n            serializableCache: this.tokenCache,\r\n        };\r\n        return clientConfiguration;\r\n    }\r\n    async getClientAssertion(authority) {\r\n        if (this.developerProvidedClientAssertion) {\r\n            this.clientAssertion = ClientAssertion.fromAssertion(await getClientAssertion(this.developerProvidedClientAssertion, this.config.auth.clientId, authority.tokenEndpoint));\r\n        }\r\n        return (this.clientAssertion && {\r\n            assertion: this.clientAssertion.getJwt(this.cryptoProvider, this.config.auth.clientId, authority.tokenEndpoint),\r\n            assertionType: Constants.JWT_BEARER_ASSERTION_TYPE,\r\n        });\r\n    }\r\n    /**\r\n     * Generates a request with the default scopes & generates a correlationId.\r\n     * @param authRequest - BaseAuthRequest for initialization\r\n     */\r\n    async initializeBaseRequest(authRequest) {\r\n        this.logger.verbose(\"initializeRequestScopes called\", authRequest.correlationId);\r\n        // Default authenticationScheme to Bearer, log that POP isn't supported yet\r\n        if (authRequest.authenticationScheme &&\r\n            authRequest.authenticationScheme === AuthenticationScheme.POP) {\r\n            this.logger.verbose(\"Authentication Scheme 'pop' is not supported yet, setting Authentication Scheme to 'Bearer' for request\", authRequest.correlationId);\r\n        }\r\n        authRequest.authenticationScheme = AuthenticationScheme.BEARER;\r\n        // Set requested claims hash if claims-based caching is enabled and claims were requested\r\n        if (this.config.cache.claimsBasedCachingEnabled &&\r\n            authRequest.claims &&\r\n            // Checks for empty stringified object \"{}\" which doesn't qualify as requested claims\r\n            !StringUtils.isEmptyObj(authRequest.claims)) {\r\n            authRequest.requestedClaimsHash =\r\n                await this.cryptoProvider.hashString(authRequest.claims);\r\n        }\r\n        return {\r\n            ...authRequest,\r\n            scopes: [\r\n                ...((authRequest && authRequest.scopes) || []),\r\n                ...OIDC_DEFAULT_SCOPES,\r\n            ],\r\n            correlationId: (authRequest && authRequest.correlationId) ||\r\n                this.cryptoProvider.createNewGuid(),\r\n            authority: authRequest.authority || this.config.auth.authority,\r\n        };\r\n    }\r\n    /**\r\n     * Initializes the server telemetry payload\r\n     * @param apiId - Id for a specific request\r\n     * @param correlationId - GUID\r\n     * @param forceRefresh - boolean to indicate network call\r\n     */\r\n    initializeServerTelemetryManager(apiId, correlationId, forceRefresh) {\r\n        const telemetryPayload = {\r\n            clientId: this.config.auth.clientId,\r\n            correlationId: correlationId,\r\n            apiId: apiId,\r\n            forceRefresh: forceRefresh || false,\r\n        };\r\n        return new ServerTelemetryManager(telemetryPayload, this.storage);\r\n    }\r\n    /**\r\n     * Create authority instance. If authority not passed in request, default to authority set on the application\r\n     * object. If no authority set in application object, then default to common authority.\r\n     * @param authorityString - authority from user configuration\r\n     */\r\n    async createAuthority(authorityString, requestCorrelationId, azureRegionConfiguration, azureCloudOptions) {\r\n        this.logger.verbose(\"createAuthority called\", requestCorrelationId);\r\n        // build authority string based on auth params - azureCloudInstance is prioritized if provided\r\n        const authorityUrl = Authority.generateAuthority(authorityString, azureCloudOptions || this.config.auth.azureCloudOptions);\r\n        const authorityOptions = {\r\n            protocolMode: this.config.auth.protocolMode,\r\n            knownAuthorities: this.config.auth.knownAuthorities,\r\n            cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\r\n            authorityMetadata: this.config.auth.authorityMetadata,\r\n            azureRegionConfiguration,\r\n            skipAuthorityMetadataCache: this.config.auth.skipAuthorityMetadataCache,\r\n        };\r\n        return createDiscoveredInstance(authorityUrl, this.config.system.networkClient, this.storage, authorityOptions, this.logger, requestCorrelationId);\r\n    }\r\n    /**\r\n     * Clear the cache\r\n     */\r\n    clearCache() {\r\n        this.storage.clear();\r\n    }\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nclass LoopbackClient {\r\n    /**\r\n     * Spins up a loopback server which returns the server response when the localhost redirectUri is hit\r\n     * @param successTemplate\r\n     * @param errorTemplate\r\n     * @returns\r\n     */\r\n    async listenForAuthCode(successTemplate, errorTemplate) {\r\n        if (this.server) {\r\n            throw NodeAuthError.createLoopbackServerAlreadyExistsError();\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            this.server = http.createServer((req, res) => {\r\n                const url = req.url;\r\n                if (!url) {\r\n                    res.end(errorTemplate ||\r\n                        \"Error occurred loading redirectUrl\");\r\n                    reject(NodeAuthError.createUnableToLoadRedirectUrlError());\r\n                    return;\r\n                }\r\n                else if (url === Constants$1.FORWARD_SLASH) {\r\n                    res.end(successTemplate ||\r\n                        \"Auth code was successfully acquired. You can close this window now.\");\r\n                    return;\r\n                }\r\n                const redirectUri = this.getRedirectUri();\r\n                const parsedUrl = new URL(url, redirectUri);\r\n                const authCodeResponse = getDeserializedResponse(parsedUrl.search) ||\r\n                    {};\r\n                if (authCodeResponse.code) {\r\n                    res.writeHead(HttpStatus.REDIRECT, {\r\n                        location: redirectUri,\r\n                    }); // Prevent auth code from being saved in the browser history\r\n                    res.end();\r\n                }\r\n                if (authCodeResponse.error) {\r\n                    res.end(errorTemplate ||\r\n                        `Error occurred: ${authCodeResponse.error}`);\r\n                }\r\n                resolve(authCodeResponse);\r\n            });\r\n            this.server.listen(0, \"127.0.0.1\"); // Listen on any available port\r\n        });\r\n    }\r\n    /**\r\n     * Get the port that the loopback server is running on\r\n     * @returns\r\n     */\r\n    getRedirectUri() {\r\n        if (!this.server || !this.server.listening) {\r\n            throw NodeAuthError.createNoLoopbackServerExistsError();\r\n        }\r\n        const address = this.server.address();\r\n        if (!address || typeof address === \"string\" || !address.port) {\r\n            this.closeServer();\r\n            throw NodeAuthError.createInvalidLoopbackAddressTypeError();\r\n        }\r\n        const port = address && address.port;\r\n        return `${Constants.HTTP_PROTOCOL}${Constants.LOCALHOST}:${port}`;\r\n    }\r\n    /**\r\n     * Close the loopback server\r\n     */\r\n    closeServer() {\r\n        if (this.server) {\r\n            // Only stops accepting new connections, server will close once open/idle connections are closed.\r\n            this.server.close();\r\n            if (typeof this.server.closeAllConnections === \"function\") {\r\n                /*\r\n                 * Close open/idle connections. This API is available in Node versions 18.2 and higher\r\n                 */\r\n                this.server.closeAllConnections();\r\n            }\r\n            this.server.unref();\r\n            this.server = undefined;\r\n        }\r\n    }\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * OAuth2.0 Device code client\r\n * @public\r\n */\r\nclass DeviceCodeClient extends BaseClient {\r\n    constructor(configuration) {\r\n        super(configuration);\r\n    }\r\n    /**\r\n     * Gets device code from device code endpoint, calls back to with device code response, and\r\n     * polls token endpoint to exchange device code for tokens\r\n     * @param request - developer provided CommonDeviceCodeRequest\r\n     */\r\n    async acquireToken(request) {\r\n        const deviceCodeResponse = await this.getDeviceCode(request);\r\n        request.deviceCodeCallback(deviceCodeResponse);\r\n        const reqTimestamp = nowSeconds();\r\n        const response = await this.acquireTokenWithDeviceCode(request, deviceCodeResponse);\r\n        const responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\r\n        // Validate response. This function throws a server error if an error is returned by the server.\r\n        responseHandler.validateTokenResponse(response);\r\n        return responseHandler.handleServerTokenResponse(response, this.authority, reqTimestamp, request);\r\n    }\r\n    /**\r\n     * Creates device code request and executes http GET\r\n     * @param request - developer provided CommonDeviceCodeRequest\r\n     */\r\n    async getDeviceCode(request) {\r\n        const queryParametersString = this.createExtraQueryParameters(request);\r\n        const endpoint = UrlString.appendQueryString(this.authority.deviceCodeEndpoint, queryParametersString);\r\n        const queryString = this.createQueryString(request);\r\n        const headers = this.createTokenRequestHeaders();\r\n        const thumbprint = {\r\n            clientId: this.config.authOptions.clientId,\r\n            authority: request.authority,\r\n            scopes: request.scopes,\r\n            claims: request.claims,\r\n            authenticationScheme: request.authenticationScheme,\r\n            resourceRequestMethod: request.resourceRequestMethod,\r\n            resourceRequestUri: request.resourceRequestUri,\r\n            shrClaims: request.shrClaims,\r\n            sshKid: request.sshKid,\r\n        };\r\n        return this.executePostRequestToDeviceCodeEndpoint(endpoint, queryString, headers, thumbprint, request.correlationId);\r\n    }\r\n    /**\r\n     * Creates query string for the device code request\r\n     * @param request - developer provided CommonDeviceCodeRequest\r\n     */\r\n    createExtraQueryParameters(request) {\r\n        const parameters = new Map();\r\n        if (request.extraQueryParameters) {\r\n            addExtraQueryParameters(parameters, request.extraQueryParameters);\r\n        }\r\n        return mapToQueryString(parameters);\r\n    }\r\n    /**\r\n     * Executes POST request to device code endpoint\r\n     * @param deviceCodeEndpoint - token endpoint\r\n     * @param queryString - string to be used in the body of the request\r\n     * @param headers - headers for the request\r\n     * @param thumbprint - unique request thumbprint\r\n     * @param correlationId - correlation id to be used in the request\r\n     */\r\n    async executePostRequestToDeviceCodeEndpoint(deviceCodeEndpoint, queryString, headers, thumbprint, correlationId) {\r\n        const { body: { user_code: userCode, device_code: deviceCode, verification_uri: verificationUri, expires_in: expiresIn, interval, message, }, } = await this.sendPostRequest(thumbprint, deviceCodeEndpoint, {\r\n            body: queryString,\r\n            headers: headers,\r\n        }, correlationId);\r\n        return {\r\n            userCode,\r\n            deviceCode,\r\n            verificationUri,\r\n            expiresIn,\r\n            interval,\r\n            message,\r\n        };\r\n    }\r\n    /**\r\n     * Create device code endpoint query parameters and returns string\r\n     * @param request - developer provided CommonDeviceCodeRequest\r\n     */\r\n    createQueryString(request) {\r\n        const parameters = new Map();\r\n        addScopes(parameters, request.scopes);\r\n        addClientId(parameters, this.config.authOptions.clientId);\r\n        if (request.extraQueryParameters) {\r\n            addExtraQueryParameters(parameters, request.extraQueryParameters);\r\n        }\r\n        if (request.claims ||\r\n            (this.config.authOptions.clientCapabilities &&\r\n                this.config.authOptions.clientCapabilities.length > 0)) {\r\n            addClaims(parameters, request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n        return mapToQueryString(parameters);\r\n    }\r\n    /**\r\n     * Breaks the polling with specific conditions\r\n     * @param deviceCodeExpirationTime - expiration time for the device code request\r\n     * @param userSpecifiedTimeout - developer provided timeout, to be compared against deviceCodeExpirationTime\r\n     * @param userSpecifiedCancelFlag - boolean indicating the developer would like to cancel the request\r\n     */\r\n    continuePolling(deviceCodeExpirationTime, userSpecifiedTimeout, userSpecifiedCancelFlag) {\r\n        if (userSpecifiedCancelFlag) {\r\n            this.logger.error(\"Token request cancelled by setting DeviceCodeRequest.cancel = true\");\r\n            throw createClientAuthError(deviceCodePollingCancelled);\r\n        }\r\n        else if (userSpecifiedTimeout &&\r\n            userSpecifiedTimeout < deviceCodeExpirationTime &&\r\n            nowSeconds() > userSpecifiedTimeout) {\r\n            this.logger.error(`User defined timeout for device code polling reached. The timeout was set for ${userSpecifiedTimeout}`);\r\n            throw createClientAuthError(userTimeoutReached);\r\n        }\r\n        else if (nowSeconds() > deviceCodeExpirationTime) {\r\n            if (userSpecifiedTimeout) {\r\n                this.logger.verbose(`User specified timeout ignored as the device code has expired before the timeout elapsed. The user specified timeout was set for ${userSpecifiedTimeout}`);\r\n            }\r\n            this.logger.error(`Device code expired. Expiration time of device code was ${deviceCodeExpirationTime}`);\r\n            throw createClientAuthError(deviceCodeExpired);\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * Creates token request with device code response and polls token endpoint at interval set by the device code response\r\n     * @param request - developer provided CommonDeviceCodeRequest\r\n     * @param deviceCodeResponse - DeviceCodeResponse returned by the security token service device code endpoint\r\n     */\r\n    async acquireTokenWithDeviceCode(request, deviceCodeResponse) {\r\n        const queryParametersString = this.createTokenQueryParameters(request);\r\n        const endpoint = UrlString.appendQueryString(this.authority.tokenEndpoint, queryParametersString);\r\n        const requestBody = this.createTokenRequestBody(request, deviceCodeResponse);\r\n        const headers = this.createTokenRequestHeaders();\r\n        const userSpecifiedTimeout = request.timeout\r\n            ? nowSeconds() + request.timeout\r\n            : undefined;\r\n        const deviceCodeExpirationTime = nowSeconds() + deviceCodeResponse.expiresIn;\r\n        const pollingIntervalMilli = deviceCodeResponse.interval * 1000;\r\n        /*\r\n         * Poll token endpoint while (device code is not expired AND operation has not been cancelled by\r\n         * setting CancellationToken.cancel = true). POST request is sent at interval set by pollingIntervalMilli\r\n         */\r\n        while (this.continuePolling(deviceCodeExpirationTime, userSpecifiedTimeout, request.cancel)) {\r\n            const thumbprint = {\r\n                clientId: this.config.authOptions.clientId,\r\n                authority: request.authority,\r\n                scopes: request.scopes,\r\n                claims: request.claims,\r\n                authenticationScheme: request.authenticationScheme,\r\n                resourceRequestMethod: request.resourceRequestMethod,\r\n                resourceRequestUri: request.resourceRequestUri,\r\n                shrClaims: request.shrClaims,\r\n                sshKid: request.sshKid,\r\n            };\r\n            const response = await this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint, request.correlationId);\r\n            if (response.body && response.body.error) {\r\n                // user authorization is pending. Sleep for polling interval and try again\r\n                if (response.body.error === Constants$1.AUTHORIZATION_PENDING) {\r\n                    this.logger.info(\"Authorization pending. Continue polling.\");\r\n                    await delay(pollingIntervalMilli);\r\n                }\r\n                else {\r\n                    // for any other error, throw\r\n                    this.logger.info(\"Unexpected error in polling from the server\");\r\n                    throw createAuthError(postRequestFailed, response.body.error);\r\n                }\r\n            }\r\n            else {\r\n                this.logger.verbose(\"Authorization completed successfully. Polling stopped.\");\r\n                return response.body;\r\n            }\r\n        }\r\n        /*\r\n         * The above code should've thrown by this point, but to satisfy TypeScript,\r\n         * and in the rare case the conditionals in continuePolling() may not catch everything...\r\n         */\r\n        this.logger.error(\"Polling stopped for unknown reasons.\");\r\n        throw createClientAuthError(deviceCodeUnknownError);\r\n    }\r\n    /**\r\n     * Creates query parameters and converts to string.\r\n     * @param request - developer provided CommonDeviceCodeRequest\r\n     * @param deviceCodeResponse - DeviceCodeResponse returned by the security token service device code endpoint\r\n     */\r\n    createTokenRequestBody(request, deviceCodeResponse) {\r\n        const parameters = new Map();\r\n        addScopes(parameters, request.scopes);\r\n        addClientId(parameters, this.config.authOptions.clientId);\r\n        addGrantType(parameters, GrantType.DEVICE_CODE_GRANT);\r\n        addDeviceCode(parameters, deviceCodeResponse.deviceCode);\r\n        const correlationId = request.correlationId ||\r\n            this.config.cryptoInterface.createNewGuid();\r\n        addCorrelationId(parameters, correlationId);\r\n        addClientInfo(parameters);\r\n        addLibraryInfo(parameters, this.config.libraryInfo);\r\n        addApplicationTelemetry(parameters, this.config.telemetry.application);\r\n        addThrottling(parameters);\r\n        if (this.serverTelemetryManager) {\r\n            addServerTelemetry(parameters, this.serverTelemetryManager);\r\n        }\r\n        if (!StringUtils.isEmptyObj(request.claims) ||\r\n            (this.config.authOptions.clientCapabilities &&\r\n                this.config.authOptions.clientCapabilities.length > 0)) {\r\n            addClaims(parameters, request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n        return mapToQueryString(parameters);\r\n    }\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * This class is to be used to acquire tokens for public client applications (desktop, mobile). Public client applications\r\n * are not trusted to safely store application secrets, and therefore can only request tokens in the name of an user.\r\n * @public\r\n */\r\nclass PublicClientApplication extends ClientApplication {\r\n    /**\r\n     * Important attributes in the Configuration object for auth are:\r\n     * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal.\r\n     * - authority: the authority URL for your application.\r\n     *\r\n     * AAD authorities are of the form https://login.microsoftonline.com/\\{Enter_the_Tenant_Info_Here\\}.\r\n     * - If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\r\n     * - If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\r\n     * - If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\r\n     * - To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\r\n     *\r\n     * Azure B2C authorities are of the form https://\\{instance\\}/\\{tenant\\}/\\{policy\\}. Each policy is considered\r\n     * its own authority. You will have to set the all of the knownAuthorities at the time of the client application\r\n     * construction.\r\n     *\r\n     * ADFS authorities are of the form https://\\{instance\\}/adfs.\r\n     */\r\n    constructor(configuration) {\r\n        super(configuration);\r\n        if (this.config.broker.nativeBrokerPlugin) {\r\n            if (this.config.broker.nativeBrokerPlugin.isBrokerAvailable) {\r\n                this.nativeBrokerPlugin = this.config.broker.nativeBrokerPlugin;\r\n                this.nativeBrokerPlugin.setLogger(this.config.system.loggerOptions);\r\n            }\r\n            else {\r\n                this.logger.warning(\"NativeBroker implementation was provided but the broker is unavailable.\");\r\n            }\r\n        }\r\n        this.skus = ServerTelemetryManager.makeExtraSkuString({\r\n            libraryName: Constants.MSAL_SKU,\r\n            libraryVersion: version,\r\n        });\r\n    }\r\n    /**\r\n     * Acquires a token from the authority using OAuth2.0 device code flow.\r\n     * This flow is designed for devices that do not have access to a browser or have input constraints.\r\n     * The authorization server issues a DeviceCode object with a verification code, an end-user code,\r\n     * and the end-user verification URI. The DeviceCode object is provided through a callback, and the end-user should be\r\n     * instructed to use another device to navigate to the verification URI to input credentials.\r\n     * Since the client cannot receive incoming requests, it polls the authorization server repeatedly\r\n     * until the end-user completes input of credentials.\r\n     */\r\n    async acquireTokenByDeviceCode(request) {\r\n        this.logger.info(\"acquireTokenByDeviceCode called\", request.correlationId);\r\n        const validRequest = Object.assign(request, await this.initializeBaseRequest(request));\r\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenByDeviceCode, validRequest.correlationId);\r\n        try {\r\n            const discoveredAuthority = await this.createAuthority(validRequest.authority, validRequest.correlationId, undefined, request.azureCloudOptions);\r\n            const deviceCodeConfig = await this.buildOauthClientConfiguration(discoveredAuthority, validRequest.correlationId, \"\", serverTelemetryManager);\r\n            const deviceCodeClient = new DeviceCodeClient(deviceCodeConfig);\r\n            this.logger.verbose(\"Device code client created\", validRequest.correlationId);\r\n            return await deviceCodeClient.acquireToken(validRequest);\r\n        }\r\n        catch (e) {\r\n            if (e instanceof AuthError) {\r\n                e.setCorrelationId(validRequest.correlationId);\r\n            }\r\n            serverTelemetryManager.cacheFailedRequest(e);\r\n            throw e;\r\n        }\r\n    }\r\n    /**\r\n     * Acquires a token interactively via the browser by requesting an authorization code then exchanging it for a token.\r\n     */\r\n    async acquireTokenInteractive(request) {\r\n        const correlationId = request.correlationId || this.cryptoProvider.createNewGuid();\r\n        this.logger.trace(\"acquireTokenInteractive called\", correlationId);\r\n        const { openBrowser, successTemplate, errorTemplate, windowHandle, loopbackClient: customLoopbackClient, ...remainingProperties } = request;\r\n        if (this.nativeBrokerPlugin) {\r\n            const brokerRequest = {\r\n                ...remainingProperties,\r\n                clientId: this.config.auth.clientId,\r\n                scopes: request.scopes || OIDC_DEFAULT_SCOPES,\r\n                redirectUri: `${Constants.HTTP_PROTOCOL}${Constants.LOCALHOST}`,\r\n                authority: request.authority || this.config.auth.authority,\r\n                correlationId: correlationId,\r\n                extraParameters: {\r\n                    ...remainingProperties.extraQueryParameters,\r\n                    ...remainingProperties.tokenQueryParameters,\r\n                    [X_CLIENT_EXTRA_SKU]: this.skus,\r\n                },\r\n                accountId: remainingProperties.account?.nativeAccountId,\r\n            };\r\n            return this.nativeBrokerPlugin.acquireTokenInteractive(brokerRequest, windowHandle);\r\n        }\r\n        const { verifier, challenge } = await this.cryptoProvider.generatePkceCodes();\r\n        const loopbackClient = customLoopbackClient || new LoopbackClient();\r\n        let authCodeResponse = {};\r\n        let authCodeListenerError = null;\r\n        try {\r\n            const authCodeListener = loopbackClient\r\n                .listenForAuthCode(successTemplate, errorTemplate)\r\n                .then((response) => {\r\n                authCodeResponse = response;\r\n            })\r\n                .catch((e) => {\r\n                // Store the promise instead of throwing so we can control when its thrown\r\n                authCodeListenerError = e;\r\n            });\r\n            // Wait for server to be listening\r\n            const redirectUri = await this.waitForRedirectUri(loopbackClient);\r\n            const validRequest = {\r\n                ...remainingProperties,\r\n                correlationId: correlationId,\r\n                scopes: request.scopes || OIDC_DEFAULT_SCOPES,\r\n                redirectUri: redirectUri,\r\n                responseMode: ResponseMode.QUERY,\r\n                codeChallenge: challenge,\r\n                codeChallengeMethod: CodeChallengeMethodValues.S256,\r\n            };\r\n            const authCodeUrl = await this.getAuthCodeUrl(validRequest);\r\n            await openBrowser(authCodeUrl);\r\n            await authCodeListener;\r\n            if (authCodeListenerError) {\r\n                throw authCodeListenerError;\r\n            }\r\n            if (authCodeResponse.error) {\r\n                throw new ServerError(authCodeResponse.error, authCodeResponse.error_description, authCodeResponse.suberror);\r\n            }\r\n            else if (!authCodeResponse.code) {\r\n                throw NodeAuthError.createNoAuthCodeInResponseError();\r\n            }\r\n            const clientInfo = authCodeResponse.client_info;\r\n            const tokenRequest = {\r\n                code: authCodeResponse.code,\r\n                codeVerifier: verifier,\r\n                clientInfo: clientInfo || Constants$1.EMPTY_STRING,\r\n                ...validRequest,\r\n            };\r\n            return await this.acquireTokenByCode(tokenRequest); // Await this so the server doesn't close prematurely\r\n        }\r\n        finally {\r\n            loopbackClient.closeServer();\r\n        }\r\n    }\r\n    /**\r\n     * Returns a token retrieved either from the cache or by exchanging the refresh token for a fresh access token. If brokering is enabled the token request will be serviced by the broker.\r\n     * @param request - developer provided SilentFlowRequest\r\n     * @returns\r\n     */\r\n    async acquireTokenSilent(request) {\r\n        const correlationId = request.correlationId || this.cryptoProvider.createNewGuid();\r\n        this.logger.trace(\"acquireTokenSilent called\", correlationId);\r\n        if (this.nativeBrokerPlugin) {\r\n            const brokerRequest = {\r\n                ...request,\r\n                clientId: this.config.auth.clientId,\r\n                scopes: request.scopes || OIDC_DEFAULT_SCOPES,\r\n                redirectUri: `${Constants.HTTP_PROTOCOL}${Constants.LOCALHOST}`,\r\n                authority: request.authority || this.config.auth.authority,\r\n                correlationId: correlationId,\r\n                extraParameters: {\r\n                    ...request.tokenQueryParameters,\r\n                    [X_CLIENT_EXTRA_SKU]: this.skus,\r\n                },\r\n                accountId: request.account.nativeAccountId,\r\n                forceRefresh: request.forceRefresh || false,\r\n            };\r\n            return this.nativeBrokerPlugin.acquireTokenSilent(brokerRequest);\r\n        }\r\n        return super.acquireTokenSilent(request);\r\n    }\r\n    /**\r\n     * Removes cache artifacts associated with the given account\r\n     * @param request - developer provided SignOutRequest\r\n     * @returns\r\n     */\r\n    async signOut(request) {\r\n        if (this.nativeBrokerPlugin && request.account.nativeAccountId) {\r\n            const signoutRequest = {\r\n                clientId: this.config.auth.clientId,\r\n                accountId: request.account.nativeAccountId,\r\n                correlationId: request.correlationId ||\r\n                    this.cryptoProvider.createNewGuid(),\r\n            };\r\n            await this.nativeBrokerPlugin.signOut(signoutRequest);\r\n        }\r\n        await this.getTokenCache().removeAccount(request.account, request.correlationId);\r\n    }\r\n    /**\r\n     * Returns all cached accounts for this application. If brokering is enabled this request will be serviced by the broker.\r\n     * @returns\r\n     */\r\n    async getAllAccounts() {\r\n        if (this.nativeBrokerPlugin) {\r\n            const correlationId = this.cryptoProvider.createNewGuid();\r\n            return this.nativeBrokerPlugin.getAllAccounts(this.config.auth.clientId, correlationId);\r\n        }\r\n        return this.getTokenCache().getAllAccounts();\r\n    }\r\n    /**\r\n     * Attempts to retrieve the redirectUri from the loopback server. If the loopback server does not start listening for requests within the timeout this will throw.\r\n     * @param loopbackClient - developer provided custom loopback server implementation\r\n     * @returns\r\n     */\r\n    async waitForRedirectUri(loopbackClient) {\r\n        return new Promise((resolve, reject) => {\r\n            let ticks = 0;\r\n            const id = setInterval(() => {\r\n                if (LOOPBACK_SERVER_CONSTANTS.TIMEOUT_MS /\r\n                    LOOPBACK_SERVER_CONSTANTS.INTERVAL_MS <\r\n                    ticks) {\r\n                    clearInterval(id);\r\n                    reject(NodeAuthError.createLoopbackServerTimeoutError());\r\n                    return;\r\n                }\r\n                try {\r\n                    const r = loopbackClient.getRedirectUri();\r\n                    clearInterval(id);\r\n                    resolve(r);\r\n                    return;\r\n                }\r\n                catch (e) {\r\n                    if (e instanceof AuthError &&\r\n                        e.errorCode ===\r\n                            NodeAuthErrorMessage.noLoopbackServerExists.code) {\r\n                        // Loopback server is not listening yet\r\n                        ticks++;\r\n                        return;\r\n                    }\r\n                    clearInterval(id);\r\n                    reject(e);\r\n                    return;\r\n                }\r\n            }, LOOPBACK_SERVER_CONSTANTS.INTERVAL_MS);\r\n        });\r\n    }\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * OAuth2.0 client credential grant\r\n * @public\r\n */\r\nclass ClientCredentialClient extends BaseClient {\r\n    constructor(configuration, appTokenProvider) {\r\n        super(configuration);\r\n        this.appTokenProvider = appTokenProvider;\r\n    }\r\n    /**\r\n     * Public API to acquire a token with ClientCredential Flow for Confidential clients\r\n     * @param request - CommonClientCredentialRequest provided by the developer\r\n     */\r\n    async acquireToken(request) {\r\n        if (request.skipCache || request.claims) {\r\n            return this.executeTokenRequest(request, this.authority);\r\n        }\r\n        const [cachedAuthenticationResult, lastCacheOutcome] = await this.getCachedAuthenticationResult(request, this.config, this.cryptoUtils, this.authority, this.cacheManager, this.serverTelemetryManager);\r\n        if (cachedAuthenticationResult) {\r\n            // if the token is not expired but must be refreshed; get a new one in the background\r\n            if (lastCacheOutcome === CacheOutcome.PROACTIVELY_REFRESHED) {\r\n                this.logger.info(\"ClientCredentialClient:getCachedAuthenticationResult - Cached access token's refreshOn property has been exceeded'. It's not expired, but must be refreshed.\");\r\n                // refresh the access token in the background\r\n                const refreshAccessToken = true;\r\n                await this.executeTokenRequest(request, this.authority, refreshAccessToken);\r\n            }\r\n            // return the cached token\r\n            return cachedAuthenticationResult;\r\n        }\r\n        else {\r\n            return this.executeTokenRequest(request, this.authority);\r\n        }\r\n    }\r\n    /**\r\n     * looks up cache if the tokens are cached already\r\n     */\r\n    async getCachedAuthenticationResult(request, config, cryptoUtils, authority, cacheManager, serverTelemetryManager) {\r\n        const clientConfiguration = config;\r\n        const managedIdentityConfiguration = config;\r\n        let lastCacheOutcome = CacheOutcome.NOT_APPLICABLE;\r\n        // read the user-supplied cache into memory, if applicable\r\n        let cacheContext;\r\n        if (clientConfiguration.serializableCache &&\r\n            clientConfiguration.persistencePlugin) {\r\n            cacheContext = new TokenCacheContext(clientConfiguration.serializableCache, false);\r\n            await clientConfiguration.persistencePlugin.beforeCacheAccess(cacheContext);\r\n        }\r\n        const cachedAccessToken = this.readAccessTokenFromCache(authority, managedIdentityConfiguration.managedIdentityId?.id ||\r\n            clientConfiguration.authOptions.clientId, new ScopeSet(request.scopes || []), cacheManager, request.correlationId);\r\n        if (clientConfiguration.serializableCache &&\r\n            clientConfiguration.persistencePlugin &&\r\n            cacheContext) {\r\n            await clientConfiguration.persistencePlugin.afterCacheAccess(cacheContext);\r\n        }\r\n        // must refresh due to non-existent access_token\r\n        if (!cachedAccessToken) {\r\n            serverTelemetryManager?.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\r\n            return [null, CacheOutcome.NO_CACHED_ACCESS_TOKEN];\r\n        }\r\n        // must refresh due to the expires_in value\r\n        if (isTokenExpired(cachedAccessToken.expiresOn, clientConfiguration.systemOptions?.tokenRenewalOffsetSeconds ||\r\n            DEFAULT_TOKEN_RENEWAL_OFFSET_SEC)) {\r\n            serverTelemetryManager?.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\r\n            return [null, CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED];\r\n        }\r\n        // must refresh (in the background) due to the refresh_in value\r\n        if (cachedAccessToken.refreshOn &&\r\n            isTokenExpired(cachedAccessToken.refreshOn.toString(), 0)) {\r\n            lastCacheOutcome = CacheOutcome.PROACTIVELY_REFRESHED;\r\n            serverTelemetryManager?.setCacheOutcome(CacheOutcome.PROACTIVELY_REFRESHED);\r\n        }\r\n        return [\r\n            await ResponseHandler.generateAuthenticationResult(cryptoUtils, authority, {\r\n                account: null,\r\n                idToken: null,\r\n                accessToken: cachedAccessToken,\r\n                refreshToken: null,\r\n                appMetadata: null,\r\n            }, true, request),\r\n            lastCacheOutcome,\r\n        ];\r\n    }\r\n    /**\r\n     * Reads access token from the cache\r\n     */\r\n    readAccessTokenFromCache(authority, id, scopeSet, cacheManager, correlationId) {\r\n        const accessTokenFilter = {\r\n            homeAccountId: Constants$1.EMPTY_STRING,\r\n            environment: authority.canonicalAuthorityUrlComponents.HostNameAndPort,\r\n            credentialType: CredentialType.ACCESS_TOKEN,\r\n            clientId: id,\r\n            realm: authority.tenant,\r\n            target: ScopeSet.createSearchScopes(scopeSet.asArray()),\r\n        };\r\n        const accessTokens = cacheManager.getAccessTokensByFilter(accessTokenFilter, correlationId);\r\n        if (accessTokens.length < 1) {\r\n            return null;\r\n        }\r\n        else if (accessTokens.length > 1) {\r\n            throw createClientAuthError(multipleMatchingTokens);\r\n        }\r\n        return accessTokens[0];\r\n    }\r\n    /**\r\n     * Makes a network call to request the token from the service\r\n     * @param request - CommonClientCredentialRequest provided by the developer\r\n     * @param authority - authority object\r\n     */\r\n    async executeTokenRequest(request, authority, refreshAccessToken) {\r\n        let serverTokenResponse;\r\n        let reqTimestamp;\r\n        if (this.appTokenProvider) {\r\n            this.logger.info(\"Using appTokenProvider extensibility.\");\r\n            const appTokenPropviderParameters = {\r\n                correlationId: request.correlationId,\r\n                tenantId: this.config.authOptions.authority.tenant,\r\n                scopes: request.scopes,\r\n                claims: request.claims,\r\n            };\r\n            reqTimestamp = nowSeconds();\r\n            const appTokenProviderResult = await this.appTokenProvider(appTokenPropviderParameters);\r\n            serverTokenResponse = {\r\n                access_token: appTokenProviderResult.accessToken,\r\n                expires_in: appTokenProviderResult.expiresInSeconds,\r\n                refresh_in: appTokenProviderResult.refreshInSeconds,\r\n                token_type: AuthenticationScheme.BEARER,\r\n            };\r\n        }\r\n        else {\r\n            const queryParametersString = this.createTokenQueryParameters(request);\r\n            const endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\r\n            const requestBody = await this.createTokenRequestBody(request);\r\n            const headers = this.createTokenRequestHeaders();\r\n            const thumbprint = {\r\n                clientId: this.config.authOptions.clientId,\r\n                authority: request.authority,\r\n                scopes: request.scopes,\r\n                claims: request.claims,\r\n                authenticationScheme: request.authenticationScheme,\r\n                resourceRequestMethod: request.resourceRequestMethod,\r\n                resourceRequestUri: request.resourceRequestUri,\r\n                shrClaims: request.shrClaims,\r\n                sshKid: request.sshKid,\r\n            };\r\n            this.logger.info(\"Sending token request to endpoint: \" + authority.tokenEndpoint);\r\n            reqTimestamp = nowSeconds();\r\n            const response = await this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint, request.correlationId);\r\n            serverTokenResponse = response.body;\r\n            serverTokenResponse.status = response.status;\r\n        }\r\n        const responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\r\n        responseHandler.validateTokenResponse(serverTokenResponse, refreshAccessToken);\r\n        const tokenResponse = await responseHandler.handleServerTokenResponse(serverTokenResponse, this.authority, reqTimestamp, request);\r\n        return tokenResponse;\r\n    }\r\n    /**\r\n     * generate the request to the server in the acceptable format\r\n     * @param request - CommonClientCredentialRequest provided by the developer\r\n     */\r\n    async createTokenRequestBody(request) {\r\n        const parameters = new Map();\r\n        addClientId(parameters, this.config.authOptions.clientId);\r\n        addScopes(parameters, request.scopes, false);\r\n        addGrantType(parameters, GrantType.CLIENT_CREDENTIALS_GRANT);\r\n        addLibraryInfo(parameters, this.config.libraryInfo);\r\n        addApplicationTelemetry(parameters, this.config.telemetry.application);\r\n        addThrottling(parameters);\r\n        if (this.serverTelemetryManager) {\r\n            addServerTelemetry(parameters, this.serverTelemetryManager);\r\n        }\r\n        const correlationId = request.correlationId ||\r\n            this.config.cryptoInterface.createNewGuid();\r\n        addCorrelationId(parameters, correlationId);\r\n        if (this.config.clientCredentials.clientSecret) {\r\n            addClientSecret(parameters, this.config.clientCredentials.clientSecret);\r\n        }\r\n        // Use clientAssertion from request, fallback to client assertion in base configuration\r\n        const clientAssertion = request.clientAssertion ||\r\n            this.config.clientCredentials.clientAssertion;\r\n        if (clientAssertion) {\r\n            addClientAssertion(parameters, await getClientAssertion(clientAssertion.assertion, this.config.authOptions.clientId, request.resourceRequestUri));\r\n            addClientAssertionType(parameters, clientAssertion.assertionType);\r\n        }\r\n        if (!StringUtils.isEmptyObj(request.claims) ||\r\n            (this.config.authOptions.clientCapabilities &&\r\n                this.config.authOptions.clientCapabilities.length > 0)) {\r\n            addClaims(parameters, request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n        return mapToQueryString(parameters);\r\n    }\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * On-Behalf-Of client\r\n * @public\r\n */\r\nclass OnBehalfOfClient extends BaseClient {\r\n    constructor(configuration) {\r\n        super(configuration);\r\n    }\r\n    /**\r\n     * Public API to acquire tokens with on behalf of flow\r\n     * @param request - developer provided CommonOnBehalfOfRequest\r\n     */\r\n    async acquireToken(request) {\r\n        this.scopeSet = new ScopeSet(request.scopes || []);\r\n        // generate the user_assertion_hash for OBOAssertion\r\n        this.userAssertionHash = await this.cryptoUtils.hashString(request.oboAssertion);\r\n        if (request.skipCache || request.claims) {\r\n            return this.executeTokenRequest(request, this.authority, this.userAssertionHash);\r\n        }\r\n        try {\r\n            return await this.getCachedAuthenticationResult(request);\r\n        }\r\n        catch (e) {\r\n            // Any failure falls back to interactive request, once we implement distributed cache, we plan to handle `createRefreshRequiredError` to refresh using the RT\r\n            return await this.executeTokenRequest(request, this.authority, this.userAssertionHash);\r\n        }\r\n    }\r\n    /**\r\n     * look up cache for tokens\r\n     * Find idtoken in the cache\r\n     * Find accessToken based on user assertion and account info in the cache\r\n     * Please note we are not yet supported OBO tokens refreshed with long lived RT. User will have to send a new assertion if the current access token expires\r\n     * This is to prevent security issues when the assertion changes over time, however, longlived RT helps retaining the session\r\n     * @param request - developer provided CommonOnBehalfOfRequest\r\n     */\r\n    async getCachedAuthenticationResult(request) {\r\n        // look in the cache for the access_token which matches the incoming_assertion\r\n        const cachedAccessToken = this.readAccessTokenFromCacheForOBO(this.config.authOptions.clientId, request);\r\n        if (!cachedAccessToken) {\r\n            // Must refresh due to non-existent access_token.\r\n            this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\r\n            this.logger.info(\"SilentFlowClient:acquireCachedToken - No access token found in cache for the given properties.\");\r\n            throw createClientAuthError(tokenRefreshRequired);\r\n        }\r\n        else if (isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\r\n            // Access token expired, will need to renewed\r\n            this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\r\n            this.logger.info(`OnbehalfofFlow:getCachedAuthenticationResult - Cached access token is expired or will expire within ${this.config.systemOptions.tokenRenewalOffsetSeconds} seconds.`);\r\n            throw createClientAuthError(tokenRefreshRequired);\r\n        }\r\n        // fetch the idToken from cache\r\n        const cachedIdToken = this.readIdTokenFromCacheForOBO(cachedAccessToken.homeAccountId, request.correlationId);\r\n        let idTokenClaims;\r\n        let cachedAccount = null;\r\n        if (cachedIdToken) {\r\n            idTokenClaims = extractTokenClaims(cachedIdToken.secret, EncodingUtils.base64Decode);\r\n            const localAccountId = idTokenClaims.oid || idTokenClaims.sub;\r\n            const accountInfo = {\r\n                homeAccountId: cachedIdToken.homeAccountId,\r\n                environment: cachedIdToken.environment,\r\n                tenantId: cachedIdToken.realm,\r\n                username: Constants$1.EMPTY_STRING,\r\n                localAccountId: localAccountId || Constants$1.EMPTY_STRING,\r\n            };\r\n            cachedAccount = this.cacheManager.getAccount(this.cacheManager.generateAccountKey(accountInfo), request.correlationId);\r\n        }\r\n        // increment telemetry cache hit counter\r\n        if (this.config.serverTelemetryManager) {\r\n            this.config.serverTelemetryManager.incrementCacheHits();\r\n        }\r\n        return ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, {\r\n            account: cachedAccount,\r\n            accessToken: cachedAccessToken,\r\n            idToken: cachedIdToken,\r\n            refreshToken: null,\r\n            appMetadata: null,\r\n        }, true, request, idTokenClaims);\r\n    }\r\n    /**\r\n     * read idtoken from cache, this is a specific implementation for OBO as the requirements differ from a generic lookup in the cacheManager\r\n     * Certain use cases of OBO flow do not expect an idToken in the cache/or from the service\r\n     * @param atHomeAccountId - account id\r\n     */\r\n    readIdTokenFromCacheForOBO(atHomeAccountId, correlationId) {\r\n        const idTokenFilter = {\r\n            homeAccountId: atHomeAccountId,\r\n            environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\r\n            credentialType: CredentialType.ID_TOKEN,\r\n            clientId: this.config.authOptions.clientId,\r\n            realm: this.authority.tenant,\r\n        };\r\n        const idTokenMap = this.cacheManager.getIdTokensByFilter(idTokenFilter, correlationId);\r\n        // When acquiring a token on behalf of an application, there might not be an id token in the cache\r\n        if (Object.values(idTokenMap).length < 1) {\r\n            return null;\r\n        }\r\n        return Object.values(idTokenMap)[0];\r\n    }\r\n    /**\r\n     * Fetches the cached access token based on incoming assertion\r\n     * @param clientId - client id\r\n     * @param request - developer provided CommonOnBehalfOfRequest\r\n     */\r\n    readAccessTokenFromCacheForOBO(clientId, request) {\r\n        const authScheme = request.authenticationScheme || AuthenticationScheme.BEARER;\r\n        /*\r\n         * Distinguish between Bearer and PoP/SSH token cache types\r\n         * Cast to lowercase to handle \"bearer\" from ADFS\r\n         */\r\n        const credentialType = authScheme.toLowerCase() !==\r\n                AuthenticationScheme.BEARER.toLowerCase()\r\n            ? CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME\r\n            : CredentialType.ACCESS_TOKEN;\r\n        const accessTokenFilter = {\r\n            credentialType: credentialType,\r\n            clientId,\r\n            target: ScopeSet.createSearchScopes(this.scopeSet.asArray()),\r\n            tokenType: authScheme,\r\n            keyId: request.sshKid,\r\n            requestedClaimsHash: request.requestedClaimsHash,\r\n            userAssertionHash: this.userAssertionHash,\r\n        };\r\n        const accessTokens = this.cacheManager.getAccessTokensByFilter(accessTokenFilter, request.correlationId);\r\n        const numAccessTokens = accessTokens.length;\r\n        if (numAccessTokens < 1) {\r\n            return null;\r\n        }\r\n        else if (numAccessTokens > 1) {\r\n            throw createClientAuthError(multipleMatchingTokens);\r\n        }\r\n        return accessTokens[0];\r\n    }\r\n    /**\r\n     * Make a network call to the server requesting credentials\r\n     * @param request - developer provided CommonOnBehalfOfRequest\r\n     * @param authority - authority object\r\n     */\r\n    async executeTokenRequest(request, authority, userAssertionHash) {\r\n        const queryParametersString = this.createTokenQueryParameters(request);\r\n        const endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\r\n        const requestBody = await this.createTokenRequestBody(request);\r\n        const headers = this.createTokenRequestHeaders();\r\n        const thumbprint = {\r\n            clientId: this.config.authOptions.clientId,\r\n            authority: request.authority,\r\n            scopes: request.scopes,\r\n            claims: request.claims,\r\n            authenticationScheme: request.authenticationScheme,\r\n            resourceRequestMethod: request.resourceRequestMethod,\r\n            resourceRequestUri: request.resourceRequestUri,\r\n            shrClaims: request.shrClaims,\r\n            sshKid: request.sshKid,\r\n        };\r\n        const reqTimestamp = nowSeconds();\r\n        const response = await this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint, request.correlationId);\r\n        const responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\r\n        responseHandler.validateTokenResponse(response.body);\r\n        const tokenResponse = await responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, undefined, userAssertionHash);\r\n        return tokenResponse;\r\n    }\r\n    /**\r\n     * generate a server request in accepable format\r\n     * @param request - developer provided CommonOnBehalfOfRequest\r\n     */\r\n    async createTokenRequestBody(request) {\r\n        const parameters = new Map();\r\n        addClientId(parameters, this.config.authOptions.clientId);\r\n        addScopes(parameters, request.scopes);\r\n        addGrantType(parameters, GrantType.JWT_BEARER);\r\n        addClientInfo(parameters);\r\n        addLibraryInfo(parameters, this.config.libraryInfo);\r\n        addApplicationTelemetry(parameters, this.config.telemetry.application);\r\n        addThrottling(parameters);\r\n        if (this.serverTelemetryManager) {\r\n            addServerTelemetry(parameters, this.serverTelemetryManager);\r\n        }\r\n        const correlationId = request.correlationId ||\r\n            this.config.cryptoInterface.createNewGuid();\r\n        addCorrelationId(parameters, correlationId);\r\n        addRequestTokenUse(parameters, ON_BEHALF_OF);\r\n        addOboAssertion(parameters, request.oboAssertion);\r\n        if (this.config.clientCredentials.clientSecret) {\r\n            addClientSecret(parameters, this.config.clientCredentials.clientSecret);\r\n        }\r\n        const clientAssertion = this.config.clientCredentials.clientAssertion;\r\n        if (clientAssertion) {\r\n            addClientAssertion(parameters, await getClientAssertion(clientAssertion.assertion, this.config.authOptions.clientId, request.resourceRequestUri));\r\n            addClientAssertionType(parameters, clientAssertion.assertionType);\r\n        }\r\n        if (request.claims ||\r\n            (this.config.authOptions.clientCapabilities &&\r\n                this.config.authOptions.clientCapabilities.length > 0)) {\r\n            addClaims(parameters, request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n        return mapToQueryString(parameters);\r\n    }\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n// AADAuthorityConstants\r\n/**\r\n *  This class is to be used to acquire tokens for confidential client applications (webApp, webAPI). Confidential client applications\r\n *  will configure application secrets, client certificates/assertions as applicable\r\n * @public\r\n */\r\nclass ConfidentialClientApplication extends ClientApplication {\r\n    /**\r\n     * Constructor for the ConfidentialClientApplication\r\n     *\r\n     * Required attributes in the Configuration object are:\r\n     * - clientID: the application ID of your application. You can obtain one by registering your application with our application registration portal\r\n     * - authority: the authority URL for your application.\r\n     * - client credential: Must set either client secret, certificate, or assertion for confidential clients. You can obtain a client secret from the application registration portal.\r\n     *\r\n     * In Azure AD, authority is a URL indicating of the form https://login.microsoftonline.com/\\{Enter_the_Tenant_Info_Here\\}.\r\n     * If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\r\n     * If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\r\n     * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\r\n     * To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\r\n     *\r\n     * In Azure B2C, authority is of the form https://\\{instance\\}/tfp/\\{tenant\\}/\\{policyName\\}/\r\n     * Full B2C functionality will be available in this library in future versions.\r\n     *\r\n     * @param Configuration - configuration object for the MSAL ConfidentialClientApplication instance\r\n     */\r\n    constructor(configuration) {\r\n        super(configuration);\r\n        const clientSecretNotEmpty = !!this.config.auth.clientSecret;\r\n        const clientAssertionNotEmpty = !!this.config.auth.clientAssertion;\r\n        const certificateNotEmpty = (!!this.config.auth.clientCertificate?.thumbprint ||\r\n            !!this.config.auth.clientCertificate?.thumbprintSha256) &&\r\n            !!this.config.auth.clientCertificate?.privateKey;\r\n        /*\r\n         * If app developer configures this callback, they don't need a credential\r\n         * i.e. AzureSDK can get token from Managed Identity without a cert / secret\r\n         */\r\n        if (this.appTokenProvider) {\r\n            return;\r\n        }\r\n        // Check that at most one credential is set on the application\r\n        if ((clientSecretNotEmpty && clientAssertionNotEmpty) ||\r\n            (clientAssertionNotEmpty && certificateNotEmpty) ||\r\n            (clientSecretNotEmpty && certificateNotEmpty)) {\r\n            throw createClientAuthError(invalidClientCredential);\r\n        }\r\n        if (this.config.auth.clientSecret) {\r\n            this.clientSecret = this.config.auth.clientSecret;\r\n            return;\r\n        }\r\n        if (this.config.auth.clientAssertion) {\r\n            this.developerProvidedClientAssertion =\r\n                this.config.auth.clientAssertion;\r\n            return;\r\n        }\r\n        if (!certificateNotEmpty) {\r\n            throw createClientAuthError(invalidClientCredential);\r\n        }\r\n        else {\r\n            this.clientAssertion = !!this.config.auth.clientCertificate\r\n                .thumbprintSha256\r\n                ? ClientAssertion.fromCertificateWithSha256Thumbprint(this.config.auth.clientCertificate.thumbprintSha256, this.config.auth.clientCertificate.privateKey, this.config.auth.clientCertificate.x5c)\r\n                : ClientAssertion.fromCertificate(\r\n                // guaranteed to be a string, due to prior error checking in this function\r\n                this.config.auth.clientCertificate.thumbprint, this.config.auth.clientCertificate.privateKey, this.config.auth.clientCertificate.x5c);\r\n        }\r\n        this.appTokenProvider = undefined;\r\n    }\r\n    /**\r\n     * This extensibility point only works for the client_credential flow, i.e. acquireTokenByClientCredential and\r\n     * is meant for Azure SDK to enhance Managed Identity support.\r\n     *\r\n     * @param IAppTokenProvider  - Extensibility interface, which allows the app developer to return a token from a custom source.\r\n     */\r\n    SetAppTokenProvider(provider) {\r\n        this.appTokenProvider = provider;\r\n    }\r\n    /**\r\n     * Acquires tokens from the authority for the application (not for an end user).\r\n     */\r\n    async acquireTokenByClientCredential(request) {\r\n        this.logger.info(\"acquireTokenByClientCredential called\", request.correlationId);\r\n        // If there is a client assertion present in the request, it overrides the one present in the client configuration\r\n        let clientAssertion;\r\n        if (request.clientAssertion) {\r\n            clientAssertion = {\r\n                assertion: await getClientAssertion(request.clientAssertion, this.config.auth.clientId\r\n                // tokenEndpoint will be undefined. resourceRequestUri is omitted in ClientCredentialRequest\r\n                ),\r\n                assertionType: Constants.JWT_BEARER_ASSERTION_TYPE,\r\n            };\r\n        }\r\n        const baseRequest = await this.initializeBaseRequest(request);\r\n        // valid base request should not contain oidc scopes in this grant type\r\n        const validBaseRequest = {\r\n            ...baseRequest,\r\n            scopes: baseRequest.scopes.filter((scope) => !OIDC_DEFAULT_SCOPES.includes(scope)),\r\n        };\r\n        const validRequest = {\r\n            ...request,\r\n            ...validBaseRequest,\r\n            clientAssertion,\r\n        };\r\n        /*\r\n         * valid request should not have \"common\" or \"organizations\" in lieu of the tenant_id in the authority in the auth configuration\r\n         * example authority: \"https://login.microsoftonline.com/TenantId\",\r\n         */\r\n        const authority = new UrlString(validRequest.authority);\r\n        const tenantId = authority.getUrlComponents().PathSegments[0];\r\n        if (Object.values(AADAuthorityConstants).includes(tenantId)) {\r\n            throw createClientAuthError(missingTenantIdError);\r\n        }\r\n        /*\r\n         * if this env variable is set, and the developer provided region isn't defined and isn't \"DisableMsalForceRegion\",\r\n         * MSAL shall opt-in to ESTS-R with the value of this variable\r\n         */\r\n        const ENV_MSAL_FORCE_REGION = process.env[MSAL_FORCE_REGION];\r\n        let region;\r\n        if (validRequest.azureRegion !== \"DisableMsalForceRegion\") {\r\n            if (!validRequest.azureRegion && ENV_MSAL_FORCE_REGION) {\r\n                region = ENV_MSAL_FORCE_REGION;\r\n            }\r\n            else {\r\n                region = validRequest.azureRegion;\r\n            }\r\n        }\r\n        const azureRegionConfiguration = {\r\n            azureRegion: region,\r\n            environmentRegion: process.env[REGION_ENVIRONMENT_VARIABLE],\r\n        };\r\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenByClientCredential, validRequest.correlationId, validRequest.skipCache);\r\n        try {\r\n            const discoveredAuthority = await this.createAuthority(validRequest.authority, validRequest.correlationId, azureRegionConfiguration, request.azureCloudOptions);\r\n            const clientCredentialConfig = await this.buildOauthClientConfiguration(discoveredAuthority, validRequest.correlationId, \"\", serverTelemetryManager);\r\n            const clientCredentialClient = new ClientCredentialClient(clientCredentialConfig, this.appTokenProvider);\r\n            this.logger.verbose(\"Client credential client created\", validRequest.correlationId);\r\n            return await clientCredentialClient.acquireToken(validRequest);\r\n        }\r\n        catch (e) {\r\n            if (e instanceof AuthError) {\r\n                e.setCorrelationId(validRequest.correlationId);\r\n            }\r\n            serverTelemetryManager.cacheFailedRequest(e);\r\n            throw e;\r\n        }\r\n    }\r\n    /**\r\n     * Acquires tokens from the authority for the application.\r\n     *\r\n     * Used in scenarios where the current app is a middle-tier service which was called with a token\r\n     * representing an end user. The current app can use the token (oboAssertion) to request another\r\n     * token to access downstream web API, on behalf of that user.\r\n     *\r\n     * The current middle-tier app has no user interaction to obtain consent.\r\n     * See how to gain consent upfront for your middle-tier app from this article.\r\n     * https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#gaining-consent-for-the-middle-tier-application\r\n     */\r\n    async acquireTokenOnBehalfOf(request) {\r\n        this.logger.info(\"acquireTokenOnBehalfOf called\", request.correlationId);\r\n        const validRequest = {\r\n            ...request,\r\n            ...(await this.initializeBaseRequest(request)),\r\n        };\r\n        try {\r\n            const discoveredAuthority = await this.createAuthority(validRequest.authority, validRequest.correlationId, undefined, request.azureCloudOptions);\r\n            const onBehalfOfConfig = await this.buildOauthClientConfiguration(discoveredAuthority, validRequest.correlationId, \"\", undefined);\r\n            const oboClient = new OnBehalfOfClient(onBehalfOfConfig);\r\n            this.logger.verbose(\"On behalf of client created\", validRequest.correlationId);\r\n            return await oboClient.acquireToken(validRequest);\r\n        }\r\n        catch (e) {\r\n            if (e instanceof AuthError) {\r\n                e.setCorrelationId(validRequest.correlationId);\r\n            }\r\n            throw e;\r\n        }\r\n    }\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * @internal\r\n * Checks if a given date string is in ISO 8601 format.\r\n *\r\n * @param dateString - The date string to be checked.\r\n * @returns boolean - Returns true if the date string is in ISO 8601 format, otherwise false.\r\n */\r\nfunction isIso8601(dateString) {\r\n    if (typeof dateString !== \"string\") {\r\n        return false;\r\n    }\r\n    const date = new Date(dateString);\r\n    return !isNaN(date.getTime()) && date.toISOString() === dateString;\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nclass HttpClientWithRetries {\r\n    constructor(httpClientNoRetries, retryPolicy, logger) {\r\n        this.httpClientNoRetries = httpClientNoRetries;\r\n        this.retryPolicy = retryPolicy;\r\n        this.logger = logger;\r\n    }\r\n    async sendNetworkRequestAsyncHelper(httpMethod, url, options) {\r\n        if (httpMethod === HttpMethod.GET) {\r\n            return this.httpClientNoRetries.sendGetRequestAsync(url, options);\r\n        }\r\n        else {\r\n            return this.httpClientNoRetries.sendPostRequestAsync(url, options);\r\n        }\r\n    }\r\n    async sendNetworkRequestAsync(httpMethod, url, options) {\r\n        // the underlying network module (custom or HttpClient) will make the call\r\n        let response = await this.sendNetworkRequestAsyncHelper(httpMethod, url, options);\r\n        if (\"isNewRequest\" in this.retryPolicy) {\r\n            this.retryPolicy.isNewRequest = true;\r\n        }\r\n        let currentRetry = 0;\r\n        while (await this.retryPolicy.pauseForRetry(response.status, currentRetry, this.logger, response.headers[HeaderNames.RETRY_AFTER])) {\r\n            response = await this.sendNetworkRequestAsyncHelper(httpMethod, url, options);\r\n            currentRetry++;\r\n        }\r\n        return response;\r\n    }\r\n    async sendGetRequestAsync(url, options) {\r\n        return this.sendNetworkRequestAsync(HttpMethod.GET, url, options);\r\n    }\r\n    async sendPostRequestAsync(url, options) {\r\n        return this.sendNetworkRequestAsync(HttpMethod.POST, url, options);\r\n    }\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Managed Identity User Assigned Id Query Parameter Names\r\n */\r\nconst ManagedIdentityUserAssignedIdQueryParameterNames = {\r\n    MANAGED_IDENTITY_CLIENT_ID_2017: \"clientid\",\r\n    MANAGED_IDENTITY_CLIENT_ID: \"client_id\",\r\n    MANAGED_IDENTITY_OBJECT_ID: \"object_id\",\r\n    MANAGED_IDENTITY_RESOURCE_ID_IMDS: \"msi_res_id\",\r\n    MANAGED_IDENTITY_RESOURCE_ID_NON_IMDS: \"mi_res_id\",\r\n};\r\nclass BaseManagedIdentitySource {\r\n    constructor(logger, nodeStorage, networkClient, cryptoProvider, disableInternalRetries) {\r\n        this.logger = logger;\r\n        this.nodeStorage = nodeStorage;\r\n        this.networkClient = networkClient;\r\n        this.cryptoProvider = cryptoProvider;\r\n        this.disableInternalRetries = disableInternalRetries;\r\n    }\r\n    async getServerTokenResponseAsync(response, \r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    _networkClient, \r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    _networkRequest, \r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    _networkRequestOptions) {\r\n        return this.getServerTokenResponse(response);\r\n    }\r\n    getServerTokenResponse(response) {\r\n        let refreshIn, expiresIn;\r\n        if (response.body.expires_on) {\r\n            // if the expires_on field in the response body is a string and in ISO 8601 format, convert it to a Unix timestamp (seconds since epoch)\r\n            if (isIso8601(response.body.expires_on)) {\r\n                response.body.expires_on =\r\n                    new Date(response.body.expires_on).getTime() / 1000;\r\n            }\r\n            expiresIn = response.body.expires_on - nowSeconds();\r\n            // compute refresh_in as 1/2 of expires_in, but only if expires_in > 2h\r\n            if (expiresIn > 2 * 3600) {\r\n                refreshIn = expiresIn / 2;\r\n            }\r\n        }\r\n        const serverTokenResponse = {\r\n            status: response.status,\r\n            // success\r\n            access_token: response.body.access_token,\r\n            expires_in: expiresIn,\r\n            scope: response.body.resource,\r\n            token_type: response.body.token_type,\r\n            refresh_in: refreshIn,\r\n            // error\r\n            correlation_id: response.body.correlation_id || response.body.correlationId,\r\n            error: typeof response.body.error === \"string\"\r\n                ? response.body.error\r\n                : response.body.error?.code,\r\n            error_description: response.body.message ||\r\n                (typeof response.body.error === \"string\"\r\n                    ? response.body.error_description\r\n                    : response.body.error?.message),\r\n            error_codes: response.body.error_codes,\r\n            timestamp: response.body.timestamp,\r\n            trace_id: response.body.trace_id,\r\n        };\r\n        return serverTokenResponse;\r\n    }\r\n    async acquireTokenWithManagedIdentity(managedIdentityRequest, managedIdentityId, fakeAuthority, refreshAccessToken) {\r\n        const networkRequest = this.createRequest(managedIdentityRequest.resource, managedIdentityId);\r\n        if (managedIdentityRequest.revokedTokenSha256Hash) {\r\n            this.logger.info(`[Managed Identity] The following claims are present in the request: ${managedIdentityRequest.claims}`);\r\n            networkRequest.queryParameters[ManagedIdentityQueryParameters.SHA256_TOKEN_TO_REFRESH] = managedIdentityRequest.revokedTokenSha256Hash;\r\n        }\r\n        if (managedIdentityRequest.clientCapabilities?.length) {\r\n            const clientCapabilities = managedIdentityRequest.clientCapabilities.toString();\r\n            this.logger.info(`[Managed Identity] The following client capabilities are present in the request: ${clientCapabilities}`);\r\n            networkRequest.queryParameters[ManagedIdentityQueryParameters.XMS_CC] = clientCapabilities;\r\n        }\r\n        const headers = networkRequest.headers;\r\n        headers[HeaderNames.CONTENT_TYPE] = Constants$1.URL_FORM_CONTENT_TYPE;\r\n        const networkRequestOptions = { headers };\r\n        if (Object.keys(networkRequest.bodyParameters).length) {\r\n            networkRequestOptions.body =\r\n                networkRequest.computeParametersBodyString();\r\n        }\r\n        /**\r\n         * Initializes the network client helper based on the retry policy configuration.\r\n         * If internal retries are disabled, it uses the provided network client directly.\r\n         * Otherwise, it wraps the network client with an HTTP client that supports retries.\r\n         */\r\n        const networkClientHelper = this.disableInternalRetries\r\n            ? this.networkClient\r\n            : new HttpClientWithRetries(this.networkClient, networkRequest.retryPolicy, this.logger);\r\n        const reqTimestamp = nowSeconds();\r\n        let response;\r\n        try {\r\n            // Sources that send POST requests: Cloud Shell\r\n            if (networkRequest.httpMethod === HttpMethod.POST) {\r\n                response =\r\n                    await networkClientHelper.sendPostRequestAsync(networkRequest.computeUri(), networkRequestOptions);\r\n                // Sources that send GET requests: App Service, Azure Arc, IMDS, Service Fabric\r\n            }\r\n            else {\r\n                response =\r\n                    await networkClientHelper.sendGetRequestAsync(networkRequest.computeUri(), networkRequestOptions);\r\n            }\r\n        }\r\n        catch (error) {\r\n            if (error instanceof AuthError) {\r\n                throw error;\r\n            }\r\n            else {\r\n                throw createClientAuthError(networkError);\r\n            }\r\n        }\r\n        const responseHandler = new ResponseHandler(managedIdentityId.id, this.nodeStorage, this.cryptoProvider, this.logger, null, null);\r\n        const serverTokenResponse = await this.getServerTokenResponseAsync(response, networkClientHelper, networkRequest, networkRequestOptions);\r\n        responseHandler.validateTokenResponse(serverTokenResponse, refreshAccessToken);\r\n        // caches the token\r\n        return responseHandler.handleServerTokenResponse(serverTokenResponse, fakeAuthority, reqTimestamp, managedIdentityRequest);\r\n    }\r\n    getManagedIdentityUserAssignedIdQueryParameterKey(managedIdentityIdType, isImds, usesApi2017) {\r\n        switch (managedIdentityIdType) {\r\n            case ManagedIdentityIdType.USER_ASSIGNED_CLIENT_ID:\r\n                this.logger.info(`[Managed Identity] [API version ${usesApi2017 ? \"2017+\" : \"2019+\"}] Adding user assigned client id to the request.`);\r\n                // The Machine Learning source uses the 2017-09-01 API version, which uses \"clientid\" instead of \"client_id\"\r\n                return usesApi2017\r\n                    ? ManagedIdentityUserAssignedIdQueryParameterNames.MANAGED_IDENTITY_CLIENT_ID_2017\r\n                    : ManagedIdentityUserAssignedIdQueryParameterNames.MANAGED_IDENTITY_CLIENT_ID;\r\n            case ManagedIdentityIdType.USER_ASSIGNED_RESOURCE_ID:\r\n                this.logger.info(\"[Managed Identity] Adding user assigned resource id to the request.\");\r\n                return isImds\r\n                    ? ManagedIdentityUserAssignedIdQueryParameterNames.MANAGED_IDENTITY_RESOURCE_ID_IMDS\r\n                    : ManagedIdentityUserAssignedIdQueryParameterNames.MANAGED_IDENTITY_RESOURCE_ID_NON_IMDS;\r\n            case ManagedIdentityIdType.USER_ASSIGNED_OBJECT_ID:\r\n                this.logger.info(\"[Managed Identity] Adding user assigned object id to the request.\");\r\n                return ManagedIdentityUserAssignedIdQueryParameterNames.MANAGED_IDENTITY_OBJECT_ID;\r\n            default:\r\n                throw createManagedIdentityError(invalidManagedIdentityIdType);\r\n        }\r\n    }\r\n}\r\nBaseManagedIdentitySource.getValidatedEnvVariableUrlString = (envVariableStringName, envVariable, sourceName, logger) => {\r\n    try {\r\n        return new UrlString(envVariable).urlString;\r\n    }\r\n    catch (error) {\r\n        logger.info(`[Managed Identity] ${sourceName} managed identity is unavailable because the '${envVariableStringName}' environment variable is malformed.`);\r\n        throw createManagedIdentityError(MsiEnvironmentVariableUrlMalformedErrorCodes[envVariableStringName]);\r\n    }\r\n};\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nclass LinearRetryStrategy {\r\n    /**\r\n     * Calculates the number of milliseconds to sleep based on the `retry-after` HTTP header.\r\n     *\r\n     * @param retryHeader - The value of the `retry-after` HTTP header. This can be either a number of seconds\r\n     *                      or an HTTP date string.\r\n     * @returns The number of milliseconds to sleep before retrying the request. If the `retry-after` header is not\r\n     *          present or cannot be parsed, returns 0.\r\n     */\r\n    calculateDelay(retryHeader, minimumDelay) {\r\n        if (!retryHeader) {\r\n            return minimumDelay;\r\n        }\r\n        // retry-after header is in seconds\r\n        let millisToSleep = Math.round(parseFloat(retryHeader) * 1000);\r\n        /*\r\n         * retry-after header is in HTTP Date format\r\n         * <day-name>, <day> <month> <year> <hour>:<minute>:<second> GMT\r\n         */\r\n        if (isNaN(millisToSleep)) {\r\n            // .valueOf() is needed to subtract dates in TypeScript\r\n            millisToSleep =\r\n                new Date(retryHeader).valueOf() - new Date().valueOf();\r\n        }\r\n        return Math.max(minimumDelay, millisToSleep);\r\n    }\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst DEFAULT_MANAGED_IDENTITY_MAX_RETRIES = 3; // referenced in unit test\r\nconst DEFAULT_MANAGED_IDENTITY_RETRY_DELAY_MS = 1000;\r\nconst DEFAULT_MANAGED_IDENTITY_HTTP_STATUS_CODES_TO_RETRY_ON = [\r\n    msalCommon.HttpStatus.NOT_FOUND,\r\n    msalCommon.HttpStatus.REQUEST_TIMEOUT,\r\n    msalCommon.HttpStatus.TOO_MANY_REQUESTS,\r\n    msalCommon.HttpStatus.SERVER_ERROR,\r\n    msalCommon.HttpStatus.SERVICE_UNAVAILABLE,\r\n    msalCommon.HttpStatus.GATEWAY_TIMEOUT,\r\n];\r\nclass DefaultManagedIdentityRetryPolicy {\r\n    constructor() {\r\n        this.linearRetryStrategy = new LinearRetryStrategy();\r\n    }\r\n    /*\r\n     * this is defined here as a static variable despite being defined as a constant outside of the\r\n     * class because it needs to be overridden in the unit tests so that the unit tests run faster\r\n     */\r\n    static get DEFAULT_MANAGED_IDENTITY_RETRY_DELAY_MS() {\r\n        return DEFAULT_MANAGED_IDENTITY_RETRY_DELAY_MS;\r\n    }\r\n    async pauseForRetry(httpStatusCode, currentRetry, logger, retryAfterHeader) {\r\n        if (DEFAULT_MANAGED_IDENTITY_HTTP_STATUS_CODES_TO_RETRY_ON.includes(httpStatusCode) &&\r\n            currentRetry < DEFAULT_MANAGED_IDENTITY_MAX_RETRIES) {\r\n            const retryAfterDelay = this.linearRetryStrategy.calculateDelay(retryAfterHeader, DefaultManagedIdentityRetryPolicy.DEFAULT_MANAGED_IDENTITY_RETRY_DELAY_MS);\r\n            logger.verbose(`Retrying request in ${retryAfterDelay}ms (retry attempt: ${currentRetry + 1})`);\r\n            // pause execution for the calculated delay\r\n            await new Promise((resolve) => {\r\n                // retryAfterHeader value of 0 evaluates to false, and DEFAULT_MANAGED_IDENTITY_RETRY_DELAY_MS will be used\r\n                return setTimeout(resolve, retryAfterDelay);\r\n            });\r\n            return true;\r\n        }\r\n        // if the status code is not retriable or max retries have been reached, do not retry\r\n        return false;\r\n    }\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nclass ManagedIdentityRequestParameters {\r\n    constructor(httpMethod, endpoint, retryPolicy) {\r\n        this.httpMethod = httpMethod;\r\n        this._baseEndpoint = endpoint;\r\n        this.headers = {};\r\n        this.bodyParameters = {};\r\n        this.queryParameters = {};\r\n        this.retryPolicy =\r\n            retryPolicy || new DefaultManagedIdentityRetryPolicy();\r\n    }\r\n    computeUri() {\r\n        const parameters = new Map();\r\n        if (this.queryParameters) {\r\n            addExtraQueryParameters(parameters, this.queryParameters);\r\n        }\r\n        const queryParametersString = mapToQueryString(parameters);\r\n        return UrlString.appendQueryString(this._baseEndpoint, queryParametersString);\r\n    }\r\n    computeParametersBodyString() {\r\n        const parameters = new Map();\r\n        if (this.bodyParameters) {\r\n            addExtraQueryParameters(parameters, this.bodyParameters);\r\n        }\r\n        return mapToQueryString(parameters);\r\n    }\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n// MSI Constants. Docs for MSI are available here https://docs.microsoft.com/azure/app-service/overview-managed-identity\r\nconst APP_SERVICE_MSI_API_VERSION = \"2019-08-01\";\r\n/**\r\n * Original source of code: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/src/AppServiceManagedIdentitySource.cs\r\n */\r\nclass AppService extends BaseManagedIdentitySource {\r\n    constructor(logger, nodeStorage, networkClient, cryptoProvider, disableInternalRetries, identityEndpoint, identityHeader) {\r\n        super(logger, nodeStorage, networkClient, cryptoProvider, disableInternalRetries);\r\n        this.identityEndpoint = identityEndpoint;\r\n        this.identityHeader = identityHeader;\r\n    }\r\n    static getEnvironmentVariables() {\r\n        const identityEndpoint = process.env[ManagedIdentityEnvironmentVariableNames.IDENTITY_ENDPOINT];\r\n        const identityHeader = process.env[ManagedIdentityEnvironmentVariableNames.IDENTITY_HEADER];\r\n        return [identityEndpoint, identityHeader];\r\n    }\r\n    static tryCreate(logger, nodeStorage, networkClient, cryptoProvider, disableInternalRetries) {\r\n        const [identityEndpoint, identityHeader] = AppService.getEnvironmentVariables();\r\n        // if either of the identity endpoint or identity header variables are undefined, this MSI provider is unavailable.\r\n        if (!identityEndpoint || !identityHeader) {\r\n            logger.info(`[Managed Identity] ${ManagedIdentitySourceNames.APP_SERVICE} managed identity is unavailable because one or both of the '${ManagedIdentityEnvironmentVariableNames.IDENTITY_HEADER}' and '${ManagedIdentityEnvironmentVariableNames.IDENTITY_ENDPOINT}' environment variables are not defined.`);\r\n            return null;\r\n        }\r\n        const validatedIdentityEndpoint = AppService.getValidatedEnvVariableUrlString(ManagedIdentityEnvironmentVariableNames.IDENTITY_ENDPOINT, identityEndpoint, ManagedIdentitySourceNames.APP_SERVICE, logger);\r\n        logger.info(`[Managed Identity] Environment variables validation passed for ${ManagedIdentitySourceNames.APP_SERVICE} managed identity. Endpoint URI: ${validatedIdentityEndpoint}. Creating ${ManagedIdentitySourceNames.APP_SERVICE} managed identity.`);\r\n        return new AppService(logger, nodeStorage, networkClient, cryptoProvider, disableInternalRetries, identityEndpoint, identityHeader);\r\n    }\r\n    createRequest(resource, managedIdentityId) {\r\n        const request = new ManagedIdentityRequestParameters(HttpMethod.GET, this.identityEndpoint);\r\n        request.headers[ManagedIdentityHeaders.APP_SERVICE_SECRET_HEADER_NAME] =\r\n            this.identityHeader;\r\n        request.queryParameters[ManagedIdentityQueryParameters.API_VERSION] =\r\n            APP_SERVICE_MSI_API_VERSION;\r\n        request.queryParameters[ManagedIdentityQueryParameters.RESOURCE] =\r\n            resource;\r\n        if (managedIdentityId.idType !== ManagedIdentityIdType.SYSTEM_ASSIGNED) {\r\n            request.queryParameters[this.getManagedIdentityUserAssignedIdQueryParameterKey(managedIdentityId.idType)] = managedIdentityId.id;\r\n        }\r\n        // bodyParameters calculated in BaseManagedIdentity.acquireTokenWithManagedIdentity\r\n        return request;\r\n    }\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst ARC_API_VERSION = \"2019-11-01\";\r\nconst DEFAULT_AZURE_ARC_IDENTITY_ENDPOINT = \"http://127.0.0.1:40342/metadata/identity/oauth2/token\";\r\nconst HIMDS_EXECUTABLE_HELPER_STRING = \"N/A: himds executable exists\";\r\nconst SUPPORTED_AZURE_ARC_PLATFORMS = {\r\n    win32: `${process.env[\"ProgramData\"]}\\\\AzureConnectedMachineAgent\\\\Tokens\\\\`,\r\n    linux: \"/var/opt/azcmagent/tokens/\",\r\n};\r\nconst AZURE_ARC_FILE_DETECTION = {\r\n    win32: `${process.env[\"ProgramFiles\"]}\\\\AzureConnectedMachineAgent\\\\himds.exe`,\r\n    linux: \"/opt/azcmagent/bin/himds\",\r\n};\r\n/**\r\n * Original source of code: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/src/AzureArcManagedIdentitySource.cs\r\n */\r\nclass AzureArc extends BaseManagedIdentitySource {\r\n    constructor(logger, nodeStorage, networkClient, cryptoProvider, disableInternalRetries, identityEndpoint) {\r\n        super(logger, nodeStorage, networkClient, cryptoProvider, disableInternalRetries);\r\n        this.identityEndpoint = identityEndpoint;\r\n    }\r\n    static getEnvironmentVariables() {\r\n        let identityEndpoint = process.env[ManagedIdentityEnvironmentVariableNames.IDENTITY_ENDPOINT];\r\n        let imdsEndpoint = process.env[ManagedIdentityEnvironmentVariableNames.IMDS_ENDPOINT];\r\n        // if either of the identity or imds endpoints are undefined, check if the himds executable exists\r\n        if (!identityEndpoint || !imdsEndpoint) {\r\n            // get the expected Windows or Linux file path of the himds executable\r\n            const fileDetectionPath = AZURE_ARC_FILE_DETECTION[process.platform];\r\n            try {\r\n                /*\r\n                 * check if the himds executable exists and its permissions allow it to be read\r\n                 * returns undefined if true, throws an error otherwise\r\n                 */\r\n                fs.accessSync(fileDetectionPath, fs.constants.F_OK | fs.constants.R_OK);\r\n                identityEndpoint = DEFAULT_AZURE_ARC_IDENTITY_ENDPOINT;\r\n                imdsEndpoint = HIMDS_EXECUTABLE_HELPER_STRING;\r\n            }\r\n            catch (err) {\r\n                /*\r\n                 * do nothing\r\n                 * accessSync returns undefined on success, and throws an error on failure\r\n                 */\r\n            }\r\n        }\r\n        return [identityEndpoint, imdsEndpoint];\r\n    }\r\n    static tryCreate(logger, nodeStorage, networkClient, cryptoProvider, disableInternalRetries, managedIdentityId) {\r\n        const [identityEndpoint, imdsEndpoint] = AzureArc.getEnvironmentVariables();\r\n        // if either of the identity or imds endpoints are undefined (even after himds file detection)\r\n        if (!identityEndpoint || !imdsEndpoint) {\r\n            logger.info(`[Managed Identity] ${ManagedIdentitySourceNames.AZURE_ARC} managed identity is unavailable through environment variables because one or both of '${ManagedIdentityEnvironmentVariableNames.IDENTITY_ENDPOINT}' and '${ManagedIdentityEnvironmentVariableNames.IMDS_ENDPOINT}' are not defined. ${ManagedIdentitySourceNames.AZURE_ARC} managed identity is also unavailable through file detection.`);\r\n            return null;\r\n        }\r\n        // check if the imds endpoint is set to the default for file detection\r\n        if (imdsEndpoint === HIMDS_EXECUTABLE_HELPER_STRING) {\r\n            logger.info(`[Managed Identity] ${ManagedIdentitySourceNames.AZURE_ARC} managed identity is available through file detection. Defaulting to known ${ManagedIdentitySourceNames.AZURE_ARC} endpoint: ${DEFAULT_AZURE_ARC_IDENTITY_ENDPOINT}. Creating ${ManagedIdentitySourceNames.AZURE_ARC} managed identity.`);\r\n        }\r\n        else {\r\n            // otherwise, both the identity and imds endpoints are defined without file detection; validate them\r\n            const validatedIdentityEndpoint = AzureArc.getValidatedEnvVariableUrlString(ManagedIdentityEnvironmentVariableNames.IDENTITY_ENDPOINT, identityEndpoint, ManagedIdentitySourceNames.AZURE_ARC, logger);\r\n            // remove trailing slash\r\n            validatedIdentityEndpoint.endsWith(\"/\")\r\n                ? validatedIdentityEndpoint.slice(0, -1)\r\n                : validatedIdentityEndpoint;\r\n            AzureArc.getValidatedEnvVariableUrlString(ManagedIdentityEnvironmentVariableNames.IMDS_ENDPOINT, imdsEndpoint, ManagedIdentitySourceNames.AZURE_ARC, logger);\r\n            logger.info(`[Managed Identity] Environment variables validation passed for ${ManagedIdentitySourceNames.AZURE_ARC} managed identity. Endpoint URI: ${validatedIdentityEndpoint}. Creating ${ManagedIdentitySourceNames.AZURE_ARC} managed identity.`);\r\n        }\r\n        if (managedIdentityId.idType !== ManagedIdentityIdType.SYSTEM_ASSIGNED) {\r\n            throw createManagedIdentityError(unableToCreateAzureArc);\r\n        }\r\n        return new AzureArc(logger, nodeStorage, networkClient, cryptoProvider, disableInternalRetries, identityEndpoint);\r\n    }\r\n    createRequest(resource) {\r\n        const request = new ManagedIdentityRequestParameters(HttpMethod.GET, this.identityEndpoint.replace(\"localhost\", \"127.0.0.1\"));\r\n        request.headers[ManagedIdentityHeaders.METADATA_HEADER_NAME] = \"true\";\r\n        request.queryParameters[ManagedIdentityQueryParameters.API_VERSION] =\r\n            ARC_API_VERSION;\r\n        request.queryParameters[ManagedIdentityQueryParameters.RESOURCE] =\r\n            resource;\r\n        // bodyParameters calculated in BaseManagedIdentity.acquireTokenWithManagedIdentity\r\n        return request;\r\n    }\r\n    async getServerTokenResponseAsync(originalResponse, networkClient, networkRequest, networkRequestOptions) {\r\n        let retryResponse;\r\n        if (originalResponse.status === HttpStatus.UNAUTHORIZED) {\r\n            const wwwAuthHeader = originalResponse.headers[\"www-authenticate\"];\r\n            if (!wwwAuthHeader) {\r\n                throw createManagedIdentityError(wwwAuthenticateHeaderMissing);\r\n            }\r\n            if (!wwwAuthHeader.includes(\"Basic realm=\")) {\r\n                throw createManagedIdentityError(wwwAuthenticateHeaderUnsupportedFormat);\r\n            }\r\n            const secretFilePath = wwwAuthHeader.split(\"Basic realm=\")[1];\r\n            // throw an error if the managed identity application is not being run on Windows or Linux\r\n            if (!SUPPORTED_AZURE_ARC_PLATFORMS.hasOwnProperty(process.platform)) {\r\n                throw createManagedIdentityError(platformNotSupported);\r\n            }\r\n            // get the expected Windows or Linux file path\r\n            const expectedSecretFilePath = SUPPORTED_AZURE_ARC_PLATFORMS[process.platform];\r\n            // throw an error if the file in the file path is not a .key file\r\n            const fileName = path.basename(secretFilePath);\r\n            if (!fileName.endsWith(\".key\")) {\r\n                throw createManagedIdentityError(invalidFileExtension);\r\n            }\r\n            /*\r\n             * throw an error if the file path from the www-authenticate header does not match the\r\n             * expected file path for the platform (Windows or Linux) the managed identity application\r\n             * is running on\r\n             */\r\n            if (expectedSecretFilePath + fileName !== secretFilePath) {\r\n                throw createManagedIdentityError(invalidFilePath);\r\n            }\r\n            let secretFileSize;\r\n            // attempt to get the secret file's size, in bytes\r\n            try {\r\n                secretFileSize = await fs.statSync(secretFilePath).size;\r\n            }\r\n            catch (e) {\r\n                throw createManagedIdentityError(unableToReadSecretFile);\r\n            }\r\n            // throw an error if the secret file's size is greater than 4096 bytes\r\n            if (secretFileSize > AZURE_ARC_SECRET_FILE_MAX_SIZE_BYTES) {\r\n                throw createManagedIdentityError(invalidSecret);\r\n            }\r\n            // attempt to read the contents of the secret file\r\n            let secret;\r\n            try {\r\n                secret = fs.readFileSync(secretFilePath, EncodingTypes.UTF8);\r\n            }\r\n            catch (e) {\r\n                throw createManagedIdentityError(unableToReadSecretFile);\r\n            }\r\n            const authHeaderValue = `Basic ${secret}`;\r\n            this.logger.info(`[Managed Identity] Adding authorization header to the request.`);\r\n            networkRequest.headers[ManagedIdentityHeaders.AUTHORIZATION_HEADER_NAME] = authHeaderValue;\r\n            try {\r\n                retryResponse =\r\n                    await networkClient.sendGetRequestAsync(networkRequest.computeUri(), networkRequestOptions);\r\n            }\r\n            catch (error) {\r\n                if (error instanceof AuthError) {\r\n                    throw error;\r\n                }\r\n                else {\r\n                    throw createClientAuthError(networkError);\r\n                }\r\n            }\r\n        }\r\n        return this.getServerTokenResponse(retryResponse || originalResponse);\r\n    }\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Original source of code: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/src/CloudShellManagedIdentitySource.cs\r\n */\r\nclass CloudShell extends BaseManagedIdentitySource {\r\n    constructor(logger, nodeStorage, networkClient, cryptoProvider, disableInternalRetries, msiEndpoint) {\r\n        super(logger, nodeStorage, networkClient, cryptoProvider, disableInternalRetries);\r\n        this.msiEndpoint = msiEndpoint;\r\n    }\r\n    static getEnvironmentVariables() {\r\n        const msiEndpoint = process.env[ManagedIdentityEnvironmentVariableNames.MSI_ENDPOINT];\r\n        return [msiEndpoint];\r\n    }\r\n    static tryCreate(logger, nodeStorage, networkClient, cryptoProvider, disableInternalRetries, managedIdentityId) {\r\n        const [msiEndpoint] = CloudShell.getEnvironmentVariables();\r\n        // if the msi endpoint environment variable is undefined, this MSI provider is unavailable.\r\n        if (!msiEndpoint) {\r\n            logger.info(`[Managed Identity] ${ManagedIdentitySourceNames.CLOUD_SHELL} managed identity is unavailable because the '${ManagedIdentityEnvironmentVariableNames.MSI_ENDPOINT} environment variable is not defined.`);\r\n            return null;\r\n        }\r\n        const validatedMsiEndpoint = CloudShell.getValidatedEnvVariableUrlString(ManagedIdentityEnvironmentVariableNames.MSI_ENDPOINT, msiEndpoint, ManagedIdentitySourceNames.CLOUD_SHELL, logger);\r\n        logger.info(`[Managed Identity] Environment variable validation passed for ${ManagedIdentitySourceNames.CLOUD_SHELL} managed identity. Endpoint URI: ${validatedMsiEndpoint}. Creating ${ManagedIdentitySourceNames.CLOUD_SHELL} managed identity.`);\r\n        if (managedIdentityId.idType !== ManagedIdentityIdType.SYSTEM_ASSIGNED) {\r\n            throw createManagedIdentityError(unableToCreateCloudShell);\r\n        }\r\n        return new CloudShell(logger, nodeStorage, networkClient, cryptoProvider, disableInternalRetries, msiEndpoint);\r\n    }\r\n    createRequest(resource) {\r\n        const request = new ManagedIdentityRequestParameters(HttpMethod.POST, this.msiEndpoint);\r\n        request.headers[ManagedIdentityHeaders.METADATA_HEADER_NAME] = \"true\";\r\n        request.bodyParameters[ManagedIdentityQueryParameters.RESOURCE] =\r\n            resource;\r\n        return request;\r\n    }\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nclass ExponentialRetryStrategy {\r\n    constructor(minExponentialBackoff, maxExponentialBackoff, exponentialDeltaBackoff) {\r\n        this.minExponentialBackoff = minExponentialBackoff;\r\n        this.maxExponentialBackoff = maxExponentialBackoff;\r\n        this.exponentialDeltaBackoff = exponentialDeltaBackoff;\r\n    }\r\n    /**\r\n     * Calculates the exponential delay based on the current retry attempt.\r\n     *\r\n     * @param {number} currentRetry - The current retry attempt number.\r\n     * @returns {number} - The calculated exponential delay in milliseconds.\r\n     *\r\n     * The delay is calculated using the formula:\r\n     * - If `currentRetry` is 0, it returns the minimum backoff time.\r\n     * - Otherwise, it calculates the delay as the minimum of:\r\n     *   - `(2^(currentRetry - 1)) * deltaBackoff`\r\n     *   - `maxBackoff`\r\n     *\r\n     * This ensures that the delay increases exponentially with each retry attempt,\r\n     * but does not exceed the maximum backoff time.\r\n     */\r\n    calculateDelay(currentRetry) {\r\n        // Attempt 1\r\n        if (currentRetry === 0) {\r\n            return this.minExponentialBackoff;\r\n        }\r\n        // Attempt 2+\r\n        const exponentialDelay = Math.min(Math.pow(2, currentRetry - 1) * this.exponentialDeltaBackoff, this.maxExponentialBackoff);\r\n        return exponentialDelay;\r\n    }\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst HTTP_STATUS_400_CODES_FOR_EXPONENTIAL_STRATEGY = [\r\n    msalCommon.HttpStatus.NOT_FOUND,\r\n    msalCommon.HttpStatus.REQUEST_TIMEOUT,\r\n    msalCommon.HttpStatus.GONE,\r\n    msalCommon.HttpStatus.TOO_MANY_REQUESTS,\r\n];\r\nconst EXPONENTIAL_STRATEGY_NUM_RETRIES = 3;\r\nconst LINEAR_STRATEGY_NUM_RETRIES = 7;\r\nconst MIN_EXPONENTIAL_BACKOFF_MS = 1000;\r\nconst MAX_EXPONENTIAL_BACKOFF_MS = 4000;\r\nconst EXPONENTIAL_DELTA_BACKOFF_MS = 2000;\r\nconst HTTP_STATUS_GONE_RETRY_AFTER_MS = 10 * 1000; // 10 seconds\r\nclass ImdsRetryPolicy {\r\n    constructor() {\r\n        this.exponentialRetryStrategy = new ExponentialRetryStrategy(ImdsRetryPolicy.MIN_EXPONENTIAL_BACKOFF_MS, ImdsRetryPolicy.MAX_EXPONENTIAL_BACKOFF_MS, ImdsRetryPolicy.EXPONENTIAL_DELTA_BACKOFF_MS);\r\n    }\r\n    /*\r\n     * these are defined here as static variables despite being defined as constants outside of the\r\n     * class because they need to be overridden in the unit tests so that the unit tests run faster\r\n     */\r\n    static get MIN_EXPONENTIAL_BACKOFF_MS() {\r\n        return MIN_EXPONENTIAL_BACKOFF_MS;\r\n    }\r\n    static get MAX_EXPONENTIAL_BACKOFF_MS() {\r\n        return MAX_EXPONENTIAL_BACKOFF_MS;\r\n    }\r\n    static get EXPONENTIAL_DELTA_BACKOFF_MS() {\r\n        return EXPONENTIAL_DELTA_BACKOFF_MS;\r\n    }\r\n    static get HTTP_STATUS_GONE_RETRY_AFTER_MS() {\r\n        return HTTP_STATUS_GONE_RETRY_AFTER_MS;\r\n    }\r\n    set isNewRequest(value) {\r\n        this._isNewRequest = value;\r\n    }\r\n    /**\r\n     * Pauses execution for a calculated delay before retrying a request.\r\n     *\r\n     * @param httpStatusCode - The HTTP status code of the response.\r\n     * @param currentRetry - The current retry attempt number.\r\n     * @param retryAfterHeader - The value of the \"retry-after\" header from the response.\r\n     * @returns A promise that resolves to a boolean indicating whether a retry should be attempted.\r\n     */\r\n    async pauseForRetry(httpStatusCode, currentRetry, logger) {\r\n        if (this._isNewRequest) {\r\n            this._isNewRequest = false;\r\n            // calculate the maxRetries based on the status code, once per request\r\n            this.maxRetries =\r\n                httpStatusCode === msalCommon.HttpStatus.GONE\r\n                    ? LINEAR_STRATEGY_NUM_RETRIES\r\n                    : EXPONENTIAL_STRATEGY_NUM_RETRIES;\r\n        }\r\n        /**\r\n         * (status code is one of the retriable 400 status code\r\n         * or\r\n         * status code is >= 500 and <= 599)\r\n         * and\r\n         * current count of retries is less than the max number of retries\r\n         */\r\n        if ((HTTP_STATUS_400_CODES_FOR_EXPONENTIAL_STRATEGY.includes(httpStatusCode) ||\r\n            (httpStatusCode >= msalCommon.HttpStatus.SERVER_ERROR_RANGE_START &&\r\n                httpStatusCode <= msalCommon.HttpStatus.SERVER_ERROR_RANGE_END &&\r\n                currentRetry < this.maxRetries)) &&\r\n            currentRetry < this.maxRetries) {\r\n            const retryAfterDelay = httpStatusCode === msalCommon.HttpStatus.GONE\r\n                ? ImdsRetryPolicy.HTTP_STATUS_GONE_RETRY_AFTER_MS\r\n                : this.exponentialRetryStrategy.calculateDelay(currentRetry);\r\n            logger.verbose(`Retrying request in ${retryAfterDelay}ms (retry attempt: ${currentRetry + 1})`);\r\n            // pause execution for the calculated delay\r\n            await new Promise((resolve) => {\r\n                return setTimeout(resolve, retryAfterDelay);\r\n            });\r\n            return true;\r\n        }\r\n        // if the status code is not retriable or max retries have been reached, do not retry\r\n        return false;\r\n    }\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n// Documentation for IMDS is available at https://docs.microsoft.com/azure/active-directory/managed-identities-azure-resources/how-to-use-vm-token#get-a-token-using-http\r\nconst IMDS_TOKEN_PATH = \"/metadata/identity/oauth2/token\";\r\nconst DEFAULT_IMDS_ENDPOINT = `http://169.254.169.254${IMDS_TOKEN_PATH}`;\r\nconst IMDS_API_VERSION = \"2018-02-01\";\r\n/**\r\n * Original source of code: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/src/ImdsManagedIdentitySource.cs\r\n */\r\nclass Imds extends BaseManagedIdentitySource {\r\n    /**\r\n     * Constructs an Imds instance.\r\n     * @param logger - Logger instance for logging.\r\n     * @param nodeStorage - NodeStorage instance for caching.\r\n     * @param networkClient - Network client for HTTP requests.\r\n     * @param cryptoProvider - CryptoProvider for cryptographic operations.\r\n     * @param disableInternalRetries - Whether to disable internal retry logic.\r\n     * @param identityEndpoint - The IMDS endpoint to use.\r\n     */\r\n    constructor(logger, nodeStorage, networkClient, cryptoProvider, disableInternalRetries, identityEndpoint) {\r\n        super(logger, nodeStorage, networkClient, cryptoProvider, disableInternalRetries);\r\n        this.identityEndpoint = identityEndpoint;\r\n    }\r\n    /**\r\n     * Attempts to create an Imds instance by determining the correct endpoint.\r\n     * If the AZURE_POD_IDENTITY_AUTHORITY_HOST environment variable is set, it uses that as the endpoint.\r\n     * Otherwise, it falls back to the default IMDS endpoint.\r\n     *\r\n     * @param logger - Logger instance for logging.\r\n     * @param nodeStorage - NodeStorage instance for caching.\r\n     * @param networkClient - Network client for HTTP requests.\r\n     * @param cryptoProvider - CryptoProvider for cryptographic operations.\r\n     * @param disableInternalRetries - Whether to disable internal retry logic.\r\n     * @returns An instance of Imds configured with the appropriate endpoint.\r\n     */\r\n    static tryCreate(logger, nodeStorage, networkClient, cryptoProvider, disableInternalRetries) {\r\n        let validatedIdentityEndpoint;\r\n        if (process.env[ManagedIdentityEnvironmentVariableNames\r\n            .AZURE_POD_IDENTITY_AUTHORITY_HOST]) {\r\n            logger.info(`[Managed Identity] Environment variable ${ManagedIdentityEnvironmentVariableNames.AZURE_POD_IDENTITY_AUTHORITY_HOST} for ${ManagedIdentitySourceNames.IMDS} returned endpoint: ${process.env[ManagedIdentityEnvironmentVariableNames\r\n                .AZURE_POD_IDENTITY_AUTHORITY_HOST]}`);\r\n            validatedIdentityEndpoint = Imds.getValidatedEnvVariableUrlString(ManagedIdentityEnvironmentVariableNames.AZURE_POD_IDENTITY_AUTHORITY_HOST, `${process.env[ManagedIdentityEnvironmentVariableNames\r\n                .AZURE_POD_IDENTITY_AUTHORITY_HOST]}${IMDS_TOKEN_PATH}`, ManagedIdentitySourceNames.IMDS, logger);\r\n        }\r\n        else {\r\n            logger.info(`[Managed Identity] Unable to find ${ManagedIdentityEnvironmentVariableNames.AZURE_POD_IDENTITY_AUTHORITY_HOST} environment variable for ${ManagedIdentitySourceNames.IMDS}, using the default endpoint.`);\r\n            validatedIdentityEndpoint = DEFAULT_IMDS_ENDPOINT;\r\n        }\r\n        return new Imds(logger, nodeStorage, networkClient, cryptoProvider, disableInternalRetries, validatedIdentityEndpoint);\r\n    }\r\n    /**\r\n     * Creates a ManagedIdentityRequestParameters object for acquiring a token from IMDS.\r\n     * Sets the required headers and query parameters for the IMDS token request.\r\n     *\r\n     * @param resource - The resource URI for which the token is requested.\r\n     * @param managedIdentityId - The managed identity ID (system-assigned or user-assigned).\r\n     * @returns A ManagedIdentityRequestParameters object configured for IMDS.\r\n     */\r\n    createRequest(resource, managedIdentityId) {\r\n        const request = new ManagedIdentityRequestParameters(HttpMethod.GET, this.identityEndpoint);\r\n        request.headers[ManagedIdentityHeaders.METADATA_HEADER_NAME] = \"true\";\r\n        request.queryParameters[ManagedIdentityQueryParameters.API_VERSION] =\r\n            IMDS_API_VERSION;\r\n        request.queryParameters[ManagedIdentityQueryParameters.RESOURCE] =\r\n            resource;\r\n        if (managedIdentityId.idType !== ManagedIdentityIdType.SYSTEM_ASSIGNED) {\r\n            request.queryParameters[this.getManagedIdentityUserAssignedIdQueryParameterKey(managedIdentityId.idType, true // indicates source is IMDS\r\n            )] = managedIdentityId.id;\r\n        }\r\n        // The bodyParameters are calculated in BaseManagedIdentity.acquireTokenWithManagedIdentity.\r\n        request.retryPolicy = new ImdsRetryPolicy();\r\n        return request;\r\n    }\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst SERVICE_FABRIC_MSI_API_VERSION = \"2019-07-01-preview\";\r\n/**\r\n * Original source of code: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/src/ServiceFabricManagedIdentitySource.cs\r\n */\r\nclass ServiceFabric extends BaseManagedIdentitySource {\r\n    /**\r\n     * Constructs a new ServiceFabric managed identity source.\r\n     * @param logger Logger instance for logging\r\n     * @param nodeStorage NodeStorage instance for caching\r\n     * @param networkClient Network client for HTTP requests\r\n     * @param cryptoProvider Crypto provider for cryptographic operations\r\n     * @param disableInternalRetries Whether to disable internal retry logic\r\n     * @param identityEndpoint The Service Fabric managed identity endpoint\r\n     * @param identityHeader The Service Fabric managed identity secret header\r\n     */\r\n    constructor(logger, nodeStorage, networkClient, cryptoProvider, disableInternalRetries, identityEndpoint, identityHeader) {\r\n        super(logger, nodeStorage, networkClient, cryptoProvider, disableInternalRetries);\r\n        this.identityEndpoint = identityEndpoint;\r\n        this.identityHeader = identityHeader;\r\n    }\r\n    /**\r\n     * Retrieves the environment variables required for Service Fabric managed identity.\r\n     * @returns An array containing the identity endpoint, identity header, and identity server thumbprint.\r\n     */\r\n    static getEnvironmentVariables() {\r\n        const identityEndpoint = process.env[ManagedIdentityEnvironmentVariableNames.IDENTITY_ENDPOINT];\r\n        const identityHeader = process.env[ManagedIdentityEnvironmentVariableNames.IDENTITY_HEADER];\r\n        const identityServerThumbprint = process.env[ManagedIdentityEnvironmentVariableNames\r\n            .IDENTITY_SERVER_THUMBPRINT];\r\n        return [identityEndpoint, identityHeader, identityServerThumbprint];\r\n    }\r\n    /**\r\n     * Attempts to create a ServiceFabric managed identity source if all required environment variables are present.\r\n     * @param logger Logger instance for logging\r\n     * @param nodeStorage NodeStorage instance for caching\r\n     * @param networkClient Network client for HTTP requests\r\n     * @param cryptoProvider Crypto provider for cryptographic operations\r\n     * @param disableInternalRetries Whether to disable internal retry logic\r\n     * @param managedIdentityId Managed identity identifier\r\n     * @returns A ServiceFabric instance if environment variables are set, otherwise null\r\n     */\r\n    static tryCreate(logger, nodeStorage, networkClient, cryptoProvider, disableInternalRetries, managedIdentityId) {\r\n        const [identityEndpoint, identityHeader, identityServerThumbprint] = ServiceFabric.getEnvironmentVariables();\r\n        if (!identityEndpoint || !identityHeader || !identityServerThumbprint) {\r\n            logger.info(`[Managed Identity] ${ManagedIdentitySourceNames.SERVICE_FABRIC} managed identity is unavailable because one or all of the '${ManagedIdentityEnvironmentVariableNames.IDENTITY_HEADER}', '${ManagedIdentityEnvironmentVariableNames.IDENTITY_ENDPOINT}' or '${ManagedIdentityEnvironmentVariableNames.IDENTITY_SERVER_THUMBPRINT}' environment variables are not defined.`);\r\n            return null;\r\n        }\r\n        const validatedIdentityEndpoint = ServiceFabric.getValidatedEnvVariableUrlString(ManagedIdentityEnvironmentVariableNames.IDENTITY_ENDPOINT, identityEndpoint, ManagedIdentitySourceNames.SERVICE_FABRIC, logger);\r\n        logger.info(`[Managed Identity] Environment variables validation passed for ${ManagedIdentitySourceNames.SERVICE_FABRIC} managed identity. Endpoint URI: ${validatedIdentityEndpoint}. Creating ${ManagedIdentitySourceNames.SERVICE_FABRIC} managed identity.`);\r\n        if (managedIdentityId.idType !== ManagedIdentityIdType.SYSTEM_ASSIGNED) {\r\n            logger.warning(`[Managed Identity] ${ManagedIdentitySourceNames.SERVICE_FABRIC} user assigned managed identity is configured in the cluster, not during runtime. See also: https://learn.microsoft.com/en-us/azure/service-fabric/configure-existing-cluster-enable-managed-identity-token-service.`);\r\n        }\r\n        return new ServiceFabric(logger, nodeStorage, networkClient, cryptoProvider, disableInternalRetries, identityEndpoint, identityHeader);\r\n    }\r\n    /**\r\n     * Creates the request parameters for acquiring a token from the Service Fabric cluster.\r\n     * @param resource - The resource URI for which the token is requested.\r\n     * @param managedIdentityId - The managed identity ID (system-assigned or user-assigned).\r\n     * @returns A ManagedIdentityRequestParameters object configured for Service Fabric.\r\n     */\r\n    createRequest(resource, managedIdentityId) {\r\n        const request = new ManagedIdentityRequestParameters(HttpMethod.GET, this.identityEndpoint);\r\n        request.headers[ManagedIdentityHeaders.ML_AND_SF_SECRET_HEADER_NAME] =\r\n            this.identityHeader;\r\n        request.queryParameters[ManagedIdentityQueryParameters.API_VERSION] =\r\n            SERVICE_FABRIC_MSI_API_VERSION;\r\n        request.queryParameters[ManagedIdentityQueryParameters.RESOURCE] =\r\n            resource;\r\n        if (managedIdentityId.idType !== ManagedIdentityIdType.SYSTEM_ASSIGNED) {\r\n            request.queryParameters[this.getManagedIdentityUserAssignedIdQueryParameterKey(managedIdentityId.idType)] = managedIdentityId.id;\r\n        }\r\n        // bodyParameters calculated in BaseManagedIdentity.acquireTokenWithManagedIdentity\r\n        return request;\r\n    }\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst MACHINE_LEARNING_MSI_API_VERSION = \"2017-09-01\";\r\nconst MANAGED_IDENTITY_MACHINE_LEARNING_UNSUPPORTED_ID_TYPE_ERROR = `Only client id is supported for user-assigned managed identity in ${ManagedIdentitySourceNames.MACHINE_LEARNING}.`; // referenced in unit test\r\nclass MachineLearning extends BaseManagedIdentitySource {\r\n    constructor(logger, nodeStorage, networkClient, cryptoProvider, disableInternalRetries, msiEndpoint, secret) {\r\n        super(logger, nodeStorage, networkClient, cryptoProvider, disableInternalRetries);\r\n        this.msiEndpoint = msiEndpoint;\r\n        this.secret = secret;\r\n    }\r\n    static getEnvironmentVariables() {\r\n        const msiEndpoint = process.env[ManagedIdentityEnvironmentVariableNames.MSI_ENDPOINT];\r\n        const secret = process.env[ManagedIdentityEnvironmentVariableNames.MSI_SECRET];\r\n        return [msiEndpoint, secret];\r\n    }\r\n    static tryCreate(logger, nodeStorage, networkClient, cryptoProvider, disableInternalRetries) {\r\n        const [msiEndpoint, secret] = MachineLearning.getEnvironmentVariables();\r\n        // if either of the MSI endpoint or MSI secret variables are undefined, this MSI provider is unavailable.\r\n        if (!msiEndpoint || !secret) {\r\n            logger.info(`[Managed Identity] ${ManagedIdentitySourceNames.MACHINE_LEARNING} managed identity is unavailable because one or both of the '${ManagedIdentityEnvironmentVariableNames.MSI_ENDPOINT}' and '${ManagedIdentityEnvironmentVariableNames.MSI_SECRET}' environment variables are not defined.`);\r\n            return null;\r\n        }\r\n        const validatedMsiEndpoint = MachineLearning.getValidatedEnvVariableUrlString(ManagedIdentityEnvironmentVariableNames.MSI_ENDPOINT, msiEndpoint, ManagedIdentitySourceNames.MACHINE_LEARNING, logger);\r\n        logger.info(`[Managed Identity] Environment variables validation passed for ${ManagedIdentitySourceNames.MACHINE_LEARNING} managed identity. Endpoint URI: ${validatedMsiEndpoint}. Creating ${ManagedIdentitySourceNames.MACHINE_LEARNING} managed identity.`);\r\n        return new MachineLearning(logger, nodeStorage, networkClient, cryptoProvider, disableInternalRetries, msiEndpoint, secret);\r\n    }\r\n    createRequest(resource, managedIdentityId) {\r\n        const request = new ManagedIdentityRequestParameters(HttpMethod.GET, this.msiEndpoint);\r\n        request.headers[ManagedIdentityHeaders.METADATA_HEADER_NAME] = \"true\";\r\n        request.headers[ManagedIdentityHeaders.ML_AND_SF_SECRET_HEADER_NAME] =\r\n            this.secret;\r\n        request.queryParameters[ManagedIdentityQueryParameters.API_VERSION] =\r\n            MACHINE_LEARNING_MSI_API_VERSION;\r\n        request.queryParameters[ManagedIdentityQueryParameters.RESOURCE] =\r\n            resource;\r\n        if (managedIdentityId.idType === ManagedIdentityIdType.SYSTEM_ASSIGNED) {\r\n            request.queryParameters[ManagedIdentityUserAssignedIdQueryParameterNames.MANAGED_IDENTITY_CLIENT_ID_2017] = process.env[ManagedIdentityEnvironmentVariableNames\r\n                .DEFAULT_IDENTITY_CLIENT_ID]; // this environment variable is always set in an Azure Machine Learning source\r\n        }\r\n        else if (managedIdentityId.idType ===\r\n            ManagedIdentityIdType.USER_ASSIGNED_CLIENT_ID) {\r\n            request.queryParameters[this.getManagedIdentityUserAssignedIdQueryParameterKey(managedIdentityId.idType, false, // isIMDS\r\n            true // uses2017API\r\n            )] = managedIdentityId.id;\r\n        }\r\n        else {\r\n            throw new Error(MANAGED_IDENTITY_MACHINE_LEARNING_UNSUPPORTED_ID_TYPE_ERROR);\r\n        }\r\n        // bodyParameters calculated in BaseManagedIdentity.acquireTokenWithManagedIdentity\r\n        return request;\r\n    }\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/*\r\n * Class to initialize a managed identity and identify the service.\r\n * Original source of code: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/src/ManagedIdentityClient.cs\r\n */\r\nclass ManagedIdentityClient {\r\n    constructor(logger, nodeStorage, networkClient, cryptoProvider, disableInternalRetries) {\r\n        this.logger = logger;\r\n        this.nodeStorage = nodeStorage;\r\n        this.networkClient = networkClient;\r\n        this.cryptoProvider = cryptoProvider;\r\n        this.disableInternalRetries = disableInternalRetries;\r\n    }\r\n    async sendManagedIdentityTokenRequest(managedIdentityRequest, managedIdentityId, fakeAuthority, refreshAccessToken) {\r\n        if (!ManagedIdentityClient.identitySource) {\r\n            ManagedIdentityClient.identitySource =\r\n                this.selectManagedIdentitySource(this.logger, this.nodeStorage, this.networkClient, this.cryptoProvider, this.disableInternalRetries, managedIdentityId);\r\n        }\r\n        return ManagedIdentityClient.identitySource.acquireTokenWithManagedIdentity(managedIdentityRequest, managedIdentityId, fakeAuthority, refreshAccessToken);\r\n    }\r\n    allEnvironmentVariablesAreDefined(environmentVariables) {\r\n        return Object.values(environmentVariables).every((environmentVariable) => {\r\n            return environmentVariable !== undefined;\r\n        });\r\n    }\r\n    /**\r\n     * Determine the Managed Identity Source based on available environment variables. This API is consumed by ManagedIdentityApplication's getManagedIdentitySource.\r\n     * @returns ManagedIdentitySourceNames - The Managed Identity source's name\r\n     */\r\n    getManagedIdentitySource() {\r\n        ManagedIdentityClient.sourceName =\r\n            this.allEnvironmentVariablesAreDefined(ServiceFabric.getEnvironmentVariables())\r\n                ? ManagedIdentitySourceNames.SERVICE_FABRIC\r\n                : this.allEnvironmentVariablesAreDefined(AppService.getEnvironmentVariables())\r\n                    ? ManagedIdentitySourceNames.APP_SERVICE\r\n                    : this.allEnvironmentVariablesAreDefined(MachineLearning.getEnvironmentVariables())\r\n                        ? ManagedIdentitySourceNames.MACHINE_LEARNING\r\n                        : this.allEnvironmentVariablesAreDefined(CloudShell.getEnvironmentVariables())\r\n                            ? ManagedIdentitySourceNames.CLOUD_SHELL\r\n                            : this.allEnvironmentVariablesAreDefined(AzureArc.getEnvironmentVariables())\r\n                                ? ManagedIdentitySourceNames.AZURE_ARC\r\n                                : ManagedIdentitySourceNames.DEFAULT_TO_IMDS;\r\n        return ManagedIdentityClient.sourceName;\r\n    }\r\n    /**\r\n     * Tries to create a managed identity source for all sources\r\n     * @returns the managed identity Source\r\n     */\r\n    selectManagedIdentitySource(logger, nodeStorage, networkClient, cryptoProvider, disableInternalRetries, managedIdentityId) {\r\n        const source = ServiceFabric.tryCreate(logger, nodeStorage, networkClient, cryptoProvider, disableInternalRetries, managedIdentityId) ||\r\n            AppService.tryCreate(logger, nodeStorage, networkClient, cryptoProvider, disableInternalRetries) ||\r\n            MachineLearning.tryCreate(logger, nodeStorage, networkClient, cryptoProvider, disableInternalRetries) ||\r\n            CloudShell.tryCreate(logger, nodeStorage, networkClient, cryptoProvider, disableInternalRetries, managedIdentityId) ||\r\n            AzureArc.tryCreate(logger, nodeStorage, networkClient, cryptoProvider, disableInternalRetries, managedIdentityId) ||\r\n            Imds.tryCreate(logger, nodeStorage, networkClient, cryptoProvider, disableInternalRetries);\r\n        if (!source) {\r\n            throw createManagedIdentityError(unableToCreateSource);\r\n        }\r\n        return source;\r\n    }\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst SOURCES_THAT_SUPPORT_TOKEN_REVOCATION = [ManagedIdentitySourceNames.SERVICE_FABRIC];\r\n/**\r\n * Class to initialize a managed identity and identify the service\r\n * @public\r\n */\r\nclass ManagedIdentityApplication {\r\n    constructor(configuration) {\r\n        // undefined config means the managed identity is system-assigned\r\n        this.config = buildManagedIdentityConfiguration(configuration || {});\r\n        this.logger = new Logger(this.config.system.loggerOptions, name, version);\r\n        const fakeStatusAuthorityOptions = {\r\n            canonicalAuthority: Constants$1.DEFAULT_AUTHORITY,\r\n        };\r\n        if (!ManagedIdentityApplication.nodeStorage) {\r\n            ManagedIdentityApplication.nodeStorage = new NodeStorage(this.logger, this.config.managedIdentityId.id, DEFAULT_CRYPTO_IMPLEMENTATION, fakeStatusAuthorityOptions);\r\n        }\r\n        this.networkClient = this.config.system.networkClient;\r\n        this.cryptoProvider = new CryptoProvider();\r\n        const fakeAuthorityOptions = {\r\n            protocolMode: ProtocolMode.AAD,\r\n            knownAuthorities: [DEFAULT_AUTHORITY_FOR_MANAGED_IDENTITY],\r\n            cloudDiscoveryMetadata: \"\",\r\n            authorityMetadata: \"\",\r\n        };\r\n        this.fakeAuthority = new Authority(DEFAULT_AUTHORITY_FOR_MANAGED_IDENTITY, this.networkClient, ManagedIdentityApplication.nodeStorage, fakeAuthorityOptions, this.logger, this.cryptoProvider.createNewGuid(), // correlationID\r\n        undefined, true);\r\n        this.fakeClientCredentialClient = new ClientCredentialClient({\r\n            authOptions: {\r\n                clientId: this.config.managedIdentityId.id,\r\n                authority: this.fakeAuthority,\r\n            },\r\n        });\r\n        this.managedIdentityClient = new ManagedIdentityClient(this.logger, ManagedIdentityApplication.nodeStorage, this.networkClient, this.cryptoProvider, this.config.disableInternalRetries);\r\n        this.hashUtils = new HashUtils();\r\n    }\r\n    /**\r\n     * Acquire an access token from the cache or the managed identity\r\n     * @param managedIdentityRequest - the ManagedIdentityRequestParams object passed in by the developer\r\n     * @returns the access token\r\n     */\r\n    async acquireToken(managedIdentityRequestParams) {\r\n        if (!managedIdentityRequestParams.resource) {\r\n            throw createClientConfigurationError(urlEmptyError);\r\n        }\r\n        const managedIdentityRequest = {\r\n            forceRefresh: managedIdentityRequestParams.forceRefresh,\r\n            resource: managedIdentityRequestParams.resource.replace(\"/.default\", \"\"),\r\n            scopes: [\r\n                managedIdentityRequestParams.resource.replace(\"/.default\", \"\"),\r\n            ],\r\n            authority: this.fakeAuthority.canonicalAuthority,\r\n            correlationId: this.cryptoProvider.createNewGuid(),\r\n            claims: managedIdentityRequestParams.claims,\r\n            clientCapabilities: this.config.clientCapabilities,\r\n        };\r\n        if (managedIdentityRequest.forceRefresh) {\r\n            return this.acquireTokenFromManagedIdentity(managedIdentityRequest, this.config.managedIdentityId, this.fakeAuthority);\r\n        }\r\n        const [cachedAuthenticationResult, lastCacheOutcome] = await this.fakeClientCredentialClient.getCachedAuthenticationResult(managedIdentityRequest, this.config, this.cryptoProvider, this.fakeAuthority, ManagedIdentityApplication.nodeStorage);\r\n        /*\r\n         * Check if claims are present in the managed identity request.\r\n         * If so, the cached token will not be used.\r\n         */\r\n        if (managedIdentityRequest.claims) {\r\n            const sourceName = this.managedIdentityClient.getManagedIdentitySource();\r\n            /*\r\n             * Check if there is a cached token and if the Managed Identity source supports token revocation.\r\n             * If so, hash the cached access token and add it to the request.\r\n             */\r\n            if (cachedAuthenticationResult &&\r\n                SOURCES_THAT_SUPPORT_TOKEN_REVOCATION.includes(sourceName)) {\r\n                const revokedTokenSha256Hash = this.hashUtils\r\n                    .sha256(cachedAuthenticationResult.accessToken)\r\n                    .toString(EncodingTypes.HEX);\r\n                managedIdentityRequest.revokedTokenSha256Hash =\r\n                    revokedTokenSha256Hash;\r\n            }\r\n            return this.acquireTokenFromManagedIdentity(managedIdentityRequest, this.config.managedIdentityId, this.fakeAuthority);\r\n        }\r\n        if (cachedAuthenticationResult) {\r\n            // if the token is not expired but must be refreshed; get a new one in the background\r\n            if (lastCacheOutcome === CacheOutcome.PROACTIVELY_REFRESHED) {\r\n                this.logger.info(\"ClientCredentialClient:getCachedAuthenticationResult - Cached access token's refreshOn property has been exceeded'. It's not expired, but must be refreshed.\");\r\n                // force refresh; will run in the background\r\n                const refreshAccessToken = true;\r\n                await this.acquireTokenFromManagedIdentity(managedIdentityRequest, this.config.managedIdentityId, this.fakeAuthority, refreshAccessToken);\r\n            }\r\n            return cachedAuthenticationResult;\r\n        }\r\n        else {\r\n            return this.acquireTokenFromManagedIdentity(managedIdentityRequest, this.config.managedIdentityId, this.fakeAuthority);\r\n        }\r\n    }\r\n    /**\r\n     * Acquires a token from a managed identity endpoint.\r\n     *\r\n     * @param managedIdentityRequest - The request object containing parameters for the managed identity token request.\r\n     * @param managedIdentityId - The identifier for the managed identity (e.g., client ID or resource ID).\r\n     * @param fakeAuthority - A placeholder authority used for the token request.\r\n     * @param refreshAccessToken - Optional flag indicating whether to force a refresh of the access token.\r\n     * @returns A promise that resolves to an AuthenticationResult containing the acquired token and related information.\r\n     */\r\n    async acquireTokenFromManagedIdentity(managedIdentityRequest, managedIdentityId, fakeAuthority, refreshAccessToken) {\r\n        // make a network call to the managed identity\r\n        return this.managedIdentityClient.sendManagedIdentityTokenRequest(managedIdentityRequest, managedIdentityId, fakeAuthority, refreshAccessToken);\r\n    }\r\n    /**\r\n     * Determine the Managed Identity Source based on available environment variables. This API is consumed by Azure Identity SDK.\r\n     * @returns ManagedIdentitySourceNames - The Managed Identity source's name\r\n     */\r\n    getManagedIdentitySource() {\r\n        return (ManagedIdentityClient.sourceName ||\r\n            this.managedIdentityClient.getManagedIdentitySource());\r\n    }\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Cache plugin that serializes data to the cache and deserializes data from the cache\r\n * @public\r\n */\r\nclass DistributedCachePlugin {\r\n    constructor(client, partitionManager) {\r\n        this.client = client;\r\n        this.partitionManager = partitionManager;\r\n    }\r\n    /**\r\n     * Deserializes the cache before accessing it\r\n     * @param cacheContext - TokenCacheContext\r\n     */\r\n    async beforeCacheAccess(cacheContext) {\r\n        const partitionKey = await this.partitionManager.getKey();\r\n        const cacheData = await this.client.get(partitionKey);\r\n        cacheContext.tokenCache.deserialize(cacheData);\r\n    }\r\n    /**\r\n     * Serializes the cache after accessing it\r\n     * @param cacheContext - TokenCacheContext\r\n     */\r\n    async afterCacheAccess(cacheContext) {\r\n        if (cacheContext.cacheHasChanged) {\r\n            const kvStore = cacheContext.tokenCache.getKVStore();\r\n            const accountEntities = Object.values(kvStore).filter((value) => AccountEntity.isAccountEntity(value));\r\n            let partitionKey;\r\n            if (accountEntities.length > 0) {\r\n                const accountEntity = accountEntities[0];\r\n                partitionKey = await this.partitionManager.extractKey(accountEntity);\r\n            }\r\n            else {\r\n                partitionKey = await this.partitionManager.getKey();\r\n            }\r\n            await this.client.set(partitionKey, cacheContext.tokenCache.serialize());\r\n        }\r\n    }\r\n}\n\nexports.AuthError = AuthError;\nexports.AuthErrorCodes = AuthErrorCodes;\nexports.AuthErrorMessage = AuthErrorMessage;\nexports.AzureCloudInstance = AzureCloudInstance;\nexports.ClientApplication = ClientApplication;\nexports.ClientAssertion = ClientAssertion;\nexports.ClientAuthError = ClientAuthError;\nexports.ClientAuthErrorCodes = ClientAuthErrorCodes;\nexports.ClientAuthErrorMessage = ClientAuthErrorMessage;\nexports.ClientConfigurationError = ClientConfigurationError;\nexports.ClientConfigurationErrorCodes = ClientConfigurationErrorCodes;\nexports.ClientConfigurationErrorMessage = ClientConfigurationErrorMessage;\nexports.ClientCredentialClient = ClientCredentialClient;\nexports.ConfidentialClientApplication = ConfidentialClientApplication;\nexports.CryptoProvider = CryptoProvider;\nexports.DeviceCodeClient = DeviceCodeClient;\nexports.DistributedCachePlugin = DistributedCachePlugin;\nexports.InteractionRequiredAuthError = InteractionRequiredAuthError;\nexports.InteractionRequiredAuthErrorCodes = InteractionRequiredAuthErrorCodes;\nexports.InteractionRequiredAuthErrorMessage = InteractionRequiredAuthErrorMessage;\nexports.Logger = Logger;\nexports.ManagedIdentityApplication = ManagedIdentityApplication;\nexports.ManagedIdentitySourceNames = ManagedIdentitySourceNames;\nexports.OnBehalfOfClient = OnBehalfOfClient;\nexports.PromptValue = PromptValue;\nexports.ProtocolMode = ProtocolMode;\nexports.PublicClientApplication = PublicClientApplication;\nexports.ResponseMode = ResponseMode;\nexports.ServerError = ServerError;\nexports.TokenCache = TokenCache;\nexports.TokenCacheContext = TokenCacheContext;\nexports.UsernamePasswordClient = UsernamePasswordClient;\nexports.internals = internals;\nexports.version = version;\n//# sourceMappingURL=msal-node.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-node/lib/msal-node.cjs\n");

/***/ })

};
;